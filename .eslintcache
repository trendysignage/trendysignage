[{"E:\\projects\\trendy-content-display-frontend\\src\\index.js":"1","E:\\projects\\trendy-content-display-frontend\\src\\App.js":"2","E:\\projects\\trendy-content-display-frontend\\src\\reportWebVitals.js":"3","E:\\projects\\trendy-content-display-frontend\\src\\store\\store.js":"4","E:\\projects\\trendy-content-display-frontend\\src\\context\\ThemeContext.js":"5","E:\\projects\\trendy-content-display-frontend\\src\\store\\selectors\\AuthSelectors.js":"6","E:\\projects\\trendy-content-display-frontend\\src\\services\\AuthService.js":"7","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Registration.js":"8","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\ForgotPassword.js":"9","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Error404.js":"10","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Login.js":"11","E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\PostsReducer.js":"12","E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\AuthReducer.js":"13","E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\Reducers.js":"14","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\index.jsx":"15","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\VerificationBkp.jsx":"16","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ResetPassword.jsx":"17","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Layout.jsx":"18","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\PushScreen.jsx":"19","E:\\projects\\trendy-content-display-frontend\\src\\store\\actions\\AuthActions.js":"20","E:\\projects\\trendy-content-display-frontend\\src\\utils\\api.js":"21","E:\\projects\\trendy-content-display-frontend\\src\\store\\actions\\PostTypes.js":"22","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\LockScreen.js":"23","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SequenceEdit.js":"24","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DesignMonthSchedule.js":"25","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SecondMonth.js":"26","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDay.js":"27","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDaySchudele.js":"28","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DaySchedule.js":"29","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\index.jsx":"30","E:\\projects\\trendy-content-display-frontend\\src\\utils\\UtilsService.js":"31","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\ScrollToTop.js":"32","E:\\projects\\trendy-content-display-frontend\\src\\utils\\fetchClient.js":"33","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\PeopleSpace.jsx":"34","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\Createtemplate.jsx":"35","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DefComplist.jsx":"36","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\QuickPlayList.jsx":"37","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\ScheduleList.jsx":"38","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\SelectScreenModal.jsx":"39","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\TableLoader.jsx":"40","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\viewSchedule.jsx":"41","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyMonthSchedule.jsx":"42","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\MonthSchedule.jsx":"43","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyTestDay.jsx":"44","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\ChooseLayout.jsx":"45","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SelectComparison.jsx":"46","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\reportsList.jsx":"47","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\listComposition.jsx":"48","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\EditComposition.jsx":"49","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CreateComposition.jsx":"50","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\details.jsx":"51","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\QuickSearchToolbar.js":"52","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CustomNoRowsOverlay.js":"53","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\PublishMediaModal.jsx":"54","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\index.jsx":"55","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\index.jsx":"56","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\index.jsx":"57","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\index.jsx":"58","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\index.jsx":"59","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\FilterModal.jsx":"60","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddNewTagModal.jsx":"61","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UpdateModal.jsx":"62","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\WindowsModal.jsx":"63","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QuickPlayModal.jsx":"64","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DeleteConfirmation.jsx":"65","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\CompolistionListModel.jsx":"66","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QuoteModel.jsx":"67","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddScreenModal.jsx":"68","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\listScreens.jsx":"69","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\PhotoEditorModal.jsx":"70","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\PhotoEditorSDK.jsx":"71","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UploadMediaFileModal.jsx":"72","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\listMedia.jsx":"73","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddDeviceProfile.jsx":"74","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\profile.jsx":"75","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ChangePassword.jsx":"76","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\group.jsx":"77","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\roles.jsx":"78","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddGroup.jsx":"79","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddUserModal.jsx":"80","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\User.jsx":"81","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\defaultComposition.jsx":"82","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AllNewsAppModal.jsx":"83","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\GoogleSlideAppModal.jsx":"84","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\BulletinBoardAppModal.jsx":"85","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\YoutubeAppModal.jsx":"86","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AirQualityAppModal.jsx":"87","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QrCodeModal.jsx":"88","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\tagInputField.jsx":"89","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CreativeEditorLayout.jsx":"90","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CreativeEditor.jsx":"91","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\fileUploadWithPreview.jsx":"92","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DefaultCompositionModal.jsx":"93","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\SelecteMedia.jsx":"94","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\lib\\loadJson.js":"95","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\lib\\createApplyLayoutAsset.js":"96","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\ImageRotation.jsx":"97","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\cropImage.jsx":"98","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DragMove.jsx":"99","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddMedia.jsx":"100","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\StocksAppModal.jsx":"101","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ClockApp.jsx":"102","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\TextAppModal.jsx":"103","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\WeatherAppModal.jsx":"104","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ScrollerTextAppModal.jsx":"105","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\RssFeedAppModal.jsx":"106","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UrlAppModal.jsx":"107","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Audit.jsx":"108","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Media.jsx":"109","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\generateReportModal.jsx":"110","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Uptime.jsx":"111","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\Common.jsx":"112","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\saveCompositionName.jsx":"113","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\previewComposition.jsx":"114","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\ZoneInfoTable.jsx":"115","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionTable.jsx":"116","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\WebVideoPlayer.jsx":"117","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\editSelectedComposition.jsx":"118","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionActions.jsx":"119","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\PeopleSpacePreview.jsx":"120","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\EditTemplate.jsx":"121","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\TemplateAddContent.jsx":"122","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\index.jsx":"123","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\duplicateComposition.jsx":"124","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\layouts\\viewDetails.jsx":"125","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\Clock.js":"126","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\Footer.js":"127","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\main.jsx":"128","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\index.js":"129","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\compositionPlayer.jsx":"130","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Header.js":"131","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\NavHader.js":"132","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\SideBar.js":"133","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\ChatBox.js":"134","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Logout.js":"135","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Alerts.js":"136","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Notes.js":"137","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Chat.js":"138","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone3.jsx":"139","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone1.jsx":"140","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone2.jsx":"141","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\MfaPage.jsx":"142","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\MsgBox.js":"143"},{"size":1396,"mtime":1698001816708,"results":"144","hashOfConfig":"145"},{"size":4502,"mtime":1698001909279,"results":"146","hashOfConfig":"145"},{"size":375,"mtime":1698001816876,"results":"147","hashOfConfig":"145"},{"size":777,"mtime":1698001817094,"results":"148","hashOfConfig":"145"},{"size":1906,"mtime":1698001814327,"results":"149","hashOfConfig":"145"},{"size":245,"mtime":1698001909575,"results":"150","hashOfConfig":"145"},{"size":3126,"mtime":1698001909572,"results":"151","hashOfConfig":"145"},{"size":5838,"mtime":1698001816853,"results":"152","hashOfConfig":"145"},{"size":2091,"mtime":1698001816850,"results":"153","hashOfConfig":"145"},{"size":1036,"mtime":1698001816847,"results":"154","hashOfConfig":"145"},{"size":12491,"mtime":1698001909568,"results":"155","hashOfConfig":"145"},{"size":1739,"mtime":1698001817088,"results":"156","hashOfConfig":"145"},{"size":3037,"mtime":1698001909574,"results":"157","hashOfConfig":"145"},{"size":1054,"mtime":1698001817089,"results":"158","hashOfConfig":"145"},{"size":5313,"mtime":1698001909512,"results":"159","hashOfConfig":"145"},{"size":9167,"mtime":1698001909570,"results":"160","hashOfConfig":"145"},{"size":3392,"mtime":1698001909543,"results":"161","hashOfConfig":"145"},{"size":4588,"mtime":1698001909450,"results":"162","hashOfConfig":"145"},{"size":22842,"mtime":1698001909469,"results":"163","hashOfConfig":"145"},{"size":9410,"mtime":1698001909572,"results":"164","hashOfConfig":"145"},{"size":17953,"mtime":1698001909580,"results":"165","hashOfConfig":"145"},{"size":513,"mtime":1698001817085,"results":"166","hashOfConfig":"145"},{"size":741,"mtime":1698001909565,"results":"167","hashOfConfig":"145"},{"size":16879,"mtime":1698001909475,"results":"168","hashOfConfig":"145"},{"size":16639,"mtime":1698439023419,"results":"169","hashOfConfig":"145"},{"size":26986,"mtime":1698001816755,"results":"170","hashOfConfig":"145"},{"size":16710,"mtime":1698001909476,"results":"171","hashOfConfig":"145"},{"size":5556,"mtime":1698001816761,"results":"172","hashOfConfig":"145"},{"size":9541,"mtime":1698001909462,"results":"173","hashOfConfig":"145"},{"size":7684,"mtime":1698438965030,"results":"174","hashOfConfig":"145"},{"size":94005,"mtime":1698438995458,"results":"175","hashOfConfig":"145"},{"size":256,"mtime":1698001816801,"results":"176","hashOfConfig":"145"},{"size":810,"mtime":1698001817098,"results":"177","hashOfConfig":"145"},{"size":3861,"mtime":1698001909431,"results":"178","hashOfConfig":"145"},{"size":17985,"mtime":1698001909430,"results":"179","hashOfConfig":"145"},{"size":10206,"mtime":1698001909464,"results":"180","hashOfConfig":"145"},{"size":7887,"mtime":1698001909469,"results":"181","hashOfConfig":"145"},{"size":14371,"mtime":1698001909470,"results":"182","hashOfConfig":"145"},{"size":9298,"mtime":1698001909548,"results":"183","hashOfConfig":"145"},{"size":330,"mtime":1698001816714,"results":"184","hashOfConfig":"145"},{"size":6471,"mtime":1698001909479,"results":"185","hashOfConfig":"145"},{"size":45744,"mtime":1698001816747,"results":"186","hashOfConfig":"145"},{"size":6027,"mtime":1698001816752,"results":"187","hashOfConfig":"145"},{"size":6765,"mtime":1698001816748,"results":"188","hashOfConfig":"145"},{"size":6423,"mtime":1698001909437,"results":"189","hashOfConfig":"145"},{"size":11964,"mtime":1698001909472,"results":"190","hashOfConfig":"145"},{"size":3264,"mtime":1698001816768,"results":"191","hashOfConfig":"145"},{"size":8421,"mtime":1698001909449,"results":"192","hashOfConfig":"145"},{"size":1094,"mtime":1698001816734,"results":"193","hashOfConfig":"145"},{"size":1078,"mtime":1698001909446,"results":"194","hashOfConfig":"145"},{"size":28711,"mtime":1698001909487,"results":"195","hashOfConfig":"145"},{"size":592,"mtime":1698001816712,"results":"196","hashOfConfig":"145"},{"size":3568,"mtime":1698001816711,"results":"197","hashOfConfig":"145"},{"size":7315,"mtime":1698001909539,"results":"198","hashOfConfig":"145"},{"size":8258,"mtime":1698001909481,"results":"199","hashOfConfig":"145"},{"size":15082,"mtime":1698438995444,"results":"200","hashOfConfig":"145"},{"size":7775,"mtime":1698153171457,"results":"201","hashOfConfig":"145"},{"size":7564,"mtime":1698153221453,"results":"202","hashOfConfig":"145"},{"size":5051,"mtime":1698001909488,"results":"203","hashOfConfig":"145"},{"size":9096,"mtime":1698001909536,"results":"204","hashOfConfig":"145"},{"size":4644,"mtime":1698001909522,"results":"205","hashOfConfig":"145"},{"size":2751,"mtime":1698001816829,"results":"206","hashOfConfig":"145"},{"size":1008,"mtime":1698001816833,"results":"207","hashOfConfig":"145"},{"size":7281,"mtime":1698001909542,"results":"208","hashOfConfig":"145"},{"size":804,"mtime":1698001816817,"results":"209","hashOfConfig":"145"},{"size":7380,"mtime":1698001909534,"results":"210","hashOfConfig":"145"},{"size":12252,"mtime":1698001909542,"results":"211","hashOfConfig":"145"},{"size":10403,"mtime":1698001909523,"results":"212","hashOfConfig":"145"},{"size":13844,"mtime":1698001909491,"results":"213","hashOfConfig":"145"},{"size":1956,"mtime":1698153221453,"results":"214","hashOfConfig":"145"},{"size":1547,"mtime":1698001909421,"results":"215","hashOfConfig":"145"},{"size":3923,"mtime":1698001909554,"results":"216","hashOfConfig":"145"},{"size":14675,"mtime":1698001909459,"results":"217","hashOfConfig":"145"},{"size":15013,"mtime":1698001909519,"results":"218","hashOfConfig":"145"},{"size":12452,"mtime":1698001909497,"results":"219","hashOfConfig":"145"},{"size":2131,"mtime":1698001909529,"results":"220","hashOfConfig":"145"},{"size":4164,"mtime":1698001909493,"results":"221","hashOfConfig":"145"},{"size":65176,"mtime":1698001816783,"results":"222","hashOfConfig":"145"},{"size":6680,"mtime":1698001909521,"results":"223","hashOfConfig":"145"},{"size":7829,"mtime":1698001909524,"results":"224","hashOfConfig":"145"},{"size":7412,"mtime":1698001909492,"results":"225","hashOfConfig":"145"},{"size":3956,"mtime":1698153171457,"results":"226","hashOfConfig":"145"},{"size":12950,"mtime":1698001909526,"results":"227","hashOfConfig":"145"},{"size":14896,"mtime":1698001909537,"results":"228","hashOfConfig":"145"},{"size":22983,"mtime":1698001909528,"results":"229","hashOfConfig":"145"},{"size":10155,"mtime":1698001909558,"results":"230","hashOfConfig":"145"},{"size":13544,"mtime":1698001909525,"results":"231","hashOfConfig":"145"},{"size":14481,"mtime":1698001909540,"results":"232","hashOfConfig":"145"},{"size":1756,"mtime":1698001816775,"results":"233","hashOfConfig":"145"},{"size":6665,"mtime":1698001909419,"results":"234","hashOfConfig":"145"},{"size":5335,"mtime":1698001909418,"results":"235","hashOfConfig":"145"},{"size":4845,"mtime":1698001909455,"results":"236","hashOfConfig":"145"},{"size":6808,"mtime":1698001816817,"results":"237","hashOfConfig":"145"},{"size":7424,"mtime":1698001909549,"results":"238","hashOfConfig":"145"},{"size":773,"mtime":1698001909453,"results":"239","hashOfConfig":"145"},{"size":6648,"mtime":1698001909452,"results":"240","hashOfConfig":"145"},{"size":4049,"mtime":1698001909425,"results":"241","hashOfConfig":"145"},{"size":2767,"mtime":1698001909426,"results":"242","hashOfConfig":"145"},{"size":938,"mtime":1698001816818,"results":"243","hashOfConfig":"145"},{"size":9757,"mtime":1698001816810,"results":"244","hashOfConfig":"145"},{"size":15153,"mtime":1698001909551,"results":"245","hashOfConfig":"145"},{"size":17968,"mtime":1698001909531,"results":"246","hashOfConfig":"145"},{"size":14912,"mtime":1698001909553,"results":"247","hashOfConfig":"145"},{"size":14827,"mtime":1698001909556,"results":"248","hashOfConfig":"145"},{"size":10511,"mtime":1698001909547,"results":"249","hashOfConfig":"145"},{"size":15764,"mtime":1698001909546,"results":"250","hashOfConfig":"145"},{"size":7526,"mtime":1698001909555,"results":"251","hashOfConfig":"145"},{"size":1710,"mtime":1698001816764,"results":"252","hashOfConfig":"145"},{"size":1525,"mtime":1698001816765,"results":"253","hashOfConfig":"145"},{"size":7850,"mtime":1698001816837,"results":"254","hashOfConfig":"145"},{"size":2321,"mtime":1698001816766,"results":"255","hashOfConfig":"145"},{"size":9384,"mtime":1698001909440,"results":"256","hashOfConfig":"145"},{"size":2267,"mtime":1698001816842,"results":"257","hashOfConfig":"145"},{"size":15566,"mtime":1698001909562,"results":"258","hashOfConfig":"145"},{"size":11853,"mtime":1698001909448,"results":"259","hashOfConfig":"145"},{"size":10799,"mtime":1698001909445,"results":"260","hashOfConfig":"145"},{"size":2739,"mtime":1698001909498,"results":"261","hashOfConfig":"145"},{"size":6827,"mtime":1698001909561,"results":"262","hashOfConfig":"145"},{"size":7931,"mtime":1698001909443,"results":"263","hashOfConfig":"145"},{"size":2947,"mtime":1698001909432,"results":"264","hashOfConfig":"145"},{"size":10402,"mtime":1698001909535,"results":"265","hashOfConfig":"145"},{"size":4100,"mtime":1698001909551,"results":"266","hashOfConfig":"145"},{"size":854,"mtime":1698001909428,"results":"267","hashOfConfig":"145"},{"size":2627,"mtime":1698001909559,"results":"268","hashOfConfig":"145"},{"size":4257,"mtime":1698001816839,"results":"269","hashOfConfig":"145"},{"size":1688,"mtime":1698001909417,"results":"270","hashOfConfig":"145"},{"size":431,"mtime":1698001816800,"results":"271","hashOfConfig":"145"},{"size":8434,"mtime":1698001909508,"results":"272","hashOfConfig":"145"},{"size":983,"mtime":1698001816806,"results":"273","hashOfConfig":"145"},{"size":4694,"mtime":1698001909505,"results":"274","hashOfConfig":"145"},{"size":3776,"mtime":1698001816802,"results":"275","hashOfConfig":"145"},{"size":892,"mtime":1698001909517,"results":"276","hashOfConfig":"145"},{"size":6355,"mtime":1698001909518,"results":"277","hashOfConfig":"145"},{"size":2328,"mtime":1698001816798,"results":"278","hashOfConfig":"145"},{"size":1248,"mtime":1698001909514,"results":"279","hashOfConfig":"145"},{"size":5894,"mtime":1698001816718,"results":"280","hashOfConfig":"145"},{"size":5948,"mtime":1698001816722,"results":"281","hashOfConfig":"145"},{"size":12953,"mtime":1698001816720,"results":"282","hashOfConfig":"145"},{"size":28251,"mtime":1698438995452,"results":"283","hashOfConfig":"145"},{"size":13716,"mtime":1698438995447,"results":"284","hashOfConfig":"145"},{"size":22896,"mtime":1698438995449,"results":"285","hashOfConfig":"145"},{"size":2113,"mtime":1698001909515,"results":"286","hashOfConfig":"145"},{"size":12988,"mtime":1698001816721,"results":"287","hashOfConfig":"145"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},"v1sa7e",{"filePath":"291","messages":"292","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"290"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"290"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"290"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"290"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"290"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"290"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"290"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"290"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"290"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"290"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"290"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":7,"source":"348","usedDeprecatedRules":"290"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"290"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":11,"source":"356","usedDeprecatedRules":"290"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"290"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"364","messages":"365","errorCount":0,"warningCount":112,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"290"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"290"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"290"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"290"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"290"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"290"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"290"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"290"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"290"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"290"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"290"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"290"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"290"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"290"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"290"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"290"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"432","messages":"433","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"290"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"290"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"290"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":3,"source":"443","usedDeprecatedRules":"290"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"290"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"290"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"290"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"290"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"290"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"290"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"290"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"290"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"290"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"290"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"290"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"483","usedDeprecatedRules":"290"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"290"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"290"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"290"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"290"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"290"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"290"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"290"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"290"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"290"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"290"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"290"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"290"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"290"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"290"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"290"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"290"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"290"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"290"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"290"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"290"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"290"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"290"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"290"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"290"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"290"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"290"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"290"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"290"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"290"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"290"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"290"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"290"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"592","usedDeprecatedRules":"290"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"290"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"290"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"290"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"290"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"290"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"290"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"290"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"290"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"290"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"290"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"290"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"290"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"290"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"290"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"290"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"290"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"290"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"664","messages":"665","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"666","messages":"667","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"668","messages":"669","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"290"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},"E:\\projects\\trendy-content-display-frontend\\src\\index.js",[],["673","674"],"E:\\projects\\trendy-content-display-frontend\\src\\App.js",["675","676","677","678"],"import { lazy, Suspense, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n/// Components\r\nimport Index from './jsx/index';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\n// action\r\nimport { checkAutoLogin, checkAutoPermission } from './services/AuthService';\r\nimport { isAuthenticated, isVerified } from './store/selectors/AuthSelectors';\r\n/// Style\r\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./css/style.css\";\r\nimport Webplayer from './jsx/components/web-player';\r\nimport Layout from './jsx/components/layout/Layout';\r\nimport PushScreen from './jsx/components/push/PushScreen';\r\nimport Error404 from './jsx/pages/Error404';\r\nimport Verification from './jsx/pages/VerificationBkp';\r\n// import { socket } from './utils/socket';\r\n\r\n\r\nconst SignUp = lazy(() => import('./jsx/pages/Registration'));\r\nconst ForgotPassword = lazy(() => import('./jsx/pages/ForgotPassword'));\r\nconst Login = lazy(() => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => resolve(import('./jsx/pages/Login')), 500);\r\n    });\r\n});\r\nfunction App(props) {\r\n    console.log(\"sdsad\",props)\r\n    let path = window.location.pathname\r\n    path = path.split('/')\r\n    path = path[path.length - 1]\r\n    // const [isConnected, setIsConnected] = useState(socket.connected);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (path !== 'web-player') {\r\n            checkAutoLogin(dispatch, props.history);\r\n            checkAutoPermission(dispatch, props.history)\r\n        }\r\n\r\n    }, [dispatch, props.history]);\r\n    let routes = (\r\n        <Switch>\r\n            <Route path='/login' component={Login} />\r\n            <Route path='/page-register' component={SignUp} />\r\n            <Route path='/page-forgot-password' component={ForgotPassword} />\r\n            <Route path='/layout' component={Layout} />\r\n            <Route path='/push' component={PushScreen} />\r\n        </Switch>\r\n    );\r\n    if (path === 'web-player') {\r\n        return (\r\n            <Switch>\r\n                <Route path='/web-player' component={Webplayer} />\r\n            </Switch>\r\n        )\r\n    }\r\n    else if (props.isAuthenticated) {\r\n        if(props.isVerified){\r\n            return (\r\n                <>\r\n                    <Suspense fallback={\r\n                        <div id=\"preloader\">\r\n                            <div className=\"sk-three-bounce\">\r\n                                <div className=\"sk-child sk-bounce1\"></div>\r\n                                <div className=\"sk-child sk-bounce2\"></div>\r\n                                <div className=\"sk-child sk-bounce3\"></div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    >\r\n                        <Index />\r\n                    </Suspense>\r\n                </>\r\n            );\r\n\r\n        }else{\r\n            return  <div className=\"vh-100\">\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    <Switch>\r\n                        <Route path='/verification' component={Verification} />\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n\r\n        }\r\n\r\n    } else {\r\n        \r\n        return (\r\n            <div className=\"vh-100\">\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    {routes}\r\n                </Suspense>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: isAuthenticated(state),\r\n        isVerified: isVerified(state),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(App)); \r\n","E:\\projects\\trendy-content-display-frontend\\src\\reportWebVitals.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\store\\store.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\context\\ThemeContext.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\store\\selectors\\AuthSelectors.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\services\\AuthService.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Registration.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\ForgotPassword.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Error404.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\Login.js",["679","680","681","682","683","684","685","686","687","688","689","690","691","692","693"],"import React, { useState, useCallback } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  loadingToggleAction,\r\n  loginAction,\r\n  signupAction,\r\n  socialLoginAction,\r\n} from \"../../store/actions/AuthActions\";\r\nimport ResetPassword from \"../modals/ResetPassword.jsx\";\r\nimport { Row, Col, Card, Tab, Nav, Button } from \"react-bootstrap\";\r\nimport { LoginSocialGoogle, IResolveParams } from \"reactjs-social-login\";\r\n// import {\r\n//   GoogleLoginButton\r\n// } from 'react-social-login-buttons';\r\nimport logo from \"../../img/logo.png\";\r\nimport eyeOff from \"../../img/eye-off.svg\";\r\nimport googleIcon from \"../../img/google-icon.png\";\r\n\r\nfunction Login(props) {\r\n  const REDIRECT_URI = \"http://localhost:3000/login\";\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  let errorsObj = { email: \"\", password: \"\" };\r\n  const [errors, setErrors] = useState(errorsObj);\r\n  const [password, setPassword] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const [showResetPassword, setShowResetPassword] = useState(false);\r\n\r\n  function onLogin(e) {\r\n    e.preventDefault();\r\n    let error = false;\r\n    const errorObj = { ...errorsObj };\r\n    if (email === \"\") {\r\n      errorObj.email = \"Email is Required\";\r\n      error = true;\r\n    }\r\n    if (password === \"\") {\r\n      errorObj.password = \"Password is Required\";\r\n      error = true;\r\n    }\r\n    setErrors(errorObj);\r\n    if (error) {\r\n      return;\r\n    }\r\n    dispatch(loadingToggleAction(true));\r\n    dispatch(loginAction(email, password, props.history));\r\n  }\r\n\r\n  const onSignup = (e) => {\r\n    console.log(\"sdfsdfsfs\");\r\n    e.preventDefault();\r\n    let error = false;\r\n    const errorObj = { ...errorsObj };\r\n    if (name === \"\") {\r\n      errorObj.name = \"Name is Required\";\r\n      error = true;\r\n    }\r\n    if (email === \"\") {\r\n      errorObj.email = \"Email is Required\";\r\n      error = true;\r\n    }\r\n    if (password === \"\") {\r\n      errorObj.password = \"Password is Required\";\r\n      error = true;\r\n    }\r\n    setErrors(errorObj);\r\n    if (error) {\r\n      return;\r\n    }\r\n    dispatch(loadingToggleAction(true));\r\n    dispatch(signupAction(name, email, password, props.history));\r\n  };\r\n\r\n  const [provider, setProvider] = useState(\"\");\r\n  const [profile, setProfile] = useState(\"\");\r\n\r\n  const onLoginStart = useCallback(() => {\r\n    //alert('login start');\r\n  }, []);\r\n\r\n  // const onLogoutSuccess = useCallback(() => {\r\n  //   setProfile(null);\r\n  //   setProvider('');\r\n  //   alert('logout success');\r\n  // }, []);\r\n\r\n  // const onLogout = useCallback(() => {}, []);\r\n\r\n  const onSocialLogin = (data) => {\r\n    console.log(data);\r\n    dispatch(socialLoginAction(data.email, data.name, data.sub, props.history));\r\n  };\r\n\r\n  const tabData = [\r\n    {\r\n      name: \"Sign in\",\r\n      content: (\r\n        <div>\r\n          <div className=\"mb-4\">\r\n            <h3 className=\"mb-1 font-w600\">Welcome Back</h3>\r\n            <p className=\"welcome-content-paragraph\">\r\n              Log in with your data that you entered during your registration\r\n            </p>\r\n          </div>\r\n          {props.errorMessage && (\r\n            <div className=\"alert alert-danger \">\r\n              <h5>{props.errorMessage}</h5>\r\n            </div>\r\n          )}\r\n          {props.successMessage && (\r\n            <div className=\"alert alert-success\">\r\n              <h5>{props.successMessage}</h5>\r\n            </div>\r\n          )}\r\n          <form onSubmit={onLogin}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"email\"\r\n                autoComplete=\"off\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              {errors.email && (\r\n                <div className=\"text-danger fs-12\">{errors.email}</div>\r\n              )}\r\n            </div>\r\n            <div className=\"form-group password-textfield\">\r\n              <input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter Password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <span className=\"eye-off\">\r\n                <img src={eyeOff} alt=\"\" className=\"eye-off\" />{\" \"}\r\n              </span>\r\n              {errors.password && (\r\n                <div className=\"text-danger fs-12\">{errors.password}</div>\r\n              )}\r\n            </div>\r\n            <div className=\"recover-password d-flex justify-content-end\">\r\n              <Button\r\n                className=\"revover-password\"\r\n                onClick={(e) => setShowResetPassword(true)}\r\n              >\r\n                Recover Password ?\r\n              </Button>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block btn-pink\"\r\n              >\r\n                Sign In\r\n              </button>\r\n            </div>\r\n          </form>\r\n          {/* <LoginSocialGoogle\r\n            client_id={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n            onLoginStart={onLoginStart}\r\n            redirect_uri={REDIRECT_URI}\r\n            scope=\"openid profile email\"\r\n            discoveryDocs=\"claims_supported\"\r\n            access_type=\"offline\"\r\n            onResolve={({provider, data }) => {\r\n              console.log(data)\r\n              onSocialLogin(data);\r\n            }}\r\n            onReject={err => {\r\n              console.log(\"errr\",err);\r\n            }}\r\n        >\r\n          <GoogleLoginButton />\r\n          </LoginSocialGoogle> */}\r\n          {/* <div className=\"new-account add-new-account  text-center mt-2\">\r\n            <p className=\"mb-0\">\r\n              Don't have an account?{\" \"}\r\n              <Link className=\"signup-link\" to=\"./page-register\">\r\n                Sign up\r\n              </Link>\r\n            </p>\r\n          </div> */}\r\n\r\n          {/* <Button className='btn-google-signin' variant='outline-primary'>\r\n\t\t  <img src={googleIcon} alt=\"\" className=\"logo-icon mr-2\"/> <span>Sign in with Google</span>\r\n\t\t  </Button> */}\r\n        </div>\r\n      ),\r\n    },\r\n    // {\r\n    //   name: \"Register\",\r\n    //   content: (\r\n    //     <div>\r\n    //       <div className=\"mb-4\">\r\n    //         <h3 className=\"mb-1 font-w600\">Let’s get Started</h3>\r\n    //         <p className=\"welcome-content-paragraph\">\r\n    //           Enter your basic information to create new account on Trendyy\r\n    //         </p>\r\n    //       </div>\r\n    //       {props.errorMessage && (\r\n    //         <div className=\"alert alert-danger\">\r\n    //           <h5>{props.errorMessage}</h5>\r\n    //         </div>\r\n    //       )}\r\n    //       {props.successMessage && (\r\n    //         <div className=\"alert alert-success\">\r\n    //           {\" \"}\r\n    //           <h5>{props.successMessage}</h5>{\" \"}\r\n    //         </div>\r\n    //       )}\r\n    //       <form\r\n    //         onSubmit={(e) => {\r\n    //           onSignup(e);\r\n    //         }}\r\n    //         id=\"signUpForm\"\r\n    //       >\r\n    //         <div className=\"form-group\">\r\n    //           <input\r\n    //             type=\"text\"\r\n    //             className=\"form-control\"\r\n    //             placeholder=\"Enter Name\"\r\n    //             value={name}\r\n    //             name=\"name\"\r\n    //             id=\"name\"\r\n    //             onChange={(e) => {\r\n    //               setName(e.target.value);\r\n    //             }}\r\n    //           />\r\n    //           {errors.name && (\r\n    //             <div className=\"text-danger fs-12\">{errors.name}</div>\r\n    //           )}\r\n    //         </div>\r\n    //         <div className=\"form-group\">\r\n    //           <input\r\n    //             type=\"email\"\r\n    //             className=\"form-control\"\r\n    //             value={email}\r\n    //             onChange={(e) => setEmail(e.target.value)}\r\n    //           />\r\n    //           {errors.email && (\r\n    //             <div className=\"text-danger fs-12\">{errors.email}</div>\r\n    //           )}\r\n    //         </div>\r\n    //         {/* <div className=\"form-group\">\r\n    //           <input\r\n    //             type=\"phone\"\r\n    //             className=\"form-control\"\r\n    //             placeholder=\"Phone Number\"\r\n    //             name=\"phoneNumber\"\r\n    //             id=\"phoneNumber\"\r\n    //             value={phoneNumber}\r\n    //             onChange={(e) => setPhoneNumber(e.target.value)}\r\n    //           />\r\n    //           {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>}\r\n    //         </div> */}\r\n    //         <div className=\"form-group password-textfield\">\r\n    //           <input\r\n    //             type=\"password\"\r\n    //             className=\"form-control\"\r\n    //             value={password}\r\n    //             onChange={(e) => setPassword(e.target.value)}\r\n    //           />\r\n    //           <span className=\"eye-off\">\r\n    //             <img src={eyeOff} alt=\"\" className=\"eye-off\" />{\" \"}\r\n    //           </span>\r\n    //           {errors.password && (\r\n    //             <div className=\"text-danger fs-12\">{errors.password}</div>\r\n    //           )}\r\n    //         </div>\r\n    //         <div className=\"text-center\">\r\n    //           <button\r\n    //             type=\"submit\"\r\n    //             className=\"btn btn-primary btn-block btn-pink\"\r\n    //           >\r\n    //             Register\r\n    //           </button>\r\n    //         </div>\r\n    //       </form>\r\n    //       <div className=\"new-account add-new-account  text-center mt-2\">\r\n    //         <p className=\"mb-0\">\r\n    //           Already have an account?{\" \"}\r\n    //           <Link className=\"signup-link\" to=\"./page-register\">\r\n    //             Sign in\r\n    //           </Link>\r\n    //         </p>\r\n    //       </div>\r\n    //     </div>\r\n    //   ),\r\n    // },\r\n  ];\r\n  return (\r\n    <>\r\n      <ResetPassword\r\n        show={showResetPassword}\r\n        setShowResetPassword={setShowResetPassword}\r\n      />\r\n      <div className=\"login-form-bx auth-page\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-8 col-md-7 d-flex box-skew1 relative login-leftpanel\">\r\n              <div className=\"inner-content align-self-center\">\r\n                <Link to=\"/dashboard\" className=\"login-logo\">\r\n                  <img src={logo} alt=\"\" className=\"logo-icon mr-2\" />\r\n                </Link>\r\n                <h2 className=\"m-b10 text-white\">\r\n                  Best website for <br /> digital signage\r\n                </h2>\r\n                <p className=\"m-b40 text-white\">\r\n                  Elevate your brand presence with our immersive digital\r\n                  signage, revolutionizing the way you connect and communicate\r\n                  with your audience\r\n                </p>\r\n              </div>\r\n              <div className=\"login-center-img\"></div>\r\n            </div>\r\n            <div className=\"col-lg-4 col-md-5 box-skew d-flex pl-0 pr-0 login-rightpanel\">\r\n              <div className=\"authincation-content\">\r\n                <Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\r\n                  <Nav as=\"ul\" className=\"nav-pills light\">\r\n                    {tabData.map((data, i) => (\r\n                      <Nav.Item as=\"li\" key={i}>\r\n                        <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                          <i className={`la la-${data.icon} mr-2`} />\r\n                          {data.name}\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    ))}\r\n                  </Nav>\r\n                  <Tab.Content className=\"auth-tab-content\">\r\n                    {tabData.map((data, i) => (\r\n                      <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\r\n                        <div>{data.content}</div>\r\n                      </Tab.Pane>\r\n                    ))}\r\n                  </Tab.Content>\r\n                </Tab.Container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errorMessage: state.auth.errorMessage,\r\n    successMessage: state.auth.successMessage,\r\n    showLoading: state.auth.showLoading,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Login);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\PostsReducer.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\AuthReducer.js",["694"],"import {\r\n    LOADING_TOGGLE_ACTION,\r\n    LOGIN_CONFIRMED_ACTION,\r\n    LOGIN_FAILED_ACTION,\r\n    LOGOUT_ACTION,\r\n    SIGNUP_CONFIRMED_ACTION,\r\n    SIGNUP_FAILED_ACTION,\r\n    CLEAR_ERRORS,\r\n    OTP_CONFIRMED_ACTION,\r\n    OTP_FAILED_ACTION,\r\n    RESET_PASSWORD_CONFIRMED_ACTION,\r\n    RESET_PASSWORD_FAILED_ACTION,\r\n    GET_PERMISSION_CONFIRMED_ACTION,\r\n    GET_PERMISSION_FAILED_ACTION\r\n} from '../actions/AuthActions';\r\n\r\nconst initialState = {\r\n    permission:null,\r\n    auth: {\r\n        email: '',\r\n        idToken: '',\r\n        localId: '',\r\n        expiresIn: '',\r\n        refreshToken: '',\r\n    },\r\n    errorMessage: '',\r\n    successMessage: '',\r\n    showLoading: false,\r\n};\r\n\r\nexport function AuthReducer(state = initialState, action) {\r\n    if (action.type === SIGNUP_CONFIRMED_ACTION) {\r\n        return {\r\n            ...state,\r\n            auth: action.payload,\r\n            permission:null,\r\n            errorMessage: '',\r\n            successMessage: 'OTP has been sent to registered email',\r\n            showLoading: false,\r\n        };\r\n    }\r\n    if (action.type === LOGIN_CONFIRMED_ACTION) {\r\n        const isV = action?.payload?.vendor?.isVerified;\r\n        return {\r\n            ...state,\r\n            auth: action.payload,\r\n            permission:null,\r\n            errorMessage: '',\r\n            successMessage: !isV ? \"\" : 'Login Successfully Completed',\r\n            showLoading: false,\r\n        };\r\n    }\r\n    if (action.type === GET_PERMISSION_CONFIRMED_ACTION) {\r\n        return {\r\n            ...state,\r\n            permission: action.payload\r\n        };\r\n    }\r\n\r\n    if (action.type === OTP_CONFIRMED_ACTION || action.type === RESET_PASSWORD_CONFIRMED_ACTION) {\r\n        return {\r\n            ...state,\r\n            auth: action.payload,\r\n            errorMessage: '',\r\n            successMessage: 'Mail has been Sent Successfully',\r\n            showLoading: false,\r\n        };\r\n    }\r\n\r\n    if (action.type === LOGOUT_ACTION) {\r\n        return {\r\n            ...state,\r\n            errorMessage: '',\r\n            successMessage: '',\r\n            permission:null,\r\n            auth: {\r\n                email: '',\r\n                idToken: '',\r\n                localId: '',\r\n                expiresIn: '',\r\n                refreshToken: '',\r\n            },\r\n        };\r\n    }\r\n\r\n    if (\r\n        action.type === SIGNUP_FAILED_ACTION ||\r\n        action.type === LOGIN_FAILED_ACTION  ||\r\n        action.type === OTP_FAILED_ACTION ||\r\n        action.type === RESET_PASSWORD_FAILED_ACTION\r\n    ) {\r\n        return {\r\n            ...state,\r\n            errorMessage: action.payload,\r\n            successMessage: '',\r\n            showLoading: false,\r\n        };\r\n    }\r\n\r\n    if (action.type === LOADING_TOGGLE_ACTION) {\r\n        return {\r\n            ...state,\r\n            showLoading: action.payload,\r\n        };\r\n    }\r\n    if (action.type === CLEAR_ERRORS) {\r\n        return {\r\n            ...state,\r\n            errorMessage: '',\r\n            successMessage: '',\r\n        };\r\n    }\r\n    return state;\r\n}\r\n\r\n    \r\n","E:\\projects\\trendy-content-display-frontend\\src\\store\\reducers\\Reducers.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\index.jsx",["695","696","697"],"import React, { useState } from \"react\";\r\n/// React router dom\r\nimport { Switch, Route } from \"react-router-dom\";\r\n/// Css\r\nimport \"./index.css\";\r\nimport \"./chart.css\";\r\nimport \"./step.css\";\r\nimport \"./custom.css\";\r\n\r\n/// Layout\r\nimport Nav from \"./layouts/nav\";\r\nimport Footer from \"./layouts/Footer\";\r\n\r\n/// Dashboard\r\nimport Screen from \"./components/screen\";\r\n\r\n//Scroll To Top\r\nimport ScrollToTop from \"./layouts/ScrollToTop\";\r\nimport Media from \"./components/media\";\r\nimport Settings from \"./components/settings\";\r\n// import Webplayer from './components/web-player'\r\nimport ScreenDetails from \"./components/screen/details\";\r\nimport Layout from \"./components/layout/Layout\";\r\nimport ChooseLayout from \"./components/layout/ChooseLayout\";\r\nimport CreateComposition from \"./components/layout/Composition/CreateComposition\";\r\nimport Push from \"./components/push/PushScreen\";\r\nimport SelectComparison from \"./components/push/SelectComparison\";\r\nimport EditComposition from \"./components/layout/Composition/EditComposition\";\r\nimport DaySchedule from \"./components/push/DaySchedule\";\r\nimport testDaySchudele from \"./components/push/TestDaySchudele\";\r\nimport TestDaySchudele from \"./components/push/TestDaySchudele\";\r\nimport TestDay from \"./components/push/TestDay\";\r\nimport CopyTestDay from \"./components/push/CopyTestDay\";\r\nimport MonthSchedule from \"./components/push/MonthSchedule\";\r\nimport CopyMonthSchedule from \"./components/push/CopyMonthSchedule\";\r\nimport SecondMonth from \"./components/push/SecondMonth\";\r\nimport DesignMonthSchedule from \"./components/push/DesignMonthSchedule\";\r\nimport ViewSchedule from \"./components/push/viewSchedule\";\r\nimport Integrations from \"./components/integrations\";\r\nimport Reports from \"./components/reports\";\r\nimport SequenceTime from \"./components/push/SequenceEdit\";\r\nimport reportsList from \"./components/reports/reportsList\";\r\nimport ReportsList from \"./components/reports/reportsList\";\r\nimport PeopleSpace from \"./components/integrations/PeopleSpace\";\r\nimport Createtemplate from \"./components/integrations/Createtemplate\";\r\nimport Verification from \"./pages/VerificationBkp\";\r\nimport LockScreen from \"./pages/LockScreen\"\r\n\r\nconst Markup = () => {\r\n  let path = window.location.pathname;\r\n  path = path.split(\"/\");\r\n  path = path[path.length - 1];\r\n  let pagePath = path.split(\"-\").includes(\"page\");\r\n  const [activeEvent, setActiveEvent] = useState(!path);\r\n\r\n  const routes = [\r\n    /// Dashboard\r\n    { url: \"\", component: Screen },\r\n    { url: \"display\", component: Screen },\r\n    { url: \"assets\", component: Media },\r\n    { url: \"settings\", component: Settings },\r\n    { url: \"layout\", component: Layout },\r\n    { url: \"chooselayout\", component: ChooseLayout },\r\n    { url: \"createComposition\", component: CreateComposition },\r\n    { url: \"composition/edit\", component: EditComposition },\r\n    { url: \"push\", component: Push },\r\n    { url: \"SelectComparison\", component: SelectComparison },\r\n    // {url: \"web-player\", component: Webplayer},\r\n    { url: \"display/:id\", component: ScreenDetails },\r\n    { url: \"dayschedule/:id\", component: DaySchedule },\r\n    { url: \"test\", component: TestDaySchudele },\r\n    { url: \"testday/:id\", component: TestDay },\r\n    { url: \"copytestday\", component: CopyTestDay },\r\n    { url: \"monthschedule\", component: MonthSchedule },\r\n    { url: \"copymonthschedule\", component: CopyMonthSchedule },\r\n    { url: \"secondmonth\", component: SecondMonth },\r\n    { url: \"design-month-schedule/:id\", component: DesignMonthSchedule },\r\n    { url: \"push/view/:id\", component: ViewSchedule },\r\n    { url: \"integrations\", component: Integrations },\r\n    { url: \"push/sequence/:schId/:seqId\", component: SequenceTime },\r\n\r\n    { url: \"reports\", component: Reports },\r\n    { url: \"reports-list\", component: ReportsList },\r\n    { url: \"people-space\", component: PeopleSpace },\r\n    { url: \"create-template\", component: Createtemplate },\r\n    { url: \"create-template/:id\", component: Createtemplate },\r\n    { url: \"lock-screen\" , component : LockScreen }\r\n  ];\r\n  console.log(path);\r\n  return (\r\n    <>\r\n      <div\r\n        id={`${!pagePath ? \"main-wrapper\" : \"\"}`}\r\n        className={`${!pagePath ? \"show\" : \"mh100vh\"}`}\r\n      >\r\n        {!pagePath && path !== \"web-player\" && (\r\n          <Nav\r\n            onClick={() => setActiveEvent(!activeEvent)}\r\n            activeEvent={activeEvent}\r\n            onClick2={() => setActiveEvent(false)}\r\n            onClick3={() => setActiveEvent(true)}\r\n          />\r\n        )}\r\n        <div\r\n          className={` ${!path && activeEvent ? \"rightside-event\" : \"\"} ${\r\n            !pagePath ? \"content-body content-body-custom\" : \"\"\r\n          } ${path === \"web-player\" ? \"web-player-body\" : \"\"}`}\r\n        >\r\n          <div\r\n            className={`${!pagePath ? \"container-fluid\" : \"\"}`}\r\n            style={{ minHeight: window.screen.height - 60 }}\r\n          >\r\n            <Switch>\r\n              {routes.map((data, i) => (\r\n                <Route\r\n                  key={i}\r\n                  exact\r\n                  path={`/${data.url}`}\r\n                  component={data.component}\r\n                />\r\n              ))}\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n        {!pagePath && <Footer />}\r\n      </div>\r\n      <ScrollToTop />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Markup;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\VerificationBkp.jsx",["698","699","700","701","702","703","704","705","706","707","708","709","710","711"],"import React, { useEffect, useState } from \"react\";\r\nimport speakeasy from \"speakeasy\";\r\nimport QRCode from \"qrcode\";\r\nimport { toast } from \"react-toastify\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  verification,\r\n  verify2fa,\r\n  resendOtp,\r\n  clearErrors,\r\n  logout,\r\n} from \"../../store/actions/AuthActions\";\r\nimport { Button } from \"react-bootstrap\";\r\n//\r\nimport logo from \"../../img/logo.png\";\r\nimport googleIcon from \"../../img/google-icon.png\";\r\nimport { authenticator } from \"otplib\";\r\nimport crypto from \"crypto\";\r\nimport base32Decode from \"base32-decode\";\r\nimport base32Encode from \"base32-encode\";\r\nimport util from \"util\";\r\n\r\nfunction Verification(props) {\r\n  const [otp, setOtp] = useState(\"\");\r\n  let errorsObj = { email: \"\", password: \"\" };\r\n  const [errors, setErrors] = useState(errorsObj);\r\n  const [image, setImage] = useState(\"\");\r\n  const [validCode, setValidCode] = useState(\"\");\r\n  const [isCodeValid, setIsCodeValid] = useState(null);\r\n  const [secret, setSecret] = useState(\r\n    speakeasy.generateSecret({ name: \"Trendy\" })\r\n  );\r\n  const [mfaSecret, setMfaSecret] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function onLogin(e) {\r\n    e.preventDefault();\r\n    let error = false;\r\n    const errorObj = { ...errorsObj };\r\n    if (otp === \"\") {\r\n      errorObj.otp = \"OTP is Required\";\r\n      error = true;\r\n    }\r\n    setErrors(errorObj);\r\n    if (error) {\r\n      return;\r\n    }\r\n    // dispatch(loadingToggleAction(true));\r\n    dispatch(verification(otp, props.history));\r\n  }\r\n\r\n  const generateHOTP = (secret, counter) => {\r\n    const decodedSecret = base32Decode(secret, \"RFC4648\");\r\n\r\n    const buffer = Buffer.alloc(8);\r\n    for (let i = 0; i < 8; i++) {\r\n      buffer[7 - i] = counter & 0xff;\r\n      counter = counter >> 8;\r\n    }\r\n\r\n    // Step 1: Generate an HMAC-SHA-1 value\r\n    const hmac = crypto.createHmac(\"sha1\", Buffer.from(decodedSecret));\r\n    hmac.update(buffer);\r\n    const hmacResult = hmac.digest();\r\n\r\n    // Step 2: Generate a 4-byte string (Dynamic Truncation)\r\n    const offset = hmacResult[hmacResult.length - 1] & 0xf;\r\n    const code =\r\n      ((hmacResult[offset] & 0x7f) << 24) |\r\n      ((hmacResult[offset + 1] & 0xff) << 16) |\r\n      ((hmacResult[offset + 2] & 0xff) << 8) |\r\n      (hmacResult[offset + 3] & 0xff);\r\n\r\n    // Step 3: Compute an HOTP value\r\n    return `${code % 10 ** 6}`.padStart(6, \"0\");\r\n  };\r\n\r\n  const generateTOTP = (secret, window = 0) => {\r\n    const counter = Math.floor(Date.now() / 30000);\r\n    return generateHOTP(secret, counter + window);\r\n  };\r\n\r\n  const sendOtpAgain = (e) => {\r\n    e.preventDefault();\r\n    dispatch(resendOtp(props.history));\r\n  };\r\n\r\n  const handleLoginAgain = (e) => {\r\n    e.preventDefault();\r\n    dispatch(logout(props.history));\r\n  };\r\n\r\n  const getSecret = async () => {\r\n    console.log(\"auth\", props.auth.vendor.mfa);\r\n    const buffer = await util.promisify(crypto.randomBytes)(14);\r\n    const mfaSecret = props.auth.vendor.mfa\r\n      ? props.auth.vendor.mfa\r\n      : base32Encode(buffer, \"RFC4648\", { padding: false });\r\n    setMfaSecret(mfaSecret);\r\n    const issuer = \"MfaDemo\";\r\n    const algorithm = \"SHA1\";\r\n    const digits = \"6\";\r\n    const period = \"30\";\r\n    const otpType = \"totp\";\r\n    const configUri = `otpauth://${otpType}/${issuer}:${\"Anuj\"}?algorithm=${algorithm}&digits=${digits}&period=${period}&issuer=${issuer}&secret=${mfaSecret}`;\r\n    console.log(\"configuri\", configUri);\r\n    //qrcode.toFileStream(res, configUri);\r\n    QRCode.toDataURL(configUri, (err, image_data) => {\r\n      setImage(image_data);\r\n    });\r\n    // QRCode.toDataURL(secret.otpauth_url, (err, image_data) => {\r\n    //   setImage(image_data);\r\n    // });\r\n  };\r\n\r\n  const getCode = async () => {\r\n    const code = speakeasy.totp({\r\n      secret: secret.hex,\r\n      encoding: \"hex\",\r\n      algorithm: \"sha1\",\r\n    });\r\n    setValidCode(code);\r\n  };\r\n\r\n  const verifyCode = (e) => {\r\n    e.preventDefault();\r\n    const isVerify = verifyTOTP(otp, mfaSecret);\r\n    if (isVerify) {\r\n      dispatch(verify2fa(mfaSecret, props.history));\r\n    } else {\r\n      return toast.error(\"Invalid OTP\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const verifyTOTP = (token, secret, window = 1) => {\r\n    console.log(token, secret);\r\n    for (let errorWindow = -window; errorWindow <= +window; errorWindow++) {\r\n      const totp = generateTOTP(secret, errorWindow);\r\n      console.log(totp, token);\r\n      if (token === totp) {\r\n        console.log(\"true\");\r\n        return true;\r\n      }\r\n    }\r\n    console.log(\"false\");\r\n    return false;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSecret();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"login-form-bx auth-page\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-8 col-md-7 d-flex box-skew1 relative login-leftpanel\">\r\n            <div className=\"inner-content align-self-center\">\r\n              <Link to=\"/dashboard\" className=\"login-logo\">\r\n                <img src={logo} alt=\"\" className=\"logo-icon mr-2\" />\r\n              </Link>\r\n              <h2 className=\"m-b10 text-white\">\r\n                Sign In to <br /> Trendy Website\r\n              </h2>\r\n              <p className=\"m-b40 text-white\">\r\n                Boost your engagement & productivity, streamline processes, and\r\n                make faster communications.\r\n              </p>\r\n            </div>\r\n            <div className=\"login-center-img\"></div>\r\n          </div>\r\n          <div className=\"col-lg-4 col-md-5 box-skew d-flex pl-0 pr-0 login-rightpanel\">\r\n            <div className=\"authincation-content\">\r\n              <div>\r\n                <div className=\"mb-4 text-center\">\r\n                  <img src={`${image}`} className=\"mb-3\" />\r\n                  <p\r\n                    className=\"welcome-content-paragraph text-white\"\r\n                    style={{ opacity: 1 }}\r\n                  >\r\n                    Scan the QR code on your authenticator app\r\n                  </p>\r\n                </div>\r\n                {props.errorMessage && (\r\n                  <div className=\"alert alert-danger \">\r\n                    <h5>{props.errorMessage}</h5>\r\n                  </div>\r\n                )}\r\n                {props.successMessage && (\r\n                  <div className=\"alert alert-success\">\r\n                    <h5>{props.successMessage}</h5>\r\n                  </div>\r\n                )}\r\n                <form\r\n                //onSubmit={verifyCode}\r\n                >\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      type=\"numer\"\r\n                      autoComplete=\"off\"\r\n                      className=\"form-control\"\r\n                      value={otp}\r\n                      placeholder=\"OTP...\"\r\n                      onChange={(e) => setOtp(e.target.value)}\r\n                    />\r\n                    {errors.otp && (\r\n                      <div className=\"text-danger fs-12\">{errors.otp}</div>\r\n                    )}\r\n                  </div>\r\n                  {/* <div className=\"recover-password d-flex justify-content-end\">\r\n                    <Button className=\"revover-password\" onClick={(e) => {sendOtpAgain(e)}}>\r\n                        Resend OTP\r\n                    </Button>\r\n                </div> */}\r\n                  <div className=\"text-center\">\r\n                    {/* <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary btn-block btn-pink\"\r\n                >\r\n                    Verifiy\r\n                </button> */}\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary btn-block btn-pink\"\r\n                      onClick={(e) => {\r\n                        verifyCode(e);\r\n                      }}\r\n                    >\r\n                      Verifiy\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n                {/* <div className=\"new-account add-new-account  text-center mt-2\">\r\n                <p className=\"mb-0\">\r\n                Change your email?{\" \"}\r\n                <Button className=\"signup-link\" onClick={(e) => handleLoginAgain(e)}>\r\n                    Sign up\r\n                </Button>\r\n                </p>\r\n            </div> */}\r\n\r\n                {/* <Button className='btn-google-signin' variant='outline-primary'>\r\n            <img src={googleIcon} alt=\"\" className=\"logo-icon mr-2\"/> <span>Sign in with Google</span>\r\n            </Button> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    errorMessage: state.auth.errorMessage,\r\n    successMessage: state.auth.successMessage,\r\n    showLoading: state.auth.showLoading,\r\n    auth: state.auth.auth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Verification);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ResetPassword.jsx",["712"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { resetPassword } from \"../../store/actions/AuthActions\"\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst ResetPassword = ({errorMessage, successMessage, show, setShowResetPassword, history }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [errMsg, setErrMsg] = useState(null)\r\n  const dispatch = useDispatch();  \r\n  useEffect(() => {\r\n\r\n  },[])\r\n  \r\n\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n    setErrMsg(\"\");\r\n    if(email === ''){\r\n        setErrMsg('Email is Required');\r\n        return \r\n    }\r\n    dispatch(resetPassword(email, history));\r\n    \r\n  }\r\n  return (\r\n    <>\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={show}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n        <Modal.Title className=\"mr-auto app-modal-heading\">\r\n          Reset Password\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowResetPassword(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n          {errorMessage && (\r\n            <h5 className=\"alert alert-danger\">{errorMessage}</h5>\r\n          )}\r\n          {successMessage && (\r\n            <h5 className=\"alert alert-success\">{successMessage}</h5>\r\n          )}\r\n          {errMsg && (\r\n            <h5 className=\"alert alert-danger\">{errMsg}</h5>\r\n          )}\r\n        <form\r\n          className=\"row\"\r\n        >\r\n          <div className=\"form-group col-12 mb-0  url-app-form\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"  form-control \"\r\n              placeholder=\"Enter Your Email...\"\r\n              required\r\n              name=\"email\"\r\n              id=\"email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              value={email}\r\n            />\r\n\r\n            \r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"border-0 mb-2\">\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\"\r\n                onClick={() => setShowResetPassword(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={(e) => handleCreateApp(e)}\r\n            >\r\n              Reset Password\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n      </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      errorMessage: state.auth.errorMessage,\r\n      successMessage: state.auth.successMessage,\r\n      showLoading: state.auth.showLoading,\r\n    };\r\n  };\r\nexport default connect(mapStateToProps)(ResetPassword);\r\n\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Layout.jsx",["713","714","715","716"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\nimport emptyMediaImg from \"../../../img/layout-img.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useSWR from \"swr\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAllComposition } from \"../../../utils/api\";\r\nimport ListComposition from \"./Composition/listComposition\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nconst Layout = ({ permission }) => {\r\n  const [filterData, setFilterData] = useState([]);\r\n  const [allComposition, setAllComposition] = useState([]);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n\r\n  // const { data: allComposition, mutate } = useSWR(\r\n  //   \"/vendor/layouts/compositions\",\r\n  //   getAllComposition\r\n  // );\r\n  const callAllCompApi = async () => {\r\n    let str = \"\";\r\n    // if(filterData.groups && filterData.groups.length > 0){\r\n    //   filterData.groups.map((grp, i) => {\r\n    //     return str += `groups[${i}]=${grp}&`\r\n    //   })\r\n    // }\r\n    if (filterData.tags && filterData.tags.length > 0) {\r\n      filterData.tags.map((tg, i) => {\r\n        return (str += `tags[${i}]=${tg}&`);\r\n      });\r\n    }\r\n    // if(filterData.shows && filterData.shows.length > 0){\r\n    //   filterData.shows.map((tg, i) => {\r\n    //     return str += `status[${i}]=${tg}&`\r\n    //   })\r\n    // }\r\n    const list = await getAllComposition(str);\r\n    setAllComposition(list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsRefresh(false);\r\n    callAllCompApi();\r\n  }, [isRefresh]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1>Layouts</h1>\r\n      </div>\r\n      <div style={{ position: \"relative\" }}>\r\n        <div className=\"form-head d-flex mb-3 align-items-start\">\r\n          {permission && !permission.permission.COMPOSITION.add ? (\r\n            <Button className=\"mb-2 d-flex align-items-center justify-content-center add-media-btn\">\r\n              Add Composition{\" \"}\r\n              <span className=\"btn-icon-right\">\r\n                <div className=\"glyph-icon flaticon-381-lock-1\"></div>\r\n              </span>\r\n            </Button>\r\n          ) : (\r\n            <Link\r\n              to={{\r\n                pathname: `/chooselayout`,\r\n              }}\r\n              className=\"mr-2 add-composition-btn\"\r\n            >\r\n              Add Composition{\" \"}\r\n              <span className=\"btn-icon-right\">\r\n                <div className=\"glyph-icon flaticon-381-add-1\"></div>\r\n              </span>\r\n            </Link>\r\n          )}\r\n\r\n          {/* <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div> */}\r\n        </div>\r\n        {permission && permission.permission.COMPOSITION.view ? (\r\n          <>\r\n            {!allComposition && (\r\n              <div className=\"empty-media text-center\">\r\n                <div className=\"empty-media-img layout-empty-img mx-auto\">\r\n                  <img\r\n                    className=\"media-img img-fluid\"\r\n                    src={emptyMediaImg}\r\n                    alt=\"media-img\"\r\n                  />\r\n                </div>\r\n                <h3>Add Composition</h3>\r\n                <p>\r\n                  Add Media files to composition, Lorem ipsum dolor is a dummy{\" \"}\r\n                  <br /> text. Dummy text.\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {allComposition && (\r\n              <ListComposition\r\n                allComposition={allComposition}\r\n                //mutate={mutate}\r\n                setIsRefresh={setIsRefresh}\r\n                permission={permission}\r\n                setFilterData={setFilterData}\r\n              />\r\n            )}\r\n          </>\r\n        ) : (\r\n          <LockScreen\r\n            message={\"You don't have permission to access this !!!\"}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    permission: state.auth.permission,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Layout);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\PushScreen.jsx",["717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732"],"import React, { useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport scheduleIcon from \"../../../img/schedule-icon.png\";\r\nimport quickPlayIcon from \"../../../img/quickplay-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/comparison-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n  deleteSchedule,\r\n  getAllSchedule,\r\n  getQuickPlay,\r\n  deleteQuickPlay,\r\n  getDefaultComposition,\r\n  getAllScreens,\r\n  getAllComposition,\r\n  setDefaultComposition,\r\n} from \"../../../utils/api\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport moment from \"moment\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport edit from \"../../../img/edit-composition.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TableLoader from \"../../components/TableLoader\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\r\nimport ScheduleList from \"./ScheduleList\";\r\nimport QuickPlayList from \"./QuickPlayList\";\r\nimport DefComplist from \"./DefComplist\";\r\n\r\nconst PushScreen = ({ permission }) => {\r\n  const history = useHistory();\r\n  const [scheduleData, setScheduleData] = useState([]);\r\n  const [quickPlayData, setQuickPlayData] = useState([]);\r\n  const [defaultData, setDefaultData] = useState([]);\r\n  const [showPublishBtn, setShowPublishBtn] = useState(false);\r\n  const [publishType, setPublishType] = useState(\"schedule\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDefaultScreen, setShowDefaultScreen] = useState(false);\r\n  const [showDefaultComp, setShowDefaultComp] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [checkedValuesComp, setCheckedValuesComp] = useState(null);\r\n  const [allComposition, setAllComposition] = useState([]);\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [selectedSchdule, setSelectedSchdule] = useState(null);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [filterData, setFilterData] = useState([]);\r\n\r\n  const callAllScreenApi = async () => {\r\n    const list = await getAllScreens();\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const getAllCompositionList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllComposition();\r\n    console.log(\"lsit\", list);\r\n    setAllComposition(list);\r\n    setLoading(false);\r\n  };\r\n\r\n  async function getSchedule() {\r\n    setLoading(true);\r\n    let str = \"\";\r\n    if (filterData.tags && filterData.tags.length > 0) {\r\n      filterData.tags.map((tg, i) => {\r\n        return (str += `tags[${i}]=${tg}&`);\r\n      });\r\n    }\r\n    await getAllSchedule(str).then((res) => {\r\n      setScheduleData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  async function getQuickplay() {\r\n    setLoading(true);\r\n    await getQuickPlay().then((res) => {\r\n      console.log(res, \"res Quickplay\");\r\n      setQuickPlayData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  async function getDefault() {\r\n    setLoading(true);\r\n    await getDefaultComposition().then((res) => {\r\n      console.log(res.data, \"res Default\");\r\n      setDefaultData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    setIsRefresh(false);\r\n    getSchedule();\r\n    callAllScreenApi();\r\n    getAllCompositionList();\r\n    if (publishType && publishType === \"schedule\") {\r\n      getSchedule();\r\n    }\r\n    if (publishType && publishType === \"quickplay\") {\r\n      getQuickplay();\r\n    }\r\n    if (publishType && publishType === \"defaultComposition\") {\r\n      getDefault();\r\n    }\r\n  }, [publishType, isRefresh]);\r\n\r\n  function handleDeleteSchedule(id) {\r\n    deleteSchedule(id).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        getSchedule();\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleDeleteQuickPlay = (e, id) => {\r\n    e.preventDefault();\r\n    deleteQuickPlay(id).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        getQuickplay();\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleEditSchedule = (e, id) => {\r\n    e.preventDefault();\r\n    history.push(`/design-month-schedule/${id}`);\r\n  };\r\n\r\n  const handleDefaultScreen = (e) => {\r\n    e.preventDefault();\r\n    setShowDefaultScreen(true);\r\n  };\r\n\r\n  function convertTimestampTo12HourFormat(timestamp) {\r\n    if (!timestamp) {\r\n      return \"Invalid timestamp\";\r\n    }\r\n    if (timestamp === \"time not find\") {\r\n      return \"Invalid timestamp\";\r\n    }\r\n\r\n    const timeParts = timestamp.split(\"T\")[1].split(\".\")[0].split(\":\");\r\n    let hours = 0;\r\n    const minutes = timeParts[1];\r\n\r\n    if (timeParts.length >= 1) {\r\n      hours = parseInt(timeParts[0]);\r\n\r\n      let amPm;\r\n      if (hours >= 12) {\r\n        amPm = \"PM\";\r\n        if (hours > 12) {\r\n          hours -= 12;\r\n        }\r\n      } else {\r\n        amPm = \"AM\";\r\n        if (hours === 0) {\r\n          hours = 12;\r\n        }\r\n      }\r\n\r\n      const convertedTime = `${hours}:${minutes} ${amPm}`;\r\n      return convertedTime;\r\n    } else {\r\n      return \"Invalid timestamp format\";\r\n    }\r\n  }\r\n\r\n  function findEndTime(value) {\r\n    if (!value || value === undefined) {\r\n      return \"time not find\";\r\n    }\r\n    if (value !== undefined) {\r\n      return value?.timings[value.timings.length - 1]?.endTime;\r\n    }\r\n  }\r\n\r\n  const handleCheckboxChange = (event, type) => {\r\n    if (type == \"screen\") {\r\n      const newCheckedItems = {\r\n        ...checkedItems,\r\n        [event.target.name]: event.target.checked,\r\n      };\r\n      const selectedScreens = [];\r\n      for (const key in newCheckedItems) {\r\n        if (newCheckedItems[key] === true) {\r\n          selectedScreens.push(key);\r\n        }\r\n      }\r\n      setCheckedValues(selectedScreens);\r\n      setCheckedItems(newCheckedItems);\r\n    } else {\r\n      setCheckedValuesComp(event.target.name);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleProceed = (e, type) => {\r\n    if (type == \"screen\") {\r\n      e.preventDefault();\r\n      setShowDefaultComp(true);\r\n      setShowDefaultScreen(false);\r\n    }\r\n  };\r\n\r\n  const handleProceedComp = async (e, type) => {\r\n    e.preventDefault();\r\n    console.log(checkedValues, checkedItems, checkedValuesComp);\r\n    await setDefaultComposition({\r\n      screens: checkedValues,\r\n      compositionId: checkedValuesComp,\r\n    });\r\n    setShowDefaultComp(false);\r\n    setShowDefaultScreen(false);\r\n    setShowPublishBtn(!showPublishBtn);\r\n    setCheckedItems([]);\r\n    setCheckedValues([]);\r\n    setCheckedValuesComp(null);\r\n    setPublishType(\"defaultComposition\");\r\n  };\r\n\r\n  const handlePublish = (e) => {\r\n    e.preventDefault();\r\n    if (showPublishBtn === true) {\r\n      setShowDefaultComp(false);\r\n      setShowDefaultScreen(false);\r\n      setCheckedItems([]);\r\n      setCheckedValues([]);\r\n      setCheckedValuesComp(null);\r\n      setPublishType(\"schedule\");\r\n    }\r\n    setShowPublishBtn(!showPublishBtn);\r\n  };\r\n\r\n  // const handleSubmit = async () => {\r\n  //  await publishMedia({\r\n  //     id: selected._id,\r\n  //     screenIds: checkedValues,\r\n  //     duration: 600,\r\n  //     type:type\r\n  //   });\r\n  //   await setQuickplay({\r\n  //     name,\r\n  //     compositionId: selected._id,\r\n  //     screens: checkedValues,\r\n  //     duration: 600\r\n  //   });\r\n  //   setPublished(true);\r\n  //   // setShowPublishPopUp(false);\r\n  // };\r\n  return (\r\n    <>\r\n      <SelectScreenModal\r\n        setShowPublishPopUp={setShowPublishPopUp}\r\n        showPublishPopUp={showPublishPopUp}\r\n        selectedSchdule={selectedSchdule}\r\n        setSelectedSchdule={setSelectedSchdule}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n      <div className=\"custom-content-heading d-flex flex-wrap flex-row align-items-center justify-content-between\">\r\n        <div>\r\n          <h1 className=\"mb-1\">Push</h1>\r\n          <p className=\"three-layout-paragrapgh\">\r\n            How would you like to publish your content?\r\n          </p>\r\n        </div>\r\n\r\n        <Button\r\n          className=\"\"\r\n          variant=\"info add-screen-btn\"\r\n          type=\"button\"\r\n          onClick={(e) => handlePublish(e)}\r\n        >\r\n          Publish\r\n        </Button>\r\n      </div>\r\n      <div style={{ position: \"relative\" }}>\r\n        <div className=\"layout-row push-row mb-4\">\r\n          {showPublishBtn && !showDefaultScreen && !showDefaultComp ? (\r\n            <Row>\r\n              <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n                {permission && permission.permission.SCHEDULE.add ? (\r\n                  <Link to={{ pathname: `/SelectComparison` }}>\r\n                    <div className=\"push-column text-center\">\r\n                      <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                        <img\r\n                          className=\"layout-select-img\"\r\n                          src={scheduleIcon}\r\n                          alt=\"menu-icon\"\r\n                        />\r\n                      </div>\r\n                      <h6>Schedule</h6>\r\n                      <p>\r\n                        Scheduled content gets displayed only for time you\r\n                        choose\r\n                      </p>\r\n                    </div>\r\n                  </Link>\r\n                ) : (\r\n                  <div className=\"push-column text-center\">\r\n                    <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                      <img\r\n                        className=\"layout-select-img\"\r\n                        src={scheduleIcon}\r\n                        alt=\"menu-icon\"\r\n                      />\r\n                    </div>\r\n                    <h6>Schedule</h6>\r\n                    <p>\r\n                      Scheduled content gets displayed only for time you choose\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </Col>\r\n              {/* <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={quickPlayIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Quickplay</h6>\r\n                <p>\r\n                  Quickplay let's you display content instantly. Can be used\r\n                  Emergency cases\r\n                </p>\r\n              </div>\r\n            </Col>\r\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={defaultComparisonIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Default Composition</h6>\r\n                <p>\r\n                  Default content keeps on playing irrespective of the time when\r\n                  there is no active\r\n                </p>\r\n                <button\r\n                  onClick={(e) => {\r\n                    handleDefaultScreen(e);\r\n                  }}\r\n                >\r\n                  Add Content\r\n                </button>\r\n              </div>\r\n            </Col> */}\r\n            </Row>\r\n          ) : (\r\n            <></>\r\n          )}\r\n          {!showPublishBtn && (\r\n            <div className=\"d-flex mb-2 mt-3\">\r\n              <Button\r\n                className={\r\n                  publishType === \"schedule\"\r\n                    ? \"mr-3 activeType\"\r\n                    : \"mr-3 push-screen-btn\"\r\n                }\r\n                variant=\"info \"\r\n                type=\"button\"\r\n                onClick={(e) => {\r\n                  setPublishType(\"schedule\");\r\n                }}\r\n              >\r\n                Schedule\r\n              </Button>\r\n              <Button\r\n                className={\r\n                  publishType === \"quickplay\"\r\n                    ? \"mr-3 activeType\"\r\n                    : \"mr-3 push-screen-btn\"\r\n                }\r\n                variant=\"info \"\r\n                type=\"button\"\r\n                onClick={(e) => {\r\n                  setPublishType(\"quickplay\");\r\n                }}\r\n              >\r\n                Quickplay\r\n              </Button>\r\n              <Button\r\n                className={\r\n                  publishType === \"defaultComposition\"\r\n                    ? \"mr-3 activeType\"\r\n                    : \"mr-3 push-screen-btn\"\r\n                }\r\n                variant=\"info \"\r\n                type=\"button\"\r\n                onClick={(e) => {\r\n                  setPublishType(\"defaultComposition\");\r\n                }}\r\n              >\r\n                Default Composition\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!showPublishBtn &&\r\n          publishType &&\r\n          publishType === \"quickplay\" &&\r\n          (permission && permission.permission.QUICKPLAY.view ? (\r\n            <QuickPlayList\r\n              history={history}\r\n              setIsRefresh={setIsRefresh}\r\n              data={quickPlayData}\r\n              handleDeleteQuickPlay={handleDeleteQuickPlay}\r\n              setFilterData={setFilterData}\r\n            />\r\n          ) : (\r\n            <LockScreen\r\n              message={\"You don't have permssion to access this !!!\"}\r\n            />\r\n          ))}\r\n\r\n        {!showPublishBtn &&\r\n          publishType &&\r\n          publishType === \"defaultComposition\" && (\r\n            <>\r\n              <DefComplist\r\n                history={history}\r\n                setIsRefresh={setIsRefresh}\r\n                data={defaultData}\r\n                setFilterData={setFilterData}\r\n              />\r\n            </>\r\n          )}\r\n        {!showPublishBtn &&\r\n          publishType &&\r\n          publishType === \"schedule\" &&\r\n          (permission && permission.permission.SCHEDULE.view ? (\r\n            <>\r\n              <ScheduleList\r\n                history={history}\r\n                setIsRefresh={setIsRefresh}\r\n                data={scheduleData}\r\n                setSelectedSchdule={setSelectedSchdule}\r\n                setShowPublishPopUp={setShowPublishPopUp}\r\n                handleDeleteSchedule={handleDeleteSchedule}\r\n                setFilterData={setFilterData}\r\n              />\r\n            </>\r\n          ) : (\r\n            <LockScreen\r\n              message={\"You don't have permssion to access this !!!\"}\r\n            />\r\n          ))}\r\n      </div>\r\n      {showPublishBtn &&\r\n        checkedValues &&\r\n        checkedValues.length > 0 &&\r\n        checkedValuesComp == null && (\r\n          <button\r\n            className=\"btn btn-sm btn-primary\"\r\n            onClick={(e) => {\r\n              handleProceed(e, \"screen\");\r\n            }}\r\n          >\r\n            Proceed\r\n          </button>\r\n        )}\r\n      {showDefaultScreen && (\r\n        <>\r\n          <h4>Plesae Select Screen</h4>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Screen</th>\r\n                <th>Last Seen</th>\r\n                <th>Default Composition</th>\r\n                <th>Current Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading ? (\r\n              <TableLoader colSpan={5} />\r\n            ) : (\r\n              <tbody>\r\n                {allScreens !== \"\" &&\r\n                  allScreens.map((screen) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={screen._id}\r\n                              name={screen._id}\r\n                              checked={checkedItems[screen._id]}\r\n                              onChange={(e) => {\r\n                                handleCheckboxChange(e, \"screen\");\r\n                              }}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={screen._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>{screen.name}</strong>\r\n                            <span>{screen.screenLocation}</span>\r\n                          </span>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"d-flex align-items-center\">\r\n                            <span className=\"status status-green\"></span>\r\n                            <span className=\"td-content\">\r\n                              <strong>{screen.name}</strong>\r\n                              <span>{screen.screenLocation}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                        <td>Default Compo. </td>\r\n                        <td>No Schedule</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </>\r\n      )}\r\n      {showPublishBtn && checkedValuesComp != null && (\r\n        <button\r\n          className=\"btn btn-sm btn-primary\"\r\n          onClick={(e) => {\r\n            handleProceedComp(e, \"composition\");\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      )}\r\n      {checkedValues && checkedValues.length > 0 && showDefaultComp && (\r\n        <>\r\n          <h4>Please select composition</h4>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      disabled\r\n                      // onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Name</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading ? (\r\n              <TableLoader colSpan={5} />\r\n            ) : (\r\n              <tbody>\r\n                {allComposition !== \"\" &&\r\n                  allComposition.map((composition) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={composition._id}\r\n                              name={composition._id}\r\n                              checked={checkedValuesComp === composition._id}\r\n                              onChange={(e) => {\r\n                                handleCheckboxChange(e, \"composition\");\r\n                              }}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={composition._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"td-content d-flex name-td-content\">\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                              <strong>{composition.name}</strong>\r\n                              <span>{composition.createdBy}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>\r\n                              {getDatetimeIn12Hours(composition.createdAt)}\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.duration} Sec</td>\r\n                        <td>No Composition</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth.auth,\r\n    permission: state.auth.permission,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(PushScreen);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\store\\actions\\AuthActions.js",["733","734","735","736"],"import {\r\n    formatError,\r\n    runLogoutTimer,\r\n    saveTokenInLocalStorage,\r\n    signUp\r\n} from '../../services/AuthService';\r\n\r\n\r\nimport { login, register, otpVerification, getResetPassword, sentOtpAgain, socialLoginApi, verification2fa, mfaEnablePost } from '../../utils/api';\r\nexport const SIGNUP_CONFIRMED_ACTION = '[signup action] confirmed signup';\r\nexport const SIGNUP_FAILED_ACTION = '[signup action] failed signup';\r\nexport const LOGIN_CONFIRMED_ACTION = '[login action] confirmed login';\r\nexport const LOGIN_FAILED_ACTION = '[login action] failed login';\r\nexport const LOADING_TOGGLE_ACTION = '[Loading action] toggle loading';\r\nexport const LOGOUT_ACTION = '[Logout action] logout action';\r\nexport const CLEAR_ERRORS = '[Clear Error] clear error'\r\n\r\nexport const OTP_CONFIRMED_ACTION = '[otp action] confirmed otp';\r\nexport const OTP_FAILED_ACTION = '[otp action] failed otp';\r\nexport const RESET_PASSWORD_CONFIRMED_ACTION = '[reset password action] confirmed reset password';\r\nexport const RESET_PASSWORD_FAILED_ACTION = '[reset password action] failed reset password';\r\n\r\nexport const GET_PERMISSION_FAILED_ACTION = '[get permission action] failed get permission';\r\nexport const GET_PERMISSION_CONFIRMED_ACTION = '[get permission action] confirmed get permission';\r\n\r\nexport function signupAction(name,email, password, history) {\r\n    return (dispatch) => {\r\n        register(name,email, password)\r\n        .then((response) => {\r\n            response.data.data.vendor.isVerified = false;\r\n            saveTokenInLocalStorage(response.data.data);\r\n            // runLogoutTimer(\r\n            //     dispatch,\r\n            //     response.data.expiresIn * 1000,\r\n            //     history,\r\n            // );\r\n            dispatch(confirmedSignupAction(response.data.data));\r\n            history.push('/verification');\r\n        })\r\n        .catch((error) => {\r\n            // const errorMessage = formatError(error.response.data);\r\n            // dispatch(signupFailedAction(errorMessage));\r\n            const errorMessage = error.response.data.message;\r\n            console.log(\"errorMessage\",errorMessage)\r\n            dispatch(signupFailedAction(errorMessage));\r\n        });\r\n    };\r\n}\r\n\r\nexport function logout(history) {\r\n    localStorage.removeItem('userDetails');\r\n    history.push('/login');\r\n    return {\r\n        type: LOGOUT_ACTION,\r\n    };\r\n}\r\n\r\nexport function loginAction(email, password, history) {\r\n    // const mfa = 'R3FF42XS2JQSOIBKPSHU3JI';\r\n    // const mfaEnabled = true;\r\n    return (dispatch) => {\r\n        login(email, password)\r\n            .then((response) => {\r\n                //response.data.data.vendor.isVerified = false;\r\n                // response.data.data.vendor.mfa = mfa;\r\n                // response.data.data.vendor.mfaEnabled = mfaEnabled;\r\n                if(response.data.data.vendor.mfaEnabled){\r\n                    response.data.data.vendor.isVerified = false;\r\n                }\r\n                const token = response.data.data;\r\n                saveTokenInLocalStorage(token);\r\n                dispatch(loginConfirmedAction(token));\r\n\t\t\t\thistory.push('/');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                // console.log(error.response.data)\r\n                // const errorMessage = formatError(error.response.data);\r\n                // dispatch(loginFailedAction(errorMessage));\r\n                const errorMessage = error.response.data.message;\r\n                console.log(\"errorMessage\",errorMessage)\r\n                //swal('OOPS', errorMessage, \"error\",{ button: \"Try Again!\",});\r\n                dispatch(loginFailedAction(errorMessage));\r\n            });\r\n    };\r\n}\r\n\r\nexport function socialLoginAction(email, name, token, history) {\r\n    return (dispatch) => {\r\n        socialLoginApi(email, name, token)\r\n            .then((response) => {\r\n                const token = response.data.data;\r\n                saveTokenInLocalStorage(token);\r\n                dispatch(loginConfirmedAction(token));\r\n\t\t\t\thistory.push('/');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                const errorMessage = error.response.data.message;\r\n                console.log(\"errorMessage\",errorMessage)\r\n                dispatch(loginFailedAction(errorMessage));\r\n            });\r\n    };\r\n}\r\n\r\nexport function verification2FaAuth(mfa, history) {\r\n    return (dispatch) => {\r\n        mfaEnablePost(mfa)\r\n            .then((response) => {\r\n                console.log(\"MFA\", response);\r\n                const tokenDetailsString = localStorage.getItem('userDetails');\r\n                let token = JSON.parse(tokenDetailsString);\r\n                token.vendor.mfa = mfa.mfa;\r\n                token.vendor.mfaEnabled = mfa.mfaEnabled;\r\n                saveTokenInLocalStorage(token);\r\n            })\r\n            .catch((error) => {\r\n                const errorMessage = error.response.data.message;\r\n                console.log(\"MFA errorMessage\",errorMessage)\r\n                dispatch(loginFailedAction(errorMessage));\r\n            });\r\n    };\r\n}\r\n\r\nexport function verification(otp, history) {\r\n    return (dispatch) => {\r\n        otpVerification({otp})\r\n            .then((response) => {\r\n                const tokenDetailsString = localStorage.getItem('userDetails');\r\n\r\n                let token = JSON.parse(tokenDetailsString);\r\n                token.vendor.isVerified=true;\r\n                saveTokenInLocalStorage(token);\r\n                dispatch(loginConfirmedAction(token));\r\n\t\t\t\thistory.push('/');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                const errorMessage = error.response.data.message;\r\n                console.log(\"errorMessage\",errorMessage)\r\n                dispatch(loginFailedAction(errorMessage));\r\n            });\r\n    };\r\n}\r\n\r\nexport function verify2fa(mfaToken, history) {\r\n    return (dispatch) => {\r\n        const tokenDetailsString = localStorage.getItem('userDetails');\r\n        let token = JSON.parse(tokenDetailsString);\r\n        token.vendor.isVerified=true;\r\n        token.vendor.mfa = mfaToken;\r\n        saveTokenInLocalStorage(token);\r\n        dispatch(loginConfirmedAction(token));\r\n        history.push('/');\r\n        window.location.reload();\r\n        // verification2fa({mfaToken})\r\n        //     .then((response) => {\r\n        //         const tokenDetailsString = localStorage.getItem('userDetails');\r\n        //         let token = JSON.parse(tokenDetailsString);\r\n        //         token.vendor.isVerified=true;\r\n        //         token.vendor.mfa = mfaToken;\r\n        //         saveTokenInLocalStorage(token);\r\n        //         dispatch(loginConfirmedAction(token));\r\n\t\t// \t\thistory.push('/');\r\n        //         window.location.reload();\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         const errorMessage = error.response.data.message;\r\n        //         console.log(\"errorMessage\",errorMessage)\r\n        //         dispatch(loginFailedAction(errorMessage));\r\n        //     });\r\n    };\r\n}\r\n\r\nexport function resendOtp(history) {\r\n    return (dispatch) => {\r\n        sentOtpAgain()\r\n            .then((response) => {\r\n                dispatch(sendOtpConfired(response));\r\n            })\r\n            .catch((error) => {\r\n                const errorMessage = error.response.data.message;\r\n                console.log(\"errorMessage\",errorMessage)\r\n                dispatch(sendOtpFailed(errorMessage));\r\n            });\r\n    };\r\n}\r\n\r\nexport function resetPassword(email, history) {\r\n    return (dispatch) => {\r\n        getResetPassword({email})\r\n            .then((response) => {\r\n                dispatch(resetPasswordConfirmed(response));\r\n                history.push('/');\r\n            })\r\n            .catch((error) => {\r\n                if(error.response){\r\n                    const errorMessage = error.response.data.message;\r\n                    console.log(\"errorMessage\",errorMessage)\r\n                    dispatch(resetPasswordFailed(errorMessage));\r\n                }\r\n                \r\n            });\r\n    };\r\n}\r\n\r\nexport function sendOtpFailed(data) {\r\n    return {\r\n        type: OTP_FAILED_ACTION,\r\n        payload:data\r\n    };\r\n}\r\n\r\nexport function sendOtpConfired() {\r\n    return {\r\n        type: OTP_CONFIRMED_ACTION,\r\n    };\r\n}\r\n\r\nexport function resetPasswordFailed(data) {\r\n    return {\r\n        type: RESET_PASSWORD_FAILED_ACTION,\r\n        payload:data\r\n    };\r\n}\r\n\r\nexport function resetPasswordConfirmed(data) {\r\n    return {\r\n        type: RESET_PASSWORD_CONFIRMED_ACTION,\r\n        payload:data\r\n    };\r\n}\r\nexport function loginFailedAction(data) {\r\n    return {\r\n        type: LOGIN_FAILED_ACTION,\r\n        payload: data,\r\n    };\r\n}\r\n\r\nexport function loginConfirmedAction(data) {\r\n    return {\r\n        type: LOGIN_CONFIRMED_ACTION,\r\n        payload: data,\r\n    };\r\n}\r\n\r\nexport function confirmedSignupAction(payload) {\r\n    return {\r\n        type: SIGNUP_CONFIRMED_ACTION,\r\n        payload,\r\n    };\r\n}\r\n\r\nexport function signupFailedAction(message) {\r\n    return {\r\n        type: SIGNUP_FAILED_ACTION,\r\n        payload: message,\r\n    };\r\n}\r\n\r\nexport function loadingToggleAction(status) {\r\n    return {\r\n        type: LOADING_TOGGLE_ACTION,\r\n        payload: status,\r\n    };\r\n}\r\n\r\nexport function clearErrors() {\r\n    return {\r\n        type: CLEAR_ERRORS\r\n    };\r\n}\r\n\r\n","E:\\projects\\trendy-content-display-frontend\\src\\utils\\api.js",["737","738","739","740","741","742"],"import fetchClient from \"./fetchClient\";\r\nimport axios from \"axios\";\r\nexport const BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\nlet Parser = require(\"rss-parser\");\r\n\r\nexport function login(email, password) {\r\n  const role = \"vendor\";\r\n  const postData = {\r\n    email,\r\n    password,\r\n    role,\r\n  };\r\n\r\n  return fetchClient.post(`${BASE_URL}/vendor/auth/login`, postData);\r\n}\r\n\r\nexport function socialLoginApi(email, name, token) {\r\n  const postData = {\r\n    email,\r\n    name,\r\n    socialId: token,\r\n  };\r\n\r\n  return fetchClient.post(`${BASE_URL}/vendor/auth/socialLogin`, postData);\r\n}\r\n\r\nexport function register(name, email, password) {\r\n  const role = \"vendor\";\r\n  const postData = {\r\n    name,\r\n    email,\r\n    password,\r\n    //phoneNumber,\r\n    role,\r\n  };\r\n\r\n  return fetchClient.post(`${BASE_URL}/vendor/auth/signup`, postData);\r\n}\r\n\r\nexport async function otpVerification(otp) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/auth/verifyOtp`,\r\n    otp\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function mfaEnablePost(mfa) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/mfa`,\r\n    mfa\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function verification2fa(otp) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/auth/verifyOtp`,\r\n    otp\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function sentOtpAgain() {\r\n  const response = await fetchClient.post(BASE_URL + `/vendor/auth/resendOtp`);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getResetPassword(email) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/auth/forgotPassword`,\r\n    email\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getAllScreens(str = null) {\r\n  let response = \"\";\r\n  if (str) {\r\n    response = await fetchClient.get(\r\n      BASE_URL + `/vendor/display/screen?${str}`\r\n    );\r\n  } else {\r\n    response = await fetchClient.get(BASE_URL + `/vendor/display/screen`);\r\n  }\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getAllMedia(data) {\r\n  console.log(\"data\", data);\r\n  let response;\r\n  if (data && data != \"\") {\r\n    response = await fetchClient.get(\r\n      BASE_URL + `/vendor/display/media?${data}`\r\n    );\r\n  } else {\r\n    response = await fetchClient.get(BASE_URL + `/vendor/display/media`);\r\n  }\r\n\r\n  return response.data.data.media;\r\n}\r\n\r\nexport async function getAllMediaSWR() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/display/media`);\r\n\r\n  return response.data.data.media;\r\n}\r\n\r\nexport async function getAllComposition(str = null) {\r\n  let response;\r\n  if (str) {\r\n    response = await fetchClient.get(\r\n      BASE_URL + `/vendor/layouts/compositions?page=0&limit=1000&${str}`\r\n    );\r\n  } else {\r\n    response = await fetchClient.get(\r\n      BASE_URL + `/vendor/layouts/compositions?page=0&limit=1000`\r\n    );\r\n  }\r\n\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getAllCompositionSWR(str = null) {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/layouts/compositions?page=0&limit=1000`\r\n  );\r\n\r\n  return response.data.data;\r\n}\r\n\r\nexport const permission = {\r\n  SCREEN: { view: false, add: false, edit: false, delete: false },\r\n  ASSETS: { view: false, add: false, edit: false, delete: false },\r\n  COMPOSITION: { view: false, add: false, edit: false, delete: false },\r\n  APPS: { view: false, add: false, edit: false, delete: false },\r\n  REPORTS: { view: false, add: false, edit: false, delete: false },\r\n  QUICKPLAY: { view: false, add: false, edit: false, delete: false },\r\n  SCHEDULE: { view: false, add: false, edit: false, delete: false },\r\n};\r\n\r\nexport function addScreen(data) {\r\n  return fetchClient.post(`${BASE_URL}/vendor/display/screen`, data);\r\n}\r\n\r\nexport async function addScreenCode(deviceToken) {\r\n  const postData = {\r\n    deviceToken: deviceToken,\r\n  };\r\n  const response = await fetchClient.post(`${BASE_URL}/device/auth`, postData);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function validateScreenCode(code) {\r\n  const postData = {\r\n    code: code,\r\n  };\r\n\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/display/deviceCode`,\r\n      postData\r\n    );\r\n    return response.data.statusCode === 200;\r\n  } catch (error) {\r\n    console.log(\"err\", error?.response?.data);\r\n    return error?.response?.data;\r\n  }\r\n}\r\n\r\nexport async function addMedia(formData) {\r\n  const response = await fetchClient.post(\r\n    `${BASE_URL}/vendor/display/media`,\r\n    formData,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    }\r\n  );\r\n  return response;\r\n}\r\nexport async function deleteMedia(id) {\r\n  await fetchClient.delete(`${BASE_URL}/vendor/display/media?mediaId=${id}`);\r\n}\r\n\r\nexport async function publishMedia(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/display/publish`,\r\n      postData\r\n    );\r\n    return response.data.statusCode === 200;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function deleteScreen(id) {\r\n  return await fetchClient.delete(\r\n    `${BASE_URL}/vendor/display/screen?screenId=${id}`\r\n  );\r\n}\r\n\r\nexport async function getLayouts() {\r\n  const response = await fetchClient.get(`${BASE_URL}/vendor/layouts`);\r\n  return response.data.data;\r\n}\r\nexport async function postComposition(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/layouts/composition`,\r\n      postData\r\n    );\r\n    return response.data.statusCode === 200;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function putComposition(postData) {\r\n  try {\r\n    const response = await fetchClient.put(\r\n      `${BASE_URL}/vendor/layouts/composition`,\r\n      postData\r\n    );\r\n    return response.data.statusCode === 200;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function deleteCompositionById(id) {\r\n  await fetchClient.delete(\r\n    `${BASE_URL}/vendor/layouts/composition?compositionId=${id}`\r\n  );\r\n}\r\n\r\nexport async function getCompositionById(url) {\r\n  const response = await fetchClient.get(BASE_URL + `${url}`);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getMedia(path) {\r\n  const response = await fetchClient.get(\r\n    `${BASE_URL}/vendor/display/mediaFile?path=${path}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function uploadBlob(blob) {\r\n  const imageResponse = await fetchClient.get(blob, { responseType: \"blob\" });\r\n  const blobData = imageResponse.data;\r\n\r\n  const formData = new FormData();\r\n  // Extract filename and extension from the Blob URL\r\n  const url = new URL(blob);\r\n  const pathnameParts = url.pathname.split(\"/\");\r\n  const filenameWithExtension = pathnameParts[pathnameParts.length - 1];\r\n\r\n  // Append the Blob to the FormData object\r\n  formData.append(\"file\", blobData, filenameWithExtension);\r\n\r\n  const response = await fetchClient.post(\r\n    `${BASE_URL}/vendor/layouts/upload`,\r\n    formData,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    }\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function pushAddSchedule(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/push/schedule`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function pushUpdateSchedule(postData) {\r\n  try {\r\n    const response = await fetchClient.put(\r\n      `${BASE_URL}/vendor/push/schedule`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function pushAddDates(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/push/dates`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function saveSequence(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/push/sequence`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function updateSequence(postData) {\r\n  try {\r\n    const response = await fetchClient.put(\r\n      `${BASE_URL}/vendor/push/sequence`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\nexport async function getAllDaySequence(scheduleId) {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/push/sequenceList?scheduleId=${scheduleId}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getAllSchedule(str = null) {\r\n  let response;\r\n  if (str && str != \"\") {\r\n    response = await fetchClient.get(\r\n      BASE_URL + `/vendor/push/schedules?${str}`\r\n    );\r\n  } else {\r\n    response = await fetchClient.get(BASE_URL + `/vendor/push/schedules`);\r\n  }\r\n  return response;\r\n}\r\n\r\nexport async function getQuickPlay() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/push/quickplay`);\r\n  return response;\r\n}\r\n\r\nexport async function setQuickplay(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/push/quickplay`,\r\n      postData\r\n    );\r\n    return response.data.statusCode === 200;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function deleteSequence(sequenceId, scheduleId) {\r\n  const response = await fetchClient.delete(\r\n    `${BASE_URL}/vendor/push/sequence?scheduleId=${scheduleId}&sequenceId=${sequenceId}`\r\n  );\r\n  return response;\r\n}\r\nexport async function deleteSchedule(scheduleId) {\r\n  const response = await fetchClient.delete(\r\n    `${BASE_URL}/vendor/push/schedule?scheduleId=${scheduleId}`\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function deleteQuickPlay(quickPlayId) {\r\n  const response = await fetchClient.delete(\r\n    `${BASE_URL}/vendor/push/quickplay?id=${quickPlayId}`\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function assignDefaultComposition(postData) {\r\n  try {\r\n    const response = await fetchClient.put(\r\n      `${BASE_URL}/vendor/profile/defaultComposition`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function setDefaultComposition(postData) {\r\n  try {\r\n    const response = await fetchClient.post(\r\n      `${BASE_URL}/vendor/push/defaultComposition`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getDefaultComposition(postData) {\r\n  try {\r\n    const response = await fetchClient.get(\r\n      `${BASE_URL}/vendor/push/defaultComposition`,\r\n      postData\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function vendorProfile() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile`);\r\n  return response;\r\n}\r\n\r\nexport async function getReports(startDate, endDate, reportSlug) {\r\n  let type = \"\";\r\n  if (reportSlug == \"media-report\") {\r\n    type = \"mediaReport\";\r\n  }\r\n  if (reportSlug == \"uptime-report\") {\r\n    type = \"uptimeReport\";\r\n  }\r\n  if (reportSlug == \"audit-logs\") {\r\n    type = \"auditLogs\";\r\n  }\r\n  const response = await fetchClient.get(\r\n    BASE_URL +\r\n      `/vendor/profile/${type}?page=0&limit=1000&startDate=${startDate}&endDate=${endDate}`\r\n  );\r\n\r\n  return response;\r\n}\r\n\r\nexport async function getSingleSequence(scheduleId, seqId) {\r\n  const response = await fetchClient.get(\r\n    BASE_URL +\r\n      `/vendor/push/sequence?scheduleId=${scheduleId}&sequenceId=${seqId}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getUsers() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/users`);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function addUsers(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/users`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function updateUsers(postdata) {\r\n  const response = await fetchClient.put(\r\n    BASE_URL + `/vendor/profile/users`,\r\n    postdata\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function deleteUsers(userId) {\r\n  const response = await fetchClient.delete(\r\n    BASE_URL + `/vendor/profile/users?userId=${userId}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getGroups() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/groups`);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function addGroups(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/groups`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function assignScreenGroups(postdata) {\r\n  const response = await fetchClient.put(\r\n    BASE_URL + `/vendor/display/assignGroups`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function updateGroups(postdata) {\r\n  const response = await fetchClient.put(\r\n    BASE_URL + `/vendor/profile/groups`,\r\n    postdata\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function deleteGroups(groupId) {\r\n  const response = await fetchClient.delete(\r\n    BASE_URL + `/vendor/profile/groups?groupId=${groupId}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getRoles() {\r\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/roles`);\r\n  return response.data.data;\r\n}\r\n\r\nexport async function updateRoles(postdata) {\r\n  const response = await fetchClient.put(\r\n    BASE_URL + `/vendor/profile/roles`,\r\n    postdata\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function getDeviceProfile() {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/profile/deviceProfile?limit=100`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function addDeviceProfile(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/deviceProfile`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function addApps(postdata) {\r\n  const response = await fetchClient.post(BASE_URL + `/vendor/apps`, postdata);\r\n  return response;\r\n}\r\n\r\nexport async function updateApps(postdata) {\r\n  const response = await fetchClient.put(BASE_URL + `/vendor/apps`, postdata);\r\n  return response;\r\n}\r\n\r\nexport async function updateDeviceProfile(postdata) {\r\n  const response = await fetchClient.put(\r\n    BASE_URL + `/vendor/profile/deviceProfile`,\r\n    postdata\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function deleteDeviceProfile(userId) {\r\n  const response = await fetchClient.delete(\r\n    BASE_URL + `/vendor/profile/deviceProfile?profileId=${userId}`\r\n  );\r\n  return response.data.data;\r\n}\r\n\r\nexport async function assignScreenProfile(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/assign`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function getWeather(lat, long) {\r\n  const rapidHeader = {\r\n    headers: {\r\n      \"X-RapidAPI-Key\": \"b5a487d7c7msh1ee9860be40a063p14b519jsna3a79db4aac0\",\r\n      \"X-RapidAPI-Host\": \"open-weather13.p.rapidapi.com\",\r\n    },\r\n  };\r\n  const response = await fetchClient.get(\r\n    `https://open-weather13.p.rapidapi.com/city/fivedaysforcast/${lat}/${long}`,\r\n    rapidHeader\r\n  );\r\n  return response.data;\r\n}\r\n\r\nexport async function getStock(type) {\r\n  const rapidHeader = {\r\n    headers: {\r\n      \"X-RapidAPI-Key\": \"b5a487d7c7msh1ee9860be40a063p14b519jsna3a79db4aac0\",\r\n      \"X-RapidAPI-Host\": \"stock-surge.p.rapidapi.com\",\r\n    },\r\n  };\r\n  const response = await fetchClient.get(\r\n    `https://stock-surge.p.rapidapi.com/api/v1/performance/${type}`,\r\n    rapidHeader\r\n  );\r\n  return response.data;\r\n}\r\n\r\nexport async function getQuotes(formData) {\r\n  const rapidHeader = {\r\n    headers: {\r\n      \"X-RapidAPI-Key\": \"b5a487d7c7msh1ee9860be40a063p14b519jsna3a79db4aac0\",\r\n      \"X-RapidAPI-Host\": \"andruxnet-random-famous-quotes.p.rapidapi.com\",\r\n    },\r\n  };\r\n  const response = await fetchClient.get(\r\n    `https://andruxnet-random-famous-quotes.p.rapidapi.com?cat=${formData.cat}&count=${formData.count}`,\r\n    rapidHeader\r\n  );\r\n  return response.data;\r\n}\r\n\r\nexport async function getNews(keyword) {\r\n  const rapidHeader = {\r\n    headers: {\r\n      \"X-RapidAPI-Key\": \"b5a487d7c7msh1ee9860be40a063p14b519jsna3a79db4aac0\",\r\n      \"X-RapidAPI-Host\": \"google-news13.p.rapidapi.com\",\r\n    },\r\n  };\r\n  const response = await fetchClient.get(\r\n    `https://google-news13.p.rapidapi.com/search?keyword=${keyword}&lr:`,\r\n    rapidHeader\r\n  );\r\n  return response.data;\r\n}\r\n\r\nexport async function getAllMediaFilter() {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/display/media?limit=100`\r\n  );\r\n  return response.data.data.media;\r\n}\r\n\r\nexport async function getAllMediaDetail(id) {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/display/media/detail?mediaId=${id}`\r\n  );\r\n  return response.data.data.media;\r\n}\r\n\r\nexport function getPermission() {\r\n  return fetchClient.get(BASE_URL + `/vendor/profile/vendorRole`);\r\n}\r\n\r\nexport async function rssParser() {\r\n  let parser = new Parser();\r\n  let feed = await parser.parseURL(\"https://www.reddit.com/.rss\");\r\n  console.log(\"feed\", feed);\r\n}\r\n\r\nexport async function addTags(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/profile/tags`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n\r\nexport async function getAllTags(str) {\r\n  const response = await fetchClient.get(\r\n    BASE_URL + `/vendor/profile/tags?type=${str}`\r\n  );\r\n  return response.data.data;\r\n}\r\nexport async function getTimeZone(lat, long) {\r\n  const rapidHeader = {\r\n    headers: {\r\n      'Access-Control-Allow-Headers': '*'\r\n    }\r\n  }\r\n  const response = await axios.get(`https://maps.googleapis.com/maps/api/timezone/json?location=${lat}%2C${long}&timestamp=1331766000&key=${process.env.REACT_APP_GOOGLE_API_KEY}`);\r\n  return response.data;\r\n}\r\n\r\nexport async function handleWebData(postdata) {\r\n  const response = await fetchClient.post(\r\n    BASE_URL + `/vendor/display/screenSettings`,\r\n    postdata\r\n  );\r\n  return response;\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\store\\actions\\PostTypes.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\pages\\LockScreen.js",["743"],"import React from \"react\";\r\n\r\nconst LockScreen = ({ history, message }) => {\r\n   const submitHandler = (e) => {\r\n      e.preventDefault();\r\n      history.push(\"/\");\r\n   };\r\n   return (\r\n      <div className=\"row justify-content-center h-100 align-items-center\">\r\n         <div className=\"col-md-6\">\r\n            <div className=\"authincation-content\">\r\n               <div className=\"row no-gutters\">\r\n                  <div className=\"col-xl-12\">\r\n                     <div className=\"auth-form\">\r\n                        <h4 className=\"text-center mb-4\">{message}</h4>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default LockScreen;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SequenceEdit.js",["744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  BASE_URL,\r\n  getAllCompositionSWR,\r\n  getAllMedia,\r\n  updateSequence,\r\n  getAllDaySequence,\r\n  getSingleSequence,\r\n} from \"../../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport useSWR from \"swr\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function SequenceTime() {\r\n  const [events, setEvents] = useState([]);\r\n  const [def, setDef] = useState([]);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [dragDef, setDragDef] = useState(null)\r\n  const [renderTime, setRenderTime] = useState(\"\");\r\n  const history = useHistory();\r\n  const { schId, seqId } = useParams({26:true});\r\n  const [sqName, setSqName] = useState(\"\");\r\n\r\n  const { data: allComposition, mutate } = useSWR(\r\n    \"/vendor/layouts/compositions\",\r\n    getAllCompositionSWR\r\n  );\r\n\r\n  const callSingleDaySequence = async (schId) => {\r\n    const seqData = await getSingleSequence(schId, seqId)\r\n    if (seqData && seqData.sequence && seqData.sequence[0] && seqData.sequence[0].timings) {\r\n      const listTimings = [];\r\n      let defArray = {};\r\n      setSqName(seqData.sequence[0].name)\r\n      let defId = 105;\r\n      seqData.sequence[0].timings.forEach((item) => {\r\n        defId = defId + +1;\r\n        defArray = {...defArray,[defId]:true}\r\n        const sT = item.startTime.split(\"T\")[1].split(\":\");\r\n        const eT = item.endTime.split(\"T\")[1].split(\":\");\r\n        const data = {\r\n          id: item.composition._id,\r\n          sourceId: item.composition._id,\r\n          publicId: item.composition._id,\r\n          title:item.composition.name,\r\n          name:item.composition.name,\r\n          startTime:sT[0] + \":\" + sT[1],\r\n          endTime:eT[0] + \":\" + eT[1],\r\n          timing: sT[0] + \":\" + sT[1] + \" - \" + eT[0] + \":\" + eT[1],\r\n          image:`${BASE_URL}${item.composition.zones[0].content[0]}`,\r\n          extendedProps:{\r\n            custom:`${BASE_URL}${item.composition.zones[0].content[0].url}`,\r\n            defId: defId.toString()\r\n          },\r\n          _def:{\r\n            defId: defId.toString()\r\n          },\r\n          defId: defId.toString()\r\n        }\r\n        //handleEventReceive(data)\r\n        listTimings.push(data);\r\n      });\r\n      setDef(defArray);\r\n      setEvents(listTimings);\r\n    }\r\n  };\r\n\r\n  let timeFormet = {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    hour12: false,\r\n  };\r\n  // load external events\r\n  useEffect(() => {\r\n    callSingleDaySequence(schId);\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let sourceId = eventEl.getAttribute(\"sourceId\");\r\n        let publicId = eventEl.getAttribute(\"publicId\");\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          sourceId,\r\n          publicId,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, [schId]);\r\n\r\n  function eventFunction(info) {\r\n    console.log(\"Sdsd\");\r\n    //const newArray = events;\r\n    const id = info.el.fcSeg.eventRange.def.sourceId;\r\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\r\n    let newArr = events.map((item, i) => {\r\n      if (item.defId == defId) {\r\n        if(item.startTime && item.endTime){\r\n         // console.log(\"time\",info.el.innerText.split(\"\\n\\n\")[1])\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\r\n            ['startTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\r\n            ['endTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1]\r\n          };\r\n        }else{\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1]\r\n          };\r\n        }\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n   // console.log(\"resize\",newArr)\r\n    setEvents(newArr);\r\n  }\r\n  // handle event receive\r\n  \r\n  const handleEventReceive = (eventInfo) => {\r\n      console.log(\"handleEventR\",eventInfo,events)\r\n      const id = eventInfo.event._def.sourceId;\r\n      const [startTime, endTime] = renderTime.split(\" - \");\r\n      const formattedStartTime = startTime.padStart(5, \"0\");\r\n      const formattedEndTime =\r\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\r\n      const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\r\n      const checkedItem = events.find((item) => {\r\n        return item.id == eventInfo.event._def.publicId\r\n      });\r\n      if(checkedItem){\r\n        console.log(\"Found\");\r\n        let newArr = events.map((item, i) => {\r\n          if (item.defId == dragDef && item.timing !== renderTime) {\r\n            return { ...item,\r\n              [\"timing\"]: renderTime,\r\n              ['startTime']:renderTime.split(\" - \")[0],\r\n              ['endTime']:renderTime.split(\" - \")[1]\r\n            };\r\n          } else {\r\n            return item;\r\n          }\r\n        });\r\n        setEvents(newArr);\r\n      }else{\r\n        const newEvent = {\r\n          id: id,\r\n          timing: timeRange,\r\n          defId: eventInfo.event._def.defId,\r\n        };\r\n        setEvents((events) => [...events, newEvent]);\r\n        setDef({ ...def, [eventInfo.event._def.defId]: true });\r\n      }\r\n    \r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\r\n    setEvents((current) => current.filter((event) => event.defId !== defId));\r\n    info.event.remove();\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const scheduleId = schId;\r\n    const timings = events.map((item) => {\r\n      return {\r\n        composition: item.id,\r\n        startTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[0] +\r\n          \":00Z\",\r\n        endTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[1] +\r\n          \":00Z\",\r\n      };\r\n    });\r\n    if (!sqName) {\r\n      toast.error(\"Please enter sequence name\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    if (!schId) {\r\n      toast.error(\"something went wrong\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    const payload = {\r\n      scheduleId: scheduleId,\r\n      sequenceId:seqId,\r\n      name: sqName,\r\n      timings,\r\n    };\r\n\r\n    console.log(\"payload\",def,events,payload,renderTime)\r\n\r\n    await updateSequence(payload).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        history.push(`/design-month-schedule/${schId}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  const eventDragStartFunc = (info) => {\r\n    console.log(\"Event Start\",info.event._def.extendedProps.defId)\r\n    setDragDef(info.event._def.extendedProps.defId);\r\n  }\r\n\r\n  const eventDropStopFunc = (info) => {\r\n      // let newArr = events.map((item, i) => {\r\n      //   if (item.defId == dragDef && item.timing !== renderTime) {\r\n      //     return { ...item,\r\n      //       [\"timing\"]: renderTime,\r\n      //       ['startTime']:renderTime.split(\" - \")[0],\r\n      //       ['endTime']:renderTime.split(\" - \")[1]\r\n      //     };\r\n      //   } else {\r\n      //     return item;\r\n      //   }\r\n      // });\r\n      // setEvents(newArr);\r\n  }\r\n\r\n  const eventDropFunc = (event) => {\r\n    console.log(\"Dropping Func\", event)\r\n  }\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(\"eventInfo\",eventInfo)\r\n    const { event } = eventInfo;\r\n    const { title } = event;\r\n    const checkTime = eventInfo.timeText.split(\" - \");\r\n    if (!checkTime[1]) {\r\n      const secondTime =\r\n        parseInt(checkTime[0].split(\":\")[0]) +\r\n        1 +\r\n        \":\" +\r\n        checkTime[0].split(\":\")[1];\r\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\r\n    }\r\n    if(event._def.extendedProps.defId != undefined){\r\n      if (!def[eventInfo.event._def.extendedProps.defId]) {\r\n        console.log(\"Hii\")\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    }else{\r\n      if (!def[eventInfo.event._def.defId]) {\r\n        console.log(\"Byee\")\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    }\r\n    if(dragDef && eventInfo.event._def.extendedProps.defId == dragDef){\r\n      console.log(\"event Dragging\");\r\n      setRenderTime(eventInfo.timeText);\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <div className={`fullcalendar-main-container`}>\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcalendar-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\r\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\r\n\r\n          <div\r\n            className=\"fullcalendar-delete-btn\"\r\n            onClick={() => handleEventClick(eventInfo)}\r\n          >\r\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <input\r\n          type=\"text\"\r\n          className=\" schedule-name-input-feild form-control input-default \"\r\n          placeholder=\"Schedule Name\"\r\n          value={sqName}\r\n          onChange={(e) => setSqName(e.target.value)}\r\n          required\r\n        />\r\n        <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              className=\"mr-2\"\r\n              variant=\"info add-screen-btn\"\r\n              onClick={(e) => handleSubmit(e)}\r\n            >\r\n              Update Sequence\r\n            </Button>\r\n          </div>\r\n        {/* {renderTime && (\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              className=\"mr-2\"\r\n              variant=\"info add-screen-btn\"\r\n              onClick={(e) => handleSubmit(e)}\r\n            >\r\n              Save Sequence\r\n            </Button>\r\n          </div>\r\n        )} */}\r\n      </div>\r\n\r\n      <div>\r\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ height: \"100%\" }}\r\n            id=\"external-events\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {allComposition &&\r\n                allComposition.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\r\n                      title={composition.name}\r\n                      sourceId={composition._id}\r\n                      // data-color={\"yellow\"}\r\n                      data-custom={`${BASE_URL}${content.url}`}\r\n                      style={{\r\n                        backgroundColor: \"#fff\",\r\n                        // borderColor: \"blue\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      // id={composition._id}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          // onClick={() => {\r\n                          //     setSelected(composition);\r\n                          //     setNewTagModal(true);\r\n                          // }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n\r\n        <div style={{ float: \"left\", width: \"50%\" }}>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={false}\r\n            initialView=\"timeGridDay\"\r\n            slotDuration=\"00:10:00\"\r\n            slotLabelInterval={{ hours: 1 }}\r\n            allDaySlot={false}\r\n            eventTimeFormat={timeFormet}\r\n            editable={true}\r\n            selectable={false}\r\n            selectMirror={false}\r\n            dayMaxEvents={false}\r\n            droppable={true}\r\n            eventReceive={handleEventReceive}\r\n            slotEventOverlap={false}\r\n            eventOverlap={false}\r\n            eventContent={renderEventContent}\r\n            contentHeight=\"700px\"\r\n            events={events}\r\n            eventResize={eventFunction}\r\n            eventDragStart={eventDragStartFunc}\r\n            eventDragStop={eventDropStopFunc}\r\n            eventDrop={eventDropFunc}\r\n          ></FullCalendar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DesignMonthSchedule.js",["770","771","772","773","774","775","776","777","778","779"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SecondMonth.js",["780"],"import React, { useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function SecondMonth() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   console.log(events, \"events ssssssss\");\r\n//   const externalEvent = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n//   ];\r\n\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   console.log(selectedEvent, \"lllllllloooooo\");\r\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     // dateInfo.event = selectedEvent;\r\n//     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n\r\n//     // console.log(selectedDateValuea, \"selectedDateValuea id\")\r\n//     const selectedDateValue = dateInfo.date.valueOf();\r\n//     console.log(dateInfo.event.id, \"dateInfo -> dateInfo.kkk\");\r\n\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       console.log(filteredEvents, \"iiiiiii\");\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const selectedDateValue = dateInfo.date.valueOf();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//     const isEventSelected = selectedEvent;\r\n\r\n//     if (isEventSelected) {\r\n//       const checkboxKey = dateInfo.date.toISOString();\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"containe\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {externalEvent.map((event, i) => (\r\n//             <li\r\n//               key={i}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>{info.event.title}</div>\r\n//               </div>\r\n//             );\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default function SecondMonth() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   const externalEvent = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n//   ];\r\n\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n//   const [isEventSelected, setIsEventSelected] = useState(false);\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start !== dateInfo.date.toISOString()\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//     setSelectedCheckboxes({});\r\n//     setIsEventSelected(true); // Set isEventSelected to true\r\n//   };\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start !== dateInfo.date.toISOString()\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date.toISOString(),\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n//   // ...existing code...\r\n\r\n//   //\r\n\r\n//   const handleWeekCellChange = (dayInfo) => {\r\n//     const { date } = dayInfo;\r\n//     const selectedDay = new Date(date);\r\n//     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n//     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//       ...prevSelectedCheckboxes,\r\n//       [checkboxKey]: true,\r\n//     }));\r\n\r\n//     // Add event to the selected day (Sunday)\r\n//     const eventToAdd = {\r\n//       id: selectedEvent.id,\r\n//       title: selectedEvent.title,\r\n//       start: selectedDay.toISOString().split(\"T\")[0],\r\n//     };\r\n//     setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n//   };\r\n\r\n//   const renderDayHeader = (dayInfo) => {\r\n//     const { date } = dayInfo;\r\n//     const checkboxKey = date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isEventSelected) {\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isChecked}\r\n//             onChange={() => handleWeekCellChange(dayInfo)}\r\n//           />\r\n//           {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return (\r\n//         <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//     const isEventSelected = selectedEvent;\r\n\r\n//     if (isEventSelected) {\r\n//       const checkboxKey = dateInfo.date.toISOString();\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"fullcalendar-box\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {externalEvent.map((event, i) => (\r\n//             <li\r\n//               key={i}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayHeaderContent={renderDayHeader}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => (\r\n//             <div>\r\n//               <div>{info.event.title}</div>\r\n//             </div>\r\n//           )}\r\n//           headerToolbar={{\r\n//             start: \"title\",\r\n//             center: \"selectWeekButton\",\r\n//             end: \"today prev,next\",\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n// month day logic\r\nexport default function SecondMonth() {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [events, setEvents] = useState([]);\r\n  const externalEvent = [\r\n    { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n    { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n    { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n    { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n  ];\r\n\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n  const [isEventSelected, setIsEventSelected] = useState(false);\r\n\r\n  //   function handleDateCellChange(dateInfo) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n  //     if (isChecked) {\r\n  //       // Unselecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n\r\n  //       const filteredEvents = events.filter(\r\n  //         (event) => event.start !== dateInfo.date.toISOString()\r\n  //       );\r\n\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //     } else {\r\n  //       // Selecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       const event = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, event]);\r\n  //     }\r\n  //   }\r\n\r\n  const handleEventClick = (event) => {\r\n    setSelectedEvent(event);\r\n    setSelectedDate(null); // Reset selected date\r\n    setSelectedCheckboxes({});\r\n    setIsEventSelected(true); // Set isEventSelected to true\r\n  };\r\n\r\n  //   function handleDateCellChange(dateInfo) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n  //     if (isChecked) {\r\n  //       // Unselecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n\r\n  //       const filteredEvents = events.filter(\r\n  //         (event) => event.start !== dateInfo.date.toISOString()\r\n  //       );\r\n\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //     } else {\r\n  //       // Selecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       const event = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date.toISOString(),\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, event]);\r\n  //     }\r\n  //   }\r\n\r\n  function handleDateCellChange(dateInfo) {\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n    if (isChecked) {\r\n      // Unselecting the checkbox\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n        delete updatedCheckboxes[checkboxKey];\r\n        return updatedCheckboxes;\r\n      });\r\n\r\n      const filteredEvents = events.filter(\r\n        (event) => event.start !== dateInfo.date.toISOString()\r\n      );\r\n\r\n      setSelectedEvent(null);\r\n      setSelectedDate(null);\r\n      setEvents(filteredEvents);\r\n    } else {\r\n      // Selecting the checkbox\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n        [checkboxKey]: true,\r\n      }));\r\n\r\n      const existingEvent = events.find(\r\n        (event) => event.start === dateInfo.date.toISOString()\r\n      );\r\n\r\n      if (!existingEvent) {\r\n        const event = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: dateInfo.date.toISOString(),\r\n        };\r\n        setEvents((prevEvents) => [...prevEvents, event]);\r\n      }\r\n    }\r\n  }\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(date.getDate());\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n  //     console.log(dates, \"datesssss\");\r\n  //     const { date } = dayInfo;\r\n  //     const selectedDay = new Date(date);\r\n  //     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //       ...prevSelectedCheckboxes,\r\n  //       [checkboxKey]: true,\r\n  //     }));\r\n\r\n  //     // Add event to the selected day (Sunday)\r\n  //     // const eventToAdd = {\r\n  //     //   id: selectedEvent.id,\r\n  //     //   title: selectedEvent.title,\r\n  //     //   start: selectedDay.toISOString().split(\"T\")[0],\r\n  //     // };\r\n  //     // setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //   };\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(date.getDate());\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n\r\n  //     dates.forEach((date) => {\r\n  //       const selectedDay = new Date(dayInfo.date);\r\n  //       selectedDay.setDate(date);\r\n  //       const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       // Add event to the selected day\r\n  //       const eventToAdd = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: selectedDay.toISOString().split(\"T\")[0],\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //     });\r\n  //   };\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(new Date(date)); // Push a new Date object to the array\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n\r\n  //     dates.forEach((date) => {\r\n  //       const checkboxKey = date.toISOString().split(\"T\")[0];\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       // Check if the event already exists for the selected date\r\n  //       const existingEvent = events.find(\r\n  //         (event) => event.start === date.toISOString().split(\"T\")[0]\r\n  //       );\r\n\r\n  //       // Add event to the selected day if it doesn't already exist\r\n  //       if (!existingEvent) {\r\n  //         const eventToAdd = {\r\n  //           id: selectedEvent.id,\r\n  //           title: selectedEvent.title,\r\n  //           start: date.toISOString().split(\"T\")[0],\r\n  //         };\r\n  //         setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //       }\r\n  //     });\r\n  //   };\r\n\r\n  const handleWeekCellChange = (year, month, dayOfWeek) => {\r\n    function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n      const dates = [];\r\n      const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n      const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n      while (date.getMonth() === month) {\r\n        if (date.getDay() === targetDay) {\r\n          dates.push(new Date(date)); // Push a new Date object to the array\r\n        }\r\n        date.setDate(date.getDate() + 1);\r\n      }\r\n      return dates;\r\n    }\r\n\r\n    // const dates = getDatesForDayOfWeek(\r\n    //   new Date(dayInfo.date).getFullYear(),\r\n    //   new Date(dayInfo.date).getMonth(),\r\n    //   new Date(dayInfo.date).getDay()\r\n    // );\r\n\r\n    const dates = getDatesForDayOfWeek(year, month, dayOfWeek);\r\n\r\n    dates.forEach((date) => {\r\n      console.log(date, \"kkkkkk\");\r\n\r\n      // const checkboxKey = inputdate.replace(/\\//g, \"-\");\r\n      const checkboxKey = date;\r\n\r\n      console.log(checkboxKey, \"unitqkjn\");\r\n\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n        ...prevSelectedCheckboxes,\r\n        [checkboxKey]: true,\r\n      }));\r\n      console.log(selectedCheckboxes, \"sgvyhjmffgbhnj\");\r\n\r\n      // Check if the event already exists for the selected date\r\n      const existingEvent = events.find(\r\n        (event) => event.start === date.toISOString().split(\"T\")[0]\r\n      );\r\n\r\n      if (!existingEvent) {\r\n        // Add event to the selected date\r\n        const eventToAdd = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: date.toISOString().split(\"T\")[0],\r\n        };\r\n        setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n      }\r\n    });\r\n  };\r\n\r\n  function getMonthFromString(mon) {\r\n    return new Date(Date.parse(mon + \" 1, 2012\")).getMonth() + 1;\r\n  }\r\n\r\n  const renderDayHeader = (dayInfo) => {\r\n    console.log(dayInfo, \"renderDayHeader console\");\r\n    const { date } = dayInfo;\r\n    const checkboxKey = date.toISOString();\r\n    const isChecked = selectedCheckboxes[checkboxKey];\r\n    console.log(isChecked, \"kkkk\");\r\n\r\n    if (isEventSelected) {\r\n      return (\r\n        <div>\r\n          <input\r\n            className=\"day-checkbox\"\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isChecked}\r\n            onChange={() => {\r\n              const monthYrStr = document.querySelector(\"#fc-dom-2\").innerHTML;\r\n              const monthYrArr = monthYrStr.split(\" \");\r\n              console.log(\"monthYrArr #696\", monthYrArr);\r\n              console.log(\r\n                monthYrArr[1],\r\n                getMonthFromString(monthYrArr[0]),\r\n                date.getDay()\r\n              );\r\n            }}\r\n          />\r\n          {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n    const isEventSelected = selectedEvent;\r\n\r\n    if (isEventSelected) {\r\n      const checkboxKey = dateInfo.date.toISOString();\r\n      return (\r\n        <div>\r\n          <input\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n            onChange={() => handleDateCellChange(dateInfo)}\r\n          />\r\n          {dateInfo.dayNumberText}\r\n        </div>\r\n      );\r\n    }\r\n    return dateInfo.dayNumberText;\r\n  };\r\n\r\n  return (\r\n    <div className=\"fullcalendar-box\">\r\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n        <h2>Event List</h2>\r\n        <ul>\r\n          {externalEvent.map((event, i) => (\r\n            <li\r\n              key={i}\r\n              onClick={() => handleEventClick(event)}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                fontWeight:\r\n                  selectedEvent && selectedEvent.id === event.id\r\n                    ? \"bold\"\r\n                    : \"normal\",\r\n              }}\r\n            >\r\n              {event.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          selectable={true}\r\n          events={events}\r\n          dayHeaderContent={renderDayHeader}\r\n          dayCellContent={renderDateCell}\r\n          eventContent={(info) => (\r\n            <div>\r\n              <div>{info.event.title}</div>\r\n            </div>\r\n          )}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"selectWeekButton\",\r\n            end: \"today prev,next\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDay.js",["781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  BASE_URL,\r\n  getAllCompositionSWR,\r\n  getAllMedia,\r\n  saveSequence,\r\n  getAllDaySequence,\r\n} from \"../../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport useSWR from \"swr\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function TestDay() {\r\n  const [events, setEvents] = useState([]);\r\n  const [def, setDef] = useState([]);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [renderTime, setRenderTime] = useState(\"\");\r\n  const history = useHistory();\r\n  const { id, schedulename } = useParams();\r\n  const [sqName, setSqName] = useState(\"\");\r\n  const [dragDef, setDragDef] = useState(null);\r\n\r\n  const { data: allComposition, mutate } = useSWR(\r\n    \"/vendor/layouts/compositions\",\r\n    getAllCompositionSWR\r\n  );\r\n\r\n  let timeFormet = {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    hour12: false,\r\n  };\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let sourceId = eventEl.getAttribute(\"sourceId\");\r\n        let publicId = eventEl.getAttribute(\"publicId\");\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          sourceId,\r\n          publicId,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  function eventFunction(info) {\r\n    console.log(\"Sdsd\");\r\n    //const newArray = events;\r\n    const id = info.el.fcSeg.eventRange.def.sourceId;\r\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\r\n    let newArr = events.map((item, i) => {\r\n      if (item.defId == defId) {\r\n        if(item.startTime && item.endTime){\r\n         // console.log(\"time\",info.el.innerText.split(\"\\n\\n\")[1])\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\r\n            ['startTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\r\n            ['endTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1]\r\n          };\r\n        }else{\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1]\r\n          };\r\n        }\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n   // console.log(\"resize\",newArr)\r\n    setEvents(newArr);\r\n  }\r\n\r\n  // const eventFunction = (info) => {\r\n  //   const newArray = events;\r\n  //   const id = info.el.fcSeg.eventRange.def.sourceId;\r\n  //   const defId = info.event._def.defId;\r\n  //   console.log(\"Resizing\",id, defId, events, info);\r\n  //   const newArr = events.map((item, i) => {\r\n  //     if (item.defId == defId) {\r\n  //       return {\r\n  //         ...item,\r\n  //         [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\r\n  //         [\"startTime\"]: info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\r\n  //         [\"endTime\"]: info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1],\r\n  //       };\r\n  //     } else {\r\n  //       return item;\r\n  //     }\r\n  //   });\r\n  //   console.log(\"newArr\", newArr)\r\n  //   setEvents(newArr);\r\n  // };\r\n  // handle event receive\r\n\r\n  const handleEventReceive = (eventInfo) => {\r\n    console.log(\"handleEventR\", renderTime);\r\n    const id = eventInfo.event._def.sourceId;\r\n    const [startTime, endTime] = renderTime.split(\" - \");\r\n    const formattedStartTime = startTime.padStart(5, \"0\");\r\n    const formattedEndTime =\r\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\r\n    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\r\n    const checkedItem = events.find((item) => {\r\n      return item.id == eventInfo.event._def.sourceId;\r\n    });\r\n    if (checkedItem) {\r\n      const newArr = events.map((item, i) => {\r\n        console.log(\"Foundaaaaa\", item.id, dragDef, item.timing, renderTime);\r\n        if (item.id == dragDef && item.timing !== renderTime) {\r\n          console.log(\"Found\", item.id, dragDef, item.timing, renderTime);\r\n          return {\r\n            ...item,\r\n            [\"timing\"]: renderTime,\r\n            [\"startTime\"]: renderTime.split(\" - \")[0],\r\n            [\"endTime\"]: renderTime.split(\" - \")[1],\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n      setEvents(newArr);\r\n    } else {\r\n      const newEvent = {\r\n        id: id,\r\n        timing: timeRange,\r\n        defId: eventInfo.event._def.defId,\r\n      };\r\n      setEvents((events) => [...events, newEvent]);\r\n      setDef({ ...def, [eventInfo.event._def.defId]: true });\r\n    }\r\n\r\n    setDragDef(null);\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const defId =\r\n      info.event._def.extendedProps.defId != undefined\r\n        ? info.event._def.extendedProps.defId\r\n        : info.event._def.defId;\r\n    setEvents((current) => current.filter((event) => event.defId !== defId));\r\n    info.event.remove();\r\n  };\r\n\r\n  const eventDragStartFunc = (info) => {\r\n    console.log(\"Event Start\", info, info.event._def.sourceId);\r\n    setDragDef(info.event._def.sourceId);\r\n  };\r\n\r\n  const eventDropStopFunc = (info) => {\r\n    console.log(\"dfghjrtyu\", info);\r\n  };\r\n\r\n  const eventDropFunc = (info) => {\r\n    console.log(\"Dropping Func\", info, dragDef, events);\r\n    let newArr = events.map((item, i) => {\r\n      if (item.id == info.event._def.sourceId) {\r\n        if (item.startTime && item.endTime) {\r\n          // console.log(\"time\",info.el.innerText.split(\"\\n\\n\")[1])\r\n          return {\r\n            ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\r\n            [\"startTime\"]: info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\r\n            [\"endTime\"]: info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1],\r\n          };\r\n        } else {\r\n          return { ...item, [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1] };\r\n        }\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setEvents(newArr);\r\n  };\r\n\r\n  const renderEventContent = (eventInfo) => {\r\n    console.log(\"eventInfo\", eventInfo);\r\n    const { event } = eventInfo;\r\n    const { title } = event;\r\n    const checkTime = eventInfo.timeText.split(\" - \");\r\n    if (!checkTime[1]) {\r\n      const secondTime =\r\n        parseInt(checkTime[0].split(\":\")[0]) +\r\n        1 +\r\n        \":\" +\r\n        checkTime[0].split(\":\")[1];\r\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\r\n    }\r\n    if (event._def.extendedProps.defId != undefined) {\r\n      if (!def[eventInfo.event._def.extendedProps.defId]) {\r\n        console.log(\"Hii\");\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    } else {\r\n      if (!def[eventInfo.event._def.defId]) {\r\n        console.log(\"Byee\");\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    }\r\n    console.log(dragDef && eventInfo.event._def.sourceId);\r\n    // if(dragDef && eventInfo.event._def.sourceId == dragDef){\r\n    //   console.log(\"event Dragging\");\r\n    //   setRenderTime(eventInfo.timeText);\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          className={`fullcalendar-main-container`}\r\n          style={{ width: \"100%\" }}\r\n        >\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcalendar-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\r\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\r\n\r\n          <div\r\n            className=\"fullcalendar-delete-btn\"\r\n            onClick={() => handleEventClick(eventInfo)}\r\n          >\r\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n  const checkTime = (time) => {\r\n    const timeSplit = time.split(\":\");\r\n    return String(timeSplit[0]).padStart(2, \"0\") + \":\" + timeSplit[1];\r\n  };\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const scheduleId = id;\r\n    const timings = events.map((item) => {\r\n      return {\r\n        composition: item.id,\r\n        startTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          checkTime(item.timing.split(\" - \")[0]) +\r\n          \":00Z\",\r\n        endTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          checkTime(item.timing.split(\" - \")[1]) +\r\n          \":00Z\",\r\n      };\r\n    });\r\n    if (!sqName) {\r\n      toast.error(\"Please enter sequence name\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    if (!id) {\r\n      toast.error(\"something went wrong\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    const payload = {\r\n      scheduleId: scheduleId,\r\n      name: sqName,\r\n      timings,\r\n    };\r\n    await saveSequence(payload).then((res) => {\r\n      console.log(res, \"res save schedule\");\r\n      if (res.data.statusCode === 200) {\r\n        history.push(`/design-month-schedule/${id}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          <input\r\n            type=\"text\"\r\n            className=\" schedule-name-input-feild form-control input-default \"\r\n            placeholder=\"Schedule Name\"\r\n            value={sqName}\r\n            onChange={(e) => setSqName(e.target.value)}\r\n            required\r\n          />\r\n          {/* {renderTime && ( */}\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              className=\"mr-2\"\r\n              type=\"submit\"\r\n              variant=\"info add-screen-btn\"\r\n              // onClick={(e) => handleSubmit(e)}\r\n            >\r\n              Save Sequence\r\n            </Button>\r\n          </div>\r\n          {/* )} */}\r\n        </div>\r\n      </form>\r\n\r\n      <div>\r\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ height: \"100%\" }}\r\n            id=\"external-events\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {allComposition &&\r\n                allComposition.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\r\n                      title={composition.name}\r\n                      sourceId={composition._id}\r\n                      // data-color={\"yellow\"}\r\n                      data-custom={`${BASE_URL}${content.url}`}\r\n                      style={{\r\n                        backgroundColor: \"#fff\",\r\n                        // borderColor: \"blue\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      // id={composition._id}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          // onClick={() => {\r\n                          //     setSelected(composition);\r\n                          //     setNewTagModal(true);\r\n                          // }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n\r\n        <div style={{ float: \"left\", width: \"50%\" }}>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={false}\r\n            initialView=\"timeGridDay\"\r\n            slotDuration=\"00:10:00\"\r\n            fixedMirrorParent={true}\r\n            slotEventOverlap={false}\r\n            slotLabelInterval={{ hours: 1 }}\r\n            allDaySlot={false}\r\n            eventTimeFormat={timeFormet}\r\n            editable={true}\r\n            selectable={false}\r\n            selectMirror={false}\r\n            dayMaxEvents={false}\r\n            droppable={true}\r\n            eventReceive={handleEventReceive}\r\n            eventAdd={(arg) => {\r\n              console.log(\"add\", arg);\r\n            }}\r\n            eventOverlap={false}\r\n            eventContent={renderEventContent}\r\n            contentHeight=\"700px\"\r\n            events={events}\r\n            eventResize={eventFunction}\r\n            eventDragStart={eventDragStartFunc}\r\n            eventDragStop={eventDropStopFunc}\r\n            eventDrop={eventDropFunc}\r\n          ></FullCalendar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDaySchudele.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DaySchedule.js",["811","812","813","814","815","816","817","818"],"// import React from 'react'\r\n// import { useParams, useHistory } from \"react-router-dom\";\r\n\r\n// export default function DaySchedule() {\r\n//     const history = useHistory();\r\n//     const { id } = useParams();\r\n//     console.log(id, \"DaySchedule page id\")\r\n//     return (\r\n//         <div>DaySchedule</div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\r\nimport nameAvatar from \"../../../img/assets-avatar-img.png\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { getAllMedia } from \"../../../utils/api\";\r\nimport useSWR from 'swr'\r\n\r\nimport {\r\n    getDatetimeIn12Hours,\r\n    humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\r\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\r\n\r\nconst DaySchedule = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const { data: allMedia, mutate } = useSWR('/vendor/display/media', getAllMedia);\r\n    console.log(allMedia, \"day schedule\")\r\n\r\n    const [showNewTagModal, setNewTagModal] = useState(false);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const [selectedMedia, setSelectedMedia] = useState(\"\");\r\n    const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n\r\n    // use effect\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setDeleteModal(false)\r\n        await deleteMedia(selectedMedia._id)\r\n        mutate()\r\n    };\r\n\r\n    const handlePublishcOpen = (media) => {\r\n        setShowPublishPopUp(media);\r\n    }\r\n    // const parseMeta = (media) => {\r\n    //     const meta = JSON.parse(media.properties)\r\n    //     return (\r\n    //         <span className=\"td-content\">\r\n    //             {media?.type === \"image\" && <strong>{meta.height} x  {meta.width}</strong>}\r\n    //             {media?.type === \"video\" && <strong>{meta.length.toFixed(0) / 60} Sec</strong>}\r\n    //             <span>{meta.size} MB</span>\r\n    //         </span>\r\n    //     )\r\n    // }\r\n\r\n    const parseMeta = (media) => {\r\n        const meta = JSON.parse(media.properties);\r\n        return (\r\n            <span className=\"td-content\">\r\n                {media?.type === \"image\" && <strong>{meta?.height} x {meta?.width}</strong>}\r\n                {media?.type === \"video\" && meta?.length && (\r\n                    <strong>{(meta.length / 60).toFixed(0)} Sec</strong>\r\n                )}\r\n                {meta?.size && <span>{meta.size} MB</span>}\r\n            </span>\r\n        );\r\n    };\r\n\r\n\r\n    const videoMetaDuration = (media) => {\r\n        const properties = JSON.parse(media?.properties);\r\n        if (properties && properties.length) {\r\n            return (properties.length.toFixed(0) / 60).toFixed(0);\r\n        }\r\n        return null;\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\" d-flex\">\r\n\r\n\r\n                <div className=\"col-7\">\r\n\r\n\r\n                    {allMedia && allMedia.length !== 0 ? (\r\n                        <Table responsive className=\"custom-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Uploaded Date</th>\r\n                                    <th>Properties</th>\r\n                                    <th>Tags</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allMedia.map((media) => {\r\n                                    return (\r\n                                        <tr key={media._id}>\r\n                                            <td>\r\n                                                <span className=\"td-content d-flex name-td-content\">\r\n                                                    <span className={`name-img mr-2  ${media.type === \"video\" && \"videotableName\"}`}>\r\n                                                        {media.type === \"image\" && <img\r\n                                                            className=\"media-img img-fluid\"\r\n                                                            src={`${BASE_URL}${media.title}`}\r\n                                                            alt=\"media-img\"\r\n                                                        />}\r\n                                                        {media.type === \"video\" && videoMetaDuration(media)}\r\n                                                    </span>\r\n                                                    <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                                                        <strong>{media.title.split(\"/\")[media.title.split(\"/\").length - 1]}</strong>\r\n                                                        <span>{media.createdBy.name}</span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            <td>{media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}</td>\r\n                                            <td>\r\n                                                <span className=\"td-content\">\r\n                                                    <strong>\r\n                                                        {humanReadableFormattedDateString(media.createdAt)}\r\n                                                    </strong>\r\n                                                    <span>{getDatetimeIn12Hours(media.createdAt)}</span>\r\n                                                </span>\r\n                                            </td>\r\n                                            <td>\r\n                                                {parseMeta(media)}\r\n                                            </td>\r\n                                            <td>\r\n                                                {media.tags.map((tag) => {\r\n                                                    return <span className=\"my-phone-tag text-truncate ml-1\">{tag}</span>;\r\n                                                })}\r\n                                                <span\r\n                                                    className=\"down-arrow\"\r\n                                                    onClick={() => {\r\n                                                        setSelectedMedia(media)\r\n                                                        setNewTagModal(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <img\r\n                                                        className=\"down-arrow-img img-fluid\"\r\n                                                        src={downArrow}\r\n                                                        alt=\"arrow\"\r\n                                                    />\r\n                                                </span>\r\n                                            </td>\r\n\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    ) : (\r\n                        <div className=\"empty-media text-center\">\r\n                            <div className=\"empty-media-img mx-auto\">\r\n                                <img\r\n                                    className=\"media-img img-fluid\"\r\n                                    src={emptyMediaImg}\r\n                                    alt=\"media-img\"\r\n                                />\r\n                            </div>\r\n                            <h3>Add Media</h3>\r\n                            <p>\r\n                                Upload your favourite images and videos from the local storage\r\n                                <br /> of your device\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n\r\n                    {showNewTagModal && (\r\n                        <AddNewTagModal\r\n                            selected={selectedMedia}\r\n                            setNewTagModal={setNewTagModal}\r\n\r\n                        />\r\n                    )}\r\n                    {showPublishPopUp && (\r\n                        <PublishMediaModal\r\n                            selected={showPublishPopUp}\r\n                            setShowPublishPopUp={setShowPublishPopUp}\r\n                            type=\"media\"\r\n                        />\r\n                    )}\r\n                    {deleteModal && <DeleteConfirmation setDeleteModal={setDeleteModal} callbackFunction={handleDelete} text=\"Are you sure you want to delete?\" yes={\"Yes Deactivate\"} />}\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h4>jjjj</h4>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nexport default DaySchedule;\r\n\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\index.jsx",["819","820","821"],"E:\\projects\\trendy-content-display-frontend\\src\\utils\\UtilsService.js",["822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\ScrollToTop.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\utils\\fetchClient.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\PeopleSpace.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\Createtemplate.jsx",["934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport TemplateAddContent from \"../../modals/TemplateAddContent\";\r\nimport { toast } from \"react-toastify\";\r\nimport userimg from \"../../../img/Ellipse 151.svg\";\r\nimport edit from \"../../../img/edit-btn.png\";\r\nimport deleteicon from \"../../../img/delete-btn.png\";\r\nimport EditTemplate from \"../../modals/EditTemplate\";\r\nimport settingicon from \"../../../img/setting-5.svg\";\r\nimport {\r\n  updateApps,\r\n  addApps,\r\n  BASE_URL,\r\n  getAllMediaDetail,\r\n} from \"../../../utils/api\";\r\nimport SelectMedia from \"../../modals/SelecteMedia\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PeopleSpacePreview from \"./PeopleSpacePreview\";\r\n\r\nexport default function Createtemplate({ history, actionType, mediaId }) {\r\n  let params = new URLSearchParams(history.location.search);\r\n  const { id } = useParams();\r\n  console.log(\"params\", id);\r\n  let tempType = params.get(\"type\");\r\n  console.log(\"temp\", tempType);\r\n  const [showAddContent, setShowAddContent] = useState(false);\r\n  const [showEditTemplate, setShowEditTemplate] = useState(false);\r\n  const [slides, setSlides] = useState(\r\n    (tempType && tempType == \"temp1\") || tempType == \"temp4\"\r\n      ? [\r\n          {\r\n            name: \"Jennifer Winget1\",\r\n            message:\r\n              \"We are proud to have someone like you We are proud to have someone like you.\",\r\n          },\r\n          {\r\n            name: \"Jennifer Winget2\",\r\n            message:\r\n              \"We are proud to have someone like you We are proud to have someone like you.\",\r\n          },\r\n          {\r\n            name: \"Jennifer Winget3\",\r\n            message:\r\n              \"We are proud to have someone like you We are proud to have someone like you.\",\r\n          },\r\n        ]\r\n      : (tempType && tempType == \"temp2\") ||\r\n        tempType == \"temp3\" ||\r\n        tempType == \"temp5\" ||\r\n        tempType == \"temp6\"\r\n      ? [\r\n          {\r\n            name: \"Jennifer Winget3\",\r\n            message:\r\n              \"We are proud to have someone like you We are proud to have someone like you.\",\r\n          },\r\n        ]\r\n      : []\r\n  );\r\n  const [editItem, setEditItem] = useState(null);\r\n  const [editImage, setEditImage] = useState(null);\r\n  const [appName, setAppName] = useState(null);\r\n  const [appTitle, setAppTitle] = useState(null);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [imageModalShow, setImageModalShow] = useState(false);\r\n  const [slideIndex, setSlideIndex] = useState(0);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [settingData, setSettingData] = useState(\r\n    tempType\r\n      ? tempType == \"temp1\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#FAACC5\",\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#AA144C\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#AA144C\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#AA144C\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : tempType == \"temp2\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#78e176\",\r\n\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#076923\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#076923\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#076923\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : tempType == \"temp3\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#78e176b8\",\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#2512AD\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#2512AD\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#2512AD\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : tempType == \"temp4\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#9443b1b8\",\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#2512AD\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#2512AD\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#2512AD\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : tempType == \"temp5\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#ce5e1fc2\",\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#fff\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#fff\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#fff\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : tempType == \"temp6\"\r\n        ? {\r\n            bgOpacity: 100,\r\n            bgColor: \"#bd2dbac2\",\r\n            duration: \"20\",\r\n            isTitle: true,\r\n            messageColor: \"#AA144C\",\r\n            messageStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n            nameColor: \"#AA144C\",\r\n            nameStyle: { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n            titleColor: \"#AA144C\",\r\n            titleStyle: {\r\n              value: \"'Fira Sans', sans-serif\",\r\n              label: \"Fira Sans\",\r\n            },\r\n          }\r\n        : \"\"\r\n      : {\r\n          bgOpacity: 100,\r\n          bgStyle: { value: \"bree-sarif\", label: \"Bree Sarif\" },\r\n          duration: \"20\",\r\n          isTitle: true,\r\n          messageColor: \"#000000\",\r\n          messageStyle: { value: \"bree-sarif\", label: \"Bree Sarif\" },\r\n          nameColor: \"#000000\",\r\n          nameStyle: { value: \"bree-sarif\", label: \"Bree Sarif\" },\r\n          titleColor: \"#f20d0d\",\r\n          titleStyle: { value: \"permanent\", label: \"Permanent Maker\" },\r\n        }\r\n  );\r\n  const callMediaDetailApi = async (id) => {\r\n    const list = await getAllMediaDetail(id);\r\n    arrangMediaDetail(list);\r\n  };\r\n\r\n  const arrangMediaDetail = (list) => {\r\n    if (list) {\r\n      const prp = JSON.parse(list.appData);\r\n      console.log(prp, list);\r\n      setAppName(prp.url);\r\n      setAppTitle(prp.appTitle);\r\n      setSlides(prp.slides);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"slide\", slides);\r\n    if (id) {\r\n      //callMediaDetailApi(id)\r\n    }\r\n    setIsRefresh(false);\r\n  }, [editItem, slides, isRefresh]);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      callMediaDetailApi(id);\r\n    }\r\n  }, [id]);\r\n\r\n  const handleEdit = (e, item, index) => {\r\n    e.preventDefault();\r\n    item.id = index;\r\n    setEditItem(item);\r\n    setShowAddContent(true);\r\n  };\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"slide\", slides);\r\n    if (appName == \"\" || appName == null) {\r\n      return toast.error(\"App Name is Required\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    } else if (appTitle == \"\" || appTitle == null) {\r\n      return toast.error(\"App Title is Required\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    } else if (slides.length == 0) {\r\n      return toast.error(\"Please add some content...\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    } else {\r\n      const dataString = {\r\n        url: appName,\r\n        appTitle,\r\n        slides,\r\n        tempType,\r\n        settingData,\r\n      };\r\n      console.log(dataString);\r\n\r\n      if (id) {\r\n        await updateApps({\r\n          name: appName,\r\n          appId: id,\r\n          data: JSON.stringify(dataString),\r\n        }).then((res) => {\r\n          console.log(\"response\", res);\r\n          if (res && res.data.message === \"Success\")\r\n          {\r\n            toast.success(\"App has been updated successfully !!!\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: \"light\",\r\n            });\r\n            history.push(`/create-template/` + id + `?type=` + tempType);\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        await addApps({\r\n          name: appName,\r\n          type: \"people-apps\",\r\n          data: JSON.stringify(dataString),\r\n        }).then((res) => {\r\n          console.log(\"response\", res);\r\n          if (res && res.data.message === \"Success\")\r\n          {\r\n            toast.success(\"App has been created successfully !!!\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: \"light\",\r\n            });\r\n            history.push(\r\n              `/create-template/` + res.data.data._id + `?type=` + tempType\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const addSlide = (e, i) => {\r\n    e.preventDefault();\r\n    setEditItem(null);\r\n    setSlideIndex(i);\r\n    setShowAddContent(true);\r\n  };\r\n\r\n  const handleImage = (e, item, index) => {\r\n    e.preventDefault();\r\n    item.id = index;\r\n    setEditImage(item);\r\n    setImageModalShow(true);\r\n  };\r\n\r\n  const handleDelete = (e, i) => {\r\n    e.preventDefault();\r\n    console.log(\"index\", i);\r\n    const newArra = slides.filter((item, index) => {\r\n      return index !== i;\r\n    });\r\n    setSlides(newArra);\r\n    setIsRefresh(true);\r\n  };\r\n\r\n  //save reference for dragItem and dragOverItem\r\n  const dragItem = React.useRef(null);\r\n  const dragOverItem = React.useRef(null);\r\n\r\n  //const handle drag sorting\r\n  const handleSort = () => {\r\n    //duplicate items\r\n    let _fruitItems = [...slides];\r\n\r\n    //remove and save the dragged item content\r\n    const draggedItemContent = _fruitItems.splice(dragItem.current, 1)[0];\r\n\r\n    //switch the position\r\n    _fruitItems.splice(dragOverItem.current, 0, draggedItemContent);\r\n\r\n    //reset the position ref\r\n    dragItem.current = null;\r\n    dragOverItem.current = null;\r\n\r\n    //update the actual array\r\n    setSlides(_fruitItems);\r\n  };\r\n  return (\r\n    <>\r\n      <TemplateAddContent\r\n        setShowUrlApp={() => setShowAddContent(false)}\r\n        show={showAddContent}\r\n        setSlides={setSlides}\r\n        slides={slides}\r\n        action=\"add\"\r\n        editItem={editItem}\r\n        setEditItem={setEditItem}\r\n        slideIndex={slideIndex}\r\n      />\r\n      <SelectMedia\r\n        imageModalShow={imageModalShow}\r\n        setImageModalShow={setImageModalShow}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n        setSlides={setSlides}\r\n        slides={slides}\r\n        action=\"edit\"\r\n        editImage={editImage}\r\n        setEditImage={setEditImage}\r\n      />\r\n      <EditTemplate\r\n        setShowUrlApp={() => setShowEditTemplate(false)}\r\n        show={showEditTemplate}\r\n        settingData={settingData}\r\n        setSettingData={setSettingData}\r\n      />\r\n      {showPreview && (\r\n        <PeopleSpacePreview\r\n          showPreview={showPreview}\r\n          setShowPreview={setShowPreview}\r\n          data={JSON.stringify({\r\n            slides,\r\n            appTitle,\r\n            appName,\r\n            tempType,\r\n            settingData,\r\n          })}\r\n        />\r\n      )}\r\n\r\n      <div className=\"custom-content-heading d-flex flex-wrap flex-row align-items-center justify-content-between mb-5\">\r\n        <h1 className=\"mb-0\">Template</h1>\r\n        <div className=\"d-flex align-items-center\">\r\n          {/* <Button\r\n            className=\"mr-2\"\r\n            variant=\"info add-screen-btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setShowEditTemplate(true);\r\n            }}\r\n            type=\"button\"\r\n          >\r\n            Setting\r\n          </Button> */}\r\n          <div className=\"people-setting mr-3\">\r\n            <img\r\n              src={settingicon}\r\n              // className=\"mr-2\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setShowEditTemplate(true);\r\n              }}\r\n              style={{ height: \"23px\", cursor: \"pointer\" }}\r\n              alt=\"icon\"\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            className=\"mr-2\"\r\n            variant=\"info add-screen-btn\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              setShowPreview(true);\r\n            }}\r\n            type=\"button\"\r\n          >\r\n            Preview\r\n          </Button>\r\n          <Button\r\n            className=\"\"\r\n            variant=\"info add-screen-btn\"\r\n            type=\"button\"\r\n            onClick={(e) => handleCreateApp(e)}\r\n          >\r\n            {id ? \"Update\" : \"Save\"}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex align-items-center gap-2 template-app-name\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <label className=\"mb-0 mr-3\">App Name</label>\r\n          <div>\r\n            <input\r\n              name=\"appName\"\r\n              id=\"appName\"\r\n              onChange={(e) => setAppName(e.target.value)}\r\n              value={appName}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"App Name\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex align-items-center\">\r\n          <label className=\"mb-0 mr-3\">Title</label>\r\n          <input\r\n            name=\"appTitle\"\r\n            id=\"appTitle\"\r\n            onChange={(e) => setAppTitle(e.target.value)}\r\n            value={appTitle}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Title\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {slides &&\r\n        slides.length > 0 &&\r\n        slides.map((item, i) => {\r\n          return (\r\n            <div\r\n              className=\"d-flex align-items-center mt-5 template-card\"\r\n              key={i}\r\n              draggable\r\n              onDragStart={(e) => (dragItem.current = i)}\r\n              onDragEnter={(e) => (dragOverItem.current = i)}\r\n              onDragEnd={handleSort}\r\n              onDragOver={(e) => e.preventDefault()}\r\n            >\r\n              <img\r\n                src={item.image ? BASE_URL + item.image : userimg}\r\n                alt=\"user-image\"\r\n                className=\"mr-3 template-person-image\"\r\n                onClick={(e) => handleImage(e, item, i)}\r\n                style={{ width: \"100px\" }}\r\n              />\r\n              <div className=\"w-100\">\r\n                <h3>{item.name}</h3>\r\n                <div className=\"d-flex align-items-center justify-content-between\">\r\n                  <p className=\"mb-0 pr-5\">{item.message}</p>\r\n                  <div className=\"d-flex align-items-center add-template\">\r\n                    <div\r\n                      className=\"mr-2\"\r\n                      //onClick={() => setShowEditTemplate(true)}\r\n                      onClick={(e) => handleEdit(e, item, i)}\r\n                    >\r\n                      <img src={edit} alt=\"edit\" height=\"15px\" />\r\n                    </div>\r\n                    <div className=\"mr-2\">\r\n                      <img\r\n                        src={deleteicon}\r\n                        alt=\"img\"\r\n                        height=\"15px\"\r\n                        onClick={(e) => handleDelete(e, i)}\r\n                      />\r\n                    </div>\r\n\r\n                    <div\r\n                      className=\"add-btn-template\"\r\n                      style={{ fontSize: \"20px\" }}\r\n                      onClick={(e) => addSlide(e, i)}\r\n                    >\r\n                      +\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      <div className=\"d-flex justify-content-center align-items-center h-100 template-add-content text-center\">\r\n        <div>\r\n          <p className=\"mb-1\">Click on the below button to get started</p>\r\n          <Button\r\n            className=\"btn-block\"\r\n            variant=\"info add-screen-btn\"\r\n            type=\"button\"\r\n            onClick={(e) => addSlide(e, slides.length)}\r\n          >\r\n            + Add Content\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DefComplist.jsx",["952","953","954","955","956","957","958"],"import React, { useState } from \"react\";\r\n\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport moment from \"moment\";\r\n\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\nconst DefComplist = ({\r\n  history,\r\n  permission,\r\n  setIsRefresh,\r\n  data,\r\n  setShowPublishPopUp,\r\n  setSelectedSchdule,\r\n  handleDeleteSchedule,\r\n}) => {\r\n  const [filterData, setFilterData] = useState([]);\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n\r\n  const rows = [];\r\n  if (data && data.length > 0) {\r\n    data.forEach((item) => {\r\n      rows.push({\r\n        id: item._id,\r\n        name: item._id,\r\n        createdAt: humanReadableFormattedDateString(item.createdAt),\r\n        screens: item.screens.length,\r\n        startDate: item.createdAt,\r\n        endDate: item.createdAt,\r\n        tags: item,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  // const renderAction = (params) => {\r\n  //   const {value} = params;\r\n  //   return (\r\n  //     <Dropdown\r\n  //     className=\"dropdown-toggle-menu\"\r\n  //     >\r\n  //     <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n  //         <span className=\"table-menu-icon\">\r\n  //         <img\r\n  //             className=\"menu-img img-fluid\"\r\n  //             src={menuIcon}\r\n  //             alt=\"menu-icon\"\r\n  //         />\r\n  //         </span>\r\n  //     </Dropdown.Toggle>\r\n  //     <Dropdown.Menu>\r\n  //         <Dropdown.Item\r\n  //         href={`/design-month-schedule/${value._id}`}\r\n  //         disabled={permission && !permission.permission.SCHEDULE.edit}\r\n  //         className=\"dropdown-list-item\"\r\n  //         >\r\n  //         <div className=\"d-flex\">\r\n  //             <div className=\"dropdown-list-icon\">\r\n  //             <img\r\n  //                 className=\"dropdown-list-img img-fluid\"\r\n  //                 src={edit}\r\n  //                 alt=\"menu-icon\"\r\n  //             />\r\n  //             </div>\r\n  //             <div className=\"dropdown-menu-list\">\r\n  //             <span className=\"menu-heading\">Edit</span>\r\n  //             <span className=\"menu-description\">\r\n  //                 Get to know more about screen info\r\n  //             </span>\r\n  //             </div>\r\n  //         </div>\r\n  //         </Dropdown.Item>\r\n  //         <Dropdown.Item\r\n  //         onClick={() => {\r\n  //             setShowPublishPopUp(true);\r\n  //             setSelectedSchdule(value)\r\n  //             //setSelectedScreen(screen._id);\r\n  //         }}\r\n  //         //disabled={permission && !permission.permission.SCHEDULE.edit}\r\n  //         className=\"dropdown-list-item\"\r\n  //         >\r\n  //         <div className=\"d-flex\">\r\n  //             <div className=\"dropdown-list-icon\">\r\n  //             <img\r\n  //                 className=\"dropdown-list-img img-fluid\"\r\n  //                 src={edit}\r\n  //                 alt=\"menu-icon\"\r\n  //             />\r\n  //             </div>\r\n  //             <div className=\"dropdown-menu-list\">\r\n  //             <span className=\"menu-heading\">Assign Screen</span>\r\n  //             <span className=\"menu-description\">\r\n  //                 Get to know more about screen info\r\n  //             </span>\r\n  //             </div>\r\n  //         </div>\r\n  //         </Dropdown.Item>\r\n  //         <Dropdown.Item\r\n  //         href=\"#\"\r\n  //         className=\"dropdown-list-item\"\r\n  //         onClick={() => {\r\n  //             handleDeleteSchedule(value._id);\r\n  //             console.log(\"oooo\");\r\n  //         }}\r\n  //         disabled={permission && !permission.permission.SCHEDULE.delete}\r\n  //         >\r\n  //         <div className=\"d-flex\">\r\n  //             <div className=\"dropdown-list-icon\">\r\n  //             <img\r\n  //                 className=\"dropdown-list-img img-fluid\"\r\n  //                 src={deleteIcon}\r\n  //                 alt=\"menu-icon\"\r\n  //             />\r\n  //             </div>\r\n  //             <div className=\"dropdown-menu-list\">\r\n  //             <span className=\"menu-heading\">Delete</span>\r\n  //             <span className=\"menu-description\">\r\n  //                 Get to know more about screen info\r\n  //             </span>\r\n  //             </div>\r\n  //         </div>\r\n  //         </Dropdown.Item>\r\n  //         <Dropdown.Item\r\n  //         href=\"#\"\r\n  //         className=\"dropdown-list-item\"\r\n  //         disabled={permission && !permission.permission.SCHEDULE.view}\r\n  //         onClick={() => {\r\n  //             history.push(`/push/view/${value._id}`);\r\n  //         }}\r\n  //         >\r\n  //         <div className=\"d-flex\">\r\n  //             <div className=\"dropdown-list-icon\">\r\n  //             <img\r\n  //                 className=\"dropdown-list-img img-fluid\"\r\n  //                 src={deleteIcon}\r\n  //                 alt=\"menu-icon\"\r\n  //             />\r\n  //             </div>\r\n  //             <div className=\"dropdown-menu-list\">\r\n  //             <span className=\"menu-heading\">\r\n  //                 View Schedule\r\n  //             </span>\r\n  //             <span className=\"menu-description\">\r\n  //                 Get to know more about screen info\r\n  //             </span>\r\n  //             </div>\r\n  //         </div>\r\n  //         </Dropdown.Item>\r\n  //     </Dropdown.Menu>\r\n  //     </Dropdown>\r\n  //   )\r\n  // }\r\n\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.map((tag) => {\r\n            return (\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {tag}\r\n              </span>\r\n            );\r\n          })}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span\r\n        className=\"td-content\"\r\n        style={{ marginTop: \"20px\", marginBottom: \"20px\" }}\r\n      >\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n        <span>{getDatetimeIn12Hours(value)}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderEndDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n        <span>{moment(value).add(10, \"minutes\").format(\"hh:mm A\")}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"name\", headerName: \"Name\", flex: 1 },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"Created at\",\r\n      flex: 1,\r\n      renderCell: renderDate,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"screens\",\r\n      headerName: \"Assigned Screens\",\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"startDate\",\r\n      headerName: \"Start Date\",\r\n      renderCell: renderDate,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"endDate\",\r\n      headerName: \"End Date\",\r\n      renderCell: renderEndDate,\r\n      flex: 1,\r\n    },\r\n    //   {\r\n    //     field: \"tags\",\r\n    //     headerName: \"Tags\",\r\n    //     renderCell:tagsRender,\r\n    //     flex: 1,\r\n    //   },\r\n    //   {\r\n    //     field: \"action\",\r\n    //     headerName: \"More\",\r\n    //     flex: 1,\r\n    //     renderCell: renderAction,\r\n    //     disableExport: true,\r\n    //   },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n  return (\r\n    <>\r\n      {/* <FilterModal\r\n          showFilterModal={showFilterModal}\r\n          setFilterModal={setFilterModal}\r\n          setFilterData={setFilterData}\r\n          setIsRefresh={setIsRefresh}\r\n          type={[\"tags\"]}\r\n          selectedType={'composition'}\r\n        />\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button> */}\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={data}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n          type={\"schedule\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default DefComplist;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\QuickPlayList.jsx",["959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990"],"import React, { useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport scheduleIcon from \"../../../img/schedule-icon.png\";\r\nimport quickPlayIcon from \"../../../img/quickplay-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/comparison-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n  deleteSchedule,\r\n  getAllSchedule,\r\n  getQuickPlay,\r\n  deleteQuickPlay,\r\n  getDefaultComposition,\r\n  getAllScreens,\r\n  getAllComposition,\r\n  setDefaultComposition,\r\n  BASE_URL,\r\n} from \"../../../utils/api\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport moment from \"moment\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport edit from \"../../../img/edit-composition.png\";\r\nimport TableLoader from \"../../components/TableLoader\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\r\n\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\nconst QuickPlayList = ({\r\n  history,\r\n  permission,\r\n  setIsRefresh,\r\n  data,\r\n  handleDeleteQuickPlay,\r\n}) => {\r\n  const [filterData, setFilterData] = useState([]);\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n\r\n  const rows = [];\r\n  if (data && data.length > 0) {\r\n    data.forEach((item) => {\r\n      rows.push({\r\n        id: item._id,\r\n        name: item.name,\r\n        createdAt: humanReadableFormattedDateString(item.createdAt),\r\n        screens: item.screens.length,\r\n        startDate: item.startTime,\r\n        endDate: item.endTime,\r\n        tags: item,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <Dropdown className=\"dropdown-toggle-menu\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={(e) => {\r\n              handleDeleteQuickPlay(e, value._id);\r\n            }}\r\n            disabled={permission && !permission.permission.QUICKPLAY.delete}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.map((tag) => {\r\n            return (\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {tag}\r\n              </span>\r\n            );\r\n          })}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n        <span>{getDatetimeIn12Hours(value)}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"name\", headerName: \"Name\", flex: 1 },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"Created at\",\r\n      flex: 1,\r\n      renderCell: renderDate,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"screens\",\r\n      headerName: \"Assigned Screens\",\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"startDate\",\r\n      headerName: \"Start Date\",\r\n      renderCell: renderDate,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"endDate\",\r\n      headerName: \"End Date\",\r\n      renderCell: renderDate,\r\n      flex: 1,\r\n    },\r\n    //   {\r\n    //     field: \"tags\",\r\n    //     headerName: \"Tags\",\r\n    //     renderCell:tagsRender,\r\n    //     flex: 1,\r\n    //   },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"More\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      disableColumnMenu: true,\r\n    },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n  return (\r\n    <>\r\n      {/* <FilterModal\r\n          showFilterModal={showFilterModal}\r\n          setFilterModal={setFilterModal}\r\n          setFilterData={setFilterData}\r\n          setIsRefresh={setIsRefresh}\r\n          type={[\"tags\"]}\r\n          selectedType={'composition'}\r\n        />\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button> */}\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={data}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n          type={\"schedule\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default QuickPlayList;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\ScheduleList.jsx",["991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016"],"import React, { useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport scheduleIcon from \"../../../img/schedule-icon.png\";\r\nimport quickPlayIcon from \"../../../img/quickplay-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/comparison-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n  deleteSchedule,\r\n  getAllSchedule,\r\n  getQuickPlay,\r\n  deleteQuickPlay,\r\n  getDefaultComposition,\r\n  getAllScreens,\r\n  getAllComposition,\r\n  setDefaultComposition,\r\n  BASE_URL,\r\n} from \"../../../utils/api\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport moment from \"moment\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport edit from \"../../../img/edit-composition.svg\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TableLoader from \"../../components/TableLoader\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\r\n\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\nconst ScheduleList = ({\r\n  history,\r\n  permission,\r\n  setIsRefresh,\r\n  data,\r\n  setShowPublishPopUp,\r\n  setSelectedSchdule,\r\n  setFilterData,\r\n  handleDeleteSchedule,\r\n}) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n  const findEndTime = (value) => {\r\n    if (!value || value === undefined) {\r\n      return \"time not find\";\r\n    }\r\n    if (value !== undefined) {\r\n      return value?.timings[value.timings.length - 1]?.endTime;\r\n    }\r\n  };\r\n\r\n  const convertTimestampTo12HourFormat = (timestamp) => {\r\n    if (!timestamp) {\r\n      return \"Invalid timestamp\";\r\n    }\r\n    if (timestamp === \"time not find\") {\r\n      return \"Invalid timestamp\";\r\n    }\r\n\r\n    const timeParts = timestamp.split(\"T\")[1].split(\".\")[0].split(\":\");\r\n    let hours = 0;\r\n    const minutes = timeParts[1];\r\n\r\n    if (timeParts.length >= 1) {\r\n      hours = parseInt(timeParts[0]);\r\n\r\n      let amPm;\r\n      if (hours >= 12) {\r\n        amPm = \"PM\";\r\n        if (hours > 12) {\r\n          hours -= 12;\r\n        }\r\n      } else {\r\n        amPm = \"AM\";\r\n        if (hours === 0) {\r\n          hours = 12;\r\n        }\r\n      }\r\n\r\n      const convertedTime = `${hours}:${minutes} ${amPm}`;\r\n      return convertedTime;\r\n    } else {\r\n      return \"Invalid timestamp format\";\r\n    }\r\n  };\r\n\r\n  const rows = [];\r\n  if (data && data.length > 0) {\r\n    data.forEach((item) => {\r\n      rows.push({\r\n        id: item._id,\r\n        name: item.name,\r\n        createdAt: humanReadableFormattedDateString(item.createdAt),\r\n        screens: item.screens.length,\r\n        startDate: item,\r\n        endDate: item,\r\n        tags: item,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <Dropdown className=\"dropdown-toggle-menu\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n              style={{ height: \"50px\" }}\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item\r\n            href={`/design-month-schedule/${value._id}`}\r\n            disabled={permission && !permission.permission.SCHEDULE.edit}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={edit}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Edit</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={() => {\r\n              setShowPublishPopUp(true);\r\n              setSelectedSchdule(value);\r\n              //setSelectedScreen(screen._id);\r\n            }}\r\n            //disabled={permission && !permission.permission.SCHEDULE.edit}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={edit}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Assign Screen</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              handleDeleteSchedule(value._id);\r\n              console.log(\"oooo\");\r\n            }}\r\n            disabled={permission && !permission.permission.SCHEDULE.delete}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            disabled={permission && !permission.permission.SCHEDULE.view}\r\n            onClick={() => {\r\n              history.push(`/push/view/${value._id}`);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">View Schedule</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.length > 2 ? (\r\n            <>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[0]}\r\n              </span>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[1]}\r\n              </span>\r\n              <span>...</span>\r\n            </>\r\n          ) : (\r\n            value.tags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\"\r\n              >\r\n                {tag}\r\n              </span>\r\n            ))\r\n          )}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n        <span>{getDatetimeIn12Hours(value)}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderStartDate = (params) => {\r\n    const { value } = params;\r\n    const maxDates = value.sequence.reduce((max, obj) => {\r\n      const parseDts = obj.dates.map((dt) => new Date(dt));\r\n      const objMax = obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n      return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n    }, null);\r\n    const formatedDt = moment(new Date(maxDates)).format(\"YYYY-MM-DD\");\r\n\r\n    const minDates = value.sequence.reduce((min, obj) => {\r\n      const parseDt = obj.dates.map((dt) => new Date(dt));\r\n      const objMin = parseDt.length > 0 ? Math.min(...parseDt) : null;\r\n      return objMin ? (min ? Math.min(min, objMin) : objMin) : min;\r\n    }, null);\r\n\r\n    const formatedDtMin = moment(new Date(minDates)).format(\"YYYY-MM-DD\");\r\n\r\n    const maxTime = value.sequence.reduce((max, obj) => {\r\n      const parseDts = obj.dates.map((dt) => new Date(dt));\r\n      const objMax = obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n      return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n    }, null);\r\n    const endTime = findEndTime(value?.sequence[value?.sequence.length - 1]);\r\n    return (\r\n      <div>\r\n        <span className=\"td-content\">\r\n          <strong> {formatedDtMin}</strong>{\" \"}\r\n          <span>\r\n            {convertTimestampTo12HourFormat(\r\n              value?.sequence[0]?.timings[0]?.startTime\r\n            )}\r\n          </span>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderEndDate = (params) => {\r\n    const { value } = params;\r\n    const maxDates = value.sequence.reduce((max, obj) => {\r\n      const parseDts = obj.dates.map((dt) => new Date(dt));\r\n      const objMax = obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n      return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n    }, null);\r\n    const formatedDt = moment(new Date(maxDates)).format(\"YYYY-MM-DD\");\r\n    const endTime = findEndTime(value?.sequence[value?.sequence.length - 1]);\r\n    return (\r\n      <div>\r\n        <span className=\"td-content\">\r\n          <strong> {formatedDt}</strong>{\" \"}\r\n          <span>{convertTimestampTo12HourFormat(endTime)}</span>\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"name\", headerName: \"Name\", flex: 1 },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"Created at\",\r\n      flex: 1,\r\n      renderCell: renderDate,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"screens\",\r\n      headerName: \"Assigned Screens\",\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"startDate\",\r\n      headerName: \"Start Date\",\r\n      renderCell: renderStartDate,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"endDate\",\r\n      headerName: \"End Date\",\r\n      renderCell: renderEndDate,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"tags\",\r\n      headerName: \"Tags\",\r\n      renderCell: tagsRender,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"More\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      disableColumnMenu: true,\r\n    },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n  return (\r\n    <>\r\n      <FilterModal\r\n        showFilterModal={showFilterModal}\r\n        setFilterModal={setFilterModal}\r\n        setFilterData={setFilterData}\r\n        setIsRefresh={setIsRefresh}\r\n        type={[\"tags\"]}\r\n        selectedType={\"schedule\"}\r\n      />\r\n      <div className=\"d-flex justify-content-end\">\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n          style={{ position: \"absolute\", top: \"10px\" }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button>\r\n      </div>\r\n\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={data}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n          type={\"schedule\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ScheduleList;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\SelectScreenModal.jsx",["1017","1018","1019","1020","1021"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllScreens, assignScreenProfile, pushUpdateSchedule } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport '../components/Table.css';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SelectScreenModal = ({ setShowPublishPopUp, showPublishPopUp, selected, setIsRefresh,selectedScreen, setSelectedScreen, selectedSchdule, setSelectedSchdule}) => {\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [name, setName] = useState(\"\")\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState(selectedScreen);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    if(selectedScreen){\r\n        setCheckedValues(selectedScreen);\r\n        const newCheckedItems = {};\r\n        selectedScreen.forEach((item) => {\r\n            newCheckedItems[item] = true;\r\n        });\r\n        setCheckedItems(newCheckedItems);\r\n    }\r\n    callAllScreenApi();\r\n  }, [selectedScreen]);\r\n  \r\n  useEffect(() => {\r\n    if(selectedSchdule){\r\n        setCheckedValues(selectedSchdule.screens);\r\n        const newCheckedItems = {};\r\n        selectedSchdule.screens.forEach((item) => {\r\n            newCheckedItems[item] = true;\r\n        });\r\n        setCheckedItems(newCheckedItems);\r\n    }\r\n    callAllScreenApi();\r\n  }, [selectedSchdule]);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    // const newA = checkedValues;\r\n    // checkedValues.filter((i) => {\r\n    //     return i==event.target.name\r\n    // })\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if(selectedSchdule){\r\n        console.log(\"checkedValues\",checkedValues);\r\n        await pushUpdateSchedule({\r\n          scheduleId: selectedSchdule._id,\r\n          name: selectedSchdule.name,\r\n          screens: checkedValues\r\n        }).then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Screen has been assigned to Schedule successfully !!!\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n          });\r\n          setSelectedSchdule(null)\r\n          setIsRefresh(true);\r\n          setShowPublishPopUp(false);\r\n          \r\n      })\r\n      .catch(function (error) {\r\n          //setError(error.response.data.message);\r\n      });\r\n    }else{\r\n      await assignScreenProfile({\r\n          profileId:selected,\r\n          screens: checkedValues,\r\n      })\r\n      .then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Screen has been assigned to Profile successfully !!!\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n          });\r\n          setIsRefresh(true);\r\n          setShowPublishPopUp(false);\r\n      })\r\n      .catch(function (error) {\r\n          //setError(error.response.data.message);\r\n      });\r\n    }\r\n\r\n  };\r\n  return (\r\n<>\r\n    \r\n    <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n            published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={showPublishPopUp}\r\n        size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>{\"Assign Screen\"}</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowPublishPopUp(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n\r\n      {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\r\n      {!published && (\r\n        <Modal.Body>\r\n            {/* <div className=\"mb-3 mr-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"quickplayname\"\r\n                onChange={(e) => {setName(e.target.value)}}\r\n                required=\"true\"\r\n                placeholder=\"Name...\"\r\n              />\r\n            </div> */}\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Screen</th>\r\n                <th>Last Seen</th>\r\n                <th>Default Composition</th>\r\n                <th>Current Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading  ? (\r\n          <TableLoader colSpan={5}/>\r\n        ) : (\r\n            <tbody>\r\n              {allScreens !== \"\" &&\r\n                allScreens.map((screen) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>\r\n                        <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-control-input\"\r\n                            id={screen._id}\r\n                            name={screen._id}\r\n                            checked={checkedItems[screen._id]}\r\n                            onChange={handleCheckboxChange}\r\n                          />\r\n                          <label\r\n                            className=\"custom-control-label\"\r\n                            htmlFor={screen._id}\r\n                          ></label>\r\n                        </div>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>{screen.name}</strong>\r\n                          <span>{screen.screenLocation}</span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"d-flex align-items-center\">\r\n                          <span className=\"status status-green\"></span>\r\n                          <span className=\"td-content\">\r\n                            <strong>{screen.name}</strong>\r\n                            <span>{screen.screenLocation}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>Default Compo. </td>\r\n                      <td>No Schedule</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n            )}\r\n          </Table>\r\n        </Modal.Body>\r\n      )}\r\n\r\n      <Modal.Footer>\r\n        {!published && (\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\"\r\n                  onClick={(e) => {setShowPublishPopUp(false)}}\r\n                  variant=\"outline-light\">\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                disabled={!checkedValues || checkedValues.length == 0}\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Publish\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n      \r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectScreenModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\TableLoader.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\viewSchedule.jsx",["1022","1023","1024","1025","1026","1027","1028","1029","1030"],"import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport { getAllDaySequence } from \"../../../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nexport default function ViewSchedule() {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [events, setEvents] = useState([]);\r\n  const [daySequence, setDaySequence] = useState([]);\r\n  const [timings, setTimings] = useState([]);\r\n  const [selectedTime, setSelectedTime] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const callAllDaySequence = async (id) => {\r\n    const list = await getAllDaySequence(id);\r\n    console.log(\"Tim\", list)\r\n    setDaySequence(list.sequence);\r\n    const seqArray = [];\r\n    if (list && list.sequence && list.sequence[0] && list.sequence.length > 0) {\r\n      var flat = [];\r\n      const datesTiming = [];\r\n      for (var i = 0; i < list.sequence.length; i++) {\r\n        flat = flat.concat(list.sequence[i].dates);\r\n        list.sequence[i].dates.forEach((v) => {\r\n          datesTiming[v] = list.sequence[i].timings;\r\n        });\r\n      }\r\n      setTimings(datesTiming);\r\n      console.log(\"timings\",timings)\r\n      //console.log(\"seqArray\",seqArray,flat);\r\n      setDatesArray(flat);\r\n    }\r\n\r\n    console.log(list, datesArray);\r\n  };\r\n  useEffect(() => {\r\n    callAllDaySequence(id);\r\n  }, [id]);\r\n\r\n  const [currentMonth, setCurrentMonth] = useState(0);\r\n  const [datesArray, setDatesArray] = useState();\r\n\r\n  // useEffect(() => {}, [selectedCheckboxes]);\r\n\r\n  const renderDayHeader = (dayInfo) => {\r\n    const { date } = dayInfo;\r\n    const checkboxKey = dayInfo.date.toISOString();\r\n    //const isChecked = selectedCheckboxes[checkboxKey];\r\n    return <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>;\r\n  };\r\n\r\n  const handleDayTime = (e, dateInfo) => {\r\n    console.log(\"test\",timings)\r\n    e.preventDefault();\r\n    const str = dateInfo + \"T00:00:00.000Z\";\r\n    setSelectedTime(timings[str]);\r\n    setSelectedDate(dateInfo);\r\n  };\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    //console.log(dateInfo, \"dateInfo\");\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const lastDate = moment(checkboxKey, \"YYYY-MM-DD\")\r\n      .add(\"days\", 1)\r\n      .format(\"YYYY-MM-DD\");\r\n    const isSelected =\r\n      datesArray && datesArray.length > 0\r\n        ? datesArray.find((item) => {\r\n            return item.split(\"T\")[0] === lastDate;\r\n          })\r\n        : false;\r\n    let disablePrp = false;\r\n\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <div className=\"month-schedule-checkbox\">\r\n          {isSelected ? (\r\n            <span\r\n              className=\"btn\"\r\n              onClick={(e) => {\r\n                handleDayTime(e, lastDate);\r\n              }}\r\n              style={{\r\n                background: \"#b3005e\",\r\n                padding: \"5px\",\r\n                marginRight: \"10px\",\r\n                color: \"#fff\",\r\n                position: \"relative\",\r\n                top: \"30px\",\r\n                fontSize: \"8px\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              {/* {dateInfo.dayNumberText} */}\r\n              Events\r\n            </span>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n        <div> {dateInfo.dayNumberText}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getCurrentMonth = (arg) => {\r\n    const startDate = arg.view.activeStart;\r\n    if (arg.view.type === \"dayGridMonth\") {\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n    if (arg.view.type === \"dayGridDay\") {\r\n      startDate.setDate(startDate.getDate() + 8);\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const renderTime = (data) => {\r\n    let d = data.split(\"T\")[1];\r\n    d = d.split(\":\");\r\n    return d[0] + \":\" + d[1];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fullcalendar-box\">\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button\r\n            className=\"mr-2\"\r\n            href={`/design-month-schedule/${id}`}\r\n            // onClick={(e) => {\r\n            //   handlePublish(e);\r\n            // }}\r\n            variant=\"info add-screen-btn\"\r\n          >\r\n            Edit\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"event-list\">\r\n          <h3>{selectedDate && selectedDate}</h3>\r\n          {selectedTime &&\r\n            selectedTime.map((event, i) => (\r\n              <div key={i} className=\"month-schedule-list mt-4\">\r\n                <div className=\"d-flex align-items-center px-2 py-4 justify-content-between\">\r\n                  <span className=\"view-schedule-list\">\r\n                    {event.composition.name?.length > 20\r\n                      ? event.composition.name.slice(0, 20) + \"...\"\r\n                      : event.composition.name}\r\n                  </span>\r\n                  <div className=\"view-schedule-time\">\r\n                    <span className=\"total-composition mr-2\">\r\n                      {renderTime(event.startTime)}\r\n                    </span>\r\n                    <span className=\"total-composition\">\r\n                      {renderTime(event.endTime)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <div className=\"calendar\" style={{ float: \"left\", width: \"55%\" }}>\r\n          <FullCalendar\r\n            className=\"month-schedule view-schedule-fullcalender\"\r\n            weekends={true}\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            selectable={true}\r\n            events={events}\r\n            dayHeaderContent={renderDayHeader}\r\n            dayCellContent={renderDateCell}\r\n            //validRange={{\"start\":moment().format('YYYY-MM-DD'),'end':null}}\r\n            datesSet={(arg) => getCurrentMonth(arg)}\r\n            eventContent={(info) => (\r\n              <div className=\"month-schedule-event\">\r\n                <div>\r\n                  {info.event.title.length > 5\r\n                    ? info.event.title.slice(0, 5) + \"...\"\r\n                    : info.event.title}\r\n                </div>\r\n              </div>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyMonthSchedule.jsx",["1031","1032","1033","1034"],"// import React, { useEffect, useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\r\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\n\r\n// export default function CopyMonthSchedule() {\r\n//   // initial state\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n// const [assignedDates, setAssignedDates] = useState([]);\r\n// const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n//   const [state, setState] = useState({\r\n//     weekendsVisible: true,\r\n//     externalEvents: [\r\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\r\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\r\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\r\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\r\n//     ],\r\n//     calendarEvents: [\r\n//       {\r\n//         id: 1,\r\n//         title: \"All-day event\",\r\n//         color: \"#388e3c\",\r\n//         start: \"2020-12-12\",\r\n//         end: \"2020-12-12\",\r\n//         custom: \"questo è un campo custom\"\r\n//       },\r\n//       {\r\n//         id: 2,\r\n//         title: \"Timed event\",\r\n//         color: \"#0097a7\",\r\n//         start: \"2020-12-07\",\r\n//         end: \"2020-12-10\",\r\n//         custom: \"custom stuff\"\r\n//       }\r\n//     ]\r\n//   });\r\n\r\n//   // load external events\r\n//   useEffect(() => {\r\n//     let draggableEl = document.getElementById(\"external-events\");\r\n//     new Draggable(draggableEl, {\r\n//       itemSelector: \".fc-event\",\r\n//       eventData: function (eventEl) {\r\n//         let id = eventEl.dataset.id;\r\n//         let title = eventEl.getAttribute(\"title\");\r\n//         let color = eventEl.dataset.color;\r\n//         let custom = eventEl.dataset.custom;\r\n\r\n//         return {\r\n//           id: id,\r\n//           title: title,\r\n//           color: color,\r\n//           custom: custom,\r\n//           create: true\r\n//         };\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   // add external events\r\n//   const addEvent = () => {\r\n//     let newEvent = {\r\n//       id: 3433,\r\n//       title: \"Timed event\",\r\n//       color: \"#333333\",\r\n//       start: \"2020-12-31\",\r\n//       end: \"2020-12-31\",\r\n//       custom: \"custom stuff\"\r\n//     };\r\n\r\n//     setState((state) => {\r\n//       return {\r\n//         ...state,\r\n//         externalEvents: state.externalEvents.concat(newEvent)\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // handle event receive\r\n//   const handleEventReceive = (eventInfo) => {\r\n//     const newEvent = {\r\n//       id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n//       title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n//       color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n//       start: eventInfo.date,\r\n//       end: eventInfo.date,\r\n//       custom: eventInfo.draggedEl.getAttribute(\"data-custom\")\r\n//     };\r\n\r\n//     setSelectedEvent(null);\r\n\r\n//     setState((state) => ({\r\n//       ...state,\r\n//       calendarEvents: state.calendarEvents.concat(newEvent)\r\n//     }));\r\n//   };\r\n// //   const handleExternalEventClick = (event) => {\r\n// //     const eventId = event.currentTarget.getAttribute(\"data-id\");\r\n// //     const eventTitle = event.currentTarget.getAttribute(\"title\");\r\n// //     const eventColor = event.currentTarget.getAttribute(\"data-color\");\r\n// //     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\r\n\r\n// //     if (selectedEvent && selectedEvent.id === eventId) {\r\n// //       // Uncheck the selected event\r\n// //       setSelectedEvent(null);\r\n// //       setAssignedDates([]);\r\n// //     } else {\r\n// //       // Check a new event\r\n// //       setSelectedEvent({\r\n// //         id: eventId,\r\n// //         title: eventTitle,\r\n// //         color: eventColor,\r\n// //         custom: eventCustom\r\n// //       });\r\n// //       setAssignedDates(\r\n// //         state.calendarEvents\r\n// //           .filter((event) => event.title === eventTitle)\r\n// //           .map((event) => event.start)\r\n// //       );\r\n// //     }\r\n// //   };\r\n\r\n//   const handleExternalEventClick = (event) => {\r\n//     const eventId = event.currentTarget.getAttribute(\"data-id\");\r\n//     const eventTitle = event.currentTarget.getAttribute(\"title\");\r\n//     const eventColor = event.currentTarget.getAttribute(\"data-color\");\r\n//     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\r\n\r\n//     if (selectedEvent && selectedEvent.id === eventId && selectedDate) {\r\n//       // Uncheck the selected event and clear the selected date\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//     } else {\r\n//       // Check a new event and set the selected date to the current date\r\n//       setSelectedEvent({\r\n//         id: eventId,\r\n//         title: eventTitle,\r\n//         color: eventColor,\r\n//         custom: eventCustom\r\n//       });\r\n//       setSelectedDate(new Date());\r\n//     }\r\n//   };\r\n\r\n//   const handleDateSelect = (selectInfo) => {\r\n//     setSelectedDate(selectInfo.startStr);\r\n//   };\r\n//   // Define handleEventRadioChange function\r\n// const handleEventRadioChange = (selectedEvent, selectedDate) => {\r\n//     if (selectedEvent && selectedDate) {\r\n//       setState((prevState) => {\r\n//         // Check if the event is already assigned to the selected date\r\n//         const isEventAssigned = prevState.calendarEvents.some(\r\n//           (event) =>\r\n//             event.id === selectedEvent.id &&\r\n//             event.start.toDateString() === selectedDate.toDateString()\r\n//         );\r\n\r\n//         if (isEventAssigned) {\r\n//           // Remove the event from the selected date\r\n//           const updatedEvents = prevState.calendarEvents.filter(\r\n//             (event) =>\r\n//               event.id !== selectedEvent.id ||\r\n//               event.start.toDateString() !== selectedDate.toDateString()\r\n//           );\r\n\r\n//           return {\r\n//             ...prevState,\r\n//             calendarEvents: updatedEvents\r\n//           };\r\n//         } else {\r\n//           // Add the event to the selected date\r\n//           const newEvent = {\r\n//             id: selectedEvent.id,\r\n//             title: selectedEvent.title,\r\n//             color: selectedEvent.color,\r\n//             start: selectedDate,\r\n//             end: selectedDate,\r\n//             custom: selectedEvent.custom\r\n//           };\r\n\r\n//           return {\r\n//             ...prevState,\r\n//             calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n//           };\r\n//         }\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const renderEventContent = (eventInfo) => {\r\n//     return (\r\n//       <>\r\n//         <div>{eventInfo.timeText}</div>\r\n//         <div>\r\n//           <input\r\n//             type=\"radio\"\r\n//             checked={\r\n//               selectedEvent &&\r\n//               selectedEvent.id === eventInfo.event.extendedProps.id &&\r\n//               selectedDate &&\r\n//               selectedDate.toDateString() === eventInfo.event.start.toDateString()\r\n//             }\r\n//             onChange={() => handleEventRadioChange(eventInfo.event)}\r\n//           />\r\n//           {eventInfo.event.title}\r\n//         </div>\r\n//       </>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div style={{ float: \"left\", width: \"25%\" }}>\r\n//         <div style={{ margin: \"0 0 20px\" }}>\r\n//           <input\r\n//             type=\"submit\"\r\n//             name=\"name\"\r\n//             onClick={addEvent}\r\n//             value=\"add external event\"\r\n//           />\r\n//         </div>\r\n//         <div id=\"external-events\" style={{width:\"100%\"}}>\r\n//           {/* {state.externalEvents.map((event) => (\r\n//             <div\r\n//               className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n//               title={event.title}\r\n//               data-id={event.id}\r\n//               data-color={event.color}\r\n//               data-custom={event.custom}\r\n//               key={event.id}\r\n//               style={{\r\n//                 backgroundColor: event.color,\r\n//                 borderColor: event.color,\r\n//                 cursor: \"pointer\"\r\n//               }}\r\n//             >\r\n//               <div className=\"fc-event-main\" >\r\n//                 <div>\r\n//                   <strong>{event.title}</strong>\r\n//                 </div>\r\n//                 {event.custom}\r\n//               </div>\r\n//             </div>\r\n//           ))} */}\r\n//    {/* {state.externalEvents.map((event) => (\r\n//   <div\r\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\r\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\r\n//     }`}\r\n//     title={event.title}\r\n//     data-id={event.id}\r\n//     data-color={event.color}\r\n//     data-custom={event.custom}\r\n//     key={event.id}\r\n//     onClick={handleExternalEventClick}\r\n//     style={{\r\n//       backgroundColor: event.color,\r\n//       borderColor: event.color,\r\n//       cursor: \"pointer\"\r\n//     }}\r\n//   >\r\n//     <div className=\"fc-event-main\">\r\n//       <div>\r\n//         <strong>{event.title}</strong>\r\n//       </div>\r\n//       {event.custom}\r\n//     </div>\r\n//     {selectedEvent && selectedEvent.id === event.id && (\r\n//       <div>\r\n//         {state.calendarEvents.some(\r\n//           (calendarEvent) =>\r\n//             calendarEvent.title === selectedEvent.title &&\r\n//             assignedDates.includes(calendarEvent.start)\r\n//         ) ? (\r\n//           <span>Assigned</span>\r\n//         ) : (\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={assignedDates.length > 0}\r\n//             onChange={() => handleExternalEventClick(event)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//     )}\r\n//   </div>\r\n// ))} */}\r\n\r\n// {state.externalEvents.map((event) => (\r\n//   <div\r\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\r\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\r\n//     }`}\r\n//     title={event.title}\r\n//     data-id={event.id}\r\n//     data-color={event.color}\r\n//     data-custom={event.custom}\r\n//     key={event.id}\r\n//     onClick={handleExternalEventClick}\r\n//     style={{\r\n//       backgroundColor: event.color,\r\n//       borderColor: event.color,\r\n//       cursor: \"pointer\"\r\n//     }}\r\n//   >\r\n//     <div className=\"fc-event-main\">\r\n//       <div>\r\n//         <strong>{event.title}</strong>\r\n//       </div>\r\n//       {event.custom}\r\n//     </div>\r\n//     {selectedEvent && selectedEvent.id === event.id && (\r\n//       <div>\r\n//         {state.calendarEvents.some(\r\n//           (calendarEvent) =>\r\n//             calendarEvent.title === selectedEvent.title &&\r\n//             calendarEvent.start.getDate() === selectedDate?.getDate()\r\n//         ) ? (\r\n//           <span>Assigned</span>\r\n//         ) : (\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={selectedDate && selectedDate.getDate() === new Date().getDate()}\r\n//             onChange={() => handleExternalEventClick(event)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//     )}\r\n//   </div>\r\n// ))}\r\n\r\n//         </div>\r\n//       </div>\r\n//       <div style={{ float: \"left\", width: \"75%\" }}>\r\n//         {/* <FullCalendar\r\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n\r\n//         headerToolbar={false}\r\n//           initialView=\"dayGridMonth\"\r\n//           editable={true}\r\n//           selectable={true}\r\n//           selectMirror={true}\r\n//           dayMaxEvents={true}\r\n//           weekends={state.weekendsVisible}\r\n//           events={state.calendarEvents}\r\n//           droppable={true}\r\n//           eventReceive={handleEventReceive}\r\n//         /> */}\r\n\r\n// <FullCalendar\r\n//   plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n//   headerToolbar={{\r\n//     left: \"prev,next today\",\r\n//     center: \"title\",\r\n//     right: \"dayGridMonth,timeGridWeek,timeGridDay\"\r\n//   }}\r\n//   initialView=\"dayGridMonth\"\r\n//   editable={true}\r\n//   selectable={true}\r\n//   selectMirror={true}\r\n//   dayMaxEvents={true}\r\n//   weekends={state.weekendsVisible}\r\n//   events={state.calendarEvents}\r\n//   droppable={true}\r\n//   eventReceive={handleEventReceive}\r\n//   eventContent={renderEventContent} // Add this line\r\n// />\r\n\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\r\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\n\r\n// export default function CopyMonthSchedule() {\r\n//   // initial state\r\n//   const [state, setState] = useState({\r\n//     weekendsVisible: true,\r\n//     externalEvents: [\r\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\r\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\r\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\r\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\r\n//     ],\r\n//     calendarEvents: []\r\n//   });\r\n\r\n//   // load external events\r\n//   useEffect(() => {\r\n//     let draggableEl = document.getElementById(\"external-events\");\r\n//     new Draggable(draggableEl, {\r\n//       itemSelector: \".fc-event\",\r\n//       eventData: function (eventEl) {\r\n//         let id = eventEl.dataset.id;\r\n//         let title = eventEl.getAttribute(\"title\");\r\n//         let color = eventEl.dataset.color;\r\n//         let custom = eventEl.dataset.custom;\r\n\r\n//         return {\r\n//           id: id,\r\n//           title: title,\r\n//           color: color,\r\n//           custom: custom,\r\n//           create: true\r\n//         };\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   // handle external event selection\r\n//   const handleExternalEventSelect = (event) => {\r\n//     setState((prevState) => {\r\n//       // Clear any previously selected events\r\n//       const calendarEvents = prevState.calendarEvents.map((event) => ({\r\n//         ...event,\r\n//         selected: false\r\n//       }));\r\n\r\n//       // Find the selected event\r\n//       const selectedEvent = calendarEvents.find(\r\n//         (ev) => ev.id === event.id && ev.selected\r\n//       );\r\n\r\n//       if (selectedEvent) {\r\n//         // Unselect the event if already selected\r\n//         selectedEvent.selected = false;\r\n//       } else {\r\n//         // Select the event\r\n//         event.selected = true;\r\n//       }\r\n\r\n//       return {\r\n//         ...prevState,\r\n//         calendarEvents: calendarEvents\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // handle date click\r\n//   const handleDateClick = (arg) => {\r\n//     const selectedDate = arg.date;\r\n\r\n//     setState((prevState) => {\r\n//       const selectedEvent = prevState.calendarEvents.find(\r\n//         (event) => event.selected\r\n//       );\r\n\r\n//       if (selectedEvent) {\r\n//         // Add the selected event to the selected date\r\n//         const newEvent = {\r\n//           id: selectedEvent.id,\r\n//           title: selectedEvent.title,\r\n//           color: selectedEvent.color,\r\n//           start: selectedDate,\r\n//           end: selectedDate,\r\n//           custom: selectedEvent.custom\r\n//         };\r\n\r\n//         return {\r\n//           ...prevState,\r\n//           calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n//         };\r\n//       }\r\n\r\n//       return prevState;\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div style={{ float: \"left\", width: \"25%\" }}>\r\n//         <div id=\"external-events\" style={{ width: \"100%\" }}>\r\n//           {state.externalEvents.map((event) => (\r\n//             <div\r\n//               className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2${\r\n//                 event.selected ? \" selected\" : \"\"\r\n//               }`}\r\n//               title={event.title}\r\n//               data-id={event.id}\r\n//               data-color={event.color}\r\n//               data-custom={event.custom}\r\n//               key={event.id}\r\n//               onClick={() => handleExternalEventSelect(event)}\r\n//               style={{\r\n//                 backgroundColor: event.color,\r\n//                 borderColor: event.color,\r\n//                 cursor: \"pointer\"\r\n//               }}\r\n//             >\r\n//               <div className=\"fc-event-main\">\r\n//                 <div>\r\n//                   <strong>{event.title}</strong>\r\n//                 </div>\r\n//                 {event.custom}\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//       <div style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n//           headerToolbar={false}\r\n//           initialView=\"dayGridMonth\"\r\n//           editable={true}\r\n//           selectable={true}\r\n//           selectMirror={true}\r\n//           dayMaxEvents={true}\r\n//           weekends={state.weekendsVisible}\r\n//           events={state.calendarEvents}\r\n//           dateClick={handleDateClick}\r\n//           eventRender={({ event, el }) => {\r\n//             // Add radio button to each date\r\n//             const inputEl = document.createElement(\"input\");\r\n//             inputEl.type = \"radio\";\r\n//             inputEl.addEventListener(\"change\", () =>\r\n//               handleExternalEventSelect(event)\r\n//             );\r\n\r\n//             el.prepend(inputEl);\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// -----------------------------------\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n\r\n// export default function CalendarWithRadioButtons() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n//   const handleDateClick = (dateClickInfo) => {\r\n//     setSelectedDate(dateClickInfo.date);\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const isSelected = selectedDate && dateInfo.date.valueOf() === selectedDate.valueOf();\r\n\r\n//     return (\r\n//       <div>\r\n//         <input\r\n//           type=\"radio\"\r\n//           checked={isSelected}\r\n//           onChange={() => setSelectedDate(dateInfo.date)}\r\n//         />\r\n//         {dateInfo.dayNumberText}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//       <FullCalendar\r\n//         plugins={[dayGridPlugin]}\r\n//         initialView=\"dayGridMonth\"\r\n//         selectable={true}\r\n//         dateClick={handleDateClick}\r\n//         dayCellContent={renderDateCell}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// -----------------------------------\r\n\r\n//******************************* */\r\nimport React, { useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nexport default function CalendarWithEventList() {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [events, setEvents] = useState([\r\n    { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n    { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n    { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n    { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n  ]);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  console.log(selectedEvent, \"lllllllloooooo\");\r\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n    const isEventSelected = selectedEvent;\r\n\r\n    if (isEventSelected) {\r\n      const checkboxKey = dateInfo.date.toISOString();\r\n      const hasEvent = events.some(\r\n        (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <input\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n            onChange={() => handleDateCellChange(dateInfo)}\r\n          />\r\n          {dateInfo.dayNumberText}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return dateInfo.dayNumberText;\r\n  };\r\n\r\n  // const handleDateCellChange = (dateInfo) => {\r\n  //   if (selectedEvent) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const selectedDateValue = dateInfo.date.valueOf();\r\n  //     const filteredEvents = events.filter(\r\n  //       (event) => event.start.valueOf() !== selectedDateValue\r\n  //     );\r\n\r\n  //     const hasEvent = filteredEvents.some(\r\n  //       (event) => event.start.valueOf() === selectedDateValue\r\n  //     );\r\n\r\n  //     if (hasEvent) {\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n  //     } else {\r\n  //       setSelectedDate(dateInfo.date);\r\n\r\n  //       const event = {\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n\r\n  //       setEvents([...filteredEvents, event]);\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n  //     }\r\n  //   } else {\r\n  //     setSelectedDate(dateInfo.date);\r\n  //   }\r\n  // };\r\n\r\n  // const handleDateCellChange = (dateInfo) => {\r\n  //   console.log(dateInfo, \"iiiiiiiiiii\");\r\n  //   const checkboxKey = dateInfo.date.toISOString();\r\n  //   const selectedDateValue = dateInfo.date.valueOf();\r\n  //   const filteredEvents = events.filter(\r\n  //     (event) => event.start.valueOf() !== selectedDateValue\r\n  //   );\r\n\r\n  //   const date = new Date(dateInfo.date);\r\n  //   const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n  //     year: \"numeric\",\r\n  //     month: \"2-digit\",\r\n  //     day: \"2-digit\",\r\n  //   });\r\n\r\n  //   const [day, month, year] = formattedDate.split(\"/\");\r\n  //   const desiredFormat = `${year}-${month}-${day}`;\r\n  //   // console.log(filteredEvents, \"cgvjhjghgk\");\r\n  //   let hasEvent = false;\r\n  //   console.log(dateInfo, \"arti\");\r\n  //   console.log(Object.keys(dateInfo), \"dj\");\r\n  //   // console.log(example, \"test\");\r\n  //   // if (dateInfo.event) {\r\n  //   //   hasEvent = filteredEvents.some((event) =>\r\n  //   //     console.log(event, \"ttttttttt\")\r\n  //   //   );\r\n  //   // }\r\n  //   console.log(events.id);\r\n\r\n  //   if (dateInfo.event && dateInfo.event.id === dateInfo.id) {\r\n  //     hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n  //   }\r\n  //   // console.log(hasEvent, \"pppppp\");\r\n  //   if (hasEvent) {\r\n  //     setSelectedEvent(null);\r\n  //     setSelectedDate(null);\r\n  //     setEvents(filteredEvents);\r\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //       const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //       delete updatedCheckboxes[checkboxKey];\r\n  //       return updatedCheckboxes;\r\n  //     });\r\n  //   } else {\r\n  //     setSelectedDate(dateInfo.date);\r\n\r\n  //     if (selectedEvent) {\r\n  //       // console.log(selectedEvent, \"pppppppp\");\r\n  //       dateInfo.kkk = selectedEvent;\r\n  //       // var example = dateInfo.kkk;\r\n  //       // console.log(dateInfo, \"eeeeeee\");\r\n  //       const event = {\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n\r\n  //       setEvents([...filteredEvents, event]);\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  function handleDateCellChange(dateInfo) {\r\n    console.log(dateInfo, \"handleDateCellChange top console\");\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const selectedDateValue = dateInfo.date.valueOf();\r\n    if (selectedEvent !== null) {\r\n      let testObj = JSON.parse(JSON.stringify(dateInfo));\r\n      testObj.event = selectedEvent;\r\n      dateInfo.kkk = selectedEvent;\r\n      console.log(dateInfo, testObj, \"dateInfo -> testObj\");\r\n      console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\r\n\r\n      const event = {\r\n        title: selectedEvent.title,\r\n        start: dateInfo.date,\r\n      };\r\n    }\r\n    const filteredEvents = events.filter(\r\n      (event) => event.start.valueOf() !== selectedDateValue\r\n    );\r\n\r\n    const date = new Date(dateInfo.date);\r\n    const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n    });\r\n\r\n    const [day, month, year] = formattedDate.split(\"/\");\r\n    const desiredFormat = `${year}-${month}-${day}`;\r\n\r\n    let hasEvent = false;\r\n    console.log(dateInfo, \"arti\");\r\n\r\n    if (dateInfo.event && dateInfo.event.id) {\r\n      hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n    }\r\n\r\n    if (hasEvent) {\r\n      setSelectedEvent(null);\r\n      setSelectedDate(null);\r\n      setEvents(filteredEvents);\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n        delete updatedCheckboxes[checkboxKey];\r\n        return updatedCheckboxes;\r\n      });\r\n    } else {\r\n      setSelectedDate(dateInfo.date);\r\n\r\n      if (\r\n        selectedEvent &&\r\n        dateInfo.event &&\r\n        selectedEvent.id === dateInfo.event.id\r\n      ) {\r\n        const eventToRemove = events.find(\r\n          (event) => event.id === selectedEvent.id\r\n        );\r\n        const updatedEvents = events.filter(\r\n          (event) => event.id !== selectedEvent.id\r\n        );\r\n        setSelectedEvent(null);\r\n        setSelectedDate(null);\r\n        setEvents(updatedEvents);\r\n        setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n          const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n          delete updatedCheckboxes[checkboxKey];\r\n          return updatedCheckboxes;\r\n        });\r\n      } else if (selectedEvent) {\r\n        const event = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: dateInfo.date,\r\n        };\r\n        setEvents([...filteredEvents, event]);\r\n\r\n        setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n          ...prevSelectedCheckboxes,\r\n          [checkboxKey]: true,\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  const getDatesBetween = (start, end) => {\r\n    const dates = [];\r\n    let currentDate = new Date(start);\r\n\r\n    while (currentDate <= end) {\r\n      dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n\r\n  const addCheckboxesToDates = (event) => {\r\n    const allDates = getDatesBetween(event.start, event.end);\r\n\r\n    const calendarEl = document.querySelector(\".calendar-container\");\r\n    allDates.forEach((date) => {\r\n      const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n      dateCell.classList.add(\"selected-date\");\r\n    });\r\n  };\r\n\r\n  const handleEventClick = (event) => {\r\n    setSelectedEvent(event);\r\n    setSelectedDate(null); // Reset selected date\r\n    addCheckboxesToDates(event);\r\n  };\r\n\r\n  // const events = [\r\n  //   { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n  //   { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n  //   { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n  //   { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n  // ];\r\n  return (\r\n    <div className=\"containe\">\r\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n        <h2>Event List</h2>\r\n        <ul>\r\n          {events.map((event) => (\r\n            <li\r\n              key={event.id}\r\n              onClick={() => handleEventClick(event)}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                fontWeight:\r\n                  selectedEvent && selectedEvent.id === event.id\r\n                    ? \"bold\"\r\n                    : \"normal\",\r\n              }}\r\n            >\r\n              {event.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          selectable={true}\r\n          events={events}\r\n          dayCellContent={renderDateCell}\r\n          eventContent={(info) => {\r\n            return (\r\n              <div>\r\n                <div>{info.event.title}</div>\r\n              </div>\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//*********************************** */\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function CalendarWithEventList() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   const [selectedRadio, setSelectedRadio] = useState({});\r\n\r\n//   const handleDateCellChange = (dateInfo) => {\r\n//     if (selectedEvent) {\r\n//       const selectedDateValue = dateInfo.date.valueOf();\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       const hasEvent = filteredEvents.some(\r\n//         (event) => event.start.valueOf() === selectedDateValue\r\n//       );\r\n\r\n//       if (hasEvent) {\r\n//         setSelectedEvent(null);\r\n//         setSelectedDate(null);\r\n//         setEvents(filteredEvents);\r\n//         setSelectedRadio({}); // Clear the selected radio state for the date\r\n//       } else {\r\n//         setSelectedDate(dateInfo.date);\r\n\r\n//         const event = {\r\n//           title: selectedEvent.title,\r\n//           start: dateInfo.date,\r\n//         };\r\n\r\n//         setEvents([...filteredEvents, event]);\r\n//         setSelectedRadio((prevSelectedRadio) => ({\r\n//           ...prevSelectedRadio,\r\n//           [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\r\n//         }));\r\n//       }\r\n//     } else {\r\n//       setSelectedDate(dateInfo.date);\r\n//       setSelectedRadio((prevSelectedRadio) => ({\r\n//         ...prevSelectedRadio,\r\n//         [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const isSelected = selectedDate\r\n//       ? selectedDate.valueOf() === dateInfo.date.valueOf()\r\n//       : false;\r\n//     const isEventSelected = selectedEvent;\r\n//     const radioKey = dateInfo.date.toISOString();\r\n\r\n//     if (isEventSelected) {\r\n//       const radioButtonName = `radio-${radioKey}`;\r\n//       const hasEvent = events.some(\r\n//         (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n//       );\r\n\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={radioButtonName}\r\n//             type=\"radio\"\r\n//             checked={isSelected && selectedRadio[radioKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n\r\n//   const getDatesBetween = (start, end) => {\r\n//     const dates = [];\r\n//     let currentDate = new Date(start);\r\n\r\n//     while (currentDate <= end) {\r\n//       dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n//       currentDate.setDate(currentDate.getDate() + 1);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const addRadioButtonsToDates = (event) => {\r\n//     const allDates = getDatesBetween(event.start, event.end);\r\n\r\n//     const calendarEl = document.querySelector(\".calendar-container\");\r\n//     allDates.forEach((date) => {\r\n//       const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n//       dateCell.classList.add(\"selected-date\");\r\n//     });\r\n//   };\r\n\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//     addRadioButtonsToDates(event);\r\n//   };\r\n\r\n//   const eventsa = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {eventsa.map((event) => (\r\n//             <li\r\n//               key={event.id}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>{info.event.title}</div>\r\n//               </div>\r\n//             );\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// second month\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function SecondMonth() {\r\n//     const [selectedDate, setSelectedDate] = useState(null);\r\n//     const [events, setEvents] = useState([\r\n//         { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n//         { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n//         { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n//         { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n//     ]);\r\n//     const [selectedEvent, setSelectedEvent] = useState(null);\r\n//     console.log(selectedEvent, \"lllllllloooooo\");\r\n//     const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n//     function handleDateCellChange(dateInfo) {\r\n//         console.log(dateInfo, \"oooooo\")\r\n//         console.log(dateInfo, \"handleDateCellChange top console\");\r\n//         const checkboxKey = dateInfo.date.toISOString();\r\n//         const selectedDateValue = dateInfo.date.valueOf();\r\n//         const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//         if (isChecked) {\r\n//             // Unselecting the checkbox\r\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//                 delete updatedCheckboxes[checkboxKey];\r\n//                 return updatedCheckboxes;\r\n//             });\r\n\r\n//             const filteredEvents = events.filter(\r\n//                 (event) => event.start.valueOf() !== selectedDateValue\r\n//             );\r\n\r\n//             setSelectedEvent(null);\r\n//             setSelectedDate(null);\r\n//             setEvents(filteredEvents);\r\n//         } else {\r\n//             // Selecting the checkbox\r\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//                 ...prevSelectedCheckboxes,\r\n//                 [checkboxKey]: true,\r\n//             }));\r\n\r\n//             const event = {\r\n//                 id: selectedEvent.id,\r\n//                 title: selectedEvent.title,\r\n//                 start: dateInfo.date,\r\n//             };\r\n//             setEvents((prevEvents) => [...prevEvents, event]);\r\n//         }\r\n//     }\r\n\r\n//     // function handleDateCellChange(dateInfo) {\r\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     //     const checkboxKey = dateInfo.date.toISOString();\r\n//     //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     //     if (isChecked) {\r\n//     //         // Unselecting the checkbox\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //             delete updatedCheckboxes[checkboxKey];\r\n//     //             return updatedCheckboxes;\r\n//     //         });\r\n\r\n//     //         const eventToRemove = events.find(\r\n//     //             (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n//     //         );\r\n\r\n//     //         if (eventToRemove) {\r\n//     //             const updatedEvents = events.filter(\r\n//     //                 (event) => event.id !== eventToRemove.id\r\n//     //             );\r\n//     //             setEvents(updatedEvents);\r\n//     //         }\r\n//     //     } else {\r\n//     //         // Selecting the checkbox\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//     //             ...prevSelectedCheckboxes,\r\n//     //             [checkboxKey]: true,\r\n//     //         }));\r\n\r\n//     //         const event = {\r\n//     //             id: selectedEvent.id,\r\n//     //             title: selectedEvent.title,\r\n//     //             start: dateInfo.date,\r\n//     //         };\r\n\r\n//     //         setEvents((prevEvents) => [...prevEvents, event]);\r\n//     //     }\r\n//     // }\r\n\r\n//     const renderDateCell = (dateInfo) => {\r\n//         console.log(dateInfo, \"ppppp\")\r\n//         const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//         const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//         const isEventSelected = selectedEvent;\r\n\r\n//         if (isEventSelected) {\r\n//             const checkboxKey = dateInfo.date.toISOString();\r\n\r\n//             return (\r\n//                 <div>\r\n//                     <input\r\n//                         name={`checkbox-${checkboxKey}`}\r\n//                         type=\"checkbox\"\r\n//                         checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//                         onChange={() => handleDateCellChange(dateInfo)}\r\n//                     />\r\n//                     {dateInfo.dayNumberText}\r\n//                 </div>\r\n//             );\r\n//         }\r\n\r\n//         return dateInfo.dayNumberText;\r\n//     };\r\n\r\n//     // function handleDateCellChange(dateInfo) {\r\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     //     const checkboxKey = dateInfo.date.toISOString();\r\n//     //     const selectedDateValue = dateInfo.date.valueOf();\r\n//     //     if (selectedEvent !== null) {\r\n//     //         let testObj = JSON.parse(JSON.stringify(dateInfo));\r\n//     //         testObj.event = selectedEvent;\r\n//     //         dateInfo.kkk = selectedEvent;\r\n//     //         console.log(dateInfo, testObj, \"dateInfo -> testObj\");\r\n//     //         console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\r\n\r\n//     //         const event = {\r\n//     //             title: selectedEvent.title,\r\n//     //             start: dateInfo.date,\r\n//     //         };\r\n//     //     }\r\n//     //     const filteredEvents = events.filter(\r\n//     //         (event) => event.start.valueOf() !== selectedDateValue\r\n//     //     );\r\n\r\n//     //     const date = new Date(dateInfo.date);\r\n//     //     const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n//     //         year: \"numeric\",\r\n//     //         month: \"2-digit\",\r\n//     //         day: \"2-digit\",\r\n//     //     });\r\n\r\n//     //     const [day, month, year] = formattedDate.split(\"/\");\r\n//     //     const desiredFormat = `${year}-${month}-${day}`;\r\n\r\n//     //     let hasEvent = false;\r\n//     //     console.log(dateInfo, \"arti\");\r\n\r\n//     //     if (dateInfo.event && dateInfo.event.id) {\r\n//     //         hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n//     //     }\r\n\r\n//     //     if (hasEvent) {\r\n//     //         setSelectedEvent(null);\r\n//     //         setSelectedDate(null);\r\n//     //         setEvents(filteredEvents);\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //             delete updatedCheckboxes[checkboxKey];\r\n//     //             return updatedCheckboxes;\r\n//     //         });\r\n//     //     } else {\r\n//     //         setSelectedDate(dateInfo.date);\r\n\r\n//     //         if (\r\n//     //             selectedEvent &&\r\n//     //             dateInfo.event &&\r\n//     //             selectedEvent.id === dateInfo.event.id\r\n//     //         ) {\r\n//     //             const eventToRemove = events.find(\r\n//     //                 (event) => event.id === selectedEvent.id\r\n//     //             );\r\n//     //             const updatedEvents = events.filter(\r\n//     //                 (event) => event.id !== selectedEvent.id\r\n//     //             );\r\n//     //             setSelectedEvent(null);\r\n//     //             setSelectedDate(null);\r\n//     //             setEvents(updatedEvents);\r\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //                 delete updatedCheckboxes[checkboxKey];\r\n//     //                 return updatedCheckboxes;\r\n//     //             });\r\n//     //         } else if (selectedEvent) {\r\n//     //             const event = {\r\n//     //                 id: selectedEvent.id,\r\n//     //                 title: selectedEvent.title,\r\n//     //                 start: dateInfo.date,\r\n//     //             };\r\n//     //             setEvents([...filteredEvents, event]);\r\n\r\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//     //                 ...prevSelectedCheckboxes,\r\n//     //                 [checkboxKey]: true,\r\n//     //             }));\r\n//     //         }\r\n//     //     }\r\n//     // }\r\n\r\n//     // const getDatesBetween = (start, end) => {\r\n//     //     const dates = [];\r\n//     //     let currentDate = new Date(start);\r\n\r\n//     //     while (currentDate <= end) {\r\n//     //         dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n//     //         currentDate.setDate(currentDate.getDate() + 1);\r\n//     //     }\r\n\r\n//     //     return dates;\r\n//     // };\r\n\r\n//     // const addCheckboxesToDates = (event) => {\r\n//     //     const allDates = getDatesBetween(event.start, event.end);\r\n\r\n//     //     const calendarEl = document.querySelector(\".calendar-container\");\r\n//     //     allDates.forEach((date) => {\r\n//     //         const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n//     //         dateCell.classList.add(\"selected-date\");\r\n//     //     });\r\n//     // };\r\n\r\n//     const handleEventClick = (event) => {\r\n//         setSelectedEvent(event);\r\n//         setSelectedDate(null); // Reset selected date\r\n//         // addCheckboxesToDates(event);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"containe\">\r\n//             <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//                 <h2>Event List</h2>\r\n//                 <ul>\r\n//                     {events.map((event, i) => (\r\n//                         <li\r\n//                             key={i}\r\n//                             onClick={() => handleEventClick(event)}\r\n//                             style={{\r\n//                                 cursor: \"pointer\",\r\n//                                 fontWeight:\r\n//                                     selectedEvent && selectedEvent.id === event.id\r\n//                                         ? \"bold\"\r\n//                                         : \"normal\",\r\n//                             }}\r\n//                         >\r\n//                             {event.title}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//             </div>\r\n//             <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//                 <FullCalendar\r\n//                     plugins={[dayGridPlugin, interactionPlugin]}\r\n//                     initialView=\"dayGridMonth\"\r\n//                     selectable={true}\r\n//                     events={events}\r\n//                     dayCellContent={renderDateCell}\r\n//                     eventContent={(info) => {\r\n//                         return (\r\n//                             <div>\r\n//                                 <div>{info.event.title}</div>\r\n//                             </div>\r\n//                         );\r\n//                     }}\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\MonthSchedule.jsx",["1035","1036","1037","1038","1039","1040","1041"],"\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function MonthSchedule() {\r\n  // initial state\r\n\r\n  const [state, setState] = useState({\r\n    weekendsVisible: true,\r\n    externalEvents: [\r\n      {\r\n        title: \"Art 1\",\r\n        color: \"#0097a7\",\r\n        id: 34432,\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 2\",\r\n        color: \"#f44336\",\r\n        id: 323232,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 3\",\r\n        color: \"#f57f17\",\r\n        id: 1111,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 4\",\r\n        color: \"#90a4ae\",\r\n        id: 432432,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n    ],\r\n    // calendarEvents: [\r\n    //     {\r\n    //         id: 1,\r\n    //         title: \"All-day event\",\r\n    //         color: \"#388e3c\",\r\n    //         start: \"2020-12-12\",\r\n    //         end: \"2020-12-12\",\r\n    //         custom: \"questo è un campo custom\"\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: \"Timed event\",\r\n    //         color: \"#0097a7\",\r\n    //         start: \"2020-12-07\",\r\n    //         end: \"2020-12-10\",\r\n    //         custom: \"custom stuff\"\r\n    //     }\r\n    // ].map((event) => ({\r\n    //     ...event,\r\n    //     showDeleteButton: true,\r\n    //     extendedProps: {\r\n    //         ...event.extendedProps,\r\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\r\n    //     },\r\n    // }))\r\n  });\r\n\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n\r\n        return {\r\n          id: id,\r\n          title: title,\r\n          color: color,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // handle event receive\r\n  const handleEventReceive = (eventInfo) => {\r\n    const newEvent = {\r\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n      start: eventInfo.date,\r\n      end: eventInfo.date,\r\n      showDeleteButton: true,\r\n    };\r\n\r\n    // setState((prevState) => ({\r\n    //     ...prevState,\r\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n    // }));\r\n  };\r\n\r\n  // handle deletion of an event\r\n\r\n  const handleEventClick = (info) => {\r\n    console.log(info, \"sssss\");\r\n    info.event.remove();\r\n  };\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\r\n    const { event } = eventInfo;\r\n    const { title, timeText } = event;\r\n    console.log(eventInfo.timeText, \"ooooo\");\r\n    return (\r\n      <>\r\n        <div\r\n        //   style={{\r\n        //     display: \"flex\",\r\n        //     flexDirection: \"row\",\r\n        //     alignItems: \"center\",\r\n        //     justifyContent: \"space-evenly\",\r\n        //     height: \"-webkit-fill-available\",\r\n        //   }}\r\n        >\r\n       \r\n          <p className=\"m-0 fullcalender-title\">{title}</p>\r\n          {/* <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p> */}\r\n\r\n          {/* <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\r\n            de\r\n          </h5> */}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ float: \"left\", width: \"25%\" }}>\r\n        <div id=\"external-events\">\r\n          {state.externalEvents.map((event) => (\r\n            <div\r\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n              title={event.title}\r\n              data-id={event.id}\r\n              data-color={event.color}\r\n            \r\n              key={event.id}\r\n              style={{\r\n                backgroundColor: event.color,\r\n                borderColor: event.color,\r\n                cursor: \"pointer\"\r\n              }}\r\n            >\r\n              <div className=\"fc-event-main\">\r\n                <div>\r\n                  <strong>{event.title}</strong>\r\n                </div>\r\n                <img src={event.custom} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n            id=\"fullCalendar-table\"\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          // headerToolbar={{\r\n          //     left: \"\",\r\n          //     center: \"\",\r\n          //     right: \"\"\r\n          // }}\r\n          headerToolbar={false}\r\n          initialView=\"dayGridMonth\"\r\n        //   slotDuration=\"00:10:00\"\r\n        //   slotLabelInterval={{ hours: 1 }}\r\n          allDaySlot={false}\r\n          editable={true}\r\n          selectable={false}\r\n          selectMirror={true}\r\n          dayMaxEvents={false}\r\n          weekends={state.weekendsVisible}\r\n          // events={state.calendarEvents}\r\n          droppable={true}\r\n          eventReceive={handleEventReceive}\r\n          slotEventOverlap={false}\r\n          eventOverlap={false}\r\n          // select={handleSelect}\r\n          // eventClick={handleEventClick}\r\n          // eventRender={handleEventRender}\r\n          eventContent={renderEventContent}\r\n         \r\n        ></FullCalendar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyTestDay.jsx",["1042","1043","1044","1045","1046","1047"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function CopyTestDay() {\r\n  // initial state\r\n\r\n  const [state, setState] = useState({\r\n    weekendsVisible: true,\r\n    externalEvents: [\r\n      {\r\n        title: \"Art 1\",\r\n        color: \"#0097a7\",\r\n        id: 34432,\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 2\",\r\n        color: \"#f44336\",\r\n        id: 323232,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 3\",\r\n        color: \"#f57f17\",\r\n        id: 1111,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 4\",\r\n        color: \"#90a4ae\",\r\n        id: 432432,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n    ],\r\n    // calendarEvents: [\r\n    //     {\r\n    //         id: 1,\r\n    //         title: \"All-day event\",\r\n    //         color: \"#388e3c\",\r\n    //         start: \"2020-12-12\",\r\n    //         end: \"2020-12-12\",\r\n    //         custom: \"questo è un campo custom\"\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: \"Timed event\",\r\n    //         color: \"#0097a7\",\r\n    //         start: \"2020-12-07\",\r\n    //         end: \"2020-12-10\",\r\n    //         custom: \"custom stuff\"\r\n    //     }\r\n    // ].map((event) => ({\r\n    //     ...event,\r\n    //     showDeleteButton: true,\r\n    //     extendedProps: {\r\n    //         ...event.extendedProps,\r\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\r\n    //     },\r\n    // }))\r\n  });\r\n\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // handle event receive\r\n  const handleEventReceive = (eventInfo) => {\r\n    const newEvent = {\r\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n      start: eventInfo.date,\r\n      end: eventInfo.date,\r\n      custom: eventInfo.draggedEl.getAttribute(\"data-custom\"),\r\n      showDeleteButton: true,\r\n    };\r\n\r\n    // setState((prevState) => ({\r\n    //     ...prevState,\r\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n    // }));\r\n  };\r\n\r\n  // handle deletion of an event\r\n\r\n  const handleEventClick = (info) => {\r\n    console.log(info, \"sssss\");\r\n    info.event.remove();\r\n  };\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\r\n    const { event } = eventInfo;\r\n    const { title, timeText } = event;\r\n    console.log(eventInfo.timeText, \"ooooo\");\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-evenly\",\r\n            height: \"-webkit-fill-available\",\r\n          }}\r\n        >\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcelender-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalender-title\">{title}</p>\r\n          <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p>\r\n\r\n          <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\r\n            de\r\n          </h5>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  useEffect(() => {\r\n    const calendarEl = document.getElementById(\"fullCalendar-table\");\r\n    if (calendarEl) {\r\n      calendarEl.style.backgroundColor = \"#fff\"; // Set your desired background color here\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const calendarContainer = document.querySelector(\".fullcalendar-container\");\r\n    if (calendarContainer) {\r\n      calendarContainer.style.backgroundColor = \"#f0f0f0\"; // Set the desired background color here\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ float: \"left\", width: \"25%\" }}>\r\n        <div id=\"external-events\">\r\n          {state.externalEvents.map((event) => (\r\n            <div\r\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n              title={event.title}\r\n              data-id={event.id}\r\n              data-color={event.color}\r\n              data-custom={event.custom}\r\n              key={event.id}\r\n              style={{\r\n                backgroundColor: event.color,\r\n                borderColor: event.color,\r\n                cursor: \"pointer\"\r\n              }}\r\n            >\r\n              <div className=\"fc-event-main\">\r\n                <div>\r\n                  <strong>{event.title}</strong>\r\n                </div>\r\n                <img src={event.custom} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n            id=\"fullCalendar-table\"\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          // headerToolbar={{\r\n          //     left: \"\",\r\n          //     center: \"\",\r\n          //     right: \"\"\r\n          // }}\r\n          headerToolbar={false}\r\n          initialView=\"timeGridDay\"\r\n          slotDuration=\"00:10:00\"\r\n          slotLabelInterval={{ hours: 1 }}\r\n          allDaySlot={false}\r\n          editable={true}\r\n          selectable={false}\r\n          selectMirror={true}\r\n          dayMaxEvents={false}\r\n          weekends={state.weekendsVisible}\r\n          // events={state.calendarEvents}\r\n          droppable={true}\r\n          eventReceive={handleEventReceive}\r\n          slotEventOverlap={false}\r\n          eventOverlap={false}\r\n          // select={handleSelect}\r\n          // eventClick={handleEventClick}\r\n          // eventRender={handleEventRender}\r\n          eventContent={renderEventContent}\r\n         \r\n        ></FullCalendar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\ChooseLayout.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SelectComparison.jsx",["1048","1049","1050","1051","1052","1053"],"// import React, { useState } from 'react'\r\n// import { Button, Dropdown, Table } from \"react-bootstrap\";\r\n// import searchIcon from \"../../../img/search.png\";\r\n// import listIcon from \"../../../img/list-icon.png\";\r\n// import layoutSelected from \"../../../img/layout-select-img.png\";\r\n// import downArrow from \"../../../img/down-arrow.png\";\r\n// import menuIcon from \"../../../img/menu-icon.png\";\r\n// import defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n// import deleteIcon from \"../../../img/delete-icon.png\";\r\n// const SelectComparison = () => {\r\n//   const [allScreens, setAllScreens] = useState(\"\");\r\n\r\n//   const [checkedItems, setCheckedItems] = useState({});\r\n//   const [checkedValues, setCheckedValues] = useState([]);\r\n\r\n//   const handleCheckboxChange = (event) => {\r\n//     const newCheckedItems = {\r\n//       ...checkedItems,\r\n//       [event.target.name]: event.target.checked,\r\n//     };\r\n//     const selectedScreens = [];\r\n//     for (const key in newCheckedItems) {\r\n//       if (newCheckedItems[key] === true) {\r\n//         selectedScreens.push(key);\r\n//       }\r\n//     }\r\n//     setCheckedValues(selectedScreens);\r\n//     setCheckedItems(newCheckedItems);\r\n//   };\r\n\r\n//   const handleSelectAllChange = (event) => {\r\n//     const newCheckedItems = {};\r\n//     allScreens.forEach((item) => {\r\n//       newCheckedItems[item._id] = event.target.checked;\r\n//     });\r\n//     const selectedScreens = [];\r\n//     for (const key in newCheckedItems) {\r\n//       if (newCheckedItems[key] === true) {\r\n//         selectedScreens.push(key);\r\n//       }\r\n//     }\r\n//     setCheckedValues(selectedScreens);\r\n//     setCheckedItems(newCheckedItems);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//           <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\r\n//         <h1>Select Composition</h1>\r\n\r\n//         <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\r\n//           <div className=\"form-group mb-0\">\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control input-default \"\r\n//               placeholder=\"Search...\"\r\n//             />\r\n//             <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n//           </div>\r\n//           <Button\r\n//             className=\"ml-2 icon-btn\"\r\n//             variant=\"primary\"\r\n//           >\r\n//             <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n//           </Button>\r\n//         </div>\r\n//       </div>\r\n// {/*\r\n//       <Table responsive className=\"custom-table mt-3\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Composition</th>\r\n//               <th>Date Added</th>\r\n//               <th>Associated Schedule</th>\r\n//               <th>Tags</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n\r\n//                 <tr>\r\n//                   <td>\r\n//                     <span className=\"td-content d-flex name-td-content\">\r\n//                       <span className=\"name-img mr-2\">\r\n//                       <img\r\n//                   className=\"layout-select-img\"\r\n//                   src={layoutSelected}\r\n//                   alt=\"menu-icon\"\r\n//                 />\r\n//                       </span>\r\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>C-c02Nov 21 12:03</strong>\r\n//                         <span>Added by Gauri Batra</span>\r\n//                       </span>\r\n//                     </span>\r\n//                   </td>\r\n//                   <td>\r\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>2 Nov, 2021</strong>\r\n//                         <span>12:02 PM</span>\r\n//                       </span>\r\n//                   </td>\r\n//                   <td>\r\n//                    0\r\n//                   </td>\r\n//                   <td>\r\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\r\n\r\n//                   </td>\r\n//                 </tr>\r\n//                 <tr>\r\n//                   <td>\r\n//                     <span className=\"td-content d-flex name-td-content\">\r\n//                       <span className=\"name-img mr-2\">\r\n//                       <img\r\n//                   className=\"layout-select-img\"\r\n//                   src={layoutSelected}\r\n//                   alt=\"menu-icon\"\r\n//                 />\r\n//                       </span>\r\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>C-c02Nov 21 12:03</strong>\r\n//                         <span>Added by Gauri Batra</span>\r\n//                       </span>\r\n//                     </span>\r\n//                   </td>\r\n//                   <td>\r\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>2 Nov, 2021</strong>\r\n//                         <span>12:02 PM</span>\r\n//                       </span>\r\n//                   </td>\r\n//                   <td>\r\n//                    0\r\n//                   </td>\r\n//                   <td>\r\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\r\n\r\n//                   </td>\r\n//                 </tr>\r\n//           </tbody>\r\n//         </Table> */}\r\n\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default SelectComparison\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport TableLoader from \"../TableLoader\";\r\nimport \"../Table.css\";\r\nimport { getAllScreens, pushAddSchedule } from \"../../../utils/api\";\r\nimport { Button, Dropdown, Table } from \"react-bootstrap\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nconst SelectComparison = () => {\r\n  const history = useHistory();\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [scheduleName, setScheduleName] = useState(\"\");\r\n  // use effect\r\n  console.log(checkedItems, \"SelectCompariso checkedItemsn\");\r\n  console.log(checkedValues, \"SelectCompariso checkedValues\");\r\n\r\n  useEffect(() => {\r\n    callAllScreenApi();\r\n  }, []);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await pushAddSchedule({\r\n      name: scheduleName,\r\n      screens: checkedValues,\r\n    }).then((res) => {\r\n      console.log(res, \"res schedule name\");\r\n      if (res.data.statusCode === 200) {\r\n        console.log(res.data.data.name);\r\n        history.push(`/testday/${res.data.data._id}`);\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\r\n        <h1>Select Screen</h1>\r\n\r\n        {/* <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div> */}\r\n      </div>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"d-flex justify-content-between align-items-center my-4\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          className=\" schedule-name-input-feild form-control input-default \"\r\n          placeholder=\"Schedule Name\"\r\n          value={scheduleName}\r\n          onChange={(e) => setScheduleName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <Button className=\"mr-2\" variant=\"info add-screen-btn\" type=\"submit\">\r\n          Save\r\n        </Button>\r\n      </form>\r\n\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"width50\">\r\n              <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  id=\"checkbox1_exam_all\"\r\n                  onChange={handleSelectAllChange}\r\n                  required=\"\"\r\n                />\r\n                <label\r\n                  className=\"custom-control-label\"\r\n                  htmlFor=\"checkbox1_exam_all\"\r\n                ></label>\r\n              </div>\r\n            </th>\r\n            <th>Screen</th>\r\n            <th>Last Seen</th>\r\n            <th>Default Composition</th>\r\n            <th>Current Schedule</th>\r\n          </tr>\r\n        </thead>\r\n        {loading ? (\r\n          <TableLoader colSpan={5} />\r\n        ) : (\r\n          <tbody>\r\n            {allScreens !== \"\" &&\r\n              allScreens.map((screen) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          className=\"custom-control-input\"\r\n                          id={screen._id}\r\n                          name={screen._id}\r\n                          checked={checkedItems[screen._id]}\r\n                          onChange={handleCheckboxChange}\r\n                        />\r\n                        <label\r\n                          className=\"custom-control-label\"\r\n                          htmlFor={screen._id}\r\n                        ></label>\r\n                      </div>\r\n                    </td>\r\n\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>{screen.name}</strong>\r\n                        <span>{screen.screenLocation}</span>\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <span className=\"status status-green\"></span>\r\n                        <span className=\"td-content\">\r\n                          <strong>{screen.name}</strong>\r\n                          <span>{screen.screenLocation}</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>Default Compo. </td>\r\n                    <td>No Schedule</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        )}\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectComparison;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\reportsList.jsx",["1054","1055","1056","1057","1058","1059"],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { getReports } from \"../../../utils/api\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport GenerateReportModal from \"../../modals/generateReportModal\";\r\nimport Uptime from './Uptime';\r\nimport Media from './Media';\r\nimport Audit from './Audit';\r\n\r\nexport default function ReportsList() {\r\n  const history = useHistory();\r\n  const [dropValue, setDropValue] = useState(\"Select\");\r\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\r\n\r\n  let params = new URLSearchParams(history.location.search);\r\n  let startDate = params.get(\"startDate\");\r\n  let endDate = params.get(\"endDate\");\r\n  let type = params.get(\"type\");\r\n  let reportSlug = params.get(\"report\");\r\n  const [reportData, setReportData] = useState([]);\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n  useEffect(() => {\r\n    console.log(startDate, endDate, \"semnd api\");\r\n    getReports(startDate, endDate, reportSlug).then((res) => {\r\n      console.log(res, \"res schedule getReports\");\r\n      if (res.data.statusCode === 200) {\r\n        setReportData(res.data.data);\r\n        // history.push(`/reports-list/${res.data.data}`);\r\n        // <ReportsList data={res.data.data} />;\r\n      }\r\n    });\r\n  }, [startDate, endDate, reportSlug]);\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div className=\"custom-content-heading d-flex align-items-center\">\r\n        <div>\r\n          <h1 className=\"mb-4\">{reportSlug}</h1>\r\n        </div>\r\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              className=\"mt-1 mb-2\"\r\n            >\r\n              {dropValue}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Monthly\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Monthly\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Daily\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Daily\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Custom\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Custom\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n      {reportSlug && reportSlug == 'uptime-report' ? <Uptime reportData={reportData}/> : ''}\r\n      {reportSlug && reportSlug == 'media-report' ? <Media reportData={reportData}/> : ''}\r\n      {reportSlug && reportSlug == 'audit-logs' ? <Audit reportData={reportData}/> : ''}\r\n      \r\n      <GenerateReportModal\r\n        close={() => setShowGenerateModal(false)}\r\n        show={showGenerateModal}\r\n        reportType={reportSlug}\r\n        type={type}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\listComposition.jsx",["1060","1061","1062","1063"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../../img/down-arrow.svg\";\r\nimport listIcon from \"../../../../img/list-icon.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { deleteCompositionById, BASE_URL } from \"../../../../utils/api\";\r\nimport DeleteConfirmation from \"../../../modals/DeleteConfirmation\";\r\nimport CompositionActions from \"./CompositionActions\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../../utils/UtilsService\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport FilterModal from \"../../../modals/FilterModal\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\n\r\nconst ListComposition = ({\r\n  allComposition,\r\n  permission,\r\n  setIsRefresh,\r\n  setFilterData,\r\n}) => {\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n\r\n  const handleDelete = async () => {\r\n    setDeleteModal(false);\r\n    await deleteCompositionById(selected._id);\r\n    // mutate();\r\n    setIsRefresh(true);\r\n  };\r\n\r\n  const rows = [];\r\n  if (allComposition && allComposition.length > 0) {\r\n    allComposition.forEach((item) => {\r\n      rows.push({\r\n        id: item._id,\r\n        composition: item,\r\n        duration: item.duration,\r\n        schedule: item,\r\n        createdAt: item.createdAt,\r\n        tags: item,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <CompositionActions\r\n        composition={value}\r\n        //mutate={mutate}\r\n        setSelected={setSelected}\r\n        setDeleteModal={setDeleteModal}\r\n        permission={permission}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n    );\r\n  };\r\n  const renderName = (params) => {\r\n    const { value } = params;\r\n    const content = value.zones[0].content[0];\r\n    return (\r\n      <span className=\"td-content d-flex name-td-content\">\r\n        <span\r\n          className={`name-img mr-2  ${\r\n            content.type === \"video\" && \"videotableName\"\r\n          }`}\r\n        >\r\n          {content.type === \"image\" && (\r\n            <img\r\n              className=\"media-img img-fluid\"\r\n              src={`${BASE_URL}${content.url}`}\r\n              alt=\"media-img\"\r\n            />\r\n          )}\r\n          {content.type === \"video\" && content.duration.toFixed(0) / 60}\r\n        </span>\r\n        <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n          <strong>\r\n            {value.name.length > 7\r\n              ? value.name.slice(0, 7) + \"...\"\r\n              : value.name}\r\n          </strong>\r\n          <span>\r\n            {value.createdBy.length > 11\r\n              ? value.createdBy.slice(0, 11) + \"...\"\r\n              : value.createdBy}\r\n          </span>\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n  const renderSchedule = (params) => {\r\n    const { value } = params;\r\n    return <span className=\"td-content d-flex name-td-content\">Name</span>;\r\n  };\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.length > 2 ? (\r\n            <>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[0]}\r\n              </span>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[1]}\r\n              </span>\r\n              <span>...</span>\r\n            </>\r\n          ) : (\r\n            value.tags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\"\r\n              >\r\n                {tag}\r\n              </span>\r\n            ))\r\n          )}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n        <span>{getDatetimeIn12Hours(value)}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderDuration = (params) => {\r\n    const { value } = params;\r\n    return <span>{value} sec</span>;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      field: \"composition\",\r\n      headerName: \"Composition\",\r\n      flex: 1,\r\n      renderCell: renderName,\r\n    },\r\n    {\r\n      field: \"createdAt\",\r\n      headerName: \"Date added\",\r\n      flex: 1,\r\n      renderCell: renderDate,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"duration\",\r\n      headerName: \"Duration\",\r\n      renderCell: renderDuration,\r\n      flex: 1,\r\n    },\r\n    // {\r\n    //   field: \"schedule\",\r\n    //   headerName: \"Associated Schedule\",\r\n    //   renderCell:renderSchedule,\r\n    //   flex: 1,\r\n    // },\r\n    {\r\n      field: \"tags\",\r\n      headerName: \"Tags\",\r\n      renderCell: tagsRender,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"More\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      disableColumnMenu: true,\r\n    },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n  return (\r\n    <>\r\n      <FilterModal\r\n        showFilterModal={showFilterModal}\r\n        setFilterModal={setFilterModal}\r\n        setFilterData={setFilterData}\r\n        setIsRefresh={setIsRefresh}\r\n        type={[\"tags\"]}\r\n        selectedType={\"composition\"}\r\n      />\r\n      <div className=\"d-flex justify-content-end \">\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n          style={{ position: \"absolute\", top: \"10px\" }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button>\r\n      </div>\r\n\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={allComposition}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n          type={\"composition\"}\r\n        />\r\n      )}\r\n\r\n      {deleteModal && (\r\n        <DeleteConfirmation\r\n          setDeleteModal={setDeleteModal}\r\n          callbackFunction={handleDelete}\r\n          text=\"Are you sure you want to delete?\"\r\n          yes={\"Yes Delete\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\EditComposition.jsx",["1064","1065"],"import { useLocation } from \"react-router-dom\";\r\nimport useSWR from 'swr'\r\nimport CommonComposition from \"./Common\";\r\nimport { getCompositionById } from \"../../../../utils/api\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst EditComposition = () => {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const id = queryParams.get('id');\r\n\r\n  // const { data: composition , mutate , error} = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\r\n  const [composition,setComposition] = useState(null)\r\n  const layout = composition ? composition.layout : {};\r\n\r\n\r\n  // Example useEffect for triggering SWR mutate on route change\r\n  const getData = async ()=>{\r\n    const data  =await getCompositionById(`/vendor/layouts/composition?compositionId=${id}`)\r\n    setComposition(data)\r\n  }\r\n  useEffect(() => {\r\n    if(id){\r\n      getData()\r\n      \r\n    }\r\n  }, [id]);\r\n\r\n  return (<>{composition && <CommonComposition type=\"edit\" layout={layout} composition={composition}/>}</>)\r\n};\r\n\r\nexport default EditComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CreateComposition.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\details.jsx",["1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\nimport moment from \"moment\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\n\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport editIcon from \"../../../img/edit-icon.png\";\r\nimport powerIcon from \"../../../img/power-icon.png\";\r\nimport screenShotIcon from \"../../../img/screenshot-icon.png\";\r\nimport locationIcon from \"../../../img/location-icon.png\";\r\nimport accordionImg from \"../../../img/screen-accordion-img.png\";\r\nimport editComposition from \"../../../img/edit-composition.svg\";\r\nimport clockIcon from \"../../../img/clock-icon.png\";\r\nimport tagAddIcon from \"../../../img/icon-tag-add.png\";\r\nimport CompositionListModel from \"../../modals/CompolistionListModel\";\r\nimport {\r\n  deleteScreen,\r\n  getAllScreens,\r\n  getGroups,\r\n  assignScreenGroups,\r\n  handleWebData\r\n} from \"../../../utils/api\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport QuickPlayModal from \"../../modals/QuickPlayModal\";\r\nimport WindowsModal from \"../../modals/WindowsModal\";\r\nimport UpdateModal from \"../../modals/UpdateModal\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\n\r\nconst ScreenDetails = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [screen, setScreen] = useState(\"\");\r\n  console.log(screen, \"ooo\");\r\n  const [activeDefault, setActiveDefault] = useState(\"\");\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [showQuickPlayModal, setQuickPlayModal] = useState(false);\r\n  const [showWindowsModal, setWindowsModal] = useState(false);\r\n  const [showUpdateModal, setUpdateModal] = useState(false);\r\n  const [allGroups, setAllGroups] = useState([]);\r\n  const [selectedGroups, setSelectedGroups] = useState([]);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false)\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n\r\n  // use effect\r\n  useEffect(() => {\r\n    setIsRefresh(false);\r\n    callAllScreenApi();\r\n    callAllGroupsApi();\r\n  }, [isRefresh]);\r\n  useEffect(() => {\r\n    if (screen) {\r\n      screen.groups.map((i) => {\r\n        setSelectedGroups({ ...selectedGroups, [i._id]: true });\r\n      });\r\n\r\n      console.log(\"selectedGroups\", selectedGroups, screen);\r\n    }\r\n  }, [screen]);\r\n  const callAllScreenApi = async () => {\r\n    const list = await getAllScreens();\r\n    setScreen(\r\n      list.find((item) => {\r\n        return item._id === id;\r\n      })\r\n    );\r\n  };\r\n  const callAllGroupsApi = async () => {\r\n    const list = await getGroups();\r\n    console.log(\"Groups\", list);\r\n    setAllGroups(list.groups);\r\n  };\r\n  const handleDelete = async () => {\r\n    setDeleteModal(false);\r\n    await deleteScreen(id);\r\n    history.push(\"/display\");\r\n  };\r\n\r\n  const handleQuickPlay = async () => {\r\n    setDeleteModal(false);\r\n  };\r\n\r\n  const handleWindows = async () => {\r\n    setWindowsModal(false);\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    setWindowsModal(false);\r\n  };\r\n\r\n  const submitChangeGroups = async (e) => {\r\n    e.preventDefault();\r\n    //console.log(\"selectedGroups\",selectedGroups, Object.keys(selectedGroups));\r\n    const selectedGrp = selectedGroups;\r\n    const groupsData = Object.keys(selectedGrp).filter((i) => {\r\n      if (selectedGrp[i] == false) {\r\n        delete selectedGrp[i];\r\n      }\r\n      return selectedGrp[i] && selectedGrp[i] == true;\r\n    });\r\n    console.log(selectedGrp);\r\n    setSelectedGroups(selectedGrp);\r\n    if (groupsData.length <= 0) {\r\n      return toast.error(\"Please add some content...\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    }\r\n    if (!id) {\r\n      return toast.error(\"Something went wrong\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    }\r\n    console.log(\"gp\", groupsData, selectedGroups);\r\n    await assignScreenGroups({\r\n      screenId: id,\r\n      groupIds: groupsData,\r\n    });\r\n    setIsRefresh(true);\r\n    setIsEdit(false);\r\n    return toast.success(\"Groups has been assigned...\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n  };\r\n  // const handleChangeGroups = async(e) => {\r\n  //   e.preventDefault();\r\n  //   console.log()\r\n  //   if(e.target.checked){\r\n  //     setSelectedGroups({...selectedGroups, [e.target.name] : true})\r\n  //   }else{\r\n  //     const newData = selectedGroups;\r\n  //     delete newData[e.target.name];\r\n  //     setSelectedGroups(newData);\r\n  //   }\r\n  // }\r\n  const findEndTime = (value) => {\r\n    if (!value || value === undefined) {\r\n      return \"time not find\";\r\n    }\r\n    if (value !== undefined) {\r\n      return value?.timings[value.timings.length - 1]?.endTime;\r\n    }\r\n  }\r\n  const convertTimestampTo12HourFormat = (timestamp) => {\r\n    if (!timestamp) {\r\n        return \"Invalid timestamp\";\r\n    }\r\n    if (timestamp === \"time not find\") {\r\n        return \"Invalid timestamp\";\r\n    }\r\n\r\n    const timeParts = timestamp.split(\"T\")[1].split(\".\")[0].split(\":\");\r\n    let hours = 0;\r\n    const minutes = timeParts[1];\r\n\r\n    if (timeParts.length >= 1) {\r\n        hours = parseInt(timeParts[0]);\r\n\r\n        let amPm;\r\n        if (hours >= 12) {\r\n        amPm = \"PM\";\r\n        if (hours > 12) {\r\n            hours -= 12;\r\n        }\r\n        } else {\r\n        amPm = \"AM\";\r\n        if (hours === 0) {\r\n            hours = 12;\r\n        }\r\n        }\r\n\r\n        const convertedTime = `${hours}:${minutes} ${amPm}`;\r\n        return convertedTime;\r\n      } else {\r\n          return \"Invalid timestamp format\";\r\n      }\r\n  }\r\n  const renderStartDate = (value) => {\r\n    const maxDates = value.sequence.reduce((max, obj) => {\r\n      const parseDts = obj.dates.map((dt) => new Date(dt));\r\n      const objMax =\r\n        obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n      return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n    }, null);\r\n    const formatedDt = moment(new Date(maxDates)).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n\r\n    const minDates = value.sequence.reduce((min, obj) => {\r\n      const parseDt = obj.dates.map((dt) => new Date(dt));\r\n      const objMin =\r\n        parseDt.length > 0 ? Math.min(...parseDt) : null;\r\n      return objMin ? (min ? Math.min(min, objMin) : objMin) : min;\r\n    }, null);\r\n\r\n    const formatedDtMin = moment(new Date(minDates)).format(\r\n      \"YYYY-MM-DD\"\r\n    );\r\n\r\n    const maxTime = value.sequence.reduce((max, obj) => {\r\n      const parseDts = obj.dates.map((dt) => new Date(dt));\r\n      const objMax =\r\n        obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n      return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n    }, null);\r\n    const endTime = findEndTime(\r\n      value?.sequence[value?.sequence.length - 1]\r\n    );\r\n    return (\r\n      <div>\r\n          <span className=\"td-content\">\r\n              <strong> {formatedDtMin}</strong>\r\n              {\" \"}\r\n              <span>\r\n              {convertTimestampTo12HourFormat(\r\n                  value?.sequence[0]?.timings[0]?.startTime\r\n              )}\r\n              </span>\r\n          </span>\r\n      </div>\r\n    )\r\n  }\r\n  const renderEndDate = (value) => {\r\n      const maxDates = value.sequence.reduce((max, obj) => {\r\n        const parseDts = obj.dates.map((dt) => new Date(dt));\r\n        const objMax =\r\n          obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n        return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n      }, null);\r\n      const formatedDt = moment(new Date(maxDates)).format(\r\n        \"YYYY-MM-DD\"\r\n      );\r\n      const endTime = findEndTime(\r\n        value?.sequence[value?.sequence.length - 1]\r\n      );\r\n      return (\r\n        <div>\r\n            <span className=\"td-content\">\r\n                <strong> {formatedDt}</strong>\r\n                {\" \"}\r\n                <span>\r\n                {convertTimestampTo12HourFormat(endTime)}\r\n                </span>\r\n            </span>\r\n        </div>\r\n      )\r\n  }\r\n  const tagsRender = (params) => {\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {params?.tag?.map((tag, index) => (\r\n            <span\r\n              key={index}\r\n              className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\"\r\n            >\r\n              {tag}\r\n            </span>\r\n          ))}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, params);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n  const defaultAccordion = [\r\n    {\r\n      title: \"Content\",\r\n      text: (\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"accordion-custom-img\">\r\n                <img\r\n                  className=\"accordion-img\"\r\n                  src={screen.contentPlaying && screen.contentPlaying[0] && screen.contentPlaying[0].media && screen.contentPlaying[0].media.zones[0].content[0].type == 'image' ? BASE_URL+screen.contentPlaying[0].media.referenceUrl[0].split(\"**\")[0] : accordionImg}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"accordion-custom-content flex-1\">\r\n                <h6>Currently Playing</h6>\r\n                {screen?.contentPlaying ? (\r\n                  <p>{screen?.contentPlaying[0]?.media?.name}</p>\r\n                ) : (\r\n                  <p>{screen?.defaultComposition?.media?.name}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"accordion-custom-img\">\r\n                <img\r\n                  className=\"accordion-img\"\r\n                  src={screen.defaultComposition && screen.defaultComposition.media && screen.defaultComposition.media.referenceUrl && screen.defaultComposition.media.referenceUrl[0] ? BASE_URL+screen.defaultComposition.media.referenceUrl[0].split(\"**\")[0] : accordionImg}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"accordion-custom-content flex-1\">\r\n                <h6>\r\n                  Default Composition{\" \"}\r\n                  <span className=\"edit-compostion\">\r\n                    {\" \"}\r\n                    <img\r\n                      className=\"accordion-img\"\r\n                      src={editComposition}\r\n                      alt=\"menu-icon\"\r\n                      onClick={() => {\r\n                        setShowPublishPopUp(true);\r\n                        setSelectedScreen(screen._id);\r\n                      }}\r\n                    />\r\n                  </span>\r\n                </h6>\r\n                <p>{screen.defaultComposition && screen.defaultComposition.media ? screen.defaultComposition.media.name : \"--\"}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"schedule-custom-img\">\r\n                <img className=\"schedule-img\" src={clockIcon} alt=\"menu-icon\" />\r\n              </div>\r\n              <div className=\"accordion-custom-content active-schedule flex-1\">\r\n                <h6>Active Schedule</h6>\r\n                <h5>{screen?.schedule?.name}</h5>\r\n                <p className=\"date-schedule\">\r\n                  From {screen.schedule ? renderStartDate(screen.schedule) : '--'} - To {screen.schedule ? renderEndDate(screen.schedule) : '--'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      bg: \"primary\",\r\n    },\r\n    {\r\n      title: \"Device\",\r\n      text: (\r\n        <div className=\"device-accordion-content\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Private IP</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.drivers ? screen.drivers.privateIp : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Device OS</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.drivers ? screen.drivers.deviceOS : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Public IP</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.drivers ? screen.drivers.publicIp : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>APK Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>NA</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>MAC Address</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.drivers ? screen.drivers.mac : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>SDK Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>NA</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Device ID</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.device ? screen.device._id : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Javascript Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>{screen.drivers ? screen.drivers.javascriptVersion : \"--\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      bg: \"info\",\r\n    },\r\n    {\r\n      title: \"Tag\",\r\n      text: (\r\n        <div className=\"tag-accordion-content\">\r\n          <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n            {\r\n              screen && screen.tags && screen.tags.map((item, i) => {\r\n                return (\r\n                  <Badge\r\n                    className=\"badge-common-light badge-tag mr-2\"\r\n                    variant=\"outline-light\"\r\n                    id={i}\r\n                  >{item}</Badge>\r\n                )\r\n              })\r\n            }\r\n            <span className=\"tag-added\" style={{cursor:'pointer'}} onClick={(e) => {setNewTagModal(true);}}>\r\n              {\" \"}\r\n              <img className=\"tag-add-icon\" src={tagAddIcon} alt=\"menu-icon\" />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      bg: \"success\",\r\n    },\r\n    {\r\n      title: \"Groups\",\r\n      text: (\r\n        <div className=\"tag-accordion-content\">\r\n          {!isEdit && (\r\n            <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n              {screen &&\r\n                screen.groups.map((item) => {\r\n                  return (\r\n                    <Badge\r\n                      className=\"badge-common-light badge-tag mr-2\"\r\n                      variant=\"outline-light\"\r\n                    >\r\n                      {item.name}\r\n                    </Badge>\r\n                  );\r\n                })}\r\n              <span\r\n                className=\"tag-added\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={(e) => setIsEdit(true)}\r\n              >\r\n                {\" \"}\r\n                <img\r\n                  className=\"tag-add-icon\"\r\n                  src={tagAddIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </span>\r\n            </div>\r\n          )}\r\n          {isEdit && (\r\n            <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n              {allGroups && allGroups.length > 0 ? (\r\n                <>\r\n                  {allGroups.map((item) => {\r\n                    return (\r\n                      <div className=\"col-3\">\r\n                        <input\r\n                          id={\"check-\" + item._id}\r\n                          type=\"checkbox\"\r\n                          className=\"   \"\r\n                          required\r\n                          name={item._id}\r\n                          checked={selectedGroups && selectedGroups[item._id]}\r\n                          onChange={(e) =>\r\n                            setSelectedGroups({\r\n                              ...selectedGroups,\r\n                              [item._id]: e.target.checked,\r\n                            })\r\n                          }\r\n                        />\r\n                        <label className=\"mt-3 mr-3\">{item.name}</label>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              ) : (\r\n                \"NO Groups Found\"\r\n              )}\r\n              <span\r\n                className=\"tag-added\"\r\n                onClick={(e) => submitChangeGroups(e)}\r\n              >\r\n                <Button className=\"btn btn-sm btn-primary\">Save</Button>\r\n              </span>\r\n              <span\r\n                className=\"tag-added mr-2 ml-2\"\r\n                onClick={(e) => setIsEdit(false)}\r\n              >\r\n                <Button className=\"btn btn-sm btn-danger\">Cancel</Button>\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ),\r\n\r\n      bg: \"success\",\r\n    },\r\n  ];\r\n\r\n  const handleWeb = async (e, type) => {\r\n    e.preventDefault();\r\n    await handleWebData({screenId:screen._id,type}).then((res) => {\r\n      if(res){\r\n        return toast.success(res.data.message, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        });\r\n      }\r\n    }).then((error) => {\r\n      // if(cache && cache !== \"undefined\"){\r\n      //   return toast.error(cache.data.message, {\r\n      //     position: \"top-right\",\r\n      //     autoClose: 5000,\r\n      //     hideProgressBar: false,\r\n      //     closeOnClick: true,\r\n      //     pauseOnHover: true,\r\n      //     draggable: true,\r\n      //     progress: undefined,\r\n      //     theme: \"light\",\r\n      //   });\r\n      // }\r\n    })\r\n    //console.log(type)\r\n  }\r\n\r\n  if (!screen) return <></>;\r\n  return (\r\n    <>\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          selected={screen}\r\n          setIsRefresh={setIsRefresh}\r\n        />\r\n      )}\r\n      <div className=\"custom-content-heading d-flex flex-wrap align-items-center\">\r\n        <h1 className=\"mr-auto\">Screen Details</h1>\r\n        <Button\r\n          className=\"edit-screen-btn d-flex align-items-center\"\r\n          variant=\"outline-light\"\r\n          onClick={() => {\r\n            setUpdateModal(true);\r\n          }}\r\n        >\r\n          Edit Screen{\" \"}\r\n          <span className=\"btn-icon-right\">\r\n            <img className=\"edit-icon\" src={editIcon} alt=\"menu-icon\" />\r\n          </span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"accordion-overflow\">\r\n        <div className=\"form-head d-flex mb-3 align-items-start mt-2 pr-3\">\r\n          <span className=\"screen-subheading\">{screen.name}</span>\r\n\r\n          <div className=\"ml-auto d-flex flex-wrap align-items-center\">\r\n            <a\r\n              className=\" btn btn-primary btn-xs\"\r\n              variant=\"primary\"\r\n              href={`/web-player?id=${screen.device.deviceToken}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Launch Web Player\r\n            </a>\r\n\r\n            <Button\r\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\r\n              variant=\"primary\"\r\n              onClick={() => {\r\n                setQuickPlayModal(true);\r\n              }}\r\n            >\r\n              <img\r\n                className=\"dropdown-list-img-icon img-fluid\"\r\n                src={powerIcon}\r\n                alt=\"menu-icon\"\r\n              />\r\n            </Button>\r\n            <Button\r\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\r\n              variant=\"primary\"\r\n              onClick={() => {\r\n                setWindowsModal(true);\r\n              }}\r\n            >\r\n              <img\r\n                className=\"dropdown-list-img-icon img-fluid screenshot-icon\"\r\n                src={screenShotIcon}\r\n                alt=\"menu-icon\"\r\n              />\r\n            </Button>\r\n            <DropdownButton\r\n              as={ButtonGroup}\r\n              title=\"\"\r\n              id=\"bg-nested-dropdown\"\r\n              className=\"ml-2  more-icon-dropdown\"\r\n            >\r\n              <Dropdown.Item eventKey=\"1\" onClick={(e) => {handleWeb(e, 'reload_display')}}>Reload Screen</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"2\" onClick={(e) => {handleWeb(e, 'clear_data')}}>Clear Cache</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"3\" onClick={(e) => {handleWeb(e, 'clear_cache')}}>Clear Data</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"4\" onClick={(e) => {handleWeb(e, 'reboot_display')}}>Reboot display</Dropdown.Item>\r\n\r\n              <Dropdown.Item\r\n                eventKey=\"5\"\r\n                onClick={() => {\r\n                  setDeleteModal(true);\r\n                }}\r\n              >\r\n                Deactivate Screen\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row location-row mx-0\">\r\n          <div className=\"col-sm-6 p-md-0\">\r\n            <div className=\"location-col\">\r\n              <h4>\r\n                <img\r\n                  className=\"locationt-icon-img\"\r\n                  src={locationIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n                {screen.googleLocation}\r\n              </h4>\r\n              <p className=\"active-row d-flex align-items-center\">\r\n                <span\r\n                  className={` ${\r\n                    screen.isConnected ? \"active-status\" : \"deactive-status\"\r\n                  }`}\r\n                ></span>{\" \"}\r\n                {screen.isConnected ? \" Active Now\" : \"Offline\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row accordion-overflow-scroll\">\r\n          <div className=\"col-md-12 \">\r\n            <Accordion\r\n              className=\"accordion accordion-primary custom-accordion\"\r\n              defaultActiveKey=\"\"\r\n            >\r\n              {defaultAccordion.map((d, i) => (\r\n                <div className=\"accordion__item details-accordian\" key={i}>\r\n                  <Accordion.Toggle\r\n                    as={Card.Text}\r\n                    eventKey={`${i}`}\r\n                    className={`accordion__header rounded-lg ${\r\n                      activeDefault === i ? \"\" : \"collapsed\"\r\n                    }`}\r\n                    onClick={() =>\r\n                      setActiveDefault(activeDefault === i ? -1 : i)\r\n                    }\r\n                  >\r\n                    <span className=\"accordion__header--text\">{d.title}</span>\r\n                    <span className=\"accordion__header--indicator\"></span>\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`${i}`}>\r\n                    <div className=\"accordion__body--text\">{d.text}</div>\r\n                  </Accordion.Collapse>\r\n                </div>\r\n              ))}\r\n            </Accordion>\r\n          </div>\r\n          {deleteModal && (\r\n            <DeleteConfirmation\r\n              setDeleteModal={setDeleteModal}\r\n              callbackFunction={handleDelete}\r\n              text=\"Are you sure you want to deactivate?\"\r\n              yes={\"Yes Deactivate\"}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        <QuickPlayModal\r\n          showQuickPlayModal={showQuickPlayModal}\r\n          setQuickPlayModal={setQuickPlayModal}\r\n          //handleQuickPlay={handleQuickPlay}\r\n          selected={screen}\r\n          type={\"composition\"}\r\n\r\n        />\r\n\r\n        <WindowsModal\r\n          showWindowsModal={showWindowsModal}\r\n          setWindowsModal={setWindowsModal}\r\n          handleWindows={handleWindows}\r\n        />\r\n\r\n        <UpdateModal\r\n          showUpdateModal={showUpdateModal}\r\n          setUpdateModal={setUpdateModal}\r\n          handleUpdate={handleUpdate}\r\n        />\r\n        {showPublishPopUp && (\r\n        <CompositionListModel\r\n          selected={screen._id}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"composition\"\r\n        />\r\n      )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScreenDetails;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\QuickSearchToolbar.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CustomNoRowsOverlay.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\PublishMediaModal.jsx",["1078","1079","1080","1081"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllScreens, publishMedia, setQuickplay } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport \"../components/Table.css\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    callAllScreenApi();\r\n  }, []);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    await publishMedia({\r\n      id: selected._id,\r\n      screenIds: checkedValues,\r\n      duration: 600,\r\n      type: type,\r\n    });\r\n    // await setQuickplay({\r\n    //   name,\r\n    //   compositionId: selected._id,\r\n    //   screens: checkedValues,\r\n    //   duration: 600\r\n    // });\r\n    setPublished(true);\r\n    // setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {type === \"media\" ? \"Publish Media\" : \"Assign Quickplay\"}\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowPublishPopUp(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        {published && (\r\n          <Modal.Body>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <h3>Media Published</h3>\r\n            </div>\r\n          </Modal.Body>\r\n        )}\r\n        {!published && (\r\n          <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        onChange={handleSelectAllChange}\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Screen</th>\r\n                  <th>Last Seen</th>\r\n                  <th>Default Composition</th>\r\n                  <th>Current Schedule</th>\r\n                </tr>\r\n              </thead>\r\n              {loading ? (\r\n                <TableLoader colSpan={5} />\r\n              ) : (\r\n                <tbody>\r\n                  {allScreens !== \"\" &&\r\n                    allScreens.map((screen) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>\r\n                            <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                className=\"custom-control-input\"\r\n                                id={screen._id}\r\n                                name={screen._id}\r\n                                checked={checkedItems[screen._id]}\r\n                                onChange={handleCheckboxChange}\r\n                              />\r\n                              <label\r\n                                className=\"custom-control-label\"\r\n                                htmlFor={screen._id}\r\n                              ></label>\r\n                            </div>\r\n                          </td>\r\n\r\n                          <td>\r\n                            <span className=\"td-content\">\r\n                              <strong>{screen.name}</strong>\r\n                              <span>{screen.screenLocation}</span>\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"d-flex align-items-center\">\r\n                              <span className=\"status status-green\"></span>\r\n                              <span className=\"td-content\">\r\n                                <strong>{screen.name}</strong>\r\n                                <span>{screen.screenLocation}</span>\r\n                              </span>\r\n                            </span>\r\n                          </td>\r\n                          <td>Default Compo. </td>\r\n                          <td>No Schedule</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n        )}\r\n\r\n        <Modal.Footer>\r\n          {!published && (\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={checkedValues.length === 0}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\index.jsx",["1082","1083","1084","1085","1086","1087","1088","1089"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport scheduleIcon from \"../../../img/Vector.png\";\r\nimport computer from \"../../../img/computer.png\";\r\nimport logs from \"../../../img/logs.png\";\r\nimport GenerateReportModal from \"../../modals/generateReportModal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getReports } from \"../../../utils/api\";\r\nimport Uptime from \"./Uptime\";\r\nimport Media from \"./Media\";\r\nimport Audit from \"./Audit\";\r\nimport backicon from \"../../../img/backicon.png\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\n\r\nconst Reports = ({permission}) => {\r\n  const history = useHistory();\r\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\r\n  const [reportType, setReportType] = useState(\"\");\r\n  const [filter, setFilter] = useState({});\r\n  const [reportData, setReportData] = useState([]);\r\n  const [dropValue, setDropValue] = useState(\"Filter\");\r\n  let params = new URLSearchParams(history.location.search);\r\n  let reportSlug = params.get(\"report\");\r\n\r\n  const handleClick = (e, type) => {\r\n    e.preventDefault();\r\n    if(permission && permission.permission.REPORTS.view){\r\n      history.push(`/reports?report=${type}`);\r\n    }\r\n  };\r\n\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (reportSlug && reportSlug !== \"\" && Object.keys(filter).length == 0) {\r\n      setShowGenerateModal(true);\r\n    }\r\n    if (Object.keys(filter).length > 0 && reportSlug !== \"\") {\r\n      getReports(filter.startDate, filter.endDate, reportSlug).then((res) => {\r\n        if (res.data.statusCode === 200) {\r\n          setReportData(res.data.data);\r\n        }\r\n      });\r\n    }\r\n  }, [reportSlug, filter]);\r\n\r\n  useEffect(() => {\r\n    if(permission && permission.permission.REPORTS.view){\r\n      if (reportSlug && reportSlug == \"media-report\") {\r\n        setReportType(\"Media Report\");\r\n      }\r\n      if (reportSlug && reportSlug == \"uptime-report\") {\r\n        setReportType(\"Uptime Report\");\r\n      }\r\n      if (reportSlug && reportSlug == \"audit-logs\") {\r\n        setReportType(\"Audit Logs\");\r\n      }\r\n    }\r\n  }, [reportData]);\r\n\r\n  const redirectBack = (e) => {\r\n    e.preventDefault();\r\n    setReportData([]);\r\n    setFilter({});\r\n    setReportType(\"\");\r\n    history.push(\"/reports\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {reportSlug && reportSlug !== \"\" ? (\r\n        \"\"\r\n      ) : (\r\n        <>\r\n          <div className=\"custom-content-heading d-flex flex-wrap \">\r\n            <div>\r\n              <h1 className=\"mb-1\">Reports</h1>\r\n              <p className=\"three-layout-paragrapgh\">\r\n                Which report would you like to generate?\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <Row>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"media-report\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={scheduleIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6> Media Report</h6>\r\n                <p>Shows for how much time Media file is played</p>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"uptime-report\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={computer}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Uptime Report</h6>\r\n                <p>Shows for how much time screen was displaying content</p>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"audit-logs\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={logs}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Audit Logs</h6>\r\n                <p>Shows data about users and their activity</p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      )}\r\n      {reportData && reportSlug ? (\r\n        <>\r\n          <div className=\"custom-content-heading d-flex align-items-center\">\r\n            <div>\r\n              <button\r\n                onClick={(e) => {\r\n                  redirectBack(e);\r\n                }}\r\n                className=\"back-button\"\r\n              >\r\n                <img src={backicon} alt=\"icon\" />\r\n              </button>\r\n            </div>\r\n            <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n              <Dropdown>\r\n                <Dropdown.Toggle\r\n                  variant=\"outline-primary\"\r\n                  size=\"sm\"\r\n                  className=\"mt-1 mb-2\"\r\n                >\r\n                  {dropValue}\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Monthly\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Monthly\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Daily\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Daily\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Custom\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Custom\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"custom-content-heading\">\r\n            <h1 className=\"mb-4\">{reportType}</h1>\r\n          </div>\r\n\r\n          {reportSlug && reportSlug == \"uptime-report\" ? (\r\n            permission && permission.permission.REPORTS.view ? <Uptime reportData={reportData} /> : <LockScreen message={\"You don't have permssion to access this !!!\"} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {reportSlug && reportSlug == \"media-report\" ? (\r\n            permission && permission.permission.REPORTS.view ? <Media reportData={reportData} /> : <LockScreen message={\"You don't have permssion to access this !!!\"} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {reportSlug && reportSlug == \"audit-logs\" ? (\r\n            permission && permission.permission.REPORTS.view ? <Audit reportData={reportData} /> : <LockScreen message={\"You don't have permssion to access this !!!\"} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <GenerateReportModal\r\n        close={() => setShowGenerateModal(false)}\r\n        show={showGenerateModal}\r\n        setReportType={reportType}\r\n        setFilter={setFilter}\r\n        filter={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      auth: state.auth.auth,\r\n      permission : state.auth.permission\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Reports);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\index.jsx",["1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\index.jsx",["1119"],"import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport ListMedia from \"./defaultComposition\";\r\nimport { roles } from \"aria-query\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getUsers,\r\n  getGroups,\r\n  getRoles,\r\n  getDeviceProfile,\r\n} from \"../../../utils/api\";\r\nimport User from \"./User\";\r\nimport AddUserModal from \"../../modals/AddUserModal\";\r\nimport AddGroup from \"../../modals/AddGroup\";\r\nimport Group from \"./group\";\r\nimport Roles from \"./roles\";\r\nimport Profile from \"./profile\";\r\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\r\nimport ChangePassword from \"../../modals/ChangePassword\";\r\n\r\nconst Settings = ({ permission, auth }) => {\r\n  console.log(\"permission\", permission);\r\n  const [dropValue, setDropValue] = useState(\"Default Content\");\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [allGroups, setAllGroups] = useState([]);\r\n  const [allRoles, setAllRoles] = useState([]);\r\n  const [allDeviceProfile, setAllDeviceProfile] = useState([]);\r\n  const [showGroupModel, setShowGroupModel] = useState(false);\r\n  const [showProfileModel, setShowProfileModel] = useState(false);\r\n  const [showAddUserModel, setShowAddUserModel] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n\r\n  const callUsersApi = async () => {\r\n    const list = await getUsers();\r\n    console.log(\"users\", list);\r\n    setAllUsers(list);\r\n  };\r\n\r\n  const callGroupsApi = async () => {\r\n    const list = await getGroups();\r\n    console.log(\"groups\", list);\r\n    setAllGroups(list);\r\n  };\r\n\r\n  const callRolesApi = async () => {\r\n    const list = await getRoles();\r\n    console.log(\"roles\", list);\r\n    setAllRoles(list);\r\n  };\r\n\r\n  const callDeviceProfileApi = async () => {\r\n    setLoading(true);\r\n    const list = await getDeviceProfile();\r\n    console.log(\"deviceProfile\", list);\r\n    setAllDeviceProfile(list);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    callUsersApi();\r\n    callGroupsApi();\r\n    callRolesApi();\r\n    callDeviceProfileApi();\r\n    setIsRefresh(false);\r\n    // if(publishType && publishType === 'schedule'){\r\n    //   getSchedule();\r\n    // }\r\n    // if(publishType && publishType === 'quickplay'){\r\n    //   getQuickplay();\r\n    // }\r\n    // if(publishType && publishType === 'defaultComposition'){\r\n    //   getDefault();\r\n    // }\r\n  }, [dropValue, isRefresh]);\r\n\r\n  const handleUser = (e) => {\r\n    e.preventDefault();\r\n    setShowAddUserModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  const handleGroup = (e) => {\r\n    e.preventDefault();\r\n    setShowGroupModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  const handleDevice = (e) => {\r\n    e.preventDefault();\r\n    setShowProfileModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ChangePassword\r\n        setShowModel={() => setShowModal(false)}\r\n        show={showModal}\r\n      />\r\n\r\n      <AddUserModal\r\n        open={showAddUserModel}\r\n        setShowAddUserModel={setShowAddUserModel}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n      <AddGroup\r\n        open={showGroupModel}\r\n        setShowGroupModel={setShowGroupModel}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n      <AddDeviceProfile\r\n        open={showProfileModel}\r\n        setShowProfileModel={setShowProfileModel}\r\n        setIsRefresh={setIsRefresh}\r\n        loading={loading}\r\n      />\r\n      <ChangePassword\r\n        setShowModel={() => setShowModal(false)}\r\n        show={showModal}\r\n      />\r\n      <div\r\n        className=\"custom-content-heading d-flex flex-wrap\"\r\n        style={{ minHeight: \"600px !important\" }}\r\n      >\r\n        <h1>Settings</h1>\r\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              className=\"mt-1 mb-2\"\r\n            >\r\n              {dropValue}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Default Content\");\r\n                }}\r\n              >\r\n                Default Content\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Groups\");\r\n                }}\r\n              >\r\n                Groups\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Users\");\r\n                }}\r\n              >\r\n                Users\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Roles\");\r\n                }}\r\n              >\r\n                Roles\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Device Profile\");\r\n                }}\r\n              >\r\n                Device Profile\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  setShowModal(true);\r\n                }}\r\n              >\r\n                Change Password\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n\r\n      <h4>{dropValue}</h4>\r\n      <h6>Loggedin By {auth.vendor.email}</h6>\r\n      {dropValue && dropValue === \"Default Content\" && <ListMedia />}\r\n      {dropValue && dropValue === \"Users\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn-sm  btn-success btn btn-primary  primary-btn setting-page-btn \"\r\n              onClick={(e) => {\r\n                handleUser(e);\r\n              }}\r\n            >\r\n              Add User\r\n            </button>\r\n          </div>\r\n          <User\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            users={allUsers}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Groups\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn  btn-success btn btn-primary  primary-btn  setting-page-btn\"\r\n              onClick={(e) => {\r\n                handleGroup(e);\r\n              }}\r\n            >\r\n              Add Groups\r\n            </button>\r\n          </div>\r\n          <Group\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            groups={allGroups}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Roles\" && (\r\n        <>\r\n          <Roles\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            roles={allRoles}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Device Profile\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn\"\r\n              onClick={(e) => {\r\n                handleDevice(e);\r\n              }}\r\n            >\r\n              Add Device Profile\r\n            </button>\r\n          </div>\r\n          <Profile\r\n            allDeviceProfile={allDeviceProfile}\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth.auth,\r\n    permission: state.auth.permission,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Settings);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\index.jsx",["1120","1121","1122","1123","1124","1125","1126","1127"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Dropdown } from \"react-bootstrap\";\r\nimport ListMedia from \"./listMedia\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\nimport UploadMediaModal from \"../../modals/UploadMediaFileModal\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\nimport uploadIcon from \"../../../img/upload-icon.png\";\r\nimport canvaIcon from \"../../../img/canva-icon.png\";\r\nimport { getAllMedia } from \"../../../utils/api\";\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nimport useSWR from \"swr\";\r\nimport PhotoEditorSDK from \"../PhotoEditorSDK\";\r\nimport PhotoEditorModal from \"../../modals/PhotoEditorModal\";\r\n\r\nconst Media = ({ auth, permission }) => {\r\n  const [showUploadMediaModal, setUploadMediaModal] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [filterData, setFilterData] = useState({\r\n    groups: [],\r\n    tags: [],\r\n    shows: [],\r\n  });\r\n  const [allMedia, setAllMedia] = useState([]);\r\n  const [openEditor, setOpenEditor] = useState(false);\r\n  const [editorType, setEditorType] = useState(null)\r\n\r\n  // const { data: allMedia, mutate } = useSWR(\r\n  //   \"/vendor/display/media\",\r\n  //   getAllMedia\r\n  // );\r\n  const callAllMedialApi = async () => {\r\n    let str = \"\";\r\n    // if(filterData.groups && filterData.groups.length > 0){\r\n    //   filterData.groups.map((grp, i) => {\r\n    //     return str += `groups[${i}]=${grp}&`\r\n    //   })\r\n    // }\r\n    if (filterData.tags && filterData.tags.length > 0) {\r\n      filterData.tags.map((tg, i) => {\r\n        return (str += `tags[${i}]=${tg}&`);\r\n      });\r\n    }\r\n    // if(filterData.shows && filterData.shows.length > 0){\r\n    //   filterData.shows.map((tg, i) => {\r\n    //     return str += `status[${i}]=${tg}&`\r\n    //   })\r\n    // }\r\n    const list = await getAllMedia(str);\r\n    console.log(\"list\", list);\r\n    setAllMedia(list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsRefresh(false);\r\n    callAllMedialApi();\r\n  }, [isRefresh]);\r\n\r\n  const handleEditor = (e, type) => {\r\n    e.preventDefault();\r\n    setEditorType(type);\r\n    setOpenEditor(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PhotoEditorModal\r\n        openEditor={openEditor}\r\n        setOpenEditor={setOpenEditor}\r\n        setIsRefresh={setIsRefresh}\r\n        type={editorType}\r\n      />\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1>Assets</h1>\r\n      </div>\r\n      <div style={{ position: \"relative\" }}>\r\n        {permission && !permission.permission.ASSETS.add && (\r\n          <div className=\"form-head d-flex mb-3 align-items-start\">\r\n            <Button className=\"mr-2\" variant=\"info add-screen-btn\" disabled>\r\n              Add Media\r\n              <span className=\"btn-icon-right\">\r\n                <div className=\"glyph-icon flaticon-381-lock-1\"></div>\r\n              </span>\r\n            </Button>\r\n          </div>\r\n        )}\r\n\r\n        {permission && permission.permission.ASSETS.add && (\r\n          <div className=\"form-head d-flex mb-3 align-items-start\">\r\n            <Dropdown className=\"dropdown-toggle-menu\">\r\n              <Dropdown.Toggle\r\n                variant=\"\"\r\n                className=\"mb-2 d-flex align-items-center justify-content-center add-media-btn\"\r\n              >\r\n                <span className=\"addmedia-btn-text\">Add Media</span>\r\n                <span className=\"btn-icon-right d-flex align-items-center justify-content-center\">\r\n                  <div className=\"glyph-icon flaticon-381-add-1\"></div>\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"dropdown-list-item\"\r\n                  onClick={() => {\r\n                    setUploadMediaModal(true);\r\n                  }}\r\n                >\r\n                  <div className=\"d-flex\">\r\n                    <div className=\"dropdown-list-icon\">\r\n                      <img\r\n                        className=\"dropdown-list-img img-fluid\"\r\n                        src={uploadIcon}\r\n                        alt=\"menu-icon\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"dropdown-menu-list\">\r\n                      <span className=\"menu-heading\">Upload Files</span>\r\n                      <span className=\"menu-description\">\r\n                        Get to know more about screen info\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                  onClick={(e) => {\r\n                    handleEditor(e, 'default');\r\n                  }}\r\n                  className=\"dropdown-list-item\"\r\n                >\r\n                  <div className=\"d-flex\">\r\n                    <div className=\"dropdown-list-icon\">\r\n                      <img\r\n                        className=\"dropdown-list-img img-fluid\"\r\n                        src={canvaIcon}\r\n                        alt=\"menu-icon\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"dropdown-menu-list\">\r\n                      <span className=\"menu-heading\">Default Design</span>\r\n                      <span className=\"menu-description\">\r\n                        Get to know more about screen info\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Dropdown.Item>\r\n                <Dropdown.Item\r\n                   onClick={(e) => {\r\n                    handleEditor(e, 'custom');\r\n                  }}\r\n                  className=\"dropdown-list-item\"\r\n                >\r\n                  <div className=\"d-flex\">\r\n                    <div className=\"dropdown-list-icon\">\r\n                      <img\r\n                        className=\"dropdown-list-img img-fluid\"\r\n                        src={canvaIcon}\r\n                        alt=\"menu-icon\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"dropdown-menu-list\">\r\n                      <span className=\"menu-heading\">Custom Design</span>\r\n                      <span className=\"menu-description\">\r\n                        Get to know more about screen info\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <UploadMediaModal\r\n              showUploadMediaModal={showUploadMediaModal}\r\n              setUploadMediaModal={setUploadMediaModal}\r\n              //callAllMediaApi={mutate}\r\n              setIsRefresh={setIsRefresh}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {permission && permission.permission.ASSETS.view ? (\r\n          <ListMedia\r\n            allMedia={allMedia}\r\n            auth={auth}\r\n            //callAllMediaApi={mutate}\r\n            permission={permission}\r\n            setIsRefresh={setIsRefresh}\r\n            setFilterData={setFilterData}\r\n          />\r\n        ) : (\r\n          <LockScreen\r\n            message={\"You don't have permission to access this !!!\"}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // errorMessage: state.auth.errorMessage,\r\n    // successMessage: state.auth.successMessage,\r\n    auth: state.auth.auth,\r\n    permission: state.auth.permission,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Media);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\index.jsx",["1128","1129","1130","1131","1132"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ListScreen from \"./listScreens\";\r\nimport AddScreenModal from \"../../modals/AddScreenModal\";\r\n// import FilterModal from \"../../modals/FilterModal\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\nimport { getAllScreens } from \"../../../utils/api\";\r\nimport LockScreen from \"../../pages/LockScreen\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Screen = ({ userPermission, auth }) => {\r\n  console.log(\"userPermission\", userPermission);\r\n  const [showScreenModal, setShowScreenModal] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [filterData, setFilterData] = useState({\r\n    groups: [],\r\n    tags: [],\r\n    shows: [],\r\n  });\r\n  // use effect\r\n  useEffect(() => {\r\n    console.log(\"Refrshing\", filterData);\r\n    setIsRefresh(false);\r\n    callAllScreenApi();\r\n  }, [isRefresh]);\r\n  const callAllScreenApi = async () => {\r\n    console.log(filterData);\r\n    let str = \"\";\r\n    if (filterData.groups && filterData.groups.length > 0) {\r\n      filterData.groups.map((grp, i) => {\r\n        return (str += `groups[${i}]=${grp}&`);\r\n      });\r\n    }\r\n    if (filterData.tags && filterData.tags.length > 0) {\r\n      filterData.tags.map((tg, i) => {\r\n        return (str += `tags[${i}]=${tg}&`);\r\n      });\r\n    }\r\n    if (filterData.shows && filterData.shows.length > 0) {\r\n      filterData.shows.map((tg, i) => {\r\n        //return (str += `status[${i}]=${tg}&`);\r\n        return (str += `status=${tg}&`);\r\n      });\r\n    }\r\n    const list = await getAllScreens(str);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleShowScreens = (e) => {\r\n    e.preventDefault();\r\n    if (allScreens && allScreens.length >= auth.vendor.totalScreens) {\r\n      return toast.error(\r\n        \"Please contact Trendy Administrator or email info@frontline.sa\",\r\n        {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        }\r\n      );\r\n    } else {\r\n      setShowScreenModal(true);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1>Screen</h1>\r\n      </div>\r\n      <div style={{ position: \"relative\" }}>\r\n        <div className=\"form-head d-flex mb-3 align-items-start\">\r\n          {userPermission && userPermission.permission.SCREEN.add ? (\r\n            <Button\r\n              className=\"mr-2\"\r\n              variant=\"info add-screen-btn\"\r\n              onClick={(e) => {\r\n                handleShowScreens(e);\r\n              }}\r\n            >\r\n              Add New Screen\r\n              <span className=\"btn-icon-right\">\r\n                <div className=\"glyph-icon flaticon-381-add-1\"></div>\r\n              </span>\r\n            </Button>\r\n          ) : (\r\n            <Button className=\"mr-2\" variant=\"info add-screen-btn\" disabled>\r\n              Add New Screen\r\n              <span className=\"btn-icon-right\">\r\n                <div className=\"glyph-icon flaticon-381-lock-1\"></div>\r\n              </span>\r\n            </Button>\r\n          )}\r\n\r\n          {/* <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button\r\n            className=\"ml-2 icon-btn\"\r\n            variant=\"primary\"\r\n            onClick={() => {\r\n              setFilterModal(true);\r\n            }}\r\n          >\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div> */}\r\n          {showScreenModal && (\r\n            <AddScreenModal\r\n              setShowScreenModal={setShowScreenModal}\r\n              callAllScreenApi={callAllScreenApi}\r\n            />\r\n          )}\r\n\r\n          {/* <FilterModal\r\n          showFilterModal={showFilterModal}\r\n          setFilterModal={setFilterModal}\r\n        /> */}\r\n        </div>\r\n        {userPermission && userPermission.permission.SCREEN.view ? (\r\n          <ListScreen\r\n            allScreens={allScreens}\r\n            setIsRefresh={setIsRefresh}\r\n            setFilterData={setFilterData}\r\n          />\r\n        ) : (\r\n          <LockScreen\r\n            message={\"You don't have permission to access this !!!\"}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userPermission: state.auth.permission,\r\n    auth: state.auth.auth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Screen);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\FilterModal.jsx",["1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147"],"import { useState, useEffect } from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getGroups, getAllTags } from \"../../utils/api\";\r\n\r\nconst FilterModal = ({\r\n  showFilterModal,\r\n  setFilterModal,\r\n  setFilterData,\r\n  setIsRefresh,\r\n  type,\r\n  selectedType,\r\n}) => {\r\n  const [screenShow, setScreenShow] = useState([]);\r\n  const [tags, setTags] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [allGroups, setAllGroups] = useState([]);\r\n  const [allTags, setAllTags] = useState([]);\r\n\r\n  useEffect(() => {\r\n    callAllGroupsApi();\r\n    callAllTagsApi();\r\n  }, []);\r\n  const callAllGroupsApi = async () => {\r\n    const list = await getGroups();\r\n    console.log(\"Groups\", list);\r\n    setAllGroups(list.groups);\r\n  };\r\n\r\n  const callAllTagsApi = async () => {\r\n    const list = await getAllTags(selectedType ? selectedType : \"screens\");\r\n    console.log(\"tags\", list);\r\n    setAllTags(list);\r\n  };\r\n\r\n  const handleFilter = (e) => {\r\n    e.preventDefault();\r\n    const selectedGrp = groups;\r\n    const groupsData = Object.keys(selectedGrp).filter((i) => {\r\n      if (selectedGrp[i] == false) {\r\n        delete selectedGrp[i];\r\n      }\r\n      return selectedGrp[i] && selectedGrp[i] == true;\r\n    });\r\n    const selectedTag = tags;\r\n    const tagsData = Object.keys(selectedTag).filter((i) => {\r\n      if (selectedTag[i] == false) {\r\n        delete selectedTag[i];\r\n      }\r\n      return selectedTag[i] && selectedTag[i] == true;\r\n    });\r\n\r\n    const selectedshows = screenShow;\r\n    const showsData = Object.keys(selectedshows).filter((i) => {\r\n      if (selectedshows[i] == false) {\r\n        delete selectedshows[i];\r\n      }\r\n      return selectedshows[i] && selectedshows[i] == true;\r\n    });\r\n    setFilterData({\r\n      groups: groupsData,\r\n      tags: tagsData,\r\n      shows: showsData,\r\n    });\r\n    setIsRefresh(true);\r\n    setFilterModal(false);\r\n  };\r\n\r\n  const resetFilter = (e) => {\r\n    e.preventDefault();\r\n    setFilterData({\r\n      groups: [],\r\n      tags: [],\r\n      shows: [],\r\n    });\r\n    setTags([]);\r\n    setGroups([]);\r\n    setScreenShow([]);\r\n    setFilterModal(false);\r\n    setIsRefresh(true);\r\n  };\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={showFilterModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">Filter</Modal.Title>\r\n        <span\r\n          className=\"clear-filter-link\"\r\n          onClick={(e) => resetFilter(e)}\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          Clear Filter\r\n        </span>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setFilterModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {type && type.includes(\"shows\") ? (\r\n          <div className=\"filter-row mb-3\">\r\n            <h6 className=\"mb-3\">Show</h6>\r\n            <div className=\"d-flex flex-wrap\">\r\n              <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  name=\"live\"\r\n                  id=\"live\"\r\n                  checked={screenShow[\"live\"]}\r\n                  onChange={(e) => {\r\n                    console.log(e);\r\n                    setScreenShow({\r\n                      ...screenShow,\r\n                      [\"live\"]: e.target.checked,\r\n                    });\r\n                  }}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"live\">\r\n                  Live\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  name=\"offline\"\r\n                  id=\"offline\"\r\n                  checked={screenShow[\"offline\"]}\r\n                  onChange={(e) => {\r\n                    setScreenShow({\r\n                      ...screenShow,\r\n                      [\"offline\"]: e.target.checked,\r\n                    });\r\n                  }}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"offline\">\r\n                  Offline\r\n                </label>\r\n              </div>\r\n              <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  name=\"deactivated\"\r\n                  id=\"deactivated\"\r\n                  checked={screenShow[\"deactivated\"]}\r\n                  onChange={(e) => {\r\n                    setScreenShow({\r\n                      ...screenShow,\r\n                      [\"deactivated\"]: e.target.checked,\r\n                    });\r\n                  }}\r\n                />\r\n                <label className=\"custom-control-label\" htmlFor=\"deactivated\">\r\n                  Deactivated\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {type && type.includes(\"tags\") ? (\r\n          <div className=\"filter-row mb-3\">\r\n            <h6 className=\"mb-3\">Tags</h6>\r\n            <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n              {allTags && allTags.length > 0 ? (\r\n                <>\r\n                  {allTags.map((item) => {\r\n                    return (\r\n                      <div className=\"d-flex align-items-center mr-3 mb-3\">\r\n                        <input\r\n                          id={\"check-\" + item}\r\n                          type=\"checkbox\"\r\n                          className=\" mr-2 \"\r\n                          required\r\n                          name={item._id}\r\n                          checked={tags && tags[item]}\r\n                          onChange={(e) =>\r\n                            setTags({ ...tags, [item]: e.target.checked })\r\n                          }\r\n                        />\r\n\r\n                        <label className=\"mb-0\" style={{ color: \"#333\" }}>\r\n                          {item}\r\n                        </label>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </>\r\n              ) : (\r\n                \"NO Groups Found\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {type && type.includes(\"groups\") ? (\r\n          <div className=\"filter-row mb-3\">\r\n            <h6>Groups</h6>\r\n            <div className=\"d-flex flex-wrap\">\r\n              {/* {\r\n                allGroups && allGroups.map((item) => {\r\n                  {console.log(\"dsds\");}\r\n                  return (\r\n                    <Badge \r\n                      className={`badge-common-light mr-2 ${groups.includes(item._id) ? 'active' : 'non-active'}`}\r\n                      variant=\"outline-light\"\r\n                      onClick = {(e) => {handleGroups(e,item)}}\r\n                    >\r\n                      {item.name}\r\n                    </Badge>\r\n                  );\r\n                })\r\n              } */}\r\n              <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n                {allGroups && allGroups.length > 0 ? (\r\n                  <>\r\n                    {allGroups.map((item) => {\r\n                      return (\r\n                        <div className=\"col-3\">\r\n                          <input\r\n                            id={\"check-\" + item._id}\r\n                            type=\"checkbox\"\r\n                            className=\"   \"\r\n                            required\r\n                            name={item._id}\r\n                            checked={groups && groups[item._id]}\r\n                            onChange={(e) =>\r\n                              setGroups({\r\n                                ...groups,\r\n                                [item._id]: e.target.checked,\r\n                              })\r\n                            }\r\n                          />\r\n                          <label className=\"mt-3 mr-3\">{item.name}</label>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </>\r\n                ) : (\r\n                  \"NO Groups Found\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant=\"\"\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-block primary-btn\"\r\n          onClick={(e) => handleFilter(e)}\r\n        >\r\n          Apply\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FilterModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddNewTagModal.jsx",["1148","1149","1150","1151","1152","1153","1154","1155"],"import React, { useState } from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { addTags } from \"../../utils/api\";\r\n\r\nconst AddNewTagModal = ({ setNewTagModal, selected, setIsRefresh, type }) => {\r\n  const [tag, setTag] = useState(null);\r\n  const [tagArr, setTagArr] = useState(selected.tags);\r\n  const [isDisable, setIsDisable] = useState(false);\r\n\r\n  const handleTagsSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsDisable(true)\r\n    const newArr = tagArr;\r\n    if (tag && tag != \"\") {\r\n      newArr.push(tag.trim());\r\n    }\r\n    if (type && type == \"media\") {\r\n      await addTags({ type: \"media\", id: selected._id, tags: newArr });\r\n    } else if (type && type == \"schedule\") {\r\n      await addTags({ type: \"schedule\", id: selected._id, tags: newArr });\r\n    } else if (type && type == \"composition\") {\r\n      await addTags({ type: \"composition\", id: selected._id, tags: newArr });\r\n    } else {\r\n      await addTags({ type: \"screen\", id: selected._id, tags: newArr });\r\n    }\r\n\r\n    setTagArr(newArr);\r\n    setTag(\"\");\r\n    setIsDisable(false)\r\n  };\r\n\r\n  const handleTagsDelete = async (e, index, item) => {\r\n    e.preventDefault();\r\n    const newArr = tagArr.filter((i, indx) => {\r\n      return indx != index;\r\n    });\r\n    setTagArr(newArr);\r\n    if (type && type == \"media\") {\r\n      await addTags({ type: \"media\", id: selected._id, tags: newArr });\r\n    } else if (type && type == \"schedule\") {\r\n      await addTags({ type: \"schedule\", id: selected._id, tags: newArr });\r\n    } else if (type && type == \"composition\") {\r\n      await addTags({ type: \"composition\", id: selected._id, tags: newArr });\r\n    } else {\r\n      await addTags({ type: \"screen\", id: selected._id, tags: newArr });\r\n    }\r\n    setTagArr(newArr);\r\n    setIsRefresh(true);\r\n    setTag(\"\");\r\n    console.log(\"OK\");\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Add New Tag</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setNewTagModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"add-screen-paragraph\">\r\n          <p>Type in new name to create your tag</p>\r\n        </div>\r\n        <div className=\"tag-name-row d-flex flex-wrap\">\r\n          {tagArr &&\r\n            tagArr.map((tag, index) => {\r\n              return (\r\n                <Badge className=\"tag-name\" variant=\"outline-primary\">\r\n                  <span className=\"tag-name-content\">{tag}</span>\r\n                  <span className=\"tag-close\">\r\n                    <img\r\n                      className=\"tag-close-icon\"\r\n                      src={tagCloseIcon}\r\n                      alt=\"tag-icon\"\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={(e) => handleTagsDelete(e, index, tag)}\r\n                    />\r\n                  </span>\r\n                </Badge>\r\n              );\r\n            })}\r\n        </div>\r\n        <Row>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"tag\"\r\n                id=\"tag\"\r\n                value={tag}\r\n                onChange={(e) => setTag(e.target.value.trim())}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              onClick={() => setNewTagModal(false)}\r\n              variant=\"outline-light\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={(e) => handleTagsSubmit(e)}\r\n              disabled={isDisable}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddNewTagModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UpdateModal.jsx",["1156","1157"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport searchIcon from \"../../img/search-location.png\";\r\n\r\nconst UpdateModal = ({ showUpdateModal, setUpdateModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\r\n      show={showUpdateModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">\r\n        Update Screen\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setUpdateModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n      <Row>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <label className=\"update-textfield-label\">Screen Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Christan’s Windows\"\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <label className=\"update-textfield-label\">Complete Address</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"House No. 38-A Tribune colony, Ambala Cantt, Haryana\"\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group location-field\">\r\n              <label className=\"update-textfield-label\">Google Location</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Haryana\"\r\n              />\r\n              <div className=\"search-location\">\r\n              <img className=\"search-loc-icon\" src={searchIcon} alt=\"search-icon\" />\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={12} md={12} sm={12} xs={12} className=\"pl-0 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn w-100\"\r\n              onClick={() => setUpdateModal(false)}\r\n            >\r\n             Update Screen\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UpdateModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\WindowsModal.jsx",["1158","1159","1160","1161"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport chrisImg from \"../../img/chris-img.png\";\r\n\r\nconst WindowsModal = ({ showWindowsModal, setWindowsModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\r\n      show={showWindowsModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">\r\n        Christan’s Window’s\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setWindowsModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n<div className=\"chris-imgbox\">\r\n<img className=\"chris-img img-fluid\" src={chrisImg} alt=\"chris-icon\" />\r\n\r\n</div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WindowsModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QuickPlayModal.jsx",["1162","1163","1164","1165","1166","1167","1168"],"import React, {useState, useEffect} from 'react';\r\nimport { Button, Modal, Row, Col, Badge, Dropdown, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport {getAllComposition, publishMedia } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst QuickPlayModal = ({ showQuickPlayModal, setQuickPlayModal,showPublishPopUp, setShowPublishPopUp, type, selected }) => {\r\n  const [compositionList, setAllComposition] = useState(\"\");\r\n  const [name, setName] = useState(\"\")\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState(null);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    getAllCompositionList();\r\n  }, []);\r\n\r\n  const getAllCompositionList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllComposition();\r\n    setLoading(false);\r\n    setAllComposition(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    console.log(event.target)\r\n    setCheckedValues(event.target.name);\r\n  };\r\n\r\n  // const handleSelectAllChange = (event) => {\r\n  //   const newCheckedItems = {};\r\n  //   compositionList.forEach((item) => {\r\n  //     newCheckedItems[item._id] = event.target.checked;\r\n  //   });\r\n  //   const selectedScreens = [];\r\n  //   for (const key in newCheckedItems) {\r\n  //     if (newCheckedItems[key] === true) {\r\n  //       selectedScreens.push(key);\r\n  //     }\r\n  //   }\r\n  //   setCheckedValues(selectedScreens);\r\n  //   setCheckedItems(newCheckedItems);\r\n  // };\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(\"sdsdsd\");\r\n    const screens = [];\r\n    screens[0] = selected._id;\r\n    await publishMedia({\r\n      id: checkedValues,\r\n      screenIds: screens,\r\n      duration: 600,\r\n      type: type,\r\n    });\r\n    setQuickPlayModal(false);\r\n    toast.success(\"Quickplay has been assigned...\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n    setCheckedItems({});\r\n    setCheckedValues(null)\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={showQuickPlayModal}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>{type===\"media\" ? \"Publish Media\" :(type == 'composition' ? 'Assign Quickplay' : \"Assign Quickplay\")}</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setQuickPlayModal(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        disabled\r\n                      // onChange={handleSelectAllChange}\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Date Added</th>\r\n                  <th>Duration</th>\r\n                  <th>Associated Schedule</th>\r\n                </tr>\r\n              </thead>\r\n              {loading  ? (\r\n            <TableLoader colSpan={5}/>\r\n          ) : (\r\n              <tbody>\r\n                {compositionList !== \"\" &&\r\n                  compositionList.map((composition) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={composition._id}\r\n                              name={composition._id}\r\n                              checked={checkedValues === composition._id}\r\n                              onChange={handleCheckboxChange}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={composition._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"td-content d-flex name-td-content\">\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                              <strong>{composition.name}</strong>\r\n                              <span>{composition.createdBy}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>{getDatetimeIn12Hours(composition.createdAt)}</span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.duration} Sec</td>\r\n                        <td>No Schedule</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          {!published && (\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\"\r\n                  onClick={(e) => setQuickPlayModal(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={checkedValues === null}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n  );\r\n};\r\n\r\nexport default QuickPlayModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DeleteConfirmation.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\CompolistionListModel.jsx",["1169","1170","1171","1172","1173","1174"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {setDefaultComposition, getAllComposition } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport '../components/Table.css';\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\r\n  const [compositionList, setAllComposition] = useState(\"\");\r\n  const [name, setName] = useState(\"\")\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState(null);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    getAllCompositionList();\r\n  }, []);\r\n\r\n  const getAllCompositionList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllComposition();\r\n    setLoading(false);\r\n    setAllComposition(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    console.log(event.target)\r\n    // const newCheckedItems = {\r\n    //   ...checkedItems,\r\n    //   [event.target.name]: event.target.checked,\r\n    // };\r\n    // const selectedScreens = [];\r\n    // for (const key in newCheckedItems) {\r\n    //   if (newCheckedItems[key] === true) {\r\n    //     selectedScreens.push(key);\r\n    //   }\r\n    // }\r\n    setCheckedValues(event.target.name);\r\n    //setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    compositionList.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const screens = [];\r\n    screens[0] = selected;\r\n    await setDefaultComposition({\r\n        screens,\r\n        compositionId: checkedValues\r\n      });\r\n\r\n    setPublished(true);\r\n    setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n      <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>{type===\"media\" ? \"Publish Media\" :(type == 'composition' ? 'Change Default Composition' : \"Assign Quickplay\")}</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowPublishPopUp(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\r\n        {!published && (\r\n          <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        disabled\r\n                      // onChange={handleSelectAllChange}\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Date Added</th>\r\n                  <th>Duration</th>\r\n                  <th>Associated Schedule</th>\r\n                </tr>\r\n              </thead>\r\n              {loading  ? (\r\n            <TableLoader colSpan={5}/>\r\n          ) : (\r\n              <tbody>\r\n                {compositionList !== \"\" &&\r\n                  compositionList.map((composition) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={composition._id}\r\n                              name={composition._id}\r\n                              checked={checkedValues === composition._id}\r\n                              onChange={handleCheckboxChange}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={composition._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"td-content d-flex name-td-content\">\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                              <strong>{composition.name}</strong>\r\n                              <span>{composition.createdBy}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>{getDatetimeIn12Hours(composition.createdAt)}</span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.duration} Sec</td>\r\n                        <td>No Schedule</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n        )}\r\n\r\n        <Modal.Footer>\r\n          {!published && (\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={checkedValues === null}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QuoteModel.jsx",["1175","1176","1177","1178","1179","1180","1181","1182"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { addApps, updateApps, getQuotes } from \"../../utils/api\";\r\nimport { handleQuoteApps } from \"../../utils/UtilsService\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nconst QuoteModel = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const [quoteData, setQuoteData] = useState(null);\r\n  const [quotePreviewData, setQuotePreviewData] = useState(null);\r\n  const colorSchemeOptions = [\r\n    { value: \"lightYellow\", label: \"Light Yellow\" },\r\n    { value: \"orange\", label: \"Orange\" },\r\n    { value: \"skyBlue\", label: \"Sky Blue\" },\r\n  ];\r\n  const fontOptions = [\r\n    { value: \"regular\", label: \"Regular\" },\r\n    { value: \"italic\", label: \"Italic\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n  const [color, setColor] = useState({\r\n    value: \"lightYellow\",\r\n    label: \"Light Yellow\",\r\n  });\r\n  const [selectedFontOption, setSelectedFontOption] = useState({\r\n    value: \"regular\",\r\n    label: \"Regular\",\r\n  });\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [duration, setDuration] = useState(10);\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      console.log(\"media\", mediaData, actionType);\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setMediaId(mediaData._id);\r\n      setSelectedFontOption(jsonString.fontStyle);\r\n      setColor(jsonString.color);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData]);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n      const dataString = {\r\n        url: name.trim(),\r\n        fontStyle: selectedFontOption,\r\n        color,\r\n        duration,\r\n        orientationMode,\r\n      };\r\n\r\n      if (actionType && actionType == \"edit\") {\r\n        await updateApps({\r\n          name:name.trim(),\r\n          appId: mediaId,\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        setShowUrlApp(false);\r\n        setIsLoading(false);\r\n      } else {\r\n        await addApps({\r\n          name:name.trim(),\r\n          type: \"quote-apps\",\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        handleClose(false);\r\n        setIsLoading(false);\r\n        setShowUrlRedirectApp(true);\r\n      }\r\n  };\r\n\r\n  const getQuoteData = async (data) => {\r\n    const quoteResult = await getQuotes(data);\r\n    setQuoteData(quoteResult);\r\n  };\r\n\r\n  const getQuoteDataZone1 = (data) => {\r\n    const prp = JSON.parse(data);\r\n\r\n    if (!quoteData) {\r\n      const prms = {\r\n        cat: \"famous\",\r\n        count: \"10\",\r\n      };\r\n      console.log(\"Hello Quote Calling\");\r\n      getQuoteData(prms);\r\n    }\r\n    return handleQuoteApps(data, quoteData);\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    console.log(preview);\r\n    if (name) {\r\n      setQuotePreviewData(\r\n        getQuoteDataZone1(\r\n          JSON.stringify({\r\n            url: name,\r\n            fontStyle: selectedFontOption,\r\n            color,\r\n            orientationMode,\r\n            duration\r\n          })\r\n        )\r\n      );\r\n      setIsRefresh(true);\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setQuoteData(null);\r\n    setQuotePreviewData(null);\r\n\r\n    setColor({\r\n      value: \"lightYellow\",\r\n      label: \"Light Yellow\",\r\n    });\r\n    setSelectedFontOption({\r\n      value: \"regular\",\r\n      label: \"Regular\",\r\n    });\r\n    setShowUrlRedirectApp(false);\r\n    setName(\"\");\r\n    setDuration(10);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val)\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Quote App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== \"\" ? (\r\n            <h6 className=\"alert alert-danger\">{errMessage}</h6>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                name=\"name\"\r\n                id=\"name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                type=\"text\"\r\n                className=\"form-control \"\r\n                placeholder=\"App Name\"\r\n                value={name}\r\n                required\r\n              />\r\n              <label className=\"mt-3\"> Slide Duration (in seconds)</label>\r\n              <input\r\n                id=\"duration\"\r\n                name=\"duration\"\r\n                onChange={(e) => setDuration(e.target.value)}\r\n                type=\"number\"\r\n                value={duration}\r\n                className=\"  form-control \"\r\n                placeholder=\"10\"\r\n                required\r\n              />\r\n              <label className=\"mt-3\">Color Scheme </label>\r\n              <Select\r\n                value={color}\r\n                onChange={setColor}\r\n                options={colorSchemeOptions}\r\n                className=\"app-option\"\r\n              />\r\n              <label className=\"mt-3\">Font </label>\r\n              <Select\r\n                value={selectedFontOption}\r\n                onChange={setSelectedFontOption}\r\n                options={fontOptions}\r\n                className=\"app-option\"\r\n              />\r\n              <Button onClick={handlePreview} className=\"mt-3\">\r\n                Preview\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 quote-app-form-icon\">\r\n                {preview && quotePreviewData ? quotePreviewData : \"Quotes\"}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteModel;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddScreenModal.jsx",["1183"],"import { Button, Modal, Row, Col, Alert } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport TagInputField from \"../components/screen/tagInputField\";\r\nimport { useState } from \"react\";\r\nimport webScreen from \"../../img/webScreen.png\";\r\n\r\n\r\nimport { addScreen, validateScreenCode } from \"../../utils/api\";\r\n\r\nconst AddScreenModal = ({ setShowScreenModal, callAllScreenApi }) => {\r\n  const [step, setStep] = useState(1);\r\n  const [code, setCode] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [screenLocation, setScreenLocation] = useState(\"\");\r\n  const [googleLocation, setGoogleLocation] = useState(\"\");\r\n  const [tags, setTags] = useState([]);\r\n  const [codeError, setCodeError] = useState(false);\r\n  const [nameError, setNameError] = useState(false);\r\n  const [screenLocationError, setScreenLocationError] = useState(false);\r\n  const [googleLocationError, setGoogleLocationError] = useState(false);\r\n  const [showError, setShowError] = useState(\"\");\r\n\r\n  const handleCodeChange = (event) => {\r\n    setCode(event.target.value);\r\n  };\r\n\r\n  const saveScreen = async () => {\r\n    setShowError(\"\")\r\n    setCodeError(false)\r\n    setNameError(false)\r\n    setScreenLocationError(false)\r\n    setGoogleLocationError(false)\r\n    if (step === 1) {\r\n      if(code.trim().length === 0){\r\n        setCodeError(true)\r\n        return false;\r\n      }\r\n      const validateCode =  await validateScreenCode(code)\r\n      console.log(\"dsd\", validateCode)\r\n      if(validateCode && validateCode.statusCode == 400 ){\r\n        setCodeError(true)\r\n        //setShowError(\"Invalid registration code!\")\r\n        setShowError(validateCode?.message)\r\n      } else {\r\n        setStep(2);\r\n      }\r\n      return;\r\n    }\r\n    if(step === 2){\r\n      let hassError = false\r\n      if(name.trim().length === 0){\r\n        setNameError(true)\r\n        hassError = true\r\n      }\r\n      if(screenLocation.trim().length === 0){\r\n        setScreenLocationError(true)\r\n        hassError = true\r\n      }\r\n      if(googleLocation.trim().length === 0){\r\n        setGoogleLocationError(true)\r\n        hassError = true\r\n      }\r\n      if(hassError) return false\r\n      const finalScreenData = {\r\n        code: code,\r\n        name: name,\r\n        screenLocation: screenLocation,\r\n        googleLocation: googleLocation,\r\n        ...(tags.length ? { tags: tags } : {})\r\n      };\r\n      await addScreen(finalScreenData);\r\n      await callAllScreenApi();\r\n      setShowScreenModal(false);\r\n      \r\n    }\r\n    if(step === 4){\r\n      window.open(`/web-player`, '_blank');\r\n      setStep(1);\r\n      return;\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className={step === 3 ? \" font22\" : \"\"}>\r\n          {step === 1 && \"Register your screen\"}\r\n          {step === 2 && \"Add Screen\"}\r\n          {step === 3 && \"Try following if you don’t have display screen\"}\r\n          {step === 4 && \"Webplayer\"}\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowScreenModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {step === 1 && (\r\n          <div>\r\n                <div className=\"image-container d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n                  {/* <img className=\"devicebg\" src={DeviceBG} alt=\"upload-img\" /> */}\r\n                  <div className=\"image-container-content\">\r\n                  <div className=\"image-text\">Registration Code </div>\r\n                  <div className=\"image-text2\">******</div>\r\n                  </div>\r\n                \r\n                </div>\r\n            <div className=\"screenText\">\r\n              Enter the ‘Screen Registration Code’ as shown on your signage\r\n              screen\r\n            </div>\r\n              <div className=\"form-group enter-code-textfield\">\r\n                {/* <label>Enter Code</label> */}\r\n                <input\r\n                  value={code}\r\n                  type=\"text\"\r\n                  className={`${codeError ? 'invalid' : ''} form-control input-default form-field`}\r\n                  placeholder=\"Enter Code\"\r\n                  onChange={handleCodeChange}\r\n                />\r\n              </div>\r\n          </div>\r\n        )}\r\n        {step === 2 && (\r\n          <>\r\n            {\" \"}\r\n            <div className=\"add-screen-paragraph\">\r\n              <p>\r\n                Want to add new screen? Please fill in some information and\r\n                continue\r\n              </p>\r\n            </div>\r\n            <Row>\r\n              <Col lg={6} md={6} sm={6} xs={12}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    \r\n                    className={`${nameError ? 'invalid' : ''} form-control input-default form-field`}\r\n                    placeholder=\"Screen Name\"\r\n                    value={name}\r\n                    onChange={(event) => {\r\n                      setName(event.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={12}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={`${screenLocationError ? 'invalid' : ''} form-control input-default form-field`}\r\n                    placeholder=\"Screen Location\"\r\n                    value={screenLocation}\r\n                    onChange={(event) => {\r\n                      setScreenLocation(event.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col lg={12} md={12} sm={12} xs={12}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={`${googleLocationError ? 'invalid' : ''} form-control input-default form-field`}\r\n                    placeholder=\"Google Location\"\r\n                    value={googleLocation}\r\n                    onChange={(event) => {\r\n                      setGoogleLocation(event.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col lg={12} md={12} sm={12} xs={12}>\r\n                <TagInputField tags={tags} setTags={setTags} />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )}\r\n        {step === 3 && (\r\n          <div className=\"webBrowserOptionSection w-100\" onClick={()=>{\r\n            setStep(4)\r\n          }}>\r\n            <Row className=\"w-100\">\r\n            <Col lg={6} md={6} sm={6} xs={12} className=\"d-flex align-items-center\">\r\n            <div className=\"try-card-img\">\r\n              <img className=\"browserImg\" src={webScreen} alt=\"web screen\" />\r\n            </div>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={12} className=\"d-flex align-items-center flex-wrap pl-0\">\r\n              <div className=\"try-card-info\">\r\n              <p className=\"tryBrowser\">Try browser based Webplayer</p>\r\n              <p className=\"tryBrowserText\">Works on all types of browsers <br/>(Ideal for quick start)</p>\r\n            </div>\r\n              </Col>\r\n            </Row>\r\n            \r\n         \r\n          </div>\r\n        )}\r\n        {step === 4 && (\r\n          <div>\r\n            {/* <div className=\"relative d-flex align-items-center justify-content-center flex-column\">\r\n              <div className=\"upload-flie-img\">\r\n                <div className=\"image-container\">\r\n                  <img className=\"devicebg\" src={DeviceBG} alt=\"upload-img\" />\r\n                  <div className=\"image-text\">Registration Code </div>\r\n                  <div className=\"image-text2\">ABDHSG</div>\r\n                </div>\r\n              </div>\r\n            </div> */}\r\n              <div className=\"image-container d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n                  <div className=\"image-container-content\">\r\n                  <div className=\"image-text\">Registration Code </div>\r\n                  <div className=\"image-text2\">ABDHSG</div>\r\n                  </div>\r\n                \r\n                </div>\r\n                <div className=\"using-webplayer-paragraph\">\r\n                  <p>You are about to start using the webplayer</p>\r\n                </div>\r\n                <div className=\"webplayer-list\">\r\n                  <ul>\r\n                    <li>Please note, Webplayer is designed to give you the overall idea of how screens are registered using ‘Registration Code’</li>\r\n                  <li>Use this Webplayer to check how the content generated from console will appear on TV screens.</li>\r\n                  </ul>\r\n                </div>\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n      {step !== 3 && (\r\n        <Modal.Footer>\r\n        {showError !== \"\" &&              <div className=\"errorSection\"> <Alert\r\n                  \r\n                  variant={\"danger\"}\r\n                  className='solid alert-dismissible fade show'\r\n                >\r\n                   {showError}\r\n                  \r\n                </Alert></div>}\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn mx-0 register-screen-modal\"\r\n            onClick={() => saveScreen()}\r\n          >\r\n            {step === 1 && \"Done\"}\r\n            {step === 2 && \"Add Screen\"}\r\n            {step === 4 && \"Okay\"}\r\n          </Button>\r\n          {step === 1 && (\r\n            <>\r\n              <div className=\"alternetTextSection\">\r\n                {\" \"}\r\n                <span>\r\n                  Don’t have a display screen that is ready to use yet?\r\n                </span>\r\n              </div>\r\n              <div className=\"alternetTextSection\">\r\n                <p\r\n                  onClick={() => {\r\n                    setStep(3);\r\n                  }}\r\n                >\r\n                  Try Alternate Options\r\n                </p>\r\n              </div>\r\n            </>\r\n          )}\r\n        </Modal.Footer>\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddScreenModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\listScreens.jsx",["1184","1185","1186","1187","1188","1189"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CompositionListModel from \"../../modals/CompolistionListModel\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\nimport QuickPlayModal from \"../../modals/QuickPlayModal\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      {/* <GridToolbarColumnsButton  color='success' title=\"ABC\" label={'ds'} startIcon={<Avatar />}  /> */}\r\n      {/* <GridToolbarExport color='success' csvOptions={\r\n        {\r\n          fileName: 'customerList',\r\n          utf8WithBom: true,\r\n        }} /> */}\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\n\r\nconst ListScreen = ({\r\n  allScreens,\r\n  userPermission,\r\n  setIsRefresh,\r\n  setFilterData,\r\n}) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n  const [showQuickPlayModal, setQuickPlayModal] = useState(false);\r\n  const type = ['shows','tags', 'groups'];\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <Dropdown\r\n          className=\"dropdown-toggle-menu\"\r\n\r\n          // style={{ position: \"relative\", top: \"100%\" }}\r\n        >\r\n          <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n            <span className=\"table-menu-icon\">\r\n              <img\r\n                className=\"menu-img img-fluid\"\r\n                src={menuIcon}\r\n                alt=\"menu-icon\"\r\n                style={{ height: \"50px\" }}\r\n              />\r\n            </span>\r\n          </Dropdown.Toggle>\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item\r\n              href=\"#\"\r\n              className=\"dropdown-list-item\"\r\n              disabled={\r\n                userPermission && !userPermission.permission.SCREEN.view\r\n              }\r\n            >\r\n              <Link\r\n                to={{\r\n                  pathname: `/display/${value._id}`,\r\n                }}\r\n              >\r\n                <div className=\"d-flex\">\r\n                  <div className=\"dropdown-list-icon\">\r\n                    <img\r\n                      className=\"dropdown-list-img img-fluid\"\r\n                      src={veiwDetailIcon}\r\n                      alt=\"menu-icon\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"dropdown-menu-list\">\r\n                    <span className=\"menu-heading\">View Details</span>\r\n                    <span className=\"menu-description\">\r\n                      Get to know more about screen info\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              onClick={() => {\r\n                setShowPublishPopUp(true);\r\n                setSelectedScreen(value._id);\r\n              }}\r\n              disabled={\r\n                userPermission && !userPermission.permission.SCREEN.edit\r\n              }\r\n              className=\"dropdown-list-item\"\r\n            >\r\n              <div className=\"d-flex\">\r\n                <div className=\"dropdown-list-icon\">\r\n                  <img\r\n                    className=\"dropdown-list-img img-fluid\"\r\n                    src={defaultComparisonIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"dropdown-menu-list\">\r\n                  <span className=\"menu-heading\">\r\n                    Change Default Composition\r\n                  </span>\r\n                  <span className=\"menu-description\">\r\n                    Get to know more about screen info\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Dropdown.Item>\r\n            <Dropdown.Item\r\n              onClick={() => {\r\n                setQuickPlayModal(true);\r\n                setSelectedScreen(value._id);\r\n              }}\r\n              className=\"dropdown-list-item\"\r\n              disabled={\r\n                userPermission && !userPermission.permission.SCREEN.edit\r\n              }\r\n            >\r\n              <div className=\"d-flex\">\r\n                <div className=\"dropdown-list-icon\">\r\n                  <img\r\n                    className=\"dropdown-list-img img-fluid\"\r\n                    src={assignIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"dropdown-menu-list\">\r\n                  <span className=\"menu-heading\">Assign Quickplay</span>\r\n                  <span className=\"menu-description\">\r\n                    Get to know more about screen info\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Dropdown.Item>\r\n            <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">\r\n                  Take Screenshot\r\n                </span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderSchedule = (params) => {\r\n    const { value } = params;\r\n    let sch = '--';\r\n    if(value && value[0]){\r\n      sch = value[0].name\r\n    }\r\n    if(value && value.name){\r\n      sch = value.name;\r\n    }\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{sch}</strong>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderDefault = (params) => {\r\n    const { value } = params;\r\n    let def = \"--\";\r\n    if (value.defaultComposition) {\r\n      def = value.defaultComposition.media.name;\r\n    }\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{def}</strong>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.length > 2 ? (\r\n            <>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[0]}\r\n              </span>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[1]}\r\n              </span>\r\n              <span>...</span>\r\n            </>\r\n          ) : (\r\n            value.tags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\"\r\n              >\r\n                {tag}\r\n              </span>\r\n            ))\r\n          )}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const groupRender = (params) => {\r\n    const { value } = params;\r\n    return Array.prototype.map.call(value, (s) => s.name).toString();\r\n  };\r\n\r\n  const lastSeenRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"d-flex align-items-center\">\r\n        <span\r\n          className={`status ${\r\n            value.isConnected ? \"status-green\" : \"status-red\"\r\n          }`}\r\n        ></span>\r\n        <span className=\"td-content\">\r\n          <span>{value.isConnected ? \"ONLINE\" : \"OFFLINE\"}</span>\r\n          {/* <strong>{humanReadableFormattedDateString(value)}</strong>{\" \"}\r\n          <span>{getDatetimeIn12Hours(value)}</span> */}\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n  const rows1 = [];\r\n  if (allScreens && allScreens.length > 0) {\r\n    allScreens.forEach((item) => {\r\n      rows1.push({\r\n        id: item._id,\r\n        screen: {\r\n          name: item.name,\r\n          location: item.screenLocation,\r\n        },\r\n        last_seen: item,\r\n        schedule: item.schedule,\r\n        tags: item,\r\n        groups: item.groups,\r\n        defaultComposition: item,\r\n        default_composition: item.defaultComposition\r\n          ? item.defaultComposition.media.name\r\n          : \" -- \",\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const renderName = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>\r\n          {value.name.length > 11\r\n            ? value.name.slice(0, 11) + \"...\"\r\n            : value.name}\r\n        </strong>\r\n        <br />\r\n        <span className=\"oooo\">\r\n          {value.location.length > 11\r\n            ? value.location.slice(0, 11) + \"...\"\r\n            : value.location}\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const columns1 = [\r\n    { field: \"screen\", headerName: \"Screen\", flex: 1, renderCell: renderName },\r\n    {\r\n      field: \"last_seen\",\r\n      headerName: \"Last Seen\",\r\n      flex: 1,\r\n      renderCell: lastSeenRender,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"default_composition\",\r\n      headerName: \"Default Composition\",\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"schedule\",\r\n      headerName: \"Current Schedule\",\r\n      flex: 1,\r\n      renderCell: renderSchedule,\r\n    },\r\n\r\n    { field: \"tags\", headerName: \"Tags\", flex: 1, renderCell: tagsRender },\r\n    { field: \"groups\", headerName: \"Groups\", flex: 1, renderCell: groupRender },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      disableColumnMenu: true,\r\n    },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FilterModal\r\n        showFilterModal={showFilterModal}\r\n        setFilterModal={setFilterModal}\r\n        setFilterData={setFilterData}\r\n        setIsRefresh={setIsRefresh}\r\n        type={type}\r\n      />\r\n      <QuickPlayModal\r\n        showQuickPlayModal={showQuickPlayModal}\r\n        setQuickPlayModal={setQuickPlayModal}\r\n        //handleQuickPlay={handleQuickPlay}\r\n        selected={selectedScreen}\r\n        type={\"composition\"}\r\n\r\n      />\r\n      <div className=\"d-flex justify-content-end\">\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n          style={{ position: \"absolute\", top: \"10px\" }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button>\r\n      </div>\r\n\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows1}\r\n        columns={columns1}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        //checkboxSelection\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        //loading={loading}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={allScreens}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n        />\r\n      )}\r\n      {showPublishPopUp && (\r\n        <CompositionListModel\r\n          selected={selectedScreen}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"composition\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    auth: state.auth.auth,\r\n    userPermission: state.auth.permission,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(ListScreen);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\PhotoEditorModal.jsx",["1190","1191","1192","1193"],"import { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport PhotoEditorSDK from \"../components/PhotoEditorSDK\";\r\nimport CreativeEditor from \"../components/CreativeEditor\";\r\n\r\nimport { useState } from \"react\";\r\nimport CreativeEditorLayoutSDK from \"../components/CreativeEditorLayout\";\r\nconst PhotoEditorModal = ({\r\n    openEditor, setOpenEditor, setIsRefresh, type\r\n}) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={openEditor}\r\n        size=\"xl\"\r\n      >\r\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <Button\r\n              variant=\"\"\r\n              className=\"\"\r\n              onClick={() => setOpenEditor(false)}\r\n            >\r\n              <img\r\n                className=\"cancel-icon\"\r\n                src={cancelIcon}\r\n                alt=\"cancel-icon\"\r\n                height=\"25px\"\r\n                width=\"25px\"\r\n              />\r\n            </Button>\r\n          </div>\r\n\r\n          {/* <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn\"\r\n            style={{ width: \"fit-content\" }}\r\n            //   onClick={() => setNewTagModal(false)}\r\n          >\r\n            Assign\r\n          </Button> */}\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            {/* <PhotoEditorSDK  setOpenEditor={setOpenEditor} setIsRefresh={setIsRefresh}/> */}\r\n            {\r\n              type && type == 'default' ? <CreativeEditor  setOpenEditor={setOpenEditor} setIsRefresh={setIsRefresh}/> : <></>\r\n            }\r\n            {\r\n              type && type == 'custom' ? <CreativeEditorLayoutSDK  setOpenEditor={setOpenEditor} setIsRefresh={setIsRefresh}/> : <></>\r\n            }\r\n            \r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PhotoEditorModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\PhotoEditorSDK.jsx",["1194"],"import React, { Component } from \"react\";\r\nimport { UIEvent, PhotoEditorSDKUI, ImageFormat, ExportFormat } from \"photoeditorsdk\";\r\nimport { addMedia } from '../../utils/api'\r\n\r\nexport default class PhotoEditorSDK extends Component {\r\n  componentDidMount() {\r\n    this.initEditor();\r\n  }\r\n  async initEditor() {\r\n    const editor = await PhotoEditorSDKUI.init({\r\n      container: \"#editor\",\r\n      image: \"../example.jpg\", // Image url or Image path relative to assets folder\r\n      // Please replace this with your license: https://img.ly/dashboard\r\n      license: '',\r\n      library: {\r\n        enableWebcam: true, // Enable the webcam\r\n        enableUpload: true, // Enable the upload\r\n      },\r\n      mainCanvasActions: ['undo', 'redo', 'export'],\r\n      export: {\r\n        image: {\r\n          enableDownload: false,\r\n          format: ImageFormat.JPEG,\r\n          exportType: ExportFormat.IMAGE,\r\n        },\r\n      },\r\n    });\r\n    console.log(\"PhotoEditorSDK for Web is ready!\");\r\n    editor.on(UIEvent.EXPORT, async (imageSrc) => {\r\n      console.log(\"Exported \", imageSrc);\r\n      // const formData = new FormData();\r\n      // formData.append(\"file\", imageSrc);\r\n      // formData.append(\"properties\", JSON.stringify({\r\n      //   height:200,\r\n      //   width:200,\r\n      //   size:2\r\n      // }));\r\n      // formData.append(\"type\", \"image\");\r\n      // await addMedia(formData);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"editor\"\r\n        style={{width: \"100vw\", height: \"100vh\" }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UploadMediaFileModal.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\listMedia.jsx",["1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207"],"import React, { useState } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.svg\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\r\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\nimport FilterModal from \"../../modals/FilterModal\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\n\r\nconst ListMedia = ({\r\n  allMedia,\r\n  auth,\r\n  permission,\r\n  setIsRefresh,\r\n  setFilterData,\r\n}) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [selectedMedia, setSelectedMedia] = useState(\"\");\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [preview, setPreview] = useState(false);\r\n  const [imgUrl, setImgUrl] = useState(null);\r\n  const [imgType, setImgType] = useState(null);\r\n  const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  const [showFilterModal, setFilterModal] = useState(false);\r\n\r\n  // use effect\r\n\r\n  const handleDelete = async () => {\r\n    setDeleteModal(false);\r\n    await deleteMedia(selectedMedia._id);\r\n    setIsRefresh(true);\r\n  };\r\n\r\n  const handlePublishcOpen = (media) => {\r\n    setShowPublishPopUp(media);\r\n  };\r\n\r\n  const showPreview = (img, type) => {\r\n    setImgType(type);\r\n    setImgUrl(img);\r\n    setPreview(true);\r\n  };\r\n\r\n  const parseMeta = (media) => {\r\n    let meta = {};\r\n    //const meta = JSON.parse(media.properties);\r\n    if (media.type == \"image\" || media.type == \"video\") {\r\n      meta = JSON.parse(media.properties);\r\n    } else {\r\n      const jsonData = JSON.parse(media.appData);\r\n      meta = {\r\n        length: 10,\r\n        height: 10,\r\n        duration: 0,\r\n        size: 0,\r\n      };\r\n    }\r\n    return (\r\n      <span className=\"td-content\">\r\n        {media?.type === \"image\" && (\r\n          <strong>\r\n            {meta.height} x {meta.width}\r\n          </strong>\r\n        )}\r\n        {media?.type === \"video\" && meta?.length && (\r\n          <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\r\n        )}\r\n        {meta?.size && <span>{meta.size} MB</span>}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n      return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const rows = [];\r\n  if (allMedia && allMedia.length > 0) {\r\n    allMedia.forEach((item) => {\r\n      rows.push({\r\n        id: item._id,\r\n        name: item,\r\n        type: item.type,\r\n        uploaded_date: item.createdAt,\r\n        tags: item,\r\n        property: item,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <Dropdown className=\"dropdown-toggle-menu\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n              style={{ height: \"50px\" }}\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {(value && value.type == \"image\") || value.type == \"video\" ? (\r\n            <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n              <div\r\n                className=\"d-flex\"\r\n                onClick={() => {\r\n                  handlePublishcOpen(value);\r\n                }}\r\n              >\r\n                <div className=\"dropdown-list-icon\">\r\n                  <img\r\n                    className=\"dropdown-list-img img-fluid\"\r\n                    src={defaultComparisonIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"dropdown-menu-list\">\r\n                  <span className=\"menu-heading\">Publish on Screen</span>\r\n                  <span className=\"menu-description\">\r\n                    Get to know more about screen info\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Dropdown.Item>\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setSelectedMedia(value);\r\n              setDeleteModal(true);\r\n            }}\r\n            disabled={permission && !permission.permission.ASSETS.delete}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n\r\n  const renderName = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content d-flex name-td-content\">\r\n        <span\r\n          className={`name-img mr-2  ${\r\n            value?.type === \"video\" && \"videotableName\"\r\n          }`}\r\n        >\r\n          {value?.type === \"image\" && (\r\n            <div\r\n              onClick={() => {\r\n                showPreview(value.title, value.type);\r\n              }}\r\n              className=\"media-list-img-zoom\"\r\n            >\r\n              <span className=\"media-list-img-zoom-plus\">+</span>\r\n              <img\r\n                className=\"media-img img-fluid\"\r\n                src={`${BASE_URL}${value?.title}`}\r\n                alt=\"media-img\"\r\n              />\r\n            </div>\r\n          )}\r\n          {value?.type === \"video\" && (\r\n            <button\r\n              onClick={() => {\r\n                showPreview(value.title, value.type);\r\n              }}\r\n            >\r\n              {videoMetaDuration(value)}\r\n            </button>\r\n          )}\r\n        </span>\r\n        <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n          <strong>\r\n            {value.title.split(\"/\")[value.title.split(\"/\").length - 1].length >\r\n            7\r\n              ? value.title\r\n                  .split(\"/\")\r\n                  [value.title.split(\"/\").length - 1].slice(0, 7) + \"...\"\r\n              : value.title.split(\"/\")[value.title.split(\"/\").length - 1]}\r\n          </strong>\r\n          <span>\r\n            {value?.createdBy?.name.length > 11\r\n              ? value?.createdBy?.name.slice(0, 11) + \"...\"\r\n              : value?.createdBy?.name}\r\n          </span>\r\n        </span>\r\n      </span>\r\n    );\r\n  };\r\n  const tagsRender = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <div>\r\n        <span className=\"tag-container\">\r\n          {value.tags.length > 2 ? (\r\n            <>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[0]}\r\n              </span>\r\n              <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                {value.tags[1]}\r\n              </span>\r\n              <span>...</span>\r\n            </>\r\n          ) : (\r\n            value.tags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\"\r\n              >\r\n                {tag}\r\n              </span>\r\n            ))\r\n          )}\r\n        </span>\r\n        <span\r\n          className=\"down-arrow\"\r\n          onClick={(e) => {\r\n            handleTags(e, value);\r\n          }}\r\n        >\r\n          <img\r\n            className=\"down-arrow-img img-fluid\"\r\n            src={downArrow}\r\n            alt=\"arrow\"\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDate = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <span className=\"td-content\">\r\n        <strong>{humanReadableFormattedDateString(value)}</strong>\r\n        <span>{getDatetimeIn12Hours(value)}</span>\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderProperties = (params) => {\r\n    const { value } = params;\r\n    const prp = value.properties ? JSON.parse(value.properties) : null;\r\n    if (prp && (prp.height || prp.width || prp.length || prp.size)) {\r\n      return (\r\n        <span className=\"td-content\">\r\n          <strong>{prp.height ? \"Height : \" + prp.height : \"\"}</strong>\r\n          <br />\r\n          <strong>{prp.width ? \"Width : \" + prp.width : \"\"}</strong>\r\n          <br />\r\n          <strong>{prp.size ? \"Size : \" + prp.size + \" MB\" : \"\"}</strong>\r\n        </span>\r\n      );\r\n    } else {\r\n      return (\r\n        <span className=\"td-content\">\r\n          <strong>{value.type.split(\"-\")[0].toUpperCase()} </strong>\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"name\", headerName: \"Name\", flex: 1, renderCell: renderName },\r\n    {\r\n      field: \"type\",\r\n      headerName: \"Type\",\r\n      flex: 1,\r\n      disableExport: true,\r\n    },\r\n    {\r\n      field: \"uploaded_date\",\r\n      headerName: \"Uploaded Date\",\r\n      renderCell: renderDate,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"tags\",\r\n      headerName: \"Tags\",\r\n      renderCell: tagsRender,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"property\",\r\n      headerName: \"Properties\",\r\n      renderCell: renderProperties,\r\n      flex: 1,\r\n    },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      disableColumnMenu: true,\r\n    },\r\n  ];\r\n\r\n  const handleTags = (e, item) => {\r\n    e.preventDefault();\r\n    setSelectedScreen(item);\r\n    setNewTagModal(!showNewTagModal);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FilterModal\r\n        showFilterModal={showFilterModal}\r\n        setFilterModal={setFilterModal}\r\n        setFilterData={setFilterData}\r\n        setIsRefresh={setIsRefresh}\r\n        type={[\"tags\"]}\r\n        selectedType={\"media\"}\r\n      />\r\n      <div className=\"d-flex justify-content-end\">\r\n        <Button\r\n          className=\"ml-2 icon-btn\"\r\n          variant=\"primary\"\r\n          onClick={() => {\r\n            setFilterModal(true);\r\n          }}\r\n          style={{ position: \"absolute\", top: \"10px\" }}\r\n        >\r\n          <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n        </Button>\r\n      </div>\r\n\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 custom-modal quick-modal custom-modal-medium\"\r\n        show={preview}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"mr-auto\">Image Preview</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setPreview(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"flex-wrap align-items-center\">\r\n            {imgType && imgType === \"image\" && (\r\n              <img\r\n                src={`${BASE_URL}${imgUrl}`}\r\n                style={{ width: \"100%\", height: \"500px\", objectFit: \"fill\" }}\r\n              />\r\n            )}\r\n            {imgType && imgType === \"video\" && (\r\n              <video\r\n                className=\"video-js\"\r\n                autoPlay\r\n                muted\r\n                loop\r\n                style={{ width: \"100%\", height: \"500px\" }}\r\n              >\r\n                <source src={`${BASE_URL}${imgUrl}`} type=\"video/mp4\" />\r\n              </video>\r\n            )}\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <DataGrid\r\n        getRowHeight={() => \"auto\"}\r\n        components={{\r\n          NoRowsOverlay: CustomNoRowsOverlay,\r\n          Toolbar: CustomToolbar,\r\n          LoadingOverlay: LinearProgress,\r\n          Pagination: CustomPagination,\r\n        }}\r\n        rows={rows}\r\n        columns={columns}\r\n        pageSize={10}\r\n        rowsPerPageOptions={[5]}\r\n        disableSelectionOnClick\r\n        experimentalFeatures={{ newEditingApi: true }}\r\n        pagination\r\n        zIndex={-1}\r\n      />\r\n\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={allMedia}\r\n          selected={selectedScreen}\r\n          setIsRefresh={setIsRefresh}\r\n          type={\"media\"}\r\n        />\r\n      )}\r\n      {showPublishPopUp && (\r\n        <PublishMediaModal\r\n          selected={showPublishPopUp}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"media\"\r\n        />\r\n      )}\r\n      {deleteModal && (\r\n        <DeleteConfirmation\r\n          setDeleteModal={setDeleteModal}\r\n          callbackFunction={handleDelete}\r\n          text=\"Are you sure you want to delete?\"\r\n          yes={\"Delete\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ListMedia;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddDeviceProfile.jsx",["1208","1209","1210","1211","1212","1213","1214"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport {\r\n  BASE_URL,\r\n  addDeviceProfile,\r\n  updateDeviceProfile,\r\n} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddMedia from \"../modals/AddMedia\";\r\nimport DragMove from \"./DragMove\";\r\nimport Switch from \"react-switch\";\r\nimport upload from \"../../img/uplaod.svg\";\r\n\r\nconst AddDeviceProfile = ({\r\n  open,\r\n  setShowProfileModel,\r\n  setIsRefresh,\r\n  profileData,\r\n  setProfileData,\r\n  type,\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [openMedia, setOpenMedia] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [selectedMedia, setSelectedMedia] = useState(null);\r\n  const [height, setHeight] = useState(0);\r\n  const [width, setWidth] = useState(0);\r\n  const [healthIndicator, setHealthIndicator] = useState(false);\r\n  const [viewPort, setViewPort] = useState(\"portrait\");\r\n  const [isDisable, setIsDisable] = useState(false);\r\n  useEffect(() => {\r\n    if (profileData) {\r\n      setSelectedMedia({\r\n        title: profileData.logo.title,\r\n        type: profileData.logo.type,\r\n      });\r\n      setWidth(profileData.logo.dimensions.width);\r\n      setHeight(profileData.logo.dimensions.height);\r\n      setViewPort(profileData.logo.orientation);\r\n      setTranslate({\r\n        x: profileData.logo.coordinates.x,\r\n        y: profileData.logo.coordinates.y,\r\n      });\r\n      setHealthIndicator(profileData.screenHealthIndicator);\r\n      setName(profileData.name);\r\n      console.log(\"profileData\", profileData);\r\n    }\r\n  }, [profileData]);\r\n\r\n  const [translate, setTranslate] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const handleChangeDate = (nextChecked) => {\r\n    console.log(nextChecked, \"yyyy\");\r\n    setHealthIndicator(nextChecked);\r\n  };\r\n  const handleDragMove = (e) => {\r\n    setTranslate({\r\n      x: translate.x + e.movementX,\r\n      y: translate.y + e.movementY,\r\n    });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsDisable(true);\r\n    let err = \"\";\r\n    if (name === \"\") {\r\n      err = \"Name is Required\";\r\n    }\r\n    if (err !== \"\") {\r\n      setError(err);\r\n      setIsDisable(false);\r\n      return;\r\n    } else {\r\n      setError(\"\");\r\n    }\r\n\r\n    if (type && type == \"edit\") {\r\n      const payLoad = {\r\n        name,\r\n        screenHealthIndicator: healthIndicator,\r\n        orientation: viewPort,\r\n        width,\r\n        height,\r\n        x: translate.x,\r\n        y: translate.y,\r\n        title: selectedMedia ? selectedMedia.title : \"\",\r\n        type: selectedMedia ? selectedMedia.type : \"\",\r\n        profileId: profileData._id,\r\n      };\r\n      await updateDeviceProfile(payLoad)\r\n        .then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Device Profile has been Updated successfully !!!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n          setIsRefresh(true);\r\n          handleCloseForm()\r\n          //setShowProfileModel(false);\r\n        })\r\n        .catch(function (error) {\r\n          setError(error.response.data.message);\r\n        });\r\n    } else {\r\n      const payLoad = {\r\n        name,\r\n        screenHealthIndicator: healthIndicator,\r\n        orientation: viewPort,\r\n        width,\r\n        height,\r\n        x: translate.x,\r\n        y: translate.y,\r\n        title: selectedMedia ? selectedMedia.title : \"\",\r\n        type: selectedMedia ? selectedMedia.type : \"\",\r\n      };\r\n      await addDeviceProfile(payLoad)\r\n        .then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Device Profile has been added successfully !!!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n          setIsRefresh(true);\r\n          setShowProfileModel(false);\r\n        })\r\n        .catch(function (error) {\r\n          setError(error.response.data.message);\r\n        });\r\n    }\r\n    setIsDisable(false);\r\n  };\r\n  const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n      return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleCloseForm  = () => {\r\n    setName(\"\");\r\n    setError(\"\");\r\n    setOpenMedia(false);\r\n    setSelectedImage(null);\r\n    setSelectedMedia(null);\r\n    setHeight(0);\r\n    setWidth(0);\r\n    setHealthIndicator(false);\r\n    setViewPort(\"portrait\");\r\n    setShowProfileModel(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AddMedia\r\n        setOpenMedia={setOpenMedia}\r\n        openMedia={openMedia}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n        setSelectedMedia={setSelectedMedia}\r\n        setHeight={setHeight}\r\n        setWidth={setWidth}\r\n      />\r\n      <Modal className=\"\" show={open} size=\"xl\">\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {type && type == \"edit\" ? \"Update \" : \"Add \"} Profile\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => handleCloseForm()}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            {error && error !== \"\" && (\r\n              <h5 className=\"alert alert-danger\">{error}</h5>\r\n            )}\r\n            <Col lg={12} md={12} sm={12} xs={12}>\r\n              <label className=\"mt-3\">Enter Name</label>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  className=\"form-control input-default form-field\"\r\n                  placeholder=\"Enter Name\"\r\n                  onChange={(e) => {\r\n                    setName(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group pt-2\">\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={handleChangeDate}\r\n                  checked={healthIndicator}\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"form-group d-flex pt-2\">\r\n                {/* <button\r\n                  onClick={(e) => {\r\n                    setOpenMedia(true);\r\n                  }}\r\n                  className=\"btn btn-primary  primary-btn btn\"\r\n                >\r\n                  Add Image\r\n                </button> */}\r\n                <div className=\"mr-4 add-device-profile-img\">\r\n                  {selectedMedia && (\r\n                    <span className=\"td-content d-flex name-td-content mb-3 \">\r\n                      <span\r\n                        className={`name-img mr-2  ${\r\n                          selectedMedia?.type === \"video\" && \"videotableName\"\r\n                        }`}\r\n                      >\r\n                        {selectedMedia?.type === \"image\" && (\r\n                          <div\r\n                            onClick={() => {\r\n                              //showPreview(selectedMedia.title, selectedMedia.type);\r\n                            }}\r\n                            className=\"media-list-img-zoom\"\r\n                          >\r\n                            <span className=\"media-list-img-zoom-plus\">+</span>\r\n                            <img\r\n                              className=\"media-img img-fluid\"\r\n                              src={`${BASE_URL}${selectedMedia?.title}`}\r\n                              alt=\"media-img\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                        {selectedMedia?.type === \"video\" && (\r\n                          <button\r\n                            onClick={() => {\r\n                              //showPreview(media.title, media.type);\r\n                            }}\r\n                          >\r\n                            {videoMetaDuration(selectedMedia)}\r\n                          </button>\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <img\r\n                  onClick={(e) => {\r\n                    setOpenMedia(true);\r\n                  }}\r\n                  src={upload}\r\n                  alt=\"icon\"\r\n                  height=\"35px\"\r\n                  width=\"35px\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                {selectedMedia && (\r\n                  <div>\r\n                    <div className=\"add-device-potrait \">\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setViewPort(\"portrait\");\r\n                        }}\r\n                        className={`${viewPort == \"portrait\" ? \" active\" : \"\"}`}\r\n                      >\r\n                        Portrait\r\n                      </div>\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setViewPort(\"landscape\");\r\n                        }}\r\n                        className={`${\r\n                          viewPort == \"landscape\" ? \" active\" : \"\"\r\n                        }`}\r\n                      >\r\n                        Landscape\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">X</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={translate.x}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setTranslate({\r\n                              ...translate,\r\n                              [\"x\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Y</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={translate.y}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setTranslate({\r\n                              ...translate,\r\n                              [\"y\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Width</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={width}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setWidth(e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Height</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={height}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setHeight(e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <header className=\"App-header\">\r\n                        <DragMove onDragMove={handleDragMove}>\r\n                          <div\r\n                            style={{\r\n                              transform: `translateX(${translate.x}px) translateY(${translate.y}px)`,\r\n                            }}\r\n                            className=\"w-100\"\r\n                          >\r\n                            <img\r\n                              style={{\r\n                                width: `${width}px`,\r\n                                height: `${height}px`,\r\n                                maxWidth: \"100%\",\r\n                              }}\r\n                              src={`${BASE_URL}${selectedMedia?.title}`}\r\n                              className={`App-logo  ${width}`}\r\n                              alt=\"logo\"\r\n                            />\r\n                          </div>\r\n                        </DragMove>\r\n                      </header>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => handleCloseForm()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                disabled={isDisable}\r\n                onClick={(e) => handleSubmit(e)}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddDeviceProfile;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\profile.jsx",["1215","1216","1217","1218","1219","1220","1221"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown, Card, Button } from \"react-bootstrap\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { addDeviceProfile, deleteDeviceProfile } from \"../../../utils/api\";\r\nimport { humanReadableFormattedDateString } from \"../../../utils/UtilsService\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\r\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport {\r\n  DataGrid,\r\n  GridToolbarExport,\r\n  gridPageCountSelector,\r\n  gridPageSelector,\r\n  useGridApiContext,\r\n  useGridSelector,\r\n} from \"@mui/x-data-grid\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport CustomNoRowsOverlay from \"../CustomNoRowsOverlay\";\r\nimport QuickSearchToolbar from \"../QuickSearchToolbar\";\r\nimport { GridToolbarContainer } from \"@mui/x-data-grid\";\r\n\r\nfunction CustomToolbar() {\r\n  return (\r\n    <GridToolbarContainer>\r\n      {/* <GridToolbarColumnsButton  color='success' title=\"ABC\" label={'ds'} startIcon={<Avatar />}  /> */}\r\n      {/* <GridToolbarExport color='success' csvOptions={\r\n        {\r\n          fileName: 'customerList',\r\n          utf8WithBom: true,\r\n        }} /> */}\r\n      <QuickSearchToolbar />\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nfunction CustomPagination() {\r\n  const apiRef = useGridApiContext();\r\n  const page = useGridSelector(apiRef, gridPageSelector);\r\n  const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n  return (\r\n    <Pagination\r\n      color=\"primary\"\r\n      count={pageCount}\r\n      page={page + 1}\r\n      onChange={(event, value) => apiRef.current.setPage(value - 1)}\r\n    />\r\n  );\r\n}\r\n\r\nconst Profile = ({ allDeviceProfile, setIsRefresh, isRefresh, loading }) => {\r\n  const [showProfileModel, setShowProfileModel] = useState(false);\r\n  const [profileData, setProfileData] = useState(null);\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [selected, setSelected] = useState(null);\r\n  const [selectedScreen, setSelectedScreen] = useState([]);\r\n\r\n  const handleEditiUser = (e, item) => {\r\n    e.preventDefault();\r\n    setShowProfileModel(true);\r\n    setProfileData(item);\r\n    console.log(\"Update Profile\");\r\n  };\r\n\r\n  const handleAssignScreen = (e, id, item) => {\r\n    e.preventDefault();\r\n    setShowPublishPopUp(true);\r\n    setSelected(id);\r\n    setSelectedScreen(item.screens);\r\n    console.log(\"Assign Screen\");\r\n  };\r\n\r\n  const handleDelete = async (e, id) => {\r\n    e.preventDefault();\r\n    await deleteDeviceProfile(id);\r\n    toast.success(\"Profile has been deleted successfully !!!\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n    setIsRefresh(!isRefresh);\r\n  };\r\n\r\n  const renderAction = (params) => {\r\n    const { value } = params;\r\n    return (\r\n      <Dropdown className=\"dropdown-toggle profile-dropdown\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleEditiUser(e, value);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={assignIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Edit</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleAssignScreen(e, value._id, value);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Assigned Screen</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleDelete(e, value._id);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Name\",\r\n      selector: (row) => row?.name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Created\",\r\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Updated\",\r\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \" \",\r\n      selector: (row) => renderAction(row),\r\n      sortable: false,\r\n    },\r\n  ];\r\n  const rows1 = [];\r\n  if (allDeviceProfile) {\r\n    allDeviceProfile.forEach((item) => {\r\n      rows1.push({\r\n        id: item._id,\r\n        name: item.name,\r\n        created: humanReadableFormattedDateString(item.createdAt),\r\n        updated: humanReadableFormattedDateString(item.createdAt),\r\n        assignedScreen: item.screens.length,\r\n        action: item,\r\n      });\r\n    });\r\n  }\r\n\r\n  const columns1 = [\r\n    { field: \"id\", headerName: \"ID\", flex: 1 },\r\n    { field: \"name\", headerName: \"Name\", flex: 1, disableExport: true },\r\n    { field: \"created\", headerName: \"Created At\", flex: 1 },\r\n    { field: \"updated\", headerName: \"Updated At\", flex: 1 },\r\n    { field: \"assignedScreen\", headerName: \"Assigned Screen\", flex: 1 },\r\n    {\r\n      field: \"action\",\r\n      headerName: \"Action\",\r\n      flex: 1,\r\n      renderCell: renderAction,\r\n      disableExport: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <AddDeviceProfile\r\n        open={showProfileModel}\r\n        setShowProfileModel={setShowProfileModel}\r\n        setIsRefresh={setIsRefresh}\r\n        profileData={profileData}\r\n        setProfileData={setProfileData}\r\n        type=\"edit\"\r\n      />\r\n      <SelectScreenModal\r\n        showPublishPopUp={showPublishPopUp}\r\n        setShowPublishPopUp={setShowPublishPopUp}\r\n        selected={selected}\r\n        setIsRefresh={setIsRefresh}\r\n        selectedScreen={selectedScreen}\r\n        setSelectedScreen={setSelectedScreen}\r\n      />\r\n      {/* <Datatable\r\n        className=\"profile\"\r\n        columns={columns}\r\n        data={allDeviceProfile}\r\n        pagination\r\n        sorting\r\n      /> */}\r\n      <Box sx={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          components={{\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n            Toolbar: CustomToolbar,\r\n            LoadingOverlay: LinearProgress,\r\n            Pagination: CustomPagination,\r\n          }}\r\n          rows={rows1}\r\n          columns={columns1}\r\n          pageSize={10}\r\n          rowsPerPageOptions={[5]}\r\n          //checkboxSelection\r\n          disableSelectionOnClick\r\n          experimentalFeatures={{ newEditingApi: true }}\r\n          loading={loading}\r\n          pagination\r\n        />\r\n      </Box>\r\n\r\n      {/* <Table responsive className=\"custom-table screen-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Created ON</th>\r\n            <th>Update On</th>\r\n            <th>Assigned Screens</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {allDeviceProfile !== \"\" &&\r\n            allDeviceProfile.map((item) => {\r\n              return (\r\n                <tr id={item._id}>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>{item.name}</strong>\r\n                    </span>\r\n                  </td>\r\n                  <td>{humanReadableFormattedDateString(item.createdAt)}</td>\r\n                  <td>{humanReadableFormattedDateString(item.updatedAt)}</td>\r\n                  <td>{item.screens.length}</td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        \r\n                        <Dropdown.Item \r\n                         onClick={(e) => {handleEditiUser(e, item)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={assignIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Edit</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item \r\n                           onClick={(e)=>{handleAssignScreen(e, item._id, item)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Assigned Screen</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item \r\n                           onClick={(e)=>{handleDelete(e, item._id)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ChangePassword.jsx",["1222","1223"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst ChangePassword = ({ setShowModel, show }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={show}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Change Password</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowModel(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form>\r\n          <div className=\"mb-3\">\r\n            <strong>\r\n              <label className=\"mb-3\"> Old Password</label>\r\n            </strong>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default form-field\"\r\n              placeholder=\"Old Password\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-4\">\r\n            <strong>\r\n              <label className=\"mb-3\"> New Password</label>\r\n            </strong>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default form-field\"\r\n              placeholder=\"New Password\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() => setShowModel(false)}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\group.jsx",["1224","1225","1226","1227","1228","1229","1230"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { deleteGroups, updateGroups } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddUserModal from \"../../modals/AddUserModal\";\r\n\r\nconst Group = ({ groups, setIsRefresh, isRefresh }) => {\r\n  const [showAddUserModel, setShowAddUserModel] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  const deleteuserRecord = async (e, id) => {\r\n    e.preventDefault();\r\n    await deleteGroups(id);\r\n    toast.success(\"Group has been deleted successfully !!!\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n    setIsRefresh(!isRefresh);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddUserModal\r\n        open={showAddUserModel}\r\n        setShowAddUserModel={setShowAddUserModel}\r\n        setIsRefresh={setIsRefresh}\r\n        user={user}\r\n        setUser={setUser}\r\n        type={\"edit\"}\r\n      />\r\n      <Table responsive className=\"custom-table screen-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Description</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {groups &&\r\n            groups.groups !== \"\" &&\r\n            groups.groups.map((item) => {\r\n              return (\r\n                <tr id={item._id}>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>{item.name}</strong>\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span className=\"d-flex align-items-center\">\r\n                      <span className=\"td-content\">\r\n                        <strong>{item.description}</strong>\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n                  <td>{item.createdAt}</td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item\r\n                          onClick={(e) => {\r\n                            deleteuserRecord(e, item._id);\r\n                          }}\r\n                          className=\"dropdown-list-item\"\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete Group</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Group;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\roles.jsx",["1231","1232","1233","1234","1235","1236","1237","1238","1239"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Dropdown,\r\n  Button,\r\n  Modal,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\nimport { updateRoles } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Editor } from \"draft-js\";\r\n\r\nconst Roles = ({ roles, setIsRefresh, isRefresh }) => {\r\n  const [rolesData, setRolesData] = useState(roles.roles);\r\n  const [rolesType, setRolesType] = useState(\"OPERATOR\");\r\n  const [makeRefresh, setMakeRefresh] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMakeRefresh(false);\r\n    if (roles) {\r\n      setRolesData(roles.roles);\r\n    }\r\n  }, [makeRefresh, rolesData]);\r\n\r\n  const handleChange = async (e, set, section, type, val) => {\r\n    rolesData[set][section][type] = val;\r\n    await setRolesData(rolesData);\r\n    setMakeRefresh(true);\r\n  };\r\n\r\n  const handleRoles = async (e) => {\r\n    e.preventDefault();\r\n    console.log(rolesData);\r\n    await updateRoles(rolesData)\r\n      .then((response) => {\r\n        //setError(null);\r\n        toast.success(\"Roles has been updated successfully !\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        });\r\n        setIsRefresh(true);\r\n      })\r\n      .catch(function (error) {\r\n        //setError(error.response.data.message)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex mb-4\">\r\n        <button\r\n          className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn \"\r\n          onClick={(e) => {\r\n            handleRoles(e);\r\n          }}\r\n        >\r\n          Update\r\n        </button>\r\n      </div>\r\n      <Row className=\"w-100\" style={{ marginTop: \"10px\" }}>\r\n        <Col lg={3} md={3} sm={3} xs={3} className=\"pl-0 pr-2 card\">\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"OPERATOR\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"OPERATOR\");\r\n              }}\r\n            >\r\n              Operator\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"MANAGER\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"MANAGER\");\r\n              }}\r\n            >\r\n              Manager\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"EDITOR\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"EDITOR\");\r\n              }}\r\n            >\r\n              Editor\r\n            </button>\r\n          </div>\r\n        </Col>\r\n        <Col lg={9} md={9} sm={9} xs={9} className=\"pl-2 pr-0\">\r\n          <Table responsive className=\"custom-table screen-table roles-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Permission</th>\r\n                <th>View</th>\r\n                <th>Add</th>\r\n                <th>edit</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            {rolesType && rolesType == \"OPERATOR\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            {rolesType && rolesType == \"MANAGER\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            {rolesType && rolesType == \"EDITOR\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Roles;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddGroup.jsx",["1240","1241","1242","1243","1244","1245","1246","1247"],"import React, {useState, useEffect} from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport Select from \"react-select\";\r\nimport {addGroups, updateGroups} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddGroup = ({ open, setShowGroupModel , setIsRefresh, group, type}) => {\r\n    const [name, setName] = useState(group ? group.name : \"\");\r\n    const [description, setDescription] = useState(group ? group.description : \"\");\r\n    const [error, setError] = useState('');\r\n    const [isDisable, setIsDisable] = useState(false)\r\n    useEffect(() => {\r\n        if(group){   \r\n            setName(group.name);\r\n            setDescription(group.descripiton);\r\n        }\r\n    },[group])\r\n    const options = [\r\n        { value: \"MANAGER\", label: \"Manager\" },\r\n        { value: \"EDITOR\", label: \"Editor\" },\r\n      ];\r\n    const handleSubmit = async(e, type) => {\r\n        e.preventDefault();\r\n        setIsDisable(true)\r\n        let err = '';\r\n        if(name.trim() == ''){\r\n            err = 'Name is required';\r\n        }\r\n        else if(description == ''){\r\n            err = 'Description is required';\r\n        }\r\n        if(err){\r\n            setError(err);\r\n            setIsDisable(false)\r\n            return;\r\n        }\r\n        \r\n        if(err == ''){\r\n            if(!type){\r\n                const postData = {\r\n                    name,description\r\n                }\r\n                await addGroups(postData)\r\n                  .then(response => {\r\n                    setError(null);\r\n                    //setShowGroupModel(false);\r\n                    handleCloseForm();\r\n                    setIsDisable(false)\r\n                    toast.success(\"Group has been added successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }else{\r\n                console.log(\"Update\");\r\n                const postData = {\r\n                    name,groupId:group._id,description\r\n                }\r\n                await updateGroups(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    handleCloseForm();\r\n                    setIsDisable(false)\r\n                    toast.success(\"User has been updated successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }\r\n\r\n            setIsDisable(false);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleCloseForm = () => {\r\n        setName(\"\");\r\n        setDescription(\"\");\r\n        setError('');\r\n        setShowGroupModel(false)\r\n    }\r\n    return (\r\n        <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n        show={open}\r\n        size=\"md\"\r\n        >\r\n        <Modal.Header>\r\n            <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}Group</Modal.Title>\r\n            <Button\r\n                variant=\"\"\r\n                className=\"close\"\r\n                onClick={() => handleCloseForm()}\r\n            >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n            </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Row>\r\n                {error && <h5 className=\"alert alert-danger text-center\">{error}</h5>}\r\n                <Col lg={12} md={12} sm={12} xs={12}>\r\n                    <label className=\"mt-3\">Enter Name</label>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            className=\"form-control input-default form-field\"\r\n                            placeholder=\"Enter Name\"\r\n                            onChange={(e) => {setName(e.target.value)}}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n                <Col lg={12} md={12} sm={12} xs={12}>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"mt-3\">Enter Description</label>\r\n                        <textarea\r\n                            name=\"description\"\r\n                            value={description}\r\n                            className=\"form-control input-default form-field\"\r\n                            placeholder=\"Enter Description\"\r\n                            onChange={(e) => {setDescription(e.target.value)}}>\r\n                        </textarea>\r\n                    </div>\r\n                </Col>\r\n            \r\n            </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Row className=\"w-100 m-0\">\r\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                    <Button \r\n                        className=\"cancel-btn w-100\"\r\n                        variant=\"outline-light\"\r\n                        onClick={() => handleCloseForm()}\r\n                    >\r\n                    Cancel\r\n                    </Button>\r\n                </Col>\r\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                    <Button\r\n                    variant=\"\"\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary btn-block primary-btn\"\r\n                    disabled={isDisable}\r\n                    onClick={(e) => handleSubmit(e, type)}\r\n                    >\r\n                    Add Group\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddGroup;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddUserModal.jsx",["1248","1249","1250","1251","1252","1253","1254"],"import React, {useState, useEffect} from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport Select from \"react-select\";\r\nimport {addUsers, updateUsers} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddUser = ({ open, setShowAddUserModel , setIsRefresh, user, type}) => {\r\n    console.log(\"user\",user)\r\n    const [name, setName] = useState(user ? user.name : \"\");\r\n    const [email, setEmail] = useState(user ? user.email : \"\");\r\n    const [password, setPassword] = useState(user ? user.password : \"\");\r\n    const [role, setRole] = useState(user ? {value:user.role.toUpperCase(),label:user.role} : \"\");\r\n    const [error, setError] = useState('');\r\n    const [isDisable, setIsDisable] = useState(false)\r\n    useEffect(() => {\r\n        if(user){   \r\n            setName(user.name);\r\n            setEmail(user.email);\r\n            setPassword(user.password);\r\n            setRole({value:user.role.toUpperCase(),label:user.role});\r\n        }\r\n    },[user])\r\n    const options = [\r\n        { value: \"MANAGER\", label: \"Manager\" },\r\n        { value: \"EDITOR\", label: \"Editor\" },\r\n        { value: \"OPERATOR\", label: \"Operator\" },\r\n      ];\r\n    const handleSubmit = async(e, type) => {\r\n        e.preventDefault();\r\n        setIsDisable(true);\r\n        let err = '';\r\n        if(name == ''){\r\n            err = 'Name is required';\r\n        }\r\n        else if(password == '' && type == null){\r\n            err = 'password is required';\r\n        }\r\n        else if(email == ''){\r\n            err = 'Email is required';\r\n        }\r\n        else if(role == null){\r\n            err = 'Role is required';\r\n        } \r\n        if(err){\r\n            setError(err);\r\n            return;\r\n        }\r\n        console.log(\"error\",err)\r\n        \r\n        if(err == ''){\r\n            if(!type){\r\n                const postData = {\r\n                    name, email, password, role:role.value\r\n                }\r\n                await addUsers(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    //setShowAddUserModel(false);\r\n                    handleCloseForm()\r\n                    toast.success(\"User has been added successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }else{\r\n                console.log(\"Update\");\r\n                const postData = {\r\n                    name,role:role.value,userId:user._id\r\n                }\r\n                await updateUsers(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    //setShowAddUserModel(false);\r\n                    handleCloseForm()\r\n                    toast.success(\"User has been updated successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }\r\n            console.log(\"Submit\",name, email, password,role);\r\n            \r\n            \r\n        }\r\n        setIsDisable(false);\r\n        \r\n    }\r\n\r\n    const handleCloseForm = () => {\r\n      setName(\"\");\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n      setRole(\"\");\r\n      setError('');\r\n      setShowAddUserModel(false);\r\n    }\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={open}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}User</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => handleCloseForm()}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row>\r\n            {error && <h5 className=\"alert alert-danger text-center\">{error}</h5>}\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n          <label className=\"mt-3\">Enter Name</label>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name\"\r\n                onChange={(e) => {setName(e.target.value)}}\r\n              />\r\n            </div>\r\n          </Col>\r\n\r\n          {!type && <><Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Enter Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Email\"\r\n                onChange={(e) => {setEmail(e.target.value)}}\r\n              />\r\n            </div>\r\n          </Col><Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Enter Password</label>\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Password\"\r\n                onChange={(e) => {setPassword(e.target.value)}}\r\n                autoComplete={false}\r\n              />\r\n            </div>\r\n          </Col></>}\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Select Role</label>\r\n              <Select\r\n              value={role}\r\n              onChange={setRole}\r\n              placeholder=\"Select Role\"\r\n              options={options}\r\n              className=\"app-option\"\r\n            />\r\n            </div>\r\n          </Col>\r\n          \r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button \r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => handleCloseForm()}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              disabled={isDisable}\r\n              onClick={(e) => handleSubmit(e, type)}\r\n            >\r\n              {type && type === 'edit' ? 'Update User' : 'Add User'}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\User.jsx",["1255","1256","1257","1258","1259","1260","1261"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.svg\";\r\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { deleteUsers, updateUsers } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddUserModal from \"../../modals/AddUserModal\";\r\n\r\nconst User = ({ users, setIsRefresh, isRefresh }) => {\r\n  //   const [showNewTagModal, setNewTagModal] = useState(false);\r\n  //   const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n  //   const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [showAddUserModel, setShowAddUserModel] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n\r\n  const deleteuserRecord = async (e, id) => {\r\n    e.preventDefault();\r\n    await deleteUsers(id);\r\n    toast.success(\"User has been deleted successfully !!!\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n    setIsRefresh(!isRefresh);\r\n  };\r\n\r\n  const handleEditiUser = (e, item) => {\r\n    e.preventDefault();\r\n    setShowAddUserModel(true);\r\n    setUser(item);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddUserModal\r\n        open={showAddUserModel}\r\n        setShowAddUserModel={setShowAddUserModel}\r\n        setIsRefresh={setIsRefresh}\r\n        user={user}\r\n        setUser={setUser}\r\n        type={\"edit\"}\r\n      />\r\n      <Table responsive className=\"custom-table screen-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Created Date</th>\r\n            <th>Role</th>\r\n            <th>status</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users !== \"\" &&\r\n            users.map((item) => {\r\n              return (\r\n                <tr id={item._id}>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>{item.name}</strong>\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span className=\"d-flex align-items-center\">\r\n                      <span className=\"status status-green\"></span>\r\n                      <span className=\"td-content\">\r\n                        <strong>{item.email}</strong>\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n                  <td>{item.createdAt}</td>\r\n                  <td>{item.role}</td>\r\n                  <td>{item.isVerified == true ? \"Active\" : \"Deactive\"}</td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        {/* <Dropdown.Item \r\n                          // onClick={() => {\r\n                          //   setShowPublishPopUp(true);\r\n                          //   setSelectedScreen(screen._id)\r\n                          // }}\r\n                          className=\"dropdown-list-item\"\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={defaultComparisonIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Disable User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item> */}\r\n                        <Dropdown.Item\r\n                          onClick={(e) => {\r\n                            handleEditiUser(e, item);\r\n                          }}\r\n                          className=\"dropdown-list-item\"\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={assignIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Edit User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        {/* <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Change Password</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item> */}\r\n                        <Dropdown.Item\r\n                          onClick={(e) => {\r\n                            deleteuserRecord(e, item._id);\r\n                          }}\r\n                          className=\"dropdown-list-item\"\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\defaultComposition.jsx",["1262","1263","1264"],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nimport emptyMediaImg from \"../../../images/card/1.png\";\r\nimport { BASE_URL, getAllComposition, vendorProfile } from \"../../../utils/api\";\r\nimport DefaultCompositionModal from \"../../modals/DefaultCompositionModal\";\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\n\r\nconst DefaultComposition = ({auth}) => {\r\n  console.log(\"auth\", auth)\r\n  const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\r\n  const [defaultCompositionShow, setDefaultCompositionShow] = useState(false);\r\n  const [compositionList, setCompositionList] = useState();\r\n  const [showDefaultComposition, setShowDefaultComposition] = useState(\"\");\r\n  console.log(showDefaultComposition, \"lloooooo\");\r\n  async function getComPosition() {\r\n    await getAllComposition().then((res) => {\r\n      console.log(res, \"res push screen, DefaultComposition\");\r\n      setCompositionList(res);\r\n    });\r\n  }\r\n  async function getVendorProfile() {\r\n    await vendorProfile().then((res) => {\r\n      console.log(res, \"res push screen, vendorProfile\");\r\n      setShowDefaultComposition(res.data.data.defaultComposition);\r\n    });\r\n  }\r\n  const content = showDefaultComposition?.media?.zones[0].content[0];\r\n  useEffect(() => {\r\n    getComPosition();\r\n    getVendorProfile();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"row settings-default\">\r\n        <Col xl=\"6\">\r\n          <div className=\"default-composition-preview\">\r\n            <div className=\"thumbnail\">\r\n              {content?.type === \"image\" && (\r\n                <img\r\n                  className=\" imgContent\"\r\n                  src={`${BASE_URL}${content.url}`}\r\n                  alt=\"media-img\"\r\n                />\r\n              )}\r\n              {content?.type !== \"image\" && content?.type !== \"video\" && (\r\n                <img\r\n                  className=\"imgContent\"\r\n                  src={defaultMediaUrl}\r\n                  alt=\"Card cap\"\r\n                />\r\n              )}\r\n              {content?.type === \"video\" && (\r\n                <VideoThumbnail\r\n                  videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${content.url}`}\r\n                  thumbnailHandler={(thumbnail) =>\r\n                    console.log(thumbnail, \"pppppp\")\r\n                  }\r\n                  width={426}\r\n                  height={240}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col xl=\"6\">\r\n          <div className=\"mb-4\">\r\n            <h4 className=\"card-title card-intro-title\">\r\n              Organisation default composition\r\n            </h4>\r\n            <p>\r\n              The composition will be applied to all newly added displays in the\r\n              organization\r\n            </p>\r\n            <p className=\"font-weight-bold\">\r\n              Default Composition: {showDefaultComposition?.media?.name}\r\n              <span\r\n                className=\"btn-icon-right text-info\"\r\n                onClick={() => {\r\n                  setDefaultCompositionShow(true);\r\n                }}\r\n              >\r\n                <i className=\"fa fa-pencil\" />\r\n              </span>\r\n            </p>\r\n            {showDefaultComposition?.duration && (\r\n              <p className=\"font-weight-bold\">\r\n                Duration: {showDefaultComposition?.duration} seconds\r\n              </p>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </div>\r\n      <DefaultCompositionModal\r\n        close={() => setDefaultCompositionShow(false)}\r\n        show={defaultCompositionShow}\r\n        compositionList={compositionList}\r\n        getVendorProfile={() => getVendorProfile()}\r\n      />\r\n    </>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n      auth: state.auth.auth,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(DefaultComposition);\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AllNewsAppModal.jsx",["1265","1266","1267","1268","1269","1270","1271","1272","1273","1274"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { addApps, updateApps, getNews } from \"../../utils/api\";\r\nimport { handleNewsApps } from \"../../utils/UtilsService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Switch from \"react-switch\";\r\n\r\nconst AllNewsAppModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const [newsData, setNewsData] = useState(null);\r\n  const [newsPreviewData, setNewsPreviewData] = useState(null);\r\n  const topics = [\r\n    { value: \"world\", label: \"World\" },\r\n    { value: \"business\", label: \"Business\" },\r\n    { value: \"technology\", label: \"Technology\" },\r\n    { value: \"science\", label: \"Science\" },\r\n    { value: \"health\", label: \"Health\" },\r\n    { value: \"most-viewed\", label: \"Most Viewed\" },\r\n    { value: \"movies\", label: \"Movies\" },\r\n    { value: \"travel\", label: \"Travel\" },\r\n    { value: \"automobile\", label: \"Automobile\" },\r\n    { value: \"asia-pacific\", label: \"Asia Pacific\" },\r\n    { value: \"education\", label: \"Education\" },\r\n    { value: \"media\", label: \"Media\" },\r\n    { value: \"fashion\", label: \"Fashion and style\" },\r\n  ];\r\n  const themeOptions = [\r\n    { value: \"classic\", label: \"Classic View\" },\r\n    { value: \"white\", label: \"White Background Center\" },\r\n  ];\r\n  const [selectedTheame, setSelectedTheame] = useState({\r\n    value: \"classic\",\r\n    label: \"Classic View\",\r\n  });\r\n  const [topic, setTopic] = useState({ value: \"world\", label: \"World\" });\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [duration, setDuration] = useState(10);\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      console.log(\"media\", mediaData, actionType);\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setMediaId(mediaData._id);\r\n      setDuration(jsonString.duration);\r\n      setSelectedTheame(jsonString.theame);\r\n      setTopic(jsonString.topic);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData]);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n      console.log(\"Hello\", err);\r\n      const dataString = {\r\n        url: name.trim(),\r\n        duration,\r\n        theame: selectedTheame,\r\n        topic,\r\n        orientationMode,\r\n      };\r\n\r\n      if (actionType && actionType == \"edit\") {\r\n        await updateApps({\r\n          name:name.trim(),\r\n          appId: mediaId,\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        setShowUrlApp(false);\r\n        setIsLoading(false)\r\n      } else {\r\n        await addApps({\r\n          name:name.trim(),\r\n          type: \"news-apps\",\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        handleClose(false);\r\n        setIsLoading(false)\r\n        setShowUrlRedirectApp(true);\r\n      }\r\n  };\r\n\r\n  const getNewsData = async (data) => {\r\n    const quoteResult = await getNews(data);\r\n    console.log(quoteResult);\r\n    setNewsData(quoteResult);\r\n  };\r\n\r\n  const getNewsDataZone1 = (data) => {\r\n    const prp = JSON.parse(data);\r\n\r\n    if (!newsData) {\r\n      getNewsData(topic);\r\n    }\r\n    console.log(data, newsData);\r\n    return handleNewsApps(data, newsData);\r\n  };\r\n\r\n  const handlePreview = async () => {\r\n    console.log(preview);\r\n    if (name) {\r\n      setNewsPreviewData(\r\n        getNewsDataZone1(\r\n          JSON.stringify({\r\n            url: name,\r\n            theame: selectedTheame,\r\n            topic,\r\n            orientationMode,\r\n          }),\r\n          newsData\r\n        )\r\n      );\r\n      setIsRefresh(true);\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setNewsData(null);\r\n    setNewsPreviewData(null);\r\n    setSelectedTheame({\r\n      value: \"classic\",\r\n      label: \"Classic View\",\r\n    });\r\n    setTopic({ value: \"world\", label: \"World\" });\r\n    setShowUrlRedirectApp(false);\r\n    setName(\"\");\r\n    setDuration(10);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            All News App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                name=\"name\"\r\n                id=\"name\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                value={name}\r\n                type=\"text\"\r\n                className=\"form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n              />\r\n\r\n              <label className=\"mt-3\">Topic </label>\r\n              <Select\r\n                value={topic}\r\n                onChange={setTopic}\r\n                options={topics}\r\n                className=\"app-option\"\r\n              />\r\n              <label className=\"mt-3\">Slide Duration (in seconds)</label>\r\n              <input\r\n                name=\"duration\"\r\n                id=\"duration\"\r\n                onChange={(e) => {\r\n                  setDuration(e.target.value);\r\n                }}\r\n                value={duration}\r\n                type=\"number\"\r\n                className=\"form-control \"\r\n                placeholder=\"10\"\r\n                required\r\n              />\r\n              <label className=\"mt-3\">Theme </label>\r\n              <Select\r\n                value={selectedTheame}\r\n                onChange={setSelectedTheame}\r\n                options={themeOptions}\r\n                className=\"app-option\"\r\n              />\r\n              {/* <div className=\"d-flex align-items-center mt-3\">\r\n                <label className=\"mb-0 mr-3\">Enable Animation?</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  // onChange={setDeviceTime}\r\n                  checked={true}\r\n                  name=\"deviceTime\"\r\n                  id=\"deviceTime\"\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div> */}\r\n              <Button onClick={handlePreview} className=\"mt-3\">\r\n                Preview\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    \r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    \r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\" h-100 quote-app-form-icon\">\r\n                <div className=\"text-center h-100 \">\r\n                  {newsPreviewData ? newsPreviewData : \"News Loading...\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllNewsAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\GoogleSlideAppModal.jsx",["1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport {handleGoogleApps} from '../../utils/UtilsService';\r\nimport useDrivePicker from 'react-google-drive-picker'\r\n//import GooglePicker from 'react-google-picker';\r\nimport moment from 'moment'\r\n\r\nconst GoogleSlideAppModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const tokenDetailsString = localStorage.getItem('googleAuth');\r\n  const [authToken, setAuthToken] = useState(null)\r\n  const [name, setName] = useState(\"\");\r\n  const [openPicker, data,authResponse] = useDrivePicker(); \r\n  const [fileData, setFileData] = useState(null);\r\n  const [fileURL, setFileURL] = useState(null);\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const handleOpenPicker = () => {\r\n    openPicker({\r\n      clientId: \"374562955931-mhli1rlb1kuhip30lhe58u0nht8bd2lg.apps.googleusercontent.com\",\r\n      developerKey: \"AIzaSyCMJk6QpvPCdibrNzpOQlFrqpDgf4-GHjw\",\r\n      //viewId: \"SPREADSHEETS\",\r\n      viewId: \"DOCS\",\r\n      token:authToken,\r\n      customScopes:['https://www.googleapis.com/auth/drive.readonly'],\r\n      showUploadView: true,\r\n      showUploadFolders: true,\r\n      supportDrives: true,\r\n      multiselect: true,\r\n      // customViews: customViewsArray, // custom view\r\n      callbackFunction: (data) => {\r\n\r\n        if (data.action === 'cancel') {\r\n          console.log('User clicked cancel/close button')\r\n        }\r\n        console.log(\"data\",data)\r\n        if (data.action === 'picked') {\r\n          setFileData(data.docs);\r\n          setFileURL(data.docs[0].embedUrl);\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(\"tokenDetailsString\",tokenDetailsString);\r\n    if(tokenDetailsString){\r\n      const tokenDetails = JSON.parse(tokenDetailsString);\r\n      let expireDate = tokenDetails.expirationTime;\r\n      let todaysDate = moment().format();\r\n      console.log(\"todays\",expireDate,todaysDate);\r\n      if (todaysDate > expireDate) {\r\n        console.log(\"Hello1\");\r\n          setAuthToken(null)\r\n      }else{\r\n        console.log(\"Hello2\");\r\n        setAuthToken(tokenDetails.access_token);\r\n      }\r\n      \r\n    }\r\n    console.log(\"data\",data);\r\n    if(data && data.access_token){\r\n      console.log(\"Loging in\");\r\n      data.expirationTime = moment().add(3599,'seconds').format();\r\n      localStorage.setItem('googleAuth', JSON.stringify(data));\r\n    }\r\n    if (mediaData) {\r\n      console.log(\"media\", mediaData, actionType);\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setMediaId(mediaData._id);\r\n      setFileData(jsonString.fileData);\r\n      setFileURL(jsonString.fileURL);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData,tokenDetailsString]);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n\r\n    if(!fileURL){\r\n      setErr(true);\r\n      setErrorMessage(\"File URL is required\");\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n      console.log(\"Hello\", err);\r\n      const dataString = {\r\n        url: name.trim(),\r\n        fileURL,\r\n        fileData,\r\n        orientationMode,\r\n      };\r\n\r\n      if (actionType && actionType == \"edit\") {\r\n        await updateApps({\r\n          name:name.trim(),\r\n          appId: mediaId,\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        setShowUrlApp(false);\r\n        setIsLoading(false);\r\n      } else {\r\n        await addApps({\r\n          name:name.trim(),\r\n          type: \"google-apps\",\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        handleClose(false);\r\n        setIsLoading(false);\r\n        setShowUrlRedirectApp(true);\r\n      }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setAuthToken(null)\r\n    setName(\"\");\r\n    setFileData(null);\r\n    setFileURL(null);\r\n    setErrorMessage(\"\");\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val)\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n  },[data, fileURL, tokenDetailsString])\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal custModal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Google Slide\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {\r\n            err && errMessage ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : \"\"\r\n          }\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form google-slide-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                onChange={(e) => {setName(e.target.value)}}\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                value={name}\r\n              />\r\n\r\n              <p className=\"mb-0 model-info-h text-black mt-3\">\r\n                This app let’s you publish Google workspace files on screens.\r\n              </p>\r\n              <p>Use either of the options mentioned below.</p>\r\n\r\n              <div className=\" my-3\">\r\n                <p className=\"model-info-h\">Option 1</p>\r\n                <ul>\r\n                  <li>Open the Google file you wish to publish.</li>\r\n                  <li>\r\n                    Change the access from ‘Restricted’ to ‘Public’. Here’s how\r\n                  </li>\r\n                  <li>\r\n                    Paste the link below and click on “Create App” button.{\" \"}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                name=\"fileURL\"\r\n                id=\"fileURL\"\r\n                onChange={(e) => {setFileURL(e.target.value)}}\r\n                value={fileURL}\r\n                className=\"  form-control \"\r\n                placeholder=\"Paste embed link here\"\r\n                required\r\n              />\r\n              <div className=\" my-3\">\r\n                <p className=\"model-info-h\">Option 2</p>\r\n                <ul>\r\n                  <li>Open the Google file you wish to publish.</li>\r\n                  <li>\r\n                    Change the access from ‘Restricted’ to ‘Public’. Here’s how\r\n                  </li>\r\n                  <li>\r\n                    Paste the link below and click on “Create App” button.{\" \"}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <Button onClick={() => handleOpenPicker()}>{authToken ?\"Open Picker\" :\"Login With Google\"}</Button>\r\n              {/* <GooglePicker \r\n                clientId=\"374562955931-mhli1rlb1kuhip30lhe58u0nht8bd2lg.apps.googleusercontent.com\"\r\n                developerKey=\"AIzaSyCMJk6QpvPCdibrNzpOQlFrqpDgf4-GHjw\"\r\n                //scope={SCOPE}\r\n                onChange={data => console.log('on change:', data)}\r\n                onAuthFailed={data => console.log('on auth failed:', data)}\r\n                multiselect={true}\r\n                navHidden={true}\r\n                authImmediate={false}\r\n                viewId={'FOLDERS'}\r\n                createPicker={ (google, oauthToken) => {\r\n                  const googleViewId = google.picker.ViewId.FOLDERS;\r\n                  const docsView = new google.picker.DocsView(googleViewId)\r\n                      .setIncludeFolders(true)\r\n                      .setMimeTypes('application/vnd.google-apps.folder')\r\n                      .setSelectFolderEnabled(true);\r\n\r\n                  const picker = new window.google.picker.PickerBuilder()\r\n                      .addView(docsView)\r\n                      .setOAuthToken(oauthToken)\r\n                      .setDeveloperKey(\"AIzaSyCMJk6QpvPCdibrNzpOQlFrqpDgf4-GHjw\")\r\n                      .setCallback(()=>{\r\n                        console.log('Custom picker is ready!');\r\n                      });\r\n\r\n                  picker.build().setVisible(true);\r\n              }}\r\n          >\r\n              <Button>Login With Google</Button>\r\n              <div className=\"google\"></div>\r\n              </GooglePicker> */}\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 google-slide-icon\">\r\n                {handleGoogleApps(JSON.stringify({\r\n                  fileURL,\r\n                  fileData,\r\n                  name\r\n                }))}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleSlideAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\BulletinBoardAppModal.jsx",["1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, BASE_URL } from \"../../utils/api\";\r\nimport { handleBulletinApps } from '../../utils/UtilsService'\r\nimport Switch from \"react-switch\";\r\nimport SelectMedia from \"./SelecteMedia\";\r\nimport deleteicon from \"../../img/delete-btn.png\";\r\n\r\nimport editicon from \"../../img/edit-btn.png\";\r\n\r\nconst BulletinBoardAppModal = ({\r\n  setShowUrlApp,\r\n  show,\r\n  actionType,\r\n  mediaData,\r\n}) => {\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(null);\r\n  const [isBulletin, setIsBulletin] = useState(false);\r\n  const [selectedTitle, setSelectedTitle] = useState(null);\r\n  const [selectedContent, setSelectedContent] = useState(null);\r\n  const [bulletinType, setBulletinType] = useState(null);\r\n  const [duration, setDuration] = useState(10);\r\n  const [bulletinFormat, setBulletinFormat] = useState(\"single\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [imageModalShow, setImageModalShow] = useState(false);\r\n  const [colorScheme, setColorScheme] = useState({\r\n    value: \"lightYellow\",\r\n    label: \"Light Yellow\",\r\n  });\r\n  const options = [\r\n    { value: \"lightYellow\", label: \"Light Yellow\" },\r\n    { value: \"orange\", label: \"Orange\" },\r\n    { value: \"skyBlue\", label: \"Sky  Blue\" },\r\n  ];\r\n  const [checked, setChecked] = useState(false);\r\n  const [bulletin, setBulletin] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [preview, setPreview] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n\r\n  const handleChange = (nextChecked) => {\r\n    setChecked(nextChecked);\r\n  };\r\n\r\n  const handleBulletin = (e) => {\r\n    console.log('dd')\r\n    e.preventDefault();\r\n    const data = bulletin;\r\n    console.log(\"nu\", bulletinType);\r\n    if (bulletinType !== null) {\r\n      console.log('edit')\r\n      data[bulletinType].image = selectedImage;\r\n      data[bulletinType].title = selectedTitle.trim();\r\n      data[bulletinType].content = selectedContent.trim();\r\n    } else {\r\n      console.log(\"create\")\r\n      data.push({\r\n        title: selectedTitle.trim(),\r\n        image: selectedImage,\r\n        content: selectedContent ? selectedContent.trim() : '',\r\n      });\r\n    }\r\n    setBulletin(data);\r\n    setIsBulletin(false);\r\n    setSelectedContent(null);\r\n    setSelectedTitle(null);\r\n    setBulletinType(null);\r\n    setSelectedImage(null);\r\n  };\r\n  const handleDelete = (e, data) => {\r\n    e.preventDefault();\r\n    const newData = bulletin.filter((item, index) => {\r\n      return data != index;\r\n    });\r\n    setBulletin(newData);\r\n    setIsBulletin(false);\r\n    setSelectedContent(null);\r\n    setSelectedTitle(null);\r\n    setSelectedImage(null);\r\n    setBulletinType(null);\r\n  };\r\n  const handleEdit = (e, data, key) => {\r\n    console.log('fdf');\r\n    e.preventDefault();\r\n    setIsBulletin(true);\r\n    setSelectedContent(data.content);\r\n    setSelectedTitle(data.title);\r\n    setBulletinType(key);\r\n    setSelectedImage(data.image);\r\n  };\r\n\r\n  const handleBulletinCancel = (e) => {\r\n    e.preventDefault();\r\n    setIsBulletin(false);\r\n    setSelectedContent(null);\r\n    setSelectedTitle(null);\r\n    setBulletinType(null);\r\n    setSelectedImage(null);\r\n  };\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setColorScheme(jsonString.colorScheme);\r\n      setDuration(jsonString.duration);\r\n      setBulletinFormat(jsonString.bulletinFormat);\r\n      setBulletin(jsonString.bulletin);\r\n      setMediaId(mediaData._id);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n    const dataString = {\r\n      url: name.trim(),\r\n      bulletinFormat,\r\n      bulletin,\r\n      duration,\r\n      colorScheme,\r\n      orientationMode\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name:name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n      setIsLoading(false)\r\n    } else {\r\n      await addApps({\r\n        name:name.trim(),\r\n        type: \"bulletin-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false)\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(null);\r\n    setIsBulletin(false);\r\n    setSelectedTitle(null);\r\n    setSelectedContent(null);\r\n    setBulletinType(null);\r\n    setDuration(10);\r\n    setBulletinFormat(\"single\");\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    setSelectedImage(null);\r\n    setColorScheme({\r\n      value: \"Light Yellow\",\r\n      label: \"Light Yellow\",\r\n    });\r\n    setChecked(false);\r\n    setBulletin([]);\r\n    setShowUrlApp(val)\r\n  }\r\n  const handlePreview = () => {\r\n    if (name) {\r\n      setPreviewData(\r\n        handleBulletinApps(\r\n          JSON.stringify({\r\n            url: name.trim(),\r\n            bulletinFormat,\r\n            bulletin,\r\n            duration,\r\n            colorScheme,\r\n            orientationMode\r\n          })\r\n        )\r\n      );\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <SelectMedia\r\n        imageModalShow={imageModalShow}\r\n        setImageModalShow={setImageModalShow}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n      />\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Bulletin Board App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              {!isBulletin && (\r\n                <div className=\"col-12\">\r\n                  <label>Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"App Name\"\r\n                    required\r\n                    onChange={(e) => {\r\n                      setName(e.target.value);\r\n                    }}\r\n                    name=\"name\"\r\n                    id=\"name\"\r\n                    value={name}\r\n                  />\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-6\">\r\n                      <label className=\"\">Color Scheme</label>\r\n\r\n                      <Select\r\n                        value={colorScheme}\r\n                        onChange={setColorScheme}\r\n                        options={options}\r\n                        className=\"app-option\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                      <label>Duration</label>\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"  form-control \"\r\n                        placeholder=\"10\"\r\n                        required\r\n                        id=\"duration\"\r\n                        name=\"duration\"\r\n                        value={duration}\r\n                        onChange={(e) => setDuration(e.target.value)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-6\">\r\n                      <div>\r\n                        <label className=\"\">Format</label>\r\n                      </div>\r\n\r\n                      <label className=\" mr-3\">Single</label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"bulletinFormat\"\r\n                        value=\"single\"\r\n                        checked={bulletinFormat == \"single\"}\r\n                        onChange={(e) => setBulletinFormat(\"single\")}\r\n                        className=\"   \"\r\n                        required\r\n                      />\r\n                      <label className=\" mx-3\">Multi</label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"bulletinFormat\"\r\n                        value=\"multi\"\r\n                        checked={bulletinFormat == \"multi\"}\r\n                        onChange={(e) => setBulletinFormat(\"multi\")}\r\n                        className=\"   \"\r\n                        required\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-6 text-center\">\r\n                      <label className=\"mb-0 \">Want to include images</label>\r\n                      <Switch\r\n                        onColor=\"#B3005E\"\r\n                        onChange={handleChange}\r\n                        checked={checked}\r\n                        className=\"react-switch mt-1\"\r\n                        required={true}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {bulletin && bulletin.length == 0 && (\r\n                    <>\r\n                      <label className=\"mt-3 pb-3\">\r\n                        Bulletin Board Content\r\n                      </label>\r\n                      <div>\r\n                        <span\r\n                          className=\"add-content-bulletinboard\"\r\n                          onClick={(e) => setIsBulletin(true)}\r\n                        >\r\n                          {\" \"}\r\n                          + Add Content\r\n                        </span>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  <div className=\"col-12 mt-4\">\r\n                    {bulletin && bulletin.length > 0 && (\r\n                      <table className=\"w-100 bg-white bulletin-table\">\r\n                        <thead>\r\n                          <tr className=\"bg-white\">\r\n                            {checked ? <th>Image</th> : \"\"}\r\n                            <th>Title</th>\r\n                            <th>Content</th>\r\n\r\n                            <th>Action</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {bulletin.map((item, index) => {\r\n                            return (\r\n                              <tr key={index} className=\"bg-white\">\r\n                                {checked ? (\r\n                                  <td>\r\n                                    {item.image ? (\r\n                                      <img\r\n                                        className=\"media-img img-fluid\"\r\n                                        src={`${BASE_URL}${item?.image}`}\r\n                                        alt=\"media-img\"\r\n                                        style={{\r\n                                          height: \"50px\",\r\n                                          width: \"50px\",\r\n                                        }}\r\n                                      />\r\n                                    ) : (\r\n                                      \"No-image\"\r\n                                    )}\r\n                                  </td>\r\n                                ) : (\r\n                                  \"\"\r\n                                )}\r\n                                <td>\r\n                                  <strong>{item.title}</strong>\r\n                                </td>\r\n                                <td>\r\n                                  <span>{item.content}</span>\r\n                                </td>\r\n                                <td className=\"bulletin-action\">\r\n                                  <button\r\n                                    className=\"border-0\"\r\n                                    style={{ padding: \"0 5px\" }}\r\n                                    onClick={(e) => setIsBulletin(true)}\r\n                                  >\r\n                                    {\" \"}\r\n                                    +\r\n                                  </button>\r\n\r\n                                  <img\r\n                                    onClick={(e) => handleDelete(e, index)}\r\n                                    src={deleteicon}\r\n                                    alt=\"icon\"\r\n                                    style={{ height: \"20px\" }}\r\n                                  />\r\n\r\n                                  <img\r\n                                    src={editicon}\r\n                                    onClick={(e) => handleEdit(e, item, index)}\r\n                                    alt=\"edit\"\r\n                                    style={{ height: \"20px\" }}\r\n                                  />\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </table>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {isBulletin && (\r\n                <div className=\"col-12 mt-3\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 mt-3\">\r\n                      <label>Title</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"  form-control \"\r\n                        placeholder=\"Buletin Title\"\r\n                        required\r\n                        onChange={(e) => {\r\n                          setSelectedTitle(e.target.value);\r\n                        }}\r\n                        name=\"selectedTitle\"\r\n                        id=\"selectedTitle\"\r\n                        value={selectedTitle}\r\n                      />\r\n                      <label className=\"mt-3\">Content</label>\r\n                      <textarea\r\n                        type=\"text\"\r\n                        className=\"  form-control \"\r\n                        placeholder=\"Type Content\"\r\n                        required\r\n                        name=\"selectedContent\"\r\n                        id=\"selectedContent\"\r\n                        value={selectedContent}\r\n                        onChange={(e) => {\r\n                          setSelectedContent(e.target.value);\r\n                        }}\r\n                        rows={4}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-6 mt-2\">\r\n                      {checked && (\r\n                        <>\r\n                          {selectedImage && (\r\n                            <img\r\n                              className=\"media-img img-fluid mb-3\"\r\n                              src={`${BASE_URL}${selectedImage}`}\r\n                              alt=\"media-img\"\r\n                            />\r\n                          )}\r\n                        </>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center\">\r\n                        {checked && (\r\n                          <>\r\n                            <Button\r\n                              className=\"btn btn-sm mr-2\"\r\n                              variant=\"outline-light\"\r\n                              onClick={(e) => {\r\n                                setImageModalShow(true);\r\n                              }}\r\n                            >\r\n                              Image\r\n                            </Button>\r\n                          </>\r\n                        )}\r\n                        <Button\r\n                          className=\"btn btn-sm mr-2\"\r\n                          variant=\"outline-light\"\r\n                          onClick={(e) => handleBulletinCancel(e)}\r\n                        >\r\n                          Cancel\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"\"\r\n                          type=\"button\"\r\n                          className=\"btn btn-sm btn-primary\"\r\n                          onClick={(e) => handleBulletin(e)}\r\n                        >\r\n                          Save\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {\r\n                !isBulletin && <Button onClick={handlePreview} className=\"mt-3\">\r\n                Preview\r\n              </Button>\r\n              }\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 Bulletin-board-app-form-icon\">\r\n                {preview && previewData ? previewData : \"...\"}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BulletinBoardAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\YoutubeAppModal.jsx",["1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport { handleYoutubeApps } from \"../../utils/UtilsService\";\r\n\r\nconst YoutubeAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [urlLink, setUrlLink] = useState(\"\");\r\n  const [muteOptions, setMuteOptions] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      console.log(jsonString);\r\n      setName(mediaData.title.trim());\r\n      setUrlLink(jsonString.url.trim());\r\n      setMuteOptions(jsonString.mute);\r\n      setMediaId(mediaData._id);\r\n    }\r\n  }, [mediaData]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (urlLink.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"URL Link is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const dataString = {\r\n      url: urlLink,\r\n      mute: muteOptions,\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"youtube-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      //setShowUrlApp(false);\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setUrlLink(\"\");\r\n    setMuteOptions(false);\r\n    setShowUrlApp(val);\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    if (name && urlLink) {\r\n      console.log(muteOptions)\r\n      setPreviewData(\r\n        handleYoutubeApps(\r\n          JSON.stringify({\r\n            url: urlLink,\r\n            mute: muteOptions,\r\n          })\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Youtube App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">Video URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"https://www.\"\r\n                required\r\n                value={urlLink}\r\n                onChange={(e) => setUrlLink(e.target.value)}\r\n              />\r\n              <label className=\"mt-3 mr-3\">Mute</label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={muteOptions}\r\n                className=\"   \"\r\n                required\r\n                onChange={(e) => {\r\n                  setMuteOptions(e.target.checked);\r\n                }}\r\n              />\r\n              <div className=\"youtube-info mt-3\">\r\n                <ul>\r\n                  <li>\r\n                    With this app. You can play Youtube videos on screen.{\" \"}\r\n                  </li>\r\n                  <li>Refer this guide on how to create the app.</li>\r\n                </ul>\r\n              </div>\r\n              <Button onClick={handlePreview}>Preview</Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    //disabled\r\n                    // style={{cursor:\"not-allowed\"}}\r\n                    // placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100\">\r\n                {orientationMode && orientationMode == \"potrait\" ? (\r\n                  <div\r\n                    className=\"d-flex justify-content-center h-100\"\r\n                    style={{ backgroundColor: \"none\" }}\r\n                  >\r\n                    <div className=\"p-3 h-100\">\r\n                      {previewData ? previewData : \"\"}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <>{previewData ? previewData : \"\"}</>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                disabled={isLoading}\r\n                onClick={(e) => handleCreateApp(e)}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default YoutubeAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AirQualityAppModal.jsx",["1308","1309","1310","1311","1312","1313","1314","1315","1316","1317"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, getWeather } from \"../../utils/api\";\r\nimport { handleAqiApps } from \"../../utils/UtilsService\";\r\nimport Switch from \"react-switch\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\n\r\nconst AirQualityAppModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const options = [\r\n    { value: \"us\", label: \"us\" },\r\n    { value: \"india\", label: \"India\" },\r\n  ];\r\n  const options1 = [\r\n    { value: \"Light Mode\", label: \"Light Mode\" },\r\n    { value: \"Dark Mode\", label: \"Dark Mode\" },\r\n  ];\r\n\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState({\r\n    address: \"\",\r\n    latitude: \"\",\r\n    longitude: \"\",\r\n  });\r\n  const [aqiLocation, setAqiLocation] = useState({ value: \"us\", label: \"us\" });\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [theame, setTheame] = useState({\r\n    value: \"Light Mode\",\r\n    label: \"Light Mode\",\r\n  });\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [weatherInfo, setWeatherInfo] = useState(null);\r\n  const [aqiData, setAQIData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setLocation(jsonString.location);\r\n      setTheame(jsonString.theame);\r\n      setAqiLocation(jsonString.aqiLocation);\r\n      setMediaId(mediaData._id);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData, orientationMode]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCloseRedirectApp = (e) => {\r\n    e.preventDefault();\r\n    setShowUrlRedirectApp(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    } else if (\r\n      location.address == \"\" ||\r\n      location.latitude == \"\" ||\r\n      location.longitude == \"\"\r\n    ) {\r\n      setErr(true);\r\n      setErrorMessage(\"Location is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const dataString = {\r\n      url: name.trim(),\r\n      location,\r\n      aqiLocation,\r\n      theame,\r\n      orientationMode,\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n      setIsLoading(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"aqi-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const handleLocation = (place) => {\r\n    let location = JSON.parse(JSON.stringify(place?.geometry?.location));\r\n    console.log(\"location\", location);\r\n    const adres = {\r\n      address: place.formatted_address,\r\n      latitude: location.lat,\r\n      longitude: location.lng,\r\n    };\r\n    setLocation(adres);\r\n    //setAdd(adres);\r\n  };\r\n  const getWeatherDetail = async (lat, long) => {\r\n    const locationData = await getWeather(lat, long);\r\n    setWeatherInfo(locationData);\r\n  };\r\n\r\n  const getAQIDataZone1 = (prp) => {\r\n    console.log(\"location\", location.latitude);\r\n    if (location.latitude && location.longitude) {\r\n      getWeatherDetail(location.latitude, location.longitude);\r\n      return handleAqiApps(JSON.stringify(prp), weatherInfo);\r\n    }\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    console.log(preview, location);\r\n    if (location && location.address) {\r\n      setAQIData(\r\n        getAQIDataZone1(\r\n          JSON.stringify({\r\n            url: name,\r\n            location,\r\n            aqiLocation,\r\n            theame,\r\n            orientationMode,\r\n          })\r\n        )\r\n      );\r\n      setIsRefresh(true);\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setLocation({\r\n      address: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n    });\r\n    setAqiLocation({ value: \"us\", label: \"us\" });\r\n    setMediaId(null);\r\n    setTheame({\r\n      value: \"Light Mode\",\r\n      label: \"Light Mode\",\r\n    });\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    setOrientation(\"landscape\");\r\n    setWeatherInfo(null);\r\n    setAQIData(null);\r\n    setShowUrlApp(val);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Air Quality App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== \"\" ? (\r\n            <h6 className=\"alert alert-danger\">{errMessage}</h6>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">Location</label>\r\n              {/* <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"Location\"\r\n              required\r\n              name=\"urlLink\"\r\n              id=\"urlLink\"\r\n              value={urlLink}\r\n              onChange={(e) => setUrlLink(e.target.value)}\r\n            /> */}\r\n              <Autocomplete\r\n                className=\"form-control\"\r\n                apiKey={\"AIzaSyA_JO9H6JEScutFurdvFw1t-v31GIf2Q2o\"}\r\n                onPlaceSelected={(place) => {\r\n                  console.log(place);\r\n                  handleLocation(place);\r\n                }}\r\n                options={{\r\n                  types: [\"(regions)\"],\r\n                  componentRestrictions: { country: \"in\" },\r\n                }}\r\n                defaultValue={location?.address}\r\n              />\r\n              <label className=\"mt-3\">AQI-IN/US</label>\r\n              <Select\r\n                value={aqiLocation}\r\n                onChange={setAqiLocation}\r\n                placeholder=\"us\"\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              <label className=\"mt-3\">Theme</label>\r\n              <Select\r\n                value={theame}\r\n                onChange={setTheame}\r\n                placeholder=\"Light Mode\"\r\n                options={options1}\r\n                className=\"app-option\"\r\n              />\r\n              <Button onClick={handlePreview}>Preview</Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 air-quality-app-form-icon\">\r\n                {aqiData}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => handleCloseRedirectApp(e)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>AQI App created successfully</p>\r\n                  <p>\r\n                    AQI App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AirQualityAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\QrCodeModal.jsx",["1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, BASE_URL } from \"../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport qrupload from \"../../img/qrupload.svg\";\r\nimport SelectMedia from \"./SelecteMedia\";\r\nimport deleteicon from \"../../img/delete-btn.png\";\r\nimport { handleQrApps } from \"../../utils/UtilsService\";\r\n\r\nconst QrCodeModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [urlLink, setUrlLink] = useState(\"\");\r\n  const [appTitle, setAppTitle] = useState(\"\");\r\n  const [appDesc, setAppDesc] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [color, setColor] = useState({\r\n    value: \"lightYellow\",\r\n    label: \"Light Yellow\",\r\n  });\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [imageModalShow, setImageModalShow] = useState(false);\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const colorOptions = [\r\n    { value: \"lightYellow\", label: \"Light Yellow\" },\r\n    { value: \"orange\", label: \"Orange\" },\r\n    {\r\n      value: \"skyBlue\",\r\n      label: \"Sky Blue\",\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      console.log(jsonString);\r\n      setName(mediaData.title);\r\n      setUrlLink(jsonString.url);\r\n      setAppDesc(jsonString.appDesc);\r\n      setAppTitle(jsonString.appTitle);\r\n      setMediaId(mediaData._id);\r\n      setColor(jsonString.color);\r\n      setSelectedImage(jsonString.image);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (urlLink.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"URL Link is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (appTitle.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Title is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (appDesc.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Description is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const dataString = {\r\n      url: urlLink.trim(),\r\n      appTitle: appTitle.trim(),\r\n      appDesc: appDesc.trim(),\r\n      name: name.trim(),\r\n      color,\r\n      orientationMode,\r\n      image: selectedImage,\r\n    };\r\n    console.log(dataString);\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n      setIsLoading(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"qrcode-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    if (name && urlLink && appTitle) {\r\n      setPreview(true);\r\n      setPreviewData(\r\n        handleQrApps(\r\n          JSON.stringify({\r\n            url: urlLink,\r\n            appTitle,\r\n            appDesc,\r\n            name,\r\n            color,\r\n            orientationMode,\r\n            image: selectedImage,\r\n          })\r\n        )\r\n      );\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setUrlLink(\"\");\r\n    setAppTitle(\"\");\r\n    setAppDesc(\"\");\r\n    setColor({ value: \"lightYellow\", label: \"Light Yellow\" });\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val);\r\n  };\r\n  return (\r\n    <>\r\n      <SelectMedia\r\n        imageModalShow={imageModalShow}\r\n        setImageModalShow={setImageModalShow}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n      />\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Qr Code App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n              <label className=\"mt-3\">URL Link</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"https://www.\"\r\n                required\r\n                name=\"urlLink\"\r\n                id=\"urlLink\"\r\n                value={urlLink}\r\n                onChange={(e) => {\r\n                  setUrlLink(e.target.value);\r\n                }}\r\n              />\r\n              <label className=\"mt-3\">App Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Eg. Scan to view full brochure\"\r\n                required\r\n                name=\"appTitle\"\r\n                id=\"appTitle\"\r\n                value={appTitle}\r\n                onChange={(e) => {\r\n                  setAppTitle(e.target.value);\r\n                }}\r\n              />\r\n              <label className=\"mt-3\"> App Description</label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Eg. Please scan this QR Code to view our Product Brochure on your mobile phone.\"\r\n                required\r\n                rows={4}\r\n                name=\"appDesc\"\r\n                id=\"appDesc\"\r\n                value={appDesc}\r\n                onChange={(e) => {\r\n                  setAppDesc(e.target.value);\r\n                }}\r\n              />\r\n              <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                  <label className=\"mt-3\">Color Scheme</label>\r\n                  <Select\r\n                    value={color}\r\n                    onChange={setColor}\r\n                    placeholder=\"Light Yellow\"\r\n                    options={colorOptions}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  {selectedImage ? (\r\n                    <>\r\n                      <label className=\"mt-4\"></label>\r\n                      <div className=\"d-flex align-items-center mt-3\">\r\n                        <img\r\n                          className=\"media-img img-fluid\"\r\n                          src={`${BASE_URL}${selectedImage}`}\r\n                          alt=\"media-img\"\r\n                          style={{\r\n                            width: \"138px\",\r\n                          }}\r\n                        />\r\n                        <img\r\n                          onClick={(e) => setSelectedImage(null)}\r\n                          src={deleteicon}\r\n                          alt=\"icon\"\r\n                          style={{ height: \"20px\", cursor: \"pointer\" }}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <label className=\"mt-3\">Select Media</label>\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setImageModalShow(true);\r\n                        }}\r\n                        style={{ cursor: \"pointer\" }}\r\n                      >\r\n                        <img src={qrupload} alt=\"icon\" />\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <Button className=\"mt-3\" onClick={handlePreview}>\r\n                Preview\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    //disabled\r\n                    // style={{cursor:\"not-allowed\"}}\r\n                    // placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100\">\r\n                {orientationMode && orientationMode == \"potrait\" ? (\r\n                  <div\r\n                    className=\"d-flex justify-content-center h-100\"\r\n                    style={{ backgroundColor: \"none\" }}\r\n                  >\r\n                    <div className=\"p-3 h-100\">\r\n                      {previewData && preview ? previewData : \"\"}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <>{previewData && preview ? previewData : \"\"}</>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QrCodeModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\tagInputField.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CreativeEditorLayout.jsx",["1331","1332"],"import \"./creative.css\";\r\nimport CreativeEditorSDK from \"@cesdk/cesdk-js\";\r\nimport { addMedia } from '../../utils/api'\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { createApplyLayoutAsset } from './lib/createApplyLayoutAsset';\r\nimport loadAssetSourceFromContentJSON from './lib/loadJson';\r\nimport LAYOUT_ASSETS from './CustomLayouts.json';\r\n\r\nconst caseAssetPath = (path, caseId = 'layouts') =>`${window.location.protocol + \"//\" + window.location.host}/cases/${caseId}${path}`;\r\n\r\nconsole.log(\"case\", caseAssetPath('/custom-layouts.scene'))\r\n\r\nfunction makeid(length) {\r\n  let result = '';\r\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  const charactersLength = characters.length;\r\n  let counter = 0;\r\n  while (counter < length) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    counter += 1;\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\nexport default function CreativeEditorLayoutSDK({setOpenEditor, setIsRefresh}) {\r\n  const cesdkContainer = useRef(null);\r\n  const engine = useRef(null);\r\n  useEffect(() => {\r\n    let config = {\r\n      role: 'Adopter',\r\n      theme: 'light',\r\n      license: process.env.REACT_APP_LICENSE,\r\n      callbacks: {\r\n        onUnsupportedBrowser: () => {\r\n          /* This is the default window alert which will be shown in case an unsupported\r\n           * browser tries to run CE.SDK */\r\n          window.alert(\r\n            \"Your current browser is not supported.\\nPlease use one of the following:\\n\\n- Mozilla Firefox 86 or newer\\n- Apple Safari 14.1 or newer\\n- Microsoft Edge 88 or newer\\n- Google Chrome 88 or newer\"\r\n          );\r\n        },\r\n        onBack: () => {\r\n          window.alert(\"Back callback!\");\r\n        },\r\n        onClose: () => {\r\n          window.alert(\"Close callback!\");\r\n        },\r\n        onSave: (scene) => {\r\n          window.alert(\"Save callback!\");\r\n          console.info(scene);\r\n        },\r\n        onLoad: () => {\r\n          window.alert(\"Load callback!\");\r\n          const scene = \"...\"; // Fill with sene\r\n          return Promise.resolve(scene);\r\n        },\r\n        onExport: async (blobs, options) => {\r\n          //window.alert(\"Export callback!\");\r\n          console.log('blob', blobs)\r\n          const fileName = \"imgLy-\"+makeid(16)\r\n          const data = new File([blobs[0]], fileName);\r\n          const formData = new FormData();\r\n          formData.append(\"file\", data);\r\n          formData.append(\"properties\", JSON.stringify({\r\n            height:200,\r\n            width:200,\r\n            size:2\r\n          }));\r\n          formData.append(\"type\", \"image\");\r\n          await addMedia(formData)\r\n          .then((res) => {\r\n            console.log(\"response\", res);\r\n            if (res && res.data.message === \"Success\")\r\n            {\r\n              setOpenEditor(false);\r\n              setIsRefresh(true);\r\n              toast.success(\"Image has been downloaded successfully !!!\", {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                theme: \"light\",\r\n              });\r\n            }else{\r\n              console.log(\"else\", res)\r\n            }\r\n          });\r\n          return Promise.resolve();\r\n        },\r\n        onUpload: \"local\"\r\n      },\r\n      ui: {\r\n        elements: {\r\n          navigation: {\r\n            action: {\r\n              export: {\r\n                show: true,\r\n                format: [\"image/png\"],\r\n              },\r\n            }\r\n          },\r\n          dock: {\r\n            groups: [\r\n              {\r\n                id: 'ly.img.layouts',\r\n                entryIds: ['ly.img.layouts']\r\n              },\r\n              {\r\n                id: 'ly.img.defaultGroup',\r\n                showOverview: true\r\n              }\r\n            ],\r\n            defaultGroupId: 'ly.img.defaultGroup'\r\n          },\r\n          panels: {\r\n            settings: true\r\n          },\r\n          libraries: {\r\n            replace: {\r\n              floating: false,\r\n              autoClose: false\r\n            },\r\n            insert: {\r\n              autoClose: false,\r\n              floating: false,\r\n              entries: (defaultEntries) => {\r\n                return [\r\n                  {\r\n                    id: 'ly.img.layouts',\r\n                    sourceIds: ['ly.img.layouts'],\r\n                    previewLength: 2,\r\n                    gridColumns: 2,\r\n                    gridItemHeight: 'square',\r\n\r\n                    previewBackgroundType: 'contain',\r\n                    gridBackgroundType: 'contain',\r\n                    icon: ({ theme, iconSize }) => {\r\n                      return iconSize === 'normal'\r\n                        ? caseAssetPath('/collage-small.svg')\r\n                        : caseAssetPath('/collage-large.svg');\r\n                    }\r\n                  },\r\n                  ...defaultEntries.filter(({ id }) => id !== 'ly.img.template')\r\n                ];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      i18n: {\r\n        en: {\r\n          'libraries.ly.img.layouts.label': 'Layouts'\r\n        }\r\n      }\r\n    };\r\n    let cesdk;\r\n    if (cesdkContainer.current) {\r\n      CreativeEditorSDK.create(cesdkContainer.current, config).then(\r\n        async (instance) => {\r\n          //instance.addDefaultAssetSources();\r\n          instance.addDemoAssetSources({sceneMode: 'Design'});\r\n\r\n          loadAssetSourceFromContentJSON(\r\n            instance.engine,\r\n            LAYOUT_ASSETS,\r\n            caseAssetPath(''),\r\n            createApplyLayoutAsset(instance.engine)\r\n          );\r\n          cesdk = instance;\r\n          engine.current = instance.engine;\r\n         await cesdk.loadFromURL(caseAssetPath('/custom-layouts.scene'));\r\n        }\r\n      );\r\n    }\r\n    return () => {\r\n      if (cesdk) {\r\n        cesdk.dispose();\r\n      }\r\n    };\r\n  }, [cesdkContainer]);\r\n\r\n  return (\r\n    <div style={cesdkWrapperStyle}>\r\n      <div ref={cesdkContainer} style={cesdkStyle}></div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nconst cesdkStyle = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0\r\n};\r\nconst cesdkWrapperStyle = {\r\n  position: 'relative',\r\n  minHeight: '640px',\r\n  overflow: 'hidden',\r\n  flexGrow: 1,\r\n  display: 'flex',\r\n  borderRadius: '0.75rem',\r\n  boxShadow:\r\n    '0px 0px 2px rgba(22, 22, 23, 0.25), 0px 4px 6px -2px rgba(22, 22, 23, 0.12), 0px 2px 2.5px -2px rgba(22, 22, 23, 0.12), 0px 1px 1.75px -2px rgba(22, 22, 23, 0.12)'\r\n};\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\CreativeEditor.jsx",["1333","1334","1335"],"import \"./creative.css\";\r\nimport CreativeEditorSDK from \"@cesdk/cesdk-js\";\r\nimport { addMedia } from '../../utils/api'\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction makeid(length) {\r\n  let result = '';\r\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  const charactersLength = characters.length;\r\n  let counter = 0;\r\n  while (counter < length) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    counter += 1;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport default function CreativeEditor({setOpenEditor, setIsRefresh}) {\r\n  const cesdk_container = useRef(null);\r\n  const [cesdk, setCesdk] = useState(null);\r\n  const config = {\r\n    // Enable local uploads in Asset Library\r\n    callbacks: { onUpload: \"local\" },\r\n    callbacks: {\r\n      onUnsupportedBrowser: () => {\r\n        /* This is the default window alert which will be shown in case an unsupported\r\n         * browser tries to run CE.SDK */\r\n        window.alert(\r\n          \"Your current browser is not supported.\\nPlease use one of the following:\\n\\n- Mozilla Firefox 86 or newer\\n- Apple Safari 14.1 or newer\\n- Microsoft Edge 88 or newer\\n- Google Chrome 88 or newer\"\r\n        );\r\n      },\r\n      onBack: () => {\r\n        window.alert(\"Back callback!\");\r\n      },\r\n      onClose: () => {\r\n        window.alert(\"Close callback!\");\r\n      },\r\n      onSave: (scene) => {\r\n        window.alert(\"Save callback!\");\r\n        console.info(scene);\r\n      },\r\n      onLoad: () => {\r\n        window.alert(\"Load callback!\");\r\n        const scene = \"...\"; // Fill with sene\r\n        return Promise.resolve(scene);\r\n      },\r\n      onExport: async (blobs, options) => {\r\n        //window.alert(\"Export callback!\");\r\n        \r\n        const fileName = \"imgLy-\"+makeid(16)\r\n        const data = new File([blobs[0]], fileName);\r\n        const formData = new FormData();\r\n        formData.append(\"file\", data);\r\n        formData.append(\"properties\", JSON.stringify({\r\n          height:200,\r\n          width:200,\r\n          size:2\r\n        }));\r\n        formData.append(\"type\", \"image\");\r\n        await addMedia(formData)\r\n        .then((res) => {\r\n          console.log(\"response\", res);\r\n          if (res && res.data.message === \"Success\")\r\n          {\r\n            setOpenEditor(false);\r\n            setIsRefresh(true);\r\n            toast.success(\"Image has been downloaded successfully !!!\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined,\r\n              theme: \"light\",\r\n            });\r\n          }else{\r\n            console.log(\"else\", res)\r\n          }\r\n        });\r\n        return Promise.resolve();\r\n      },\r\n      // onUpload: (file, onProgress) => {\r\n      //   window.alert(\"Upload callback!\");\r\n      //   const newImage = {\r\n      //     id: \"exampleImageIdentifier\",\r\n      //     meta: {\r\n      //       uri: \"https://YOURSERVER/images/file.jpg\",\r\n      //       thumbUri: \"https://YOURSERVER/images/thumb.jpg\",\r\n      //     },\r\n      //   };\r\n      //   return Promise.resolve(newImage);\r\n      // },\r\n      onUpload: \"local\"\r\n    },\r\n    ui: {\r\n      elements: {\r\n        view: \"default\", // 'default' or 'advanced'\r\n        navigation: {\r\n          show: true, // 'false' to hide the navigation completely\r\n          position: \"top\", // 'top' or 'bottom'\r\n          action: {\r\n            //close: true, // true or false\r\n            //back: true, // true or false\r\n            //load: true, // true or false\r\n            //save: true, // true or false\r\n            export: {\r\n              show: true,\r\n              format: [\"image/png\"],\r\n            },\r\n            //download: true, // true  or false\r\n            custom: [\r\n              {\r\n                label: \"common.custom\", // string or i18n key\r\n                iconName: \"default\", // one of 'default', 'download', 'upload', or 'save'\r\n                callback: () => {\r\n                  // callback signature is `() => void | Promise<void>`\r\n                  // place custom functionality here\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  useEffect(() => {\r\n    if (!cesdk_container.current) return;\r\n\r\n    let cleanedUp = false;\r\n    let instance;\r\n    CreativeEditorSDK.create(cesdk_container.current, config).then(\r\n      async (_instance) => {\r\n        instance = _instance;\r\n        if (cleanedUp) {\r\n          instance.dispose();\r\n          return;\r\n        }\r\n\r\n        // Do something with the instance of CreativeEditor SDK, for example:\r\n        // Populate the asset library with default / demo asset sources.\r\n        await Promise.all([\r\n          //instance.addDefaultAssetSources(),\r\n          instance.addDemoAssetSources({ sceneMode: \"Design\" }),\r\n        ]);\r\n        await instance.createDesignScene();\r\n\r\n        setCesdk(instance);\r\n      }\r\n    );\r\n    const cleanup = () => {\r\n      cleanedUp = true;\r\n      instance?.dispose();\r\n      setCesdk(null);\r\n    };\r\n    return cleanup;\r\n  }, [cesdk_container]);\r\n  return (\r\n    <div\r\n      ref={cesdk_container}\r\n    ></div>\r\n  );\r\n  \r\n}\r\n\r\n\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\media\\fileUploadWithPreview.jsx",["1336","1337","1338","1339","1340","1341","1342","1343","1344","1345"],"import React, { useState } from \"react\";\r\nimport uploadImg from \"../../../img/cloud-computing-icon.png\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport ImageRotation from '../cropImage/ImageRotation'\r\nfunction FileUploadWithPreview({\r\n  setShowError,\r\n  setFile,\r\n  setFileMeta,\r\n  setPreviewList,\r\n  previewList,\r\n  isLoading,\r\n}) {\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileList, setFileList] = useState([]);\r\n  const [selectedCroppedFile, setSelectedCroppedFile] = useState(null);\r\n  const [selectedCroppedUrl, setSelectedCroppedUrl] = useState(null);\r\n  const [checkCrop, setCheckCrop] = useState(false);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    console.log(event);\r\n    if (!selectedFile) {\r\n        //selectedFile(null);\r\n      //setPreview(null);\r\n      return;\r\n    }\r\n    setShowError(null);\r\n    setFileList((fileList) => [...fileList, selectedFile]);\r\n    setFile((file) => [...file, selectedFile]);\r\n    // setSelectedCroppedUrl(URL.createObjectURL(selectedFile))\r\n    // setSelectedCroppedFile(selectedFile);\r\n    // setCheckCrop(true);\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(selectedFile);\r\n\r\n    reader.onload = function (e) {\r\n      const newP = {\r\n        file: e.target.result,\r\n        isLoading: false,\r\n      };\r\n      setPreviewList((previewList) => [...previewList, newP]);\r\n    };\r\n\r\n  };\r\n\r\n  function handleLoadedMetadata(event) {\r\n    console.log(\"event\", event);\r\n    const fMeta = {\r\n      height: event.target.height,\r\n      width: event.target.width,\r\n      length: event.target.duration,\r\n      fileLoading: false,\r\n    };\r\n    setFileMeta((fileMeta) => [...fileMeta, fMeta]);\r\n  }\r\n\r\n  const handleDelete = (e, item) => {\r\n    e.preventDefault();\r\n    const newPreview = previewList;\r\n    const newFileList = fileList;\r\n    delete newPreview[item];\r\n    delete newFileList[item];\r\n    setPreviewList(newPreview);\r\n    setFile(newFileList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {\r\n        checkCrop && <ImageRotation \r\n        imgSrc={selectedCroppedUrl}\r\n        checkCrop={checkCrop}\r\n        selectedCroppedFile={selectedCroppedFile}\r\n        selectedCroppedUrl={selectedCroppedUrl}\r\n        setSelectedCroppedFile={setSelectedCroppedFile}\r\n        setSelectedCroppedUrl={setSelectedCroppedUrl}\r\n        setCheckCrop={setCheckCrop}\r\n        setFile={setFile}\r\n      />\r\n      } */}\r\n      \r\n      <div className=\" d-flex flex-column\">\r\n        {previewList &&\r\n          previewList.length > 0 &&\r\n          previewList.map((item, index) => {\r\n            return (\r\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                {item?.file?.includes(\"image\") ? (\r\n                  <img\r\n                    onLoad={handleLoadedMetadata}\r\n                    src={item.file}\r\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\r\n                    alt=\"File Preview\"\r\n                  />\r\n                ) : item?.file?.includes(\"video\") ? (\r\n                  <video\r\n                    onLoadedMetadata={handleLoadedMetadata}\r\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\r\n                    src={item.file}\r\n                    controls\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <img\r\n                  onClick={(e) => handleDelete(e, index)}\r\n                  src={deleteIcon}\r\n                  style={{ width: \"30px\", height: \"30px\" }}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        <div className=\"text-center\">{isLoading && <CircularProgress />}</div>\r\n      </div>\r\n      {/* {previewList.length === 0 && ( */}\r\n      <div\r\n        className=\"upload-file-container relative d-flex align-items-center justify-content-center flex-column\"\r\n        style={{ position: \"relative\" }}\r\n      >\r\n        {previewList.length === 0 && (\r\n          <div className=\" d-flex align-items-center justify-content-center flex-column\">\r\n            <div className=\"upload-flie-img\">\r\n              <img className=\"upload-file\" src={uploadImg} alt=\"upload-img\" />\r\n            </div>\r\n            <h6>Click here to upload files</h6>\r\n          </div>\r\n        )}\r\n\r\n        {previewList.length > 0 && (\r\n          <button\r\n            className={`btn btn-primary btn-block primary-btn add-file-media`}\r\n          >\r\n            + Add More\r\n          </button>\r\n        )}\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*,video/*\"\r\n          className=\"upload-file-textfield\"\r\n          onChange={handleFileChange}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FileUploadWithPreview;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DefaultCompositionModal.jsx",["1346","1347","1348","1349","1350","1351"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport downArrow from \"../../img/down-arrow.png\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\nimport { assignDefaultComposition, BASE_URL } from \"../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\nimport AddNewTagModal from \"./AddNewTagModal\";\r\nconst DefaultCompositionModal = ({\r\n  close,\r\n  show,\r\n  compositionList,\r\n  getVendorProfile,\r\n}) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [compositionId, setCompositionId] = useState(\"\");\r\n  const [duration, setDuration] = useState(\"\");\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(compositionId, duration, \"iiiiiii\");\r\n    await assignDefaultComposition({\r\n      compositionId: compositionId,\r\n\r\n      duration: duration,\r\n    }).then((res) => {\r\n      console.log(res, \"assignDefaultComposition\");\r\n      if (res.data.statusCode === 200) {\r\n        getVendorProfile();\r\n        close();\r\n      }\r\n    });\r\n\r\n    // setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n      >\r\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <Button variant=\"\" className=\"\" onClick={() => close(false)}>\r\n              <img\r\n                className=\"cancel-icon\"\r\n                src={cancelIcon}\r\n                alt=\"cancel-icon\"\r\n                height=\"25px\"\r\n                width=\"25px\"\r\n              />\r\n            </Button>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn\"\r\n            style={{ width: \"fit-content\" }}\r\n            //   onClick={() => setNewTagModal(false)}\r\n            disabled={compositionId.length === 0}\r\n            onClick={handleSubmit}\r\n          >\r\n            Assign\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ marginBottom: \"36px\" }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {compositionList &&\r\n                compositionList.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      id={composition._id}\r\n                      onClick={() => {\r\n                        setCompositionId(composition._id);\r\n                        setDuration(composition.duration);\r\n                      }}\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                        background:\r\n                          composition._id === compositionId ? \"#f5f5f5\" : \"\",\r\n                      }}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          onClick={() => {\r\n                            setSelected(composition);\r\n                            setNewTagModal(true);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </Modal.Body>\r\n      </Modal>\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={compositionList}\r\n          selected={selected}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCompositionModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\SelecteMedia.jsx",["1352","1353","1354","1355"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllMediaFilter, BASE_URL } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport '../components/Table.css';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SelectMedia = ({ setImageModalShow, imageModalShow,setSelectedImage, selectedImage, setSlides, slides,editImage, setEditImage}) => {\r\n  const [allMedias, setAllMedias] = useState(\"\");\r\n  const [checkedItems, setCheckedItems] = useState(selectedImage);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    if(selectedImage){\r\n        setCheckedItems(selectedImage)\r\n    }\r\n    callAllMediaApi();\r\n  }, [selectedImage]);\r\n\r\n\r\n  const callAllMediaApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllMediaFilter();\r\n    setLoading(false);\r\n    setAllMedias(list);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    const newArr = slides;\r\n    if(editImage){\r\n      console.log(\"dsdsd\");\r\n      console.log(editImage)\r\n      newArr[editImage.id].image    = checkedItems;\r\n      setSlides(newArr);\r\n      console.log(\"Hiiii\")\r\n      setEditImage(null);\r\n    }else{\r\n      setSelectedImage(checkedItems)\r\n    }\r\n    setImageModalShow(false);\r\n    setCheckedItems(null)\r\n  };\r\n\r\n  const videoMetaDuration = (media) => {\r\n      const properties = JSON.parse(media?.properties);\r\n      if (properties && properties.length) {\r\n          return (properties.length.toFixed(0) / 60).toFixed(0);\r\n      }\r\n      return null;\r\n  };\r\n  return (\r\n<>\r\n    \r\n    <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n            published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={imageModalShow}\r\n        size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>{\"Assign Screen\"}</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setImageModalShow(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n\r\n      <Modal.Body>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      //onChange={handleSelectAllChange}\r\n                      disabled\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n              </tr>\r\n            </thead>\r\n            {loading  ? (\r\n          <TableLoader colSpan={5}/>\r\n        ) : (\r\n            <tbody>\r\n              {allMedias !== \"\" &&\r\n                allMedias.map((media) => {\r\n                  return (\r\n                    media.type == 'image' &&\r\n                    <tr>\r\n                      <td>\r\n                        <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-control-input\"\r\n                            id={media.title}\r\n                            name={media.title}\r\n                            checked={media.title === checkedItems}\r\n                            onChange={(e) => {setCheckedItems(e.target.name);}}\r\n                          />\r\n                          <label\r\n                            className=\"custom-control-label\"\r\n                            htmlFor={media.title}\r\n                          ></label>\r\n                        </div>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                        <span\r\n                            className={`name-img mr-2  ${\r\n                            media?.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                        >\r\n                            {media?.type === \"image\" && (\r\n                            <div\r\n                                onClick={() => {\r\n                                //showPreview(media.title, media.type);\r\n                                }}\r\n                                className=\"media-list-img-zoom\"\r\n                            >\r\n                                <span className=\"media-list-img-zoom-plus\">+</span>\r\n                                <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${media?.title}`}\r\n                                alt=\"media-img\"\r\n                                />\r\n                            </div>\r\n                            )}\r\n                            {media?.type === \"video\" && (\r\n                            <button\r\n                                onClick={() => {\r\n                                //showPreview(media.title, media.type);\r\n                                }}\r\n                            >\r\n                                {videoMetaDuration(media)}\r\n                            </button>\r\n                            )}\r\n                        </span>\r\n                        <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>\r\n                            {\r\n                                media.title.split(\"/\")[\r\n                                media.title.split(\"/\").length - 1\r\n                                ]\r\n                            }\r\n                            </strong>\r\n                            <span>{media.createdBy.name}</span>\r\n                        </span>\r\n                        </span>\r\n                    </td>\r\n                    <td>\r\n                        {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\r\n                    </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n            )}\r\n          </Table>\r\n        </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\" onClick={(e) => {setImageModalShow(false)}}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                disabled={checkedItems === \"\"}\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Publish\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n      \r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectMedia;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\lib\\loadJson.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\lib\\createApplyLayoutAsset.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\ImageRotation.jsx",["1356","1357","1358","1359","1360","1361","1362","1363","1364","1365"],"import React, { useState, useCallback } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Cropper from 'react-easy-crop'\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport getCroppedImg from \"./cropImage\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\nimport {\r\n    Box,\r\n    DialogActions,\r\n    DialogContent,\r\n    Slider,\r\n    Typography,\r\n  } from '@mui/material';\r\n\r\nconst ImageRotation = ({\r\n  imgSrc,\r\n  checkCrop,\r\n  setCheckCrop,\r\n  setFile,\r\n//   zoom,\r\n//   setZoom,\r\n  setSelectedCroppedFile,\r\n  selectedCroppedFile,\r\n  selectedCroppedUrl,\r\n  setSelectedCroppedUrl\r\n}) => {\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n    const [rotation, setRotation] = useState(0);\r\n//   const [crop, onCropChange] = React.useState({ x: 0, y: 0 })\r\n    const [zoom, onZoomChange] = React.useState(1)\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n\r\n    const cropComplete = (croppedArea, croppedAreaPixels) => {\r\n        setCroppedAreaPixels(croppedAreaPixels);\r\n    };\r\n\r\n  const cropImage = async () => {\r\n    //setLoading(true);\r\n    try {\r\n      const {file, url} = await getCroppedImg(\r\n        imgSrc,\r\n        croppedAreaPixels,\r\n        rotation\r\n      );\r\n      //setPhotoURL(url);\r\n      setFile((file) => [...file, file]);\r\n      setSelectedCroppedFile(file);\r\n      console.log(file);\r\n      setCheckCrop(false);\r\n    } catch (error) {\r\n        console.log(error)\r\n    //   setAlert({\r\n    //     isAlert: true,\r\n    //     severity: 'error',\r\n    //     message: error.message,\r\n    //     timeout: 5000,\r\n    //     location: 'modal',\r\n    //   });\r\n      console.log(error);\r\n    }\r\n\r\n    //setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={checkCrop}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setCheckCrop(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\" style={{minHeight:'300px'}}>\r\n          <DialogContent\r\n        dividers\r\n        sx={{\r\n          background: '#333',\r\n          position: 'relative',\r\n          height: 400,\r\n          width: 'auto',\r\n          minWidth: { sm: 500 },\r\n        }}\r\n      >\r\n        <Cropper\r\n          image={imgSrc}\r\n          crop={crop}\r\n          //zoom={zoom}\r\n          rotation={rotation}\r\n          aspect={1}\r\n          //onZoomChange={setZoom}\r\n          onRotationChange={setRotation}\r\n          onCropChange={setCrop}\r\n          onCropComplete={cropComplete}\r\n        />\r\n      </DialogContent>\r\n            <Box>\r\n                <Typography>Rotation: {rotation + '°'}</Typography>\r\n                <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                min={0}\r\n                max={360}\r\n                value={rotation}\r\n                onChange={(e, rotation) => setRotation(rotation)}\r\n                />\r\n            </Box>\r\n            <Box\r\n            sx={{\r\n                display: 'flex',\r\n                gap: 2,\r\n                flexWrap: 'wrap',\r\n            }}\r\n            >\r\n            <Button\r\n                variant=\"outlined\"\r\n                //startIcon={<Cancel />}\r\n                //onClick={() => setOpenCrop(false)}\r\n            >\r\n                Cancel\r\n            </Button>\r\n            <Button\r\n                variant=\"contained\"\r\n                //startIcon={<CropIcon />}\r\n                onClick={cropImage}\r\n            >\r\n                Crop\r\n            </Button>\r\n            </Box>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n    \r\n  );\r\n};\r\n\r\nexport default ImageRotation;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\cropImage.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\DragMove.jsx",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\AddMedia.jsx",["1366"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {getAllMedia, BASE_URL } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport downArrow from \"../../img/down-arrow.png\";\r\nimport '../components/Table.css';\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({openMedia, setOpenMedia, selectedImage, setSelectedImage, setSelectedMedia, setHeight, setWidth}) => {\r\n  const [allMedia, setAllMedia] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sMedia, setSMedia] = useState(null);\r\n  // use effect\r\n  useEffect(() => {\r\n    getAllMediaList();\r\n  }, []);\r\n\r\n  const getAllMediaList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllMedia();\r\n    console.log(\"list\",list)\r\n    setLoading(false);\r\n    setAllMedia(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event, media) => {\r\n    setSelectedImage(event.target.name);\r\n    setSMedia(media);\r\n\r\n  };\r\n\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(sMedia)\r\n    setSelectedMedia(sMedia)\r\n    const prp = JSON.parse(sMedia.properties)\r\n    setOpenMedia(false);\r\n    setHeight(prp.height);\r\n    setWidth(prp.width);\r\n  };\r\n\r\n    const parseMeta = (media) => {\r\n        const meta = JSON.parse(media.properties);\r\n        return (\r\n        <span className=\"td-content\">\r\n            {media?.type === \"image\" && (\r\n            <strong>\r\n                {meta.height} x {meta.width}\r\n            </strong>\r\n            )}\r\n            {media?.type === \"video\" && meta?.length && (\r\n            <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\r\n            )}\r\n            {meta?.size && <span>{meta.size} MB</span>}\r\n        </span>\r\n        );\r\n    };\r\n\r\n    const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n        return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n    };\r\n\r\n  return (\r\n      <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large`}\r\n        show={openMedia}\r\n        size=\"lg\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Add Media</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setOpenMedia(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        disabled\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Type</th>\r\n                  <th>Uploaded Date</th>\r\n                  <th>Properties</th>\r\n                  <th>Tags</th>\r\n                </tr>\r\n              </thead>\r\n              {loading  ? (\r\n            <TableLoader colSpan={5}/>\r\n          ) : (\r\n              <tbody>\r\n                {allMedia  && allMedia.length > 0 && \r\n                  allMedia.map((media) => {\r\n                    return (media.type === 'image' ?\r\n                    <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={media._id}\r\n                              name={media._id}\r\n                              checked={selectedImage === media._id}\r\n                              onChange={(e) => {handleCheckboxChange(e, media)}}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={media._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                         <span className=\"td-content d-flex name-td-content\">\r\n                            <span\r\n                                className={`name-img mr-2  ${\r\n                                media?.type === \"video\" && \"videotableName\"\r\n                                }`}\r\n                            >\r\n                                {media?.type === \"image\" && (\r\n                                <div\r\n                                    onClick={() => {\r\n                                        //showPreview(media.title, media.type);\r\n                                    }}\r\n                                    className=\"media-list-img-zoom\"\r\n                                >\r\n                                    <span className=\"media-list-img-zoom-plus\">+</span>\r\n                                    <img\r\n                                    className=\"media-img img-fluid\"\r\n                                    src={`${BASE_URL}${media?.title}`}\r\n                                    alt=\"media-img\"\r\n                                    />\r\n                                </div>\r\n                                )}\r\n                                {media?.type === \"video\" && (\r\n                                <button\r\n                                    onClick={() => {\r\n                                        //showPreview(media.title, media.type);\r\n                                    }}\r\n                                >\r\n                                    {videoMetaDuration(media)}\r\n                                </button>\r\n                                )}\r\n                            </span>\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                                <strong>\r\n                                {\r\n                                    media.title.split(\"/\")[\r\n                                    media.title.split(\"/\").length - 1\r\n                                    ]\r\n                                }\r\n                                </strong>\r\n                                <span>{media.createdBy.name}</span>\r\n                            </span>\r\n                        </span>\r\n                        </td>\r\n                        <td>\r\n                            {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\r\n                        </td>\r\n                        <td>\r\n                            <span className=\"td-content\">\r\n                            <strong>\r\n                                {humanReadableFormattedDateString(media.createdAt)}\r\n                            </strong>\r\n                            <span>{getDatetimeIn12Hours(media.createdAt)}</span>\r\n                            </span>\r\n                        </td>\r\n                        <td>{parseMeta(media)}</td>\r\n                        <td>\r\n                            {media.tags.map((tag) => {\r\n                            return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1\">\r\n                                {tag}\r\n                                </span>\r\n                            );\r\n                            })}\r\n                            <span\r\n                            className=\"down-arrow\"\r\n                            onClick={() => {\r\n                                //setSelectedMedia(media);\r\n                                //setNewTagModal(true);\r\n                            }}\r\n                            >\r\n                            <img\r\n                                className=\"down-arrow-img img-fluid\"\r\n                                src={downArrow}\r\n                                alt=\"arrow\"\r\n                            />\r\n                            </span>\r\n                        </td>\r\n                      </tr>\r\n                    : ''\r\n                      \r\n                    )\r\n                  })}\r\n              </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\"\r\n                    onClick={(e) => setOpenMedia(false)}\r\n                 variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={selectedImage === null}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\StocksAppModal.jsx",["1367","1368","1369","1370","1371","1372","1373","1374","1375","1376"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, getStock } from \"../../utils/api\";\r\nimport { handleStockApps } from \"../../utils/UtilsService\";\r\nimport Switch from \"react-switch\";\r\nconst StocksAppModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const options = [\r\n    { value: \"Day Gainers\", label: \"Day Gainers\" },\r\n    { value: \"Day Losers\", label: \"Day Losers\" },\r\n    { value: \"Most Actives\", label: \"Most Actives\" },\r\n    // { value: \"Top Mutual Funds\", label: \"Top Mutual Funds\" },\r\n  ];\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [isPriceChange, setIsPriceChange] = useState(false);\r\n  const [isHigh, setIsHigh] = useState(false);\r\n  const [isLow, setIsLow] = useState(false);\r\n  const [volume, setVolume] = useState(false);\r\n  const [slideDuration, setSlideDuration] = useState(10);\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [stock, setStock] = useState(null);\r\n  const [stockType, setStockType] = useState({\r\n    value: \"Day Gainers\",\r\n    label: \"Day Gainers\",\r\n  });\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setIsPriceChange(jsonString.isPriceChange);\r\n      setIsHigh(jsonString.isHigh);\r\n      setIsLow(jsonString.isLow);\r\n      setVolume(jsonString.volume);\r\n      setSlideDuration(jsonString.slideDuration);\r\n      setMediaId(mediaData._id);\r\n      setStockType(jsonString.stockType);\r\n      setOrientation(\r\n        jsonString.orientationMode ? jsonString.orientationMode : \"landscape\"\r\n      );\r\n    }\r\n  }, [mediaData, isRefresh, orientationMode]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const dataString = {\r\n      url: name.trim(),\r\n      slideDuration,\r\n      isHigh,\r\n      isLow,\r\n      volume,\r\n      stockType,\r\n      isPriceChange,\r\n      orientationMode,\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n      setIsLoading(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"stocks-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const getStockDetail = async (lat, long) => {\r\n    const locationData = await getStock(lat, long);\r\n    setStock(locationData);\r\n    // console.log('getLocation', locationData);\r\n  };\r\n\r\n  const handlePreview = () => {\r\n    console.log(preview, name);\r\n    if (name) {\r\n      setIsRefresh(true);\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n\r\n  const getStockDataZone1 = (data) => {\r\n    const prp = JSON.parse(data);\r\n    console.log(\"location\", prp);\r\n    let stockType = \"gainers\";\r\n    if (prp.stockType === '\"Day Losers\"') {\r\n      stockType = \"losers\";\r\n    } else if (prp.stockType === \"Most Actives\") {\r\n      stockType = \"actives\";\r\n    }\r\n\r\n    if (!stock) {\r\n      console.log(\"Hello Stock Calling\");\r\n      getStockDetail(stockType);\r\n    }\r\n    return handleStockApps(data, stock);\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setIsPriceChange(false);\r\n    setIsHigh(false);\r\n    setIsLow(false);\r\n    setVolume(false);\r\n    setSlideDuration(10);\r\n    setStock(null);\r\n    setStockType({\r\n      value: \"Day Gainers\",\r\n      label: \"Day Gainers\",\r\n    });\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Stocks App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n\r\n              <label className=\"mt-3\">Stocks</label>\r\n\r\n              <Select\r\n                value={stockType}\r\n                onChange={setStockType}\r\n                placeholder=\"Day Gainers\"\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              <div className=\"row mt-4\">\r\n                <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Price Change</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setIsPriceChange}\r\n                    checked={isPriceChange}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6  d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">52 Week High</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setIsHigh}\r\n                    checked={isHigh}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row mt-4\">\r\n                <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Volumes</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setVolume}\r\n                    checked={volume}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6  d-flex align-items-center  justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">52 Week Low</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setIsLow}\r\n                    checked={isLow}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <label className=\"mt-4\">Slide Duration</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"  form-control \"\r\n                placeholder=\"10\"\r\n                required\r\n                name=\"slide\"\r\n                value={slideDuration}\r\n                onChange={(e) => setSlideDuration(e.target.value)}\r\n              />\r\n              <Button className=\"mt-3\" onClick={handlePreview}>\r\n                Preview\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 stocks-app-form-icon\">\r\n                {/* <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div> */}\r\n                {preview &&\r\n                  orientationMode == \"landscape\" &&\r\n                  getStockDataZone1(\r\n                    JSON.stringify({\r\n                      url: name,\r\n                      slideDuration,\r\n                      isHigh,\r\n                      isLow,\r\n                      volume,\r\n                      stockType,\r\n                      isPriceChange,\r\n                    })\r\n                  )}\r\n                {preview &&\r\n                  orientationMode == \"potrait\" &&\r\n                  getStockDataZone1(\r\n                    JSON.stringify({\r\n                      url: name,\r\n                      slideDuration,\r\n                      isHigh,\r\n                      isLow,\r\n                      volume,\r\n                      stockType,\r\n                      isPriceChange,\r\n                    })\r\n                  )}\r\n                {preview &&\r\n                  orientationMode == \"footer\" &&\r\n                  getStockDataZone1(\r\n                    JSON.stringify({\r\n                      url: name,\r\n                      slideDuration,\r\n                      isHigh,\r\n                      isLow,\r\n                      volume,\r\n                      stockType,\r\n                      isPriceChange,\r\n                    })\r\n                  )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n                variant=\"outline-light\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>URL App created successfully</p>\r\n                  <p>\r\n                    URL App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StocksAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ClockApp.jsx",["1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, getTimeZone } from \"../../utils/api\";\r\nimport { handleClockApps } from \"../../utils/UtilsService\";\r\nimport Switch from \"react-switch\";\r\nimport { Preview } from \"react-dropzone-uploader\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\n\r\nconst ClockApp = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const options = [\r\n    { value: \"Analogue - 12 hour\", label: \"Analogue - 12 hour\" },\r\n    { value: \"Digital - 12 hour\", label: \"Digital - 12 hour\" },\r\n    { value: \"Digital - 24hour\", label: \"Digital - 24hour\" },\r\n  ];\r\n  const languageOptions = [\r\n    { value: \"English\", label: \"English\" },\r\n    { value: \"Japanese\", label: \"Japanese\" },\r\n    { value: \"Spanish\", label: \"Spanish\" },\r\n  ];\r\n  const timeZoneOptions = [\r\n    { value: \"UTC\", label: \"UTC\" },\r\n    { value: \"Asia/Kolkata\", label: \"Asia/Kolkata\" },\r\n  ];\r\n  const colorOptions = [\r\n    { value: \"lightYellow\", label: \"Light Yellow\" },\r\n    { value: \"orange\", label: \"Orange\" },\r\n    {\r\n      value: \"skyBlue\",\r\n      label: \"Sky Blue\",\r\n    },\r\n  ];\r\n  const [name, setName] = useState(null);\r\n  const [clockType, setClockType] = useState(\"regular\");\r\n  const [timeFormat, setTimeFormat] = useState({\r\n    value: \"Analogue - 12 hour\",\r\n    label: \"Analogue - 12 hour\",\r\n  });\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [deviceTime, setDeviceTime] = useState(false);\r\n  const [hiddenLocation, setHiddenLocation] = useState(false);\r\n  const [hideDate, setHideDate] = useState(false);\r\n  const [roundCorner, setRoundeCorner] = useState(false);\r\n  const [timeZone, setTimeZone] = useState({ value: \"UTC\", label: \"UTC\" });\r\n  const [language, setLanguage] = useState(null);\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [color, setColor] = useState({\r\n    value: \"Light Yellow\",\r\n    label: \"Light Yellow\",\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [location, setLocation] = useState({\r\n    address: \"\",\r\n    latitude: \"\",\r\n    longitude: \"\",\r\n    timeZone:\"\"\r\n  });\r\n  const getMapTimeZone = async(lat, long) =>{\r\n    return await getTimeZone(lat, long);\r\n  }\r\n\r\n  const handleLocation = async (place) => {\r\n    let location = JSON.parse(JSON.stringify(place?.geometry?.location));\r\n    const locationTime = await getMapTimeZone(location.lat, location.lng);\r\n    console.log(\"LT\",locationTime.timeZoneId)\r\n    const adres = {\r\n      address: place.formatted_address,\r\n      latitude: location.lat,\r\n      longitude: location.lng,\r\n      timeZone:locationTime\r\n    };\r\n    setLocation(adres);\r\n    //setAdd(adres);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      console.log(jsonString);\r\n      setName(mediaData.title);\r\n      setClockType(jsonString.clockType);\r\n      setTimeFormat({\r\n        value: jsonString.timeFormat,\r\n        label: jsonString.timeFormat,\r\n      });\r\n      setDeviceTime(jsonString.deviceTime);\r\n      setHiddenLocation(jsonString.hiddenLocation);\r\n      setRoundeCorner(jsonString.roundCorner);\r\n      setHideDate(jsonString.hideDate);\r\n      setTimeZone(jsonString.timeZone);\r\n      setMediaId(mediaData._id);\r\n      setColor(jsonString.color);\r\n      setOrientation(jsonString.orientationMode);\r\n    }\r\n  }, [mediaData, orientationMode, preview]);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (location.address == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"TimeZone is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    console.log(\"Hello\", err);\r\n    const dataString = {\r\n      url: name.trim(),\r\n      timeZone:location,\r\n      hideDate,\r\n      hiddenLocation,\r\n      deviceTime,\r\n      timeFormat: timeFormat.value,\r\n      roundCorner,\r\n      clockType,\r\n      color,\r\n      orientationMode,\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n      setIsLoading(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"clock-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n  };\r\n  const handlePreview = () => {\r\n    console.log(preview);\r\n    if (name) {\r\n      setIsRefresh(true);\r\n      setPreview(true);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n  const handleClose = (val) => {\r\n    setName(null);\r\n    setClockType(\"regular\");\r\n    setTimeFormat({\r\n      value: \"Analogue - 12 hour\",\r\n      label: \"Analogue - 12 hour\",\r\n    });\r\n    setDeviceTime(false);\r\n    setHiddenLocation(false);\r\n    setHideDate(false);\r\n    setRoundeCorner(false);\r\n    //setTimeZone({ value: \"UTC\", label: \"UTC\" });\r\n    setLocation({\r\n      address:\"\",\r\n      latitude:\"\",\r\n      longitude:\"\",\r\n      timeZone:\"\"\r\n    })\r\n    setLanguage(null);\r\n    setPreview(false);\r\n    setIsRefresh(false);\r\n    setColor({ value: \"Light Yellow\", label: \"Light Yellow\" });\r\n    setShowUrlApp(val);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Clock App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                value={name}\r\n              />\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3 mr-3\">Regular Clock</label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    value=\"regular\"\r\n                    checked={clockType && clockType == \"regular\"}\r\n                    onChange={(e) => setClockType(\"regular\")}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <label className=\"mt-3\">Time Format</label>\r\n\r\n              <Select\r\n                value={timeFormat}\r\n                onChange={setTimeFormat}\r\n                placeholder=\"Select one from the list\"\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              {/* <div className=\"row mt-4\">\r\n                <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Get device timezone</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setDeviceTime}\r\n                    checked={deviceTime}\r\n                    name=\"deviceTime\"\r\n                    id=\"deviceTime\"\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6  d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Hidden location</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setHiddenLocation}\r\n                    checked={hiddenLocation}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n              </div> */}\r\n\r\n              <div className=\"row mt-4\">\r\n                <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Hide date</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setHideDate}\r\n                    checked={hideDate}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n                <div className=\"col-6  d-flex align-items-center  justify-content-between\">\r\n                  <label className=\"mb-0 mr-3\">Rounded Corners</label>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setRoundeCorner}\r\n                    checked={roundCorner}\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <label className=\"mt-3\">Timezone</label>\r\n              {/* <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Timezone\"\r\n                required\r\n                name=\"timeZone\"\r\n                id=\"timeZone\"\r\n                value={timeZone}\r\n                onChange={(e) => setTimeZone(e.target.value)}\r\n              /> */}\r\n              {/* <Select\r\n                value={timeZone}\r\n                onChange={setTimeZone}\r\n                placeholder=\"Select Time Zone\"\r\n                options={timeZoneOptions}\r\n                className=\"app-option\"\r\n              /> */}\r\n              <Autocomplete\r\n                className=\"form-control\"\r\n                apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\r\n                onPlaceSelected={(place) => {\r\n                  console.log(place);\r\n                  handleLocation(place);\r\n                }}\r\n                options={{\r\n                  types: [\"(regions)\"],\r\n                  //componentRestrictions: { country: \"sau\" },\r\n                }}\r\n                defaultValue={location?.address}\r\n              />\r\n\r\n              {/* <label className=\"mt-3\">Language</label>\r\n\r\n              <Select\r\n                value={language}\r\n                onChange={setLanguage}\r\n                placeholder=\"English\"\r\n                options={languageOptions}\r\n                className=\"app-option\"\r\n              /> */}\r\n              <label className=\"mt-3 \">Color Scheme</label>\r\n\r\n              <Select\r\n                value={color}\r\n                onChange={setColor}\r\n                placeholder=\"Light Yellow\"\r\n                options={colorOptions}\r\n                className=\"app-option\"\r\n              />\r\n              <Button className=\"mt-3\" onClick={handlePreview}>\r\n                Preview\r\n              </Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    disabled\r\n                    style={{ cursor: \"not-allowed\" }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 clock-app-form-icon\">\r\n                {/* <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div> */}\r\n                {orientationMode === \"landscape\" && preview\r\n                  ? handleClockApps(\r\n                      JSON.stringify({\r\n                        clockType: \"regular\",\r\n                        color: color.value,\r\n                        deviceTime,\r\n                        hiddenLocation,\r\n                        hideDate,\r\n                        roundCorner,\r\n                        timeFormat: timeFormat.value,\r\n                        timeZone:location,\r\n                        url: \"Clock App\",\r\n                      })\r\n                    )\r\n                  : \"\"}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>Clock App created successfully</p>\r\n                  <p>\r\n                    Clock App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClockApp;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\TextAppModal.jsx",["1391","1392","1393","1394","1395","1396","1397","1398","1399"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nconst TextAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const options = [\r\n    { value: \"left\", label: \"Left\" },\r\n    { value: \"right\", label: \"Right\" },\r\n    { value: \"center\", label: \"Center\" },\r\n  ];\r\n\r\n  const options3 = [\r\n    { value: \"Regular\", label: \"Regular\" },\r\n    { value: \"Italic\", label: \"Italic\" },\r\n    { value: \"Bold\", label: \"Bold\" },\r\n  ];\r\n  const options1 = [\r\n    { value: \"100\", label: \"100\" },\r\n    { value: \"200\", label: \"200\" },\r\n    { value: \"300\", label: \"300\" },\r\n    { value: \"400\", label: \"400\" },\r\n    { value: \"500\", label: \"500\" },\r\n    { value: \"600\", label: \"600\" },\r\n    { value: \"700\", label: \"700\" },\r\n  ];\r\n  const options2 = [\r\n    { value: \"Fira Sans\", label: \"Fira Sans\" },\r\n    { value: \"Poppins\", label: \"Poppins\" },\r\n    { value: \"Poppins\", label: \"Poppins\" },\r\n    { value: \"Manrope\", label: \"Manrope\" },\r\n    { value: \"Sans Serif\", label: \"Sans Serif\" },\r\n  ];\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [selectedStyle, setSelectedStyle] = useState({value: \"Regular\",label: \"Regular\"});\r\n  const [weight, setWeight] = useState({ value: \"100\", label: \"100\" });\r\n  const [allign, setAllign] = useState({ value: \"left\", label: \"Left\" });\r\n  const [familyStyle, setFamilyStyle] = useState({\r\n    value: \"Fira Sans\",\r\n    label: \"Fira Sans\",\r\n  });\r\n  const [isTransparent, setIsTransparent] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [tColor, setTextColor] = useState(\"#000000\");\r\n  const [backColor, setBackColor] = useState(\"#000000\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      console.log(\"media\", mediaData, actionType);\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      console.log(jsonString);\r\n      setName(mediaData.title);\r\n      setSelectedStyle({ value: jsonString.style, label: jsonString.style });\r\n      setAllign({ value: jsonString.allign, label: jsonString.allign });\r\n      setTextColor(jsonString.textColor);\r\n      setBackColor(jsonString.backGroundColor);\r\n      setMediaId(mediaData._id);\r\n      setWeight({ value: jsonString.weight, label: jsonString.weight });\r\n      setFamilyStyle({\r\n        value: jsonString.familyStyle,\r\n        label: jsonString.familyStyle,\r\n      });\r\n      setContent(jsonString.content);\r\n      setIsTransparent(jsonString.isTransparent);\r\n      setOrientation(jsonString.orientationMode ? jsonString.orientationMode : \"\")\r\n    }\r\n  }, [mediaData]);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (content.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"Content is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n      console.log(\"Hello\", err);\r\n      const dataString = {\r\n        allign: allign.value,\r\n        weight: weight.value,\r\n        textColor: tColor,\r\n        familyStyle: familyStyle.value,\r\n        backGroundColor: backColor,\r\n        style: selectedStyle.value,\r\n        url: name.trim(),\r\n        isTransparent,\r\n        orientationMode,\r\n        content:content.trim(),\r\n      };\r\n\r\n      if (actionType && actionType == \"edit\") {\r\n        await updateApps({\r\n          name:name.trim(),\r\n          appId: mediaId,\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        setIsLoading(false);\r\n        setShowUrlApp(false);\r\n      } else {\r\n        await addApps({\r\n          name:name.trim(),\r\n          type: \"text-apps\",\r\n          data: JSON.stringify(dataString),\r\n        });\r\n        setShowUrlApp(false);\r\n        setIsLoading(false);\r\n        setShowUrlRedirectApp(true);\r\n      }\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setOrientation(\"landscape\");\r\n    setContent(\"\");\r\n    setSelectedStyle({value: \"Regular\",label: \"Regular\"});\r\n    setWeight({ value: \"slow\", label: \"Slow\" });\r\n    setAllign({ value: \"left\", label: \"Left\" });\r\n    setFamilyStyle({value: \"Fira Sans\",label: \"Fira Sans\"});\r\n    setIsTransparent(false);\r\n    setTextColor(\"#000000\");\r\n    setBackColor(\"#000000\");\r\n    setShowUrlApp(val)\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Text App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <label className=\"mt-3\">Content</label>\r\n              <textarea\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Type Content\"\r\n                required\r\n                name=\"content\"\r\n                id=\"content\"\r\n                value={content}\r\n                onChange={(e) => {\r\n                  setContent(e.target.value);\r\n                }}\r\n                rows={4}\r\n              />\r\n              <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                  <label className=\"mt-3\">Color </label>\r\n\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"App Name\"\r\n                    required\r\n                    value={tColor}\r\n                    name=\"tColor\"\r\n                    id=\"tColor\"\r\n                    onChange={(e) => {\r\n                      setTextColor(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <label className=\"mt-3\">Allignment </label>\r\n\r\n                  <Select\r\n                    value={allign}\r\n                    onChange={setAllign}\r\n                    options={options}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <label className=\"mt-3\">Weight </label>\r\n\r\n                  <Select\r\n                    defaultValue={weight}\r\n                    onChange={setWeight}\r\n                    options={options1}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <label className=\"mt-3\">Family Style </label>\r\n\r\n                  <Select\r\n                    defaultValue={familyStyle}\r\n                    onChange={setFamilyStyle}\r\n                    options={options2}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <label className=\"mt-3\">Text Style</label>\r\n              <Select\r\n                defaultValue={selectedStyle}\r\n                onChange={setSelectedStyle}\r\n                options={options3}\r\n                className=\"app-option\"\r\n              />\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Background Color</label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"Text to be scrolled\"\r\n                    value={backColor}\r\n                    name=\"backColor\"\r\n                    id=\"backColor\"\r\n                    onChange={(e) => {\r\n                      setBackColor(e.target.value);\r\n                    }}\r\n                    required\r\n                  />\r\n                </div>\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3 mr-3\">Transparent</label>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    className=\"   \"\r\n                    required\r\n                    checked={isTransparent}\r\n                    onChange={(e) => setIsTransparent(e.target.checked)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === 'landscape'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    \r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === 'potrait'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    disabled\r\n                    style={{cursor:\"not-allowed\"}}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === 'footer'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    disabled\r\n                    style={{cursor:\"not-allowed\"}}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 text-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>Text App created successfully</p>\r\n                  <p>\r\n                    Text App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\WeatherAppModal.jsx",["1400","1401","1402","1403","1404","1405","1406","1407","1408","1409"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { usePlacesWidget } from \"react-google-autocomplete\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, getWeather, getTimeZone } from \"../../utils/api\";\r\nimport { handleWeatherApps } from \"../../utils/UtilsService\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nconst WeatherAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const [weatherInfo, setWeatherInfo] = useState(null);\r\n  const getWeatherDetail = async(lat, long) => {\r\n    const locationData  = await getWeather(lat, long);\r\n    setWeatherInfo(locationData)\r\n  }\r\n  const options = [\r\n    { value: \"classic\", label: \"Classic\" },\r\n    { value: \"grey\", label: \"Minimalist with Grey Background\" },\r\n    { value: \"color\", label: \"Minimalist with Color Background\" }\r\n];\r\n  const options1 = [{ value: \"celsius\", label: \"Celsius\" },{ value: \"fahrenheit\", label: \"Farhenheit\" }];\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState({\r\n    address: \"\",\r\n    latitude: \"\",\r\n    longitude: \"\",\r\n    timeZone:\"\"\r\n  });\r\n  const [selectedTheme, setSelectedTheme] = useState({\r\n    value: \"Classic\",\r\n    label: \"Classic\",\r\n  });\r\n  const [selectedTemp, setSelectedTemp] = useState({\r\n    value: \"celsius\",\r\n    label: \"Celsius\",\r\n  });\r\n  const [isForcast, setIsForcast] = useState(false);\r\n  const [isCorner, setIsCorner] = useState(false);\r\n  const [isAnimated, setIsAnimated] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [preview, setPreview] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false); \r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setSelectedTheme({ value: jsonString.theme, label: jsonString.theme });\r\n      setSelectedTemp({ value: jsonString.temp, label: jsonString.temp });\r\n      setMediaId(mediaData._id);\r\n      setLocation(jsonString.location);\r\n      setIsForcast(jsonString.isForcast);\r\n      setIsAnimated(jsonString.isAnimated);\r\n      setIsCorner(jsonString.isCorner);\r\n      setOrientation(jsonString.orientationMode ? jsonString.orientationMode : \"landscape\")\r\n    }\r\n    setIsRefresh(false)\r\n  }, [mediaData, isRefresh, orientationMode]);\r\n\r\n  const getMapTimeZone = async(lat, long) =>{\r\n    return await getTimeZone(lat, long);\r\n  }\r\n\r\n  const handleLocation = async (place) => {\r\n    let location = JSON.parse(JSON.stringify(place?.geometry?.location));\r\n    const locationTime = await getMapTimeZone(location.lat, location.lng);\r\n    console.log(\"LT\",locationTime.timeZoneId)\r\n    setLocation({\r\n      address: place.formatted_address,\r\n      latitude: location.lat,\r\n      longitude: location.lng,\r\n      timeZone:locationTime\r\n    });\r\n    //setAdd(adres);\r\n  };\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false)\r\n      return;\r\n    } if (\r\n      location.address == \"\" ||\r\n      location.latitude == \"\" ||\r\n      location.longitude == \"\"\r\n    ) {\r\n      setErr(true);\r\n      setErrorMessage(\"Location is required\");\r\n      setIsLoading(false)\r\n      return;\r\n    }\r\n    const dataString = {\r\n      theme: selectedTheme.value,\r\n      temp: selectedTemp.value,\r\n      url: name.trim(),\r\n      isForcast,\r\n      isAnimated,\r\n      isCorner,\r\n      location,\r\n      orientationMode\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name:name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n    } else {\r\n      await addApps({\r\n        name:name.trim(),\r\n        type: \"weather-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      handleClose(false);\r\n      setIsLoading(false)\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n  };\r\n\r\n  const handleCloseRedirectApp = (e) => {\r\n    e.preventDefault();\r\n    setShowUrlRedirectApp(false);\r\n    window.location.reload();\r\n  };\r\n\r\n  const getWeatherDataZone1 = (prp) => {\r\n\r\n    if(!weatherInfo){\r\n      getWeatherDetail(prp.location.latitude, prp.location.longitude);\r\n    }\r\n    return handleWeatherApps(JSON.stringify(prp), weatherInfo);\r\n    \r\n  }\r\n\r\n  const handlePreview = () => {\r\n    if(location && location.address){\r\n      setIsRefresh(true)\r\n      setPreview(true)\r\n    }else{\r\n      setPreview(false)\r\n    }\r\n  }\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setLocation({\r\n      address: \"\",\r\n      latitude: \"\",\r\n      longitude: \"\",\r\n    });\r\n    setSelectedTheme({\r\n      value: \"Classic\",\r\n      label: \"Classic\",\r\n    });\r\n    setSelectedTemp({\r\n      value: \"celsius\",\r\n      label: \"Celsius\",\r\n    });\r\n    setIsForcast(false);\r\n    setIsCorner(false);\r\n    setIsAnimated(false);\r\n    setShowUrlApp(val)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Weather App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== \"\" ? (\r\n            <h6 className=\"alert alert-danger\">{errMessage}</h6>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <label className=\"mt-3\">Location</label>\r\n              <Autocomplete\r\n                className=\"form-control\"\r\n                apiKey={process.env.REACT_APP_GOOGLE_API_KEY}\r\n                onPlaceSelected={(place) => {\r\n                  handleLocation(place);\r\n                }}\r\n                options={{\r\n                  types: [\"(regions)\"],\r\n                  componentRestrictions: { country: \"sau\" },\r\n                }}\r\n                defaultValue={location?.address}\r\n              />\r\n\r\n              <label className=\"mt-3\">Theme</label>\r\n              <Select\r\n                value={selectedTheme}\r\n                onChange={setSelectedTheme}\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              <label className=\"mt-3\">Temperature Unit</label>\r\n              <Select\r\n                defaultValue={selectedTemp}\r\n                onChange={setSelectedTemp}\r\n                options={options1}\r\n                className=\"app-option\"\r\n              />\r\n              <div className=\"col-6\">\r\n                <label className=\"mt-3 mr-3\">Forcast</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"   \"\r\n                  required\r\n                  checked={isForcast}\r\n                  onChange={(e) => setIsForcast(e.target.checked)}\r\n                />\r\n              </div>\r\n              {/* <div className=\"col-6\">\r\n                <label className=\"mt-3 mr-3\">Animation</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"   \"\r\n                  required\r\n                  checked={isAnimated}\r\n                  onChange={(e) => setIsAnimated(e.target.checked)}\r\n                />\r\n              </div> */}\r\n              <div className=\"col-6\">\r\n                <label className=\"mt-3 mr-3\">Corner</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"   \"\r\n                  required\r\n                  checked={isCorner}\r\n                  onChange={(e) => setIsCorner(e.target.checked)}\r\n                />\r\n              </div>\r\n              <Button onClick={handlePreview}>Preview</Button>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === 'landscape'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    \r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === 'potrait'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    disabled\r\n                    style={{cursor:\"not-allowed\"}}\r\n                    placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === 'footer'}\r\n                    onChange={(e) => {setOrientation(e.target.value)}}\r\n                    disabled\r\n                    style={{cursor:\"not-allowed\"}}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 weather-app-form-icon\">\r\n                {/* <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div> */}\r\n                {\r\n                  preview ? getWeatherDataZone1({isAnimated,isCorner, isForcast,\r\n                    temp:selectedTemp.value,\r\n                    theme:selectedTheme.value,\r\n                    url:\"Weather in Noida\",\r\n                    location\r\n                  }) : <h4>Loading</h4>\r\n                }\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n                variant=\"outline-light\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => handleCloseRedirectApp(e)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>Weather App created successfully</p>\r\n                  <p>\r\n                    Weather App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\ScrollerTextAppModal.jsx",["1410","1411","1412","1413","1414","1415","1416","1417"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nconst ScrollerTextAppModal = ({ setShowScrollerTextApp, show, mediaData , actionType }) => {\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [name, setName] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [selectedStyle, setSelectedStyle] = useState({ value: \"regular\", label: \"Regular\"});\r\n  const [speed, setSpeed] = useState({ value: \"slow\", label: \"Slow\" });\r\n  const [allign, setAllign] = useState({ value: \"rightToLeft\", label: \"Right to Left\" });\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n  const [tColor, setTextColor] = useState(\"#000000\");\r\n  const [backColor, setBackColor] = useState(\"#000000\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const options = [\r\n    { value: \"regular\", label: \"Regular\" },\r\n    { value: \"italic\", label: \"italic\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n  const options1 = [\r\n    { value: \"slow\", label: \"Slow\" },\r\n    { value: \"medium\", label: \"Medium\" },\r\n    { value: \"high\", label: \"High\" },\r\n  ];\r\n  const options2 = [\r\n    { value: \"rightToLeft\", label: \"Right to Left\" },\r\n    { value: \"leftToRight\", label: \"Left to Right\" },\r\n  ];\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      console.log(\"media\", mediaData, actionType)\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n        console.log(jsonString)\r\n        setName(mediaData.title);\r\n        setText(jsonString.text);\r\n        setSelectedStyle(jsonString.style);\r\n        setSpeed(jsonString.speed);\r\n        setAllign(jsonString.allign);\r\n        setTextColor(jsonString.textColor)\r\n        setBackColor(jsonString.backGroundColor)\r\n        setMediaId(mediaData._id);\r\n    }\r\n  },[mediaData])\r\n  \r\n\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name.trim() == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false)\r\n      return \r\n    }\r\n    if(text.trim() == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"Text is required\");\r\n      setIsLoading(false)\r\n      return;\r\n    }\r\n\r\n      console.log(\"Hello\", err)\r\n      const dataString = {\r\n        allign:allign,\r\n        speed:speed,\r\n        textColor:tColor,\r\n        backGroundColor:backColor,\r\n        style:selectedStyle,\r\n        url:name.trim(),\r\n        text:text.trim()\r\n      }\r\n  \r\n      if(actionType && actionType == 'edit'){\r\n        await updateApps({\r\n          name:name.trim(),\r\n          appId:mediaId,\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowScrollerTextApp(false)\r\n      }else{\r\n        await addApps({\r\n          name:name.trim(),\r\n          type:'scroller',\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowScrollerTextApp(false);\r\n        setIsLoading(false)\r\n        setShowUrlRedirectApp(true)\r\n      }\r\n      console.log(name, text, selectedStyle, speed, allign)\r\n\r\n    \r\n  }\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setText('');\r\n    setSelectedStyle({ value: \"regular\", label: \"Regular\"});\r\n    setSpeed({ value: \"slow\", label: \"Slow\" });\r\n    setAllign({ value: \"rightToLeft\", label: \"Right to Left\" });\r\n    setBackColor(\"#000000\");\r\n    setTextColor(\"#000000\")\r\n    setShowScrollerTextApp(val)\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Scroller Text App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== '' ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {setName(e.target.value)}}\r\n              />\r\n              <label className=\"mt-3\">Text</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Text to be scrolled\"\r\n                required\r\n                name=\"text\"\r\n                id=\"text\"\r\n                value={text}\r\n                onChange={(e) => {setText(e.target.value)}}\r\n              />\r\n\r\n              <label className=\"mt-3\">Text Style</label>\r\n              <Select\r\n                value={selectedStyle}\r\n                onChange={setSelectedStyle}\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Text Color</label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"Text to be scrolled\"\r\n                    value={tColor}\r\n                    name=\"textColor\"\r\n                    id=\"textColor\"\r\n                    onChange={(e) => {setTextColor(e.target.value)}}\r\n                    required\r\n                    \r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Background Color</label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"Text to be scrolled\"\r\n                    value={backColor}\r\n                    name=\"backColor\"\r\n                    id=\"backColor\"\r\n                    onChange={(e) => {setBackColor(e.target.value)}}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Scroll Speed</label>\r\n\r\n                  <Select\r\n                    value={speed}\r\n                    onChange={setSpeed}\r\n                    options={options1}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Scroll Direction</label>\r\n\r\n                  <Select\r\n                    value={allign}\r\n                    onChange={setAllign}\r\n                    options={options2}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 scroll-text-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\"\r\n                 onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                //   onClick={() => setNewTagModal(false)}\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n                >\r\n                  {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n                </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={showRedirectApp}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlRedirectApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                <h4>https://www.</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"text-center\">\r\n                <p>Scroller App created successfully</p>\r\n                <p>Scroller App is saved in <u>Media</u></p>\r\n                <Link to={'/layout'}>Create Composition</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScrollerTextAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\RssFeedAppModal.jsx",["1418","1419","1420","1421","1422","1423","1424","1425","1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport deleteicon from \"../../img/delete-btn.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps, BASE_URL, rssParser } from \"../../utils/api\";\r\nimport Switch from \"react-switch\";\r\nimport SelectMedia from \"./SelecteMedia\";\r\nimport Carousel from \"react-material-ui-carousel\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Slide from \"@mui/material/Slide\";\r\nimport newsimg from \"../../img/news-image.webp\";\r\nimport { handleRssApps } from \"../../utils/UtilsService\";\r\n\r\nconst RssFeedAppModal = ({ setShowUrlApp, show, actionType, mediaData }) => {\r\n  const options = [\r\n    { value: \"classic\", label: \"Classic View\" },\r\n    { value: \"blurred\", label: \"Blurred\" },\r\n    { value: \"white\", label: \"White Background\" },\r\n    { value: \"white-center\", label: \"White Background Center\" },\r\n    { value: \"bottom-load\", label: \"Bottom Load\" },\r\n  ];\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [urlLink, setUrlLink] = useState(\"\");\r\n  const [slideDuration, setSlideDuration] = useState(10);\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [theame, setTheame] = useState({\r\n    value: \"white-background\",\r\n    label: \"White Background\",\r\n  });\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [imageModalShow, setImageModalShow] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [preview, setPreview] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [orientationMode, setOrientation] = useState(\"landscape\");\r\n  const [previewData, setPreviewData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    //rssParser();\r\n    if (mediaData) {\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setUrlLink(jsonString.urlLink);\r\n      setTheame(jsonString.theame);\r\n      setSlideDuration(jsonString.slideDuration);\r\n      setMediaId(mediaData._id);\r\n    }\r\n  }, [mediaData]);\r\n  console.log(\"media\", mediaData);\r\n\r\n  const handleCreateApp = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    if (urlLink.trim() == \"\") {\r\n      setErr(true);\r\n      setErrorMessage(\"RSS Feed URL is required\");\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    const dataString = {\r\n      url: name.trim(),\r\n      urlLink: urlLink.trim(),\r\n      slideDuration,\r\n      theame,\r\n      selectedImage,\r\n      orientationMode,\r\n    };\r\n\r\n    if (actionType && actionType == \"edit\") {\r\n      await updateApps({\r\n        name: name.trim(),\r\n        appId: mediaId,\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      setShowUrlApp(false);\r\n    } else {\r\n      await addApps({\r\n        name: name.trim(),\r\n        type: \"rss-apps\",\r\n        data: JSON.stringify(dataString),\r\n      });\r\n      //setShowUrlApp(false);\r\n      handleClose(false);\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true);\r\n    }\r\n    //console.log(name, urlLink, selectedOption)\r\n  };\r\n\r\n  const list = [\r\n    {\r\n      title:\r\n        \" title 1We Consider Requests As They Come': United Nations On Row Over 'Bharat Vs India' Name\",\r\n      content:\r\n        \"'Testament To Our Shared Vision And Collaboration For Better Future': PM Modi At ASEAN-India Summit In Jakarta\",\r\n    },\r\n    {\r\n      title:\r\n        \" title 2We Consider Requests As They Come': United Nations On Row Over 'Bharat Vs India' Name\",\r\n      content:\r\n        \"'Testament To Our Shared Vision And Collaboration For Better Future': PM Modi At ASEAN-India Summit In Jakarta\",\r\n    },\r\n    {\r\n      title:\r\n        \" title 3We Consider Requests As They Come': United Nations On Row Over 'Bharat Vs India' Name\",\r\n      content:\r\n        \"'Testament To Our Shared Vision And Collaboration For Better Future': PM Modi At ASEAN-India Summit In Jakarta\",\r\n    },\r\n    {\r\n      title:\r\n        \" title 4We Consider Requests As They Come': United Nations On Row Over 'Bharat Vs India' Name\",\r\n      content:\r\n        \"'Testament To Our Shared Vision And Collaboration For Better Future': PM Modi At ASEAN-India Summit In Jakarta\",\r\n    },\r\n    {\r\n      title:\r\n        \" title 5We Consider Requests As They Come': United Nations On Row Over 'Bharat Vs India' Name\",\r\n      content:\r\n        \"'Testament To Our Shared Vision And Collaboration For Better Future': PM Modi At ASEAN-India Summit In Jakarta\",\r\n    },\r\n  ];\r\n  const data = {\r\n    slideDuration: 10,\r\n    theame: {\r\n      value: \"classic\",\r\n      label: \"Classic\",\r\n    },\r\n  };\r\n\r\n  const handleClose = (val) => {\r\n    setName(\"\");\r\n    setUrlLink(\"\");\r\n    setSlideDuration(10);\r\n    setTheame({\r\n      value: \"white-background\",\r\n      label: \"White Background\",\r\n    });\r\n    setSelectedImage(null);\r\n    setOrientation(\"landscape\");\r\n    setShowUrlApp(val);\r\n  };\r\n\r\n  // const rssParserHandle = async() => {\r\n  //   const data = await rssParser()\r\n  // }\r\n\r\n  const handlePreview = () => {\r\n    if (name && urlLink) {\r\n      setPreview(true);\r\n      const dt = handleRssApps({\r\n        url: name,\r\n        urlLink,\r\n        slideDuration,\r\n        theame,\r\n        selectedImage,\r\n        urlLink: { items: list },\r\n        orientationMode,\r\n      });\r\n      console.log(\"rssfeed\", dt);\r\n      setPreviewData(dt);\r\n    } else {\r\n      setPreview(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <SelectMedia\r\n        imageModalShow={imageModalShow}\r\n        setImageModalShow={setImageModalShow}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n      />\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            RSS Feed\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleClose(false);\r\n            }}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            \r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n            {errMessage && <h6 className=\"alert alert-danger\">{errMessage}</h6>}\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">RSS Feed URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"https://example.com\"\r\n                required\r\n                name=\"urlLink\"\r\n                id=\"urlLink\"\r\n                value={urlLink}\r\n                onChange={(e) => setUrlLink(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">Slide Duration (in seconds)</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"  form-control \"\r\n                placeholder=\"0\"\r\n                required\r\n                name=\"slideDuration\"\r\n                id=\"slideDuration\"\r\n                value={slideDuration}\r\n                onChange={(e) => setSlideDuration(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">Theme</label>\r\n              <Select\r\n                value={theame}\r\n                onChange={setTheame}\r\n                options={options}\r\n                className=\"app-option mb-3\"\r\n              />\r\n              {selectedImage ? (\r\n                <>\r\n                  <img\r\n                    className=\"media-img img-fluid mr-3\"\r\n                    src={`${BASE_URL}${selectedImage}`}\r\n                    alt=\"media-img\"\r\n                    style={{\r\n                      height: \"50px\",\r\n                      width: \"50px\",\r\n                      objectFit: \"cover\",\r\n                    }}\r\n                  />\r\n                  <img\r\n                    onClick={(e) => setSelectedImage(null)}\r\n                    src={deleteicon}\r\n                    alt=\"icon\"\r\n                    style={{ height: \"20px\", cursor: \"pointer\" }}\r\n                    className=\"mr-3\"\r\n                  />\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  className=\"btn btn-sm mr-2\"\r\n                  variant=\"outline-light\"\r\n                  onClick={(e) => {\r\n                    setImageModalShow(true);\r\n                  }}\r\n                >\r\n                  Image\r\n                </Button>\r\n              )}\r\n              <Button\r\n                className=\"btn btn-sm mr-2\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  handlePreview(true);\r\n                }}\r\n              >\r\n                Preview\r\n              </Button>\r\n              {/* <div className=\"d-flex align-items-center justify-content-between mt-3\">\r\n                <label className=\"mb-0 mr-3\">Enable Animation?</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  // onChange={setDeviceTime}\r\n                  checked={true}\r\n                  name=\"deviceTime\"\r\n                  id=\"deviceTime\"\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div> */}\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex \">\r\n                {\" \"}\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"landscape\"\r\n                    id=\"landscape\"\r\n                    checked={orientationMode === \"landscape\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Landscape\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check mr-4\">\r\n                  <input\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"potrait\"\r\n                    id=\"potrait\"\r\n                    checked={orientationMode === \"potrait\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                    //disabled\r\n                    // style={{cursor:\"not-allowed\"}}\r\n                    // placeholder=\"Preview Not Available\"\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Portrait\r\n                  </label>\r\n                </div>\r\n                <div className=\"form-check\">\r\n                  <input\r\n                    placeholder=\"Preview Not Available\"\r\n                    className=\"form-check-input\"\r\n                    type=\"radio\"\r\n                    name=\"orientation\"\r\n                    value=\"footer\"\r\n                    id=\"footer\"\r\n                    checked={orientationMode === \"footer\"}\r\n                    onChange={(e) => {\r\n                      setOrientation(e.target.value);\r\n                    }}\r\n                  />\r\n                  <label\r\n                    className=\"form-check-label mt-0\"\r\n                    htmlFor=\"aspectRation\"\r\n                  >\r\n                    Footer\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 rss-feed-app-form-icon\">\r\n                {previewData && preview ? previewData : \"\"}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  handleClose(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                disabled={isLoading}\r\n                onClick={(e) => handleCreateApp(e)}\r\n              >\r\n                {actionType && actionType == \"edit\" ? \"Update\" : \"Create\"} App\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={showRedirectApp}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlRedirectApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h4>https://www.</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center\">\r\n                <div className=\"text-center\">\r\n                  <p>RSS FEED App created successfully</p>\r\n                  <p>\r\n                    RSS FEED App is saved in <u>Media</u>\r\n                  </p>\r\n                  <Link to={\"/layout\"}>Create Composition</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RssFeedAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\UrlAppModal.jsx",["1438","1439","1440","1441","1442","1443","1444"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { addApps, updateApps } from \"../../utils/api\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nconst UrlAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const options = [\r\n    { value: \"disable\", label: \"disable\" },\r\n    { value: \"enable\", label: \"enable\" },\r\n  ];\r\n  const [selectedOption, setSelectedOption] = useState({value: \"disable\", label: \"disable\"});\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [name, setName] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [urlLink, setUrlLink] = useState(\"\"); \r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setUrlLink(jsonString.url);\r\n      setMediaId(mediaData._id);\r\n      setSelectedOption({value:jsonString.cache,label:jsonString.cache})\r\n    }\r\n  },[mediaData])\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name.trim() == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n      setIsLoading(false);\r\n      return \r\n    }\r\n    if(urlLink.trim() == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"URL Link is required\");\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n    const dataString = {\r\n      url:urlLink.trim(),\r\n      cache:selectedOption.value\r\n    }\r\n    \r\n    if(actionType && actionType == 'edit'){\r\n      await updateApps({\r\n        name:name.trim(),\r\n        //type:'url-apps',\r\n        appId:mediaId,\r\n        data:JSON.stringify(dataString)\r\n      });\r\n      setShowUrlApp(false)\r\n    }else{\r\n      await addApps({\r\n        name:name.trim(),\r\n        type:'url-apps',\r\n        data:JSON.stringify(dataString)\r\n      });\r\n      //setShowUrlApp(false)\r\n\r\n      handleClose(false)\r\n      setIsLoading(false);\r\n      setShowUrlRedirectApp(true)\r\n    }\r\n    \r\n    //console.log(name, urlLink, selectedOption)\r\n  }\r\n\r\n  const handleClose = (val) => {\r\n    setSelectedOption({value: \"disable\", label: \"disable\"});\r\n    setName(\"\");\r\n    setUrlLink('');\r\n    setShowUrlApp(val)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            URL App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== '' ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"https://example.com\"\r\n                required\r\n                onChange={(e) => {setUrlLink(e.target.value)}}\r\n                value={urlLink}\r\n              />\r\n              <label className=\"mt-3\">Cache</label>\r\n              <Select\r\n                defaultValue={selectedOption}\r\n                onChange={setSelectedOption}\r\n                options={options}\r\n                //   style={{\r\n                //     lineHeight: \"40px\",\r\n                //     color: \"#7e7e7e\",\r\n                //     paddingLeft: \" 15px\",\r\n                //     padding: \"10px\",\r\n                //   }}\r\n                className=\"app-option\"\r\n              />\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h1>https://www.</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={(e) => {e.preventDefault(); handleClose(false)}}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n                disabled={isLoading}\r\n              >\r\n                {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n                \r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={showRedirectApp}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlRedirectApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                <h4>https://www.</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"text-center\">\r\n                <p>URL App created successfully</p>\r\n                <p>URL App is saved in <u>Media</u></p>\r\n                <Link to={'/layout'}>Create Composition</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UrlAppModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Audit.jsx",["1445","1446","1447","1448"],"import React, { useState } from \"react\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n    humanReadableFormattedDateString,\r\n  } from \"../../../utils/UtilsService\";\r\n  import Datatable from \"react-data-table-component\";\r\n\r\nexport default function Audit({reportData, cPage, pCount}) {\r\n    const columns = [\r\n        {\r\n            name : \"Title\",\r\n            selector : (row) => row?.title,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name : \"Vendor\",\r\n            selector : (row) => row?.vendor?.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name : \"Created At\",\r\n            selector : (row) => humanReadableFormattedDateString(row.createdAt),\r\n            sortable: true,\r\n        },\r\n    ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Vendor</th>\r\n            <th>CreatedAt</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n\r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.title}</td>\r\n                  <td>{data.vendor.name} </td>\r\n                  <td>{humanReadableFormattedDateString(data.createdAt)} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination sorting />\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Media.jsx",["1449","1450","1451","1452","1453"],"import React, { useState } from \"react\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n    humanReadableFormattedDateString,\r\n  } from \"../../../utils/UtilsService\";\r\nimport Datatable from \"react-data-table-component\";\r\nexport default function Media({reportData}) {\r\n\r\n    const columns = [\r\n        {\r\n            name : \"Media\",\r\n            selector : (row) => row?.mediaObject?._id\r\n        },\r\n        {\r\n            name : \"Loop Count\",\r\n            selector : (row) => row.loop\r\n        },\r\n        {\r\n            name : \"Duration\",\r\n            selector : (row) => row.duration\r\n        },\r\n    ];\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Media</th>\r\n            <th>Loop Count</th>\r\n            <th>Duration</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.media}</td>\r\n                  <td>{data.loop} </td>\r\n                  <td>{data.duration} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination />\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\generateReportModal.jsx",["1454","1455","1456","1457","1458","1459","1460","1461","1462","1463"],"import { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nconst GenerateReportModal = ({\r\n  close,\r\n  show,\r\n  reportType,\r\n  type,\r\n  setFilter,\r\n  filter,\r\n}) => {\r\n  const history = useHistory();\r\n  const monthOptions = [\r\n    { value: \"01\", label: \"January\" },\r\n    { value: \"02\", label: \"February\" },\r\n    { value: \"03\", label: \"March\" },\r\n    { value: \"04\", label: \"April\" },\r\n    { value: \"05\", label: \"May\" },\r\n    { value: \"06\", label: \"June\" },\r\n    { value: \"07\", label: \"July\" },\r\n    { value: \"08\", label: \"August\" },\r\n    { value: \"09\", label: \"September\" },\r\n    { value: \"10\", label: \"October\" },\r\n    { value: \"11\", label: \"November\" },\r\n    { value: \"12\", label: \"December\" },\r\n  ];\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(null);\r\n  const [filterType, setFilterType] = useState(\"daily\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const yearOptions = [];\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  for (let i = currentYear - 5; i <= currentYear; i++) {\r\n    yearOptions.push({ value: String(i), label: String(i) });\r\n  }\r\n\r\n  // Output the year options\r\n\r\n  const colourStyles = {\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n      // const color = chroma(data.color);\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isFocused ? \"#ed9bc7\" : null,\r\n        color: \"#333333\",\r\n      };\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentDate();\r\n  }, []);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let sDate = startDate;\r\n    let eDate = endDate;\r\n    if (filterType == \"monthly\") {\r\n      sDate = `${selectedYear.value}-${selectedMonth.value}-01`;\r\n      eDate = `${selectedYear.value}-${selectedMonth.value}-31`;\r\n    }\r\n    setFilter({\r\n      startDate: sDate,\r\n      endDate: eDate,\r\n      filterType,\r\n      selectedMonth,\r\n      selectedYear,\r\n    });\r\n    close();\r\n  };\r\n\r\n  const getCurrentDate = () => {\r\n    let cDate = moment();\r\n    setSelectedMonth({\r\n      value: cDate.format(\"MM\"),\r\n      label: cDate.format(\"MMMM\"),\r\n    });\r\n    setSelectedYear({\r\n      value: cDate.format(\"YYYY\"),\r\n      label: cDate.format(\"YYYY\"),\r\n    });\r\n    setStartDate(cDate.format(\"YYYY-MM-DD\"));\r\n    setEndDate(cDate.format(\"YYYY-MM-DD\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <Modal.Title className=\"mr-auto\">Report</Modal.Title>\r\n\r\n            <p>How would you like to generate your report?</p>\r\n          </div>\r\n\r\n          <Button variant=\"\" className=\"close\" onClick={() => close(false)}>\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ paddingBottom: \"15px\" }}>\r\n          <form onSubmit={handleSubmit} className=\"row\">\r\n            <div className=\"form-group col-12 mb-0  url-app-form border-0\">\r\n              <div>\r\n                <div className=\"d-flex align-items-center mb-2\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    //className=\"form-control \"\r\n                    checked={filterType == \"daily\"}\r\n                    onChange={(e) => setFilterType(\"daily\")}\r\n                  />\r\n                  <label className=\"mb-0 ml-3\">Daily</label>\r\n                </div>\r\n\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"  form-control \"\r\n                  defaultValue={startDate}\r\n                  placeholder=\"App Name\"\r\n                  onChange={(e) => setStartDate(e.target.value)}\r\n                  required={filterType == \"daily\"}\r\n                  readOnly={filterType !== \"daily\"}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <>\r\n                  <div className=\"d-flex align-items-center mb-2 mt-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      //className=\"form-control \"\r\n                      checked={filterType == \"monthly\"}\r\n                      onChange={(e) => setFilterType(\"monthly\")}\r\n                    />\r\n                    <label className=\"mb-0 ml-3\">Monthly</label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                      <Select\r\n                        value={selectedMonth}\r\n                        onChange={setSelectedMonth}\r\n                        options={monthOptions}\r\n                        styles={colourStyles}\r\n                        placeholder=\"month\"\r\n                        className=\"app-option\"\r\n                        isDisabled={filterType !== \"monthly\"}\r\n                        required={filterType == \"monthly\"}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                      <Select\r\n                        value={selectedYear}\r\n                        onChange={setSelectedYear}\r\n                        options={yearOptions}\r\n                        styles={colourStyles}\r\n                        placeholder=\"year\"\r\n                        className=\"app-option\"\r\n                        isDisabled={filterType !== \"monthly\"}\r\n                        required={filterType == \"monthly\"}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              </div>\r\n              <div>\r\n                <div className=\"d-flex align-items-center mb-2 mt-3\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    //className=\"form-control \"\r\n                    checked={filterType == \"custom\"}\r\n                    onChange={(e) => setFilterType(\"custom\")}\r\n                  />\r\n                  <label className=\"mb-0 ml-3\">Custom</label>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"  form-control \"\r\n                      onChange={(e) => setStartDate(e.target.value)}\r\n                      readOnly={filterType !== \"custom\"}\r\n                      defaultValue={startDate}\r\n                      required={filterType == \"custom\"}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control \"\r\n                      onChange={(e) => setEndDate(e.target.value)}\r\n                      readOnly={filterType !== \"custom\"}\r\n                      required={filterType == \"custom\"}\r\n                      defaultValue={endDate}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-100 mt-3\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                //   onClick={() => setNewTagModal(false)}\r\n              >\r\n                Continue\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GenerateReportModal;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Uptime.jsx",["1464","1465"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport Datatable from \"react-data-table-component\";\r\n\r\nexport default function Uptime({reportData}) {\r\n\r\n    const getUptimeData = (data) => {\r\n        const sumOfTime = data?.uptimeReport?.reduce(\r\n            (total, obj) => total + obj?.time,\r\n            0\r\n          );\r\n\r\n          // Convert the sum to hours\r\n          const sumInHours = sumOfTime;\r\n          const hours = Math.floor(sumOfTime / 60);\r\n          const minutes = sumOfTime % 60;\r\n\r\n          const formattedSum = `${hours} hr ${\r\n            minutes < 10 ? \"0\" : \"\"\r\n          }${Math.floor(minutes)} min`;\r\n\r\n          const average = sumInHours / data?.uptimeReport?.length;\r\n          const aveHours = Math.floor(average / 60);\r\n          const aveMinutes = average % 60;\r\n\r\n          const aveFormattedSum = `${aveHours} hr ${\r\n            aveMinutes < 10 ? \"0\" : \"\"\r\n          }${Math.floor(aveMinutes)} min`;\r\n\r\n          return [formattedSum, aveFormattedSum];\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name : \"Screen\",\r\n            selector : (row) => row?.name\r\n        },\r\n        {\r\n            name : \"Total Uptime\",\r\n            selector : (row) => getUptimeData(row)[0]\r\n        },\r\n        {\r\n            name : \"Total Avg Time\",\r\n            selector : (row) => getUptimeData(row)[1]\r\n        },\r\n    ];\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Screen</th>\r\n            <th>Total Uptime</th>\r\n            <th>Daily Average Uptime</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n              \r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.name}</td>\r\n                  <td>{formattedSum} </td>\r\n                  <td>{aveFormattedSum} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination />\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\Common.jsx",["1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476"],"import React, { useState, useEffect } from \"react\";\r\nimport useSWR from \"swr\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport CompositionTable from \"./CompositionTable\";\r\nimport ZoneInfoTable from \"./ZoneInfoTable\";\r\n\r\nimport {\r\n  getAllMedia,\r\n  getAllMediaSWR,\r\n  postComposition,\r\n  putComposition,\r\n  uploadBlob,\r\n} from \"../../../../utils/api\";\r\n\r\nimport PreviewComposition from \"../../../modals/previewComposition\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SaveCompositionName from \"../../../modals/saveCompositionName\";\r\nimport UploadMediaModal from \"../../../modals/UploadMediaFileModal\";\r\nimport { isBlobUrl } from \"../../../../utils/UtilsService\";\r\nconst CommonComposition = ({ type, composition, layout }) => {\r\n  const [showUploadMediaModal, setUploadMediaModal] = useState(false);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [name, setName] = useState(composition ? composition.name : \"\");\r\n  const [namePopUp, setOpenNamePopUp] = useState(false);\r\n  // const [isRefresh, setIsRefresh] = useState(false);\r\n  const [allMedia, setAllMedia] = useState([]);\r\n  const [zone, setZone] = useState(\"Zone1\");\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  // const [content, setContent] = useState(\r\n  //   composition ? composition.zones[0].content : []\r\n  // );\r\n  const makeArray = (data) => {\r\n    const newArray = [];\r\n    data.forEach((item) => {\r\n      if (item.content.length > 0) {\r\n        item.content.forEach((item2) => {\r\n          newArray.push({ ...item2, [\"zone\"]: item.name });\r\n        });\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n  const makeArray2 = (data, size) => {\r\n    const result = data.reduce(function (r, a) {\r\n      r[a.zone] = r[a.zone] || [];\r\n      r[a.zone].push(a);\r\n      return r;\r\n    }, Object.create(null));\r\n\r\n    return result;\r\n  };\r\n  const makeArrayReference = (referenceUrl) => {\r\n    const result = [];\r\n    const Zone1 = [];\r\n    const Zone2 = [];\r\n    const Zone3 = [];\r\n\r\n    referenceUrl.forEach((i) => {\r\n      const item = i.split(\"**\");\r\n\r\n      if (item[1] == \"Zone1\") {\r\n        Zone1.push(item[0]);\r\n        result[\"Zone1\"] = Zone1;\r\n      }\r\n      if (item[1] == \"Zone2\") {\r\n        Zone2.push(item[0]);\r\n        result[\"Zone2\"] = Zone2;\r\n      }\r\n      if (item[1] == \"Zone3\") {\r\n        Zone3.push(item[0]);\r\n        result[\"Zone3\"] = Zone3;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  };\r\n  const [content, setContent] = useState(\r\n    composition ? makeArray(composition.zones) : []\r\n  );\r\n  const [referenceUrl, setReferenceUrl] = useState(\r\n    composition ? composition.referenceUrl : []\r\n  );\r\n  console.log(referenceUrl, \"referenceUrl\");\r\n  const handleLayout = (data) => {\r\n    setZone(data);\r\n  };\r\n\r\n  // const { data: allMedia, mutate } = useSWR(\r\n  //   \"/vendor/display/media\",\r\n  //   getAllMediaSWR\r\n  // );\r\n  const callAllMedialApi = async () => {\r\n    let str = \"\";\r\n    const list = await getAllMedia(str);\r\n    setAllMedia(list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsRefresh(false);\r\n    callAllMedialApi();\r\n  }, [isRefresh]);\r\n\r\n  const history = useHistory();\r\n  const addComposition = (media) => {\r\n    let url = media.title;\r\n    setContent((prev) => {\r\n      let meta = {};\r\n\r\n      if (media.type == \"image\" || media.type == \"video\") {\r\n        meta = JSON.parse(media.properties);\r\n      } else {\r\n        const jsonData = JSON.parse(media.appData);\r\n        url = jsonData.url;\r\n        meta = {\r\n          length: 10,\r\n          height: 10,\r\n          duration: 0,\r\n        };\r\n      }\r\n\r\n      const dt = prev.find((o) => o.name === zone);\r\n      const createContent = {\r\n        url,\r\n        type: media.type,\r\n        maintainAspectRatio: false,\r\n        fitToScreen: true,\r\n        crop: false,\r\n        duration: meta.length ? meta.length : 10,\r\n        createdBy: media.createdBy.name,\r\n        zone,\r\n        data:\r\n          media.type != \"video\" && media.type != \"image\" ? media.appData : \"\",\r\n      };\r\n      const newdata = [...prev, { ...createContent }];\r\n      return newdata;\r\n    });\r\n    setReferenceUrl((prev) => {\r\n      return [...prev, url + \"**\" + zone];\r\n    });\r\n  };\r\n  const saveComposition = async () => {\r\n    console.log(\"referenceUrl\", referenceUrl);\r\n    const updateFiles = referenceUrl.map(async (url) => {\r\n      if (isBlobUrl(url)) {\r\n        const urlItem = url.split(\"**\");\r\n        const uri = await uploadBlob(urlItem[0]);\r\n        return uri + \"**\" + urlItem[1];\r\n      }\r\n      return url;\r\n    });\r\n    const results = await Promise.all(updateFiles);\r\n\r\n    let zones = [];\r\n    let zoneNew = makeArray2(content, layout.zones.length);\r\n    layout.zones.forEach((zone, index) => {\r\n      const contentData = zoneNew[zone.name].map(({ zone, ...rest }) => {\r\n        return rest;\r\n      });\r\n      zones.push({\r\n        name: zone.name,\r\n        zoneId: zone._id,\r\n        //content: removeCreatedBy(index),\r\n        content: removeCreatedBy(contentData),\r\n      });\r\n    });\r\n    const data = {\r\n      name: name,\r\n      zones: zones,\r\n      duration: TotalDuration(),\r\n      referenceUrl: results,\r\n    };\r\n    if (type === \"create\") {\r\n      data.layoutId = layout._id;\r\n      console.log(data);\r\n      await postComposition(data);\r\n    } else {\r\n      data.compositionId = composition._id;\r\n      await putComposition(data);\r\n    }\r\n    history.push(\"/layout\");\r\n  };\r\n  const TotalDuration = () => {\r\n    let total = 0;\r\n    content.forEach((composition) => {\r\n      total += Number(composition.duration);\r\n    });\r\n    return total.toFixed(0);\r\n  };\r\n  function removeCreatedBy(data) {\r\n    return data.map((item) => {\r\n      delete item[\"createdBy\"];\r\n      delete item[\"_id\"];\r\n      delete item[\"zone\"];\r\n      // if(item['type'] == 'url-apps' || item['type'] == 'youtube-apps'){\r\n      //   item['type'] = 'app';\r\n      // }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1 className=\"mr-auto\">\r\n          {type === \"edit\" ? \"Edit Compostition\" : \"Create Compostition\"}\r\n        </h1>\r\n        <div className=\"preview-composition d-flex flex-wrap\">\r\n          <Button\r\n            onClick={() => {\r\n              if (content.length) {\r\n                setShowPreview(true);\r\n              }\r\n            }}\r\n            className=\"mr-2 preview-btn\"\r\n            variant=\"info\"\r\n            disabled={!content.length}\r\n          >\r\n            Preview\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              console.log(content, \"conteettttnnnnn\", zone);\r\n              if (content.length) {\r\n                setOpenNamePopUp(true);\r\n              }\r\n            }}\r\n            className=\"save-composition-btn\"\r\n            variant=\"info\"\r\n          >\r\n            Save Composition\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-head d-flex mb-3 align-items-start\">\r\n        <Button\r\n          className=\"mr-2\"\r\n          variant=\"info add-screen-btn\"\r\n          onClick={() => {\r\n            setUploadMediaModal(true);\r\n          }}\r\n        >\r\n          Add Media\r\n          <span className=\"btn-icon-right\">\r\n            <div className=\"glyph-icon flaticon-381-add-1\"></div>\r\n          </span>\r\n        </Button>\r\n        {/* <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div> */}\r\n      </div>\r\n      <div className=\"custom-comp-table flex-1 editComposition\">\r\n        <Row className=\"h-100\">\r\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pr-0 border-col\">\r\n            <CompositionTable\r\n              allMedia={allMedia}\r\n              addComposition={addComposition}\r\n            />\r\n          </Col>\r\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pl-0\">\r\n            <ZoneInfoTable\r\n              content={content}\r\n              setContent={setContent}\r\n              setReferenceUrl={setReferenceUrl}\r\n              layout={layout}\r\n              handleLayout={handleLayout}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <UploadMediaModal\r\n          showUploadMediaModal={showUploadMediaModal}\r\n          setUploadMediaModal={setUploadMediaModal}\r\n          //callAllMediaApi={mutate}\r\n          setIsRefresh={setIsRefresh}\r\n        />\r\n        {showPreview && (\r\n          <PreviewComposition\r\n            setShowPreview={setShowPreview}\r\n            content={content}\r\n            contentnew={makeArray2(content, 2)}\r\n            referenceUrl={referenceUrl}\r\n            referenceUrlArray={makeArrayReference(referenceUrl)}\r\n            layout={layout}\r\n          />\r\n        )}\r\n        {namePopUp && (\r\n          <SaveCompositionName\r\n            setModalState={setOpenNamePopUp}\r\n            saveComposition={saveComposition}\r\n            name={name}\r\n            setName={setName}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommonComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\saveCompositionName.jsx",["1477","1478"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst SaveCompositionName = ({\r\n  setModalState,\r\n  saveComposition,\r\n  name,\r\n  setName,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Save Composition</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setModalState(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"add-screen-paragraph\">\r\n          <p>Give your composition a name.</p>\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                value={name}\r\n                onChange={(event) => {\r\n                  setName(event.target.value);\r\n                }}\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              variant=\"outline-light\"\r\n              onClick={() => setModalState(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() =>{\r\n                if(name.length){\r\n                  saveComposition()\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SaveCompositionName;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\previewComposition.jsx",["1479","1480","1481","1482","1483","1484","1485"],"import { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\r\nimport { BASE_URL } from \"../../utils/api\";\r\nimport { isBlobUrl } from \"../../utils/UtilsService\";\r\nconst PreviewComposition = ({\r\n  setShowPreview,\r\n  content,\r\n  contentnew,\r\n  layout,\r\n  referenceUrl,\r\n  referenceUrlArray,\r\n}) => {\r\n  console.log(layout, \"layout\");\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [current1Index, setCurrent1Index] = useState(0);\r\n  const [current2Index, setCurrent2Index] = useState(0);\r\n  const timeoutRef = useRef(\"\");\r\n  const timeout1Ref = useRef(\"\");\r\n  const divRef = useRef(null);\r\n  useEffect(() => {\r\n    if (layout && layout.zones.length == 1) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n    } else if (layout && layout.zones.length == 2) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone2[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contentnew.Zone2.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    } else if (layout && layout.zones.length == 3) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone2[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contentnew.Zone2.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n      if (contentnew.Zone3 && contentnew.Zone3[current2Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone3[current2Index]?.duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current2Index === contentnew.Zone3.length - 1) {\r\n            setCurrent2Index(0);\r\n          } else {\r\n            setCurrent2Index((current2Index) => current2Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    }\r\n\r\n    return () => clearTimeout(timeoutRef.current);\r\n  }, [currentIndex, current1Index]);\r\n\r\n  const onFullScreen = () => {\r\n    const element = document.getElementsByClassName(\r\n      \"modal-priview-composition\"\r\n    )[0];\r\n    // if (element.classList.contains(\"fullscreen-mode\")) {\r\n    //   element.classList.remove(\"fullscreen-mode\");\r\n    // }\r\n\r\n    if (element) {\r\n      // divRef.current.requestFullscreen();\r\n      if (element.requestFullscreen) {\r\n        element.requestFullscreen();\r\n      } else if (element.webkitRequestFullscreen) {\r\n        element.webkitRequestFullscreen();\r\n      } else if (element.msRequestFullscreen) {\r\n        element.msRequestFullscreen();\r\n      }\r\n      element.classList.add(\"fullscreen-mode\");\r\n    }\r\n  };\r\n\r\n  const viewImage = content[currentIndex].fitToScreen\r\n    ? \"fitScreen\"\r\n    : content[currentIndex].crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n\r\n  // const url = isBlobUrl(referenceUrl[currentIndex])\r\n  //   ? referenceUrl[currentIndex]\r\n  //   : `${BASE_URL}${referenceUrl[currentIndex]}`;\r\n\r\n  const url =\r\n    referenceUrlArray.Zone1 && referenceUrlArray.Zone1[currentIndex]\r\n      ? isBlobUrl(referenceUrlArray.Zone1[currentIndex])\r\n        ? referenceUrlArray.Zone1[currentIndex]\r\n        : `${BASE_URL}${referenceUrlArray.Zone1[currentIndex]}`\r\n      : \"\";\r\n\r\n  const url1 =\r\n    referenceUrlArray.Zone2 && referenceUrlArray.Zone2[current1Index]\r\n      ? isBlobUrl(referenceUrlArray.Zone2[current1Index])\r\n        ? referenceUrlArray.Zone2[current1Index]\r\n        : `${BASE_URL}${referenceUrlArray.Zone2[current1Index]}`\r\n      : \"\";\r\n\r\n  const url2 =\r\n    referenceUrlArray.Zone3 && referenceUrlArray.Zone3[current2Index]\r\n      ? isBlobUrl(referenceUrlArray.Zone3[current2Index])\r\n        ? referenceUrlArray.Zone3[current2Index]\r\n        : `${BASE_URL}${referenceUrlArray.Zone3[current2Index]}`\r\n      : \"\";\r\n\r\n  return (\r\n    <Modal\r\n      className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview ${layout.screenType}-view`}\r\n      show={true}\r\n      size=\"xl\"\r\n    >\r\n      <Modal.Header style={{ paddingBottom: \"0px\" }}>\r\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\r\n\r\n        <Button variant=\"\" className=\"close \" onClick={() => onFullScreen()}>\r\n          <i className=\"fa fa-expand fullscreenbtn\"></i>\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowPreview(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body ref={divRef} style={{ padding: \"15px\" }}>\r\n        {layout && layout.zones.length == 1 ? (\r\n          <>\r\n            {content[currentIndex] &&\r\n              content[currentIndex].type === \"image\" && (\r\n                <div\r\n                  className=\"basic-list-group image-preview-container media-content modal-priview-composition\"\r\n                  style={{ height: \"560px\" }}\r\n                >\r\n                  <img\r\n                    className=\"webplayer-preview-img\"\r\n                    style={{\r\n                      objectFit: `${\r\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                      }`,\r\n                    }}\r\n                    src={url}\r\n                    alt=\"media-img\"\r\n                  />\r\n                </div>\r\n              )}\r\n            {content[currentIndex] &&\r\n              content[currentIndex].type === \"video\" && (\r\n                <div\r\n                  className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                  }`}\r\n                >\r\n                  <WebVideoPlayer src={url}></WebVideoPlayer>\r\n                </div>\r\n              )}\r\n          </>\r\n        ) : layout.zones.length == 2 ? (\r\n          <div className=\"modal-priview-composition\" style={{ height: \"80vh\" }}>\r\n            <div className=\"top-div\">\r\n              {contentnew.Zone1[currentIndex] &&\r\n                contentnew.Zone1[currentIndex].type === \"image\" && (\r\n                  <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone1[currentIndex].url}`}\r\n                      src={url}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone1[currentIndex] &&\r\n                contentnew.Zone1[currentIndex].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone1[currentIndex].url}`}\r\n                      src={url}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n            <div className=\"bottom-div\">\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone2[current1Index] &&\r\n                contentnew.Zone2[current1Index].type === \"image\" && (\r\n                  <div\r\n                    className=\"basic-list-group image-preview-container media-content\"\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone2[current1Index].url}`}\r\n                      src={url1}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone2[current1Index] &&\r\n                contentnew.Zone2[current1Index].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone2[current1Index].url}`}\r\n                      src={url1}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        ) : layout.zones.length == 3 ? (\r\n          <div\r\n            className=\"modal-priview-composition\"\r\n            style={{ height: \"560px\" }}\r\n          >\r\n            <div className=\"third-compoition-container\">\r\n              <div className=\"third-composition-top-div\">\r\n                {contentnew.Zone1[currentIndex] &&\r\n                  contentnew.Zone1[currentIndex].type === \"image\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                      <img\r\n                        className=\"webplayer-preview-img\"\r\n                        style={{\r\n                          objectFit: `${\r\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                          }`,\r\n                        }}\r\n                        // src={`https://ssapi.trendysignage.com/${contentnew.Zone1[currentIndex].url}`}\r\n                        src={url}\r\n                        alt=\"media-img\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                {contentnew.Zone1[currentIndex] &&\r\n                  contentnew.Zone1[currentIndex].type === \"video\" && (\r\n                    <div\r\n                      className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                      }`}\r\n                    >\r\n                      <WebVideoPlayer\r\n                        //src={`https://ssapi.trendysignage.com/${contentnew.Zone1[currentIndex].url}`}\r\n                        src={url}\r\n                      ></WebVideoPlayer>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n              <div className=\"third-composition-second-div\">\r\n                {contentnew.Zone2[current1Index] &&\r\n                  contentnew.Zone2[current1Index].type === \"image\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                      <img\r\n                        className=\"webplayer-preview-img\"\r\n                        style={{\r\n                          objectFit: `${\r\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                          }`,\r\n                        }}\r\n                        //src={`https://ssapi.trendysignage.com/${contentnew.Zone2[current1Index].url}`}\r\n                        src={url1}\r\n                        alt=\"media-img\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                {contentnew.Zone2[current1Index] &&\r\n                  contentnew.Zone2[current1Index].type === \"video\" && (\r\n                    <div\r\n                      className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                      }`}\r\n                    >\r\n                      <WebVideoPlayer\r\n                        //src={`https://ssapi.trendysignage.com/${contentnew.Zone2[current1Index].url}`}\r\n                        src={url1}\r\n                      ></WebVideoPlayer>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"third-composition-third-div\">\r\n              {contentnew.Zone3[current2Index] &&\r\n                contentnew.Zone3[current2Index].type === \"image\" && (\r\n                  <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone3[current2Index].url}`}\r\n                      src={url2}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone3[current2Index] &&\r\n                contentnew.Zone3[current2Index].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`https://ssapi.trendysignage.com/${contentnew.Zone3[current2Index].url}`}\r\n                      src={url}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PreviewComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\ZoneInfoTable.jsx",["1486","1487","1488","1489","1490","1491","1492","1493","1494","1495"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport editBtnImg from \"../../../../img/edit-btn.png\";\r\nimport deleteBtnImg from \"../../../../img/delete-btn.png\";\r\nimport { BASE_URL } from \"../../../../utils/api\";\r\nimport EditSelectedComposition from \"../../../modals/editSelectedComposition\";\r\n\r\nconst ZoneInfoTable = ({\r\n  content,\r\n  setContent,\r\n  setReferenceUrl,\r\n  layout,\r\n  handleLayout,\r\n}) => {\r\n  console.log(\"Content\", content);\r\n  const [editSelected, setEditSelected] = useState(null);\r\n  const [selectedZone, setSelectedZone] = useState(\"Zone1\");\r\n  const [activeClass, setActiveClass] = useState(false);\r\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(0);\r\n\r\n  const handleChange = (event, index) => {\r\n    const newValue = event.target.value.replace(/[^\\d]/g, \"\");\r\n    setContent((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === index) {\r\n          val.duration = newValue;\r\n        }\r\n        return val;\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n  };\r\n  const makeZoneColor = (zones) => {\r\n    const data = {};\r\n    zones.forEach((item, index) => {\r\n      data[item.name] = index == 0 ? true : false;\r\n    });\r\n    return data;\r\n  };\r\n  const [zoneColor, setZoneColor] = useState(makeZoneColor(layout.zones));\r\n\r\n  const handleZoneButton = (zone1) => {\r\n    setZoneColor({ ...zoneColor, [selectedZone]: false, [zone1]: true });\r\n    setSelectedZone(zone1);\r\n    handleLayout(zone1);\r\n  };\r\n\r\n  const Duration = (composition, index) => {\r\n    return (\r\n      <div className=\"tag-container mediaDUrationTag\">\r\n        {\" \"}\r\n        <input\r\n          onChange={(event) => {\r\n            handleChange(event, index);\r\n          }}\r\n          value={Number(composition.duration).toFixed(0)}\r\n          disabled={composition.type === \"video\"}\r\n        />\r\n        <span>sec</span>\r\n      </div>\r\n    );\r\n  };\r\n  const TotalDuration = () => {\r\n    let total = 0;\r\n    content.forEach((composition) => {\r\n      total += Number(composition.duration);\r\n    });\r\n    return total.toFixed(0);\r\n  };\r\n\r\n  const removeComposition = (index) => {\r\n    setContent((prev) => {\r\n      const updateMedia = prev.filter((val, key) => key !== index);\r\n      return [...updateMedia];\r\n    });\r\n\r\n    setReferenceUrl((prev) => {\r\n      const updateUrl = prev.filter((val, key) => key !== index);\r\n      return [...updateUrl];\r\n    });\r\n  };\r\n\r\n  const editComposition = (index) => {\r\n    setEditSelected(index);\r\n  };\r\n\r\n  const updateViewType = (data, viewImage, ImgUrl) => {\r\n    setContent((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === editSelected) {\r\n          val.fitToScreen = viewImage === \"fitScreen\";\r\n          val.maintainAspectRatio = viewImage === \"aspectRation\";\r\n          val.crop = viewImage === \"crop\" ? true : false;\r\n        }\r\n        return val;\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n\r\n    setReferenceUrl((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === editSelected) {\r\n          return ImgUrl + \"**\" + selectedZone;\r\n        } else {\r\n          return val;\r\n        }\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n  };\r\n\r\n  const handleButtonClick = (index) => {\r\n    setSelectedButtonIndex(index);\r\n    // Perform any other logic specific to the clicked button\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        responsive\r\n        className=\"custom-table screen-table layout-table h-100\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th colSpan={4}>\r\n              <span className=\"d-flex flex-wrap\">\r\n                {layout &&\r\n                (layout.title === \"Single Zone Potrait\" ||\r\n                  layout.title === \"Two Zone Potrait\") ? (\r\n                  <span\r\n                    className={`yellow-box-portrait ${layout.title}`}\r\n                    style={{\r\n                      backgroundColor:\r\n                        layout &&\r\n                        (layout.zones.length == 2 ? \"#fff\" : \"#ffc12b\"),\r\n                    }}\r\n                  >\r\n                    {layout && layout.zones.length == 2 ? (\r\n                      <>\r\n                        <div\r\n                          className=\"zone-layout2\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone1\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                        <div\r\n                          className=\"zone-layout22\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone2\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </span>\r\n                ) : (\r\n                  <span\r\n                    className={`yellow-box ${layout.title}`}\r\n                    style={{\r\n                      backgroundColor:\r\n                        layout &&\r\n                        (layout.zones.length == 2 || layout.zones.length == 3\r\n                          ? \"#fff\"\r\n                          : \"#ffc12b\"),\r\n                    }}\r\n                  >\r\n                    {layout && layout.zones.length == 2 ? (\r\n                      <>\r\n                        <div\r\n                          className=\"zone-layout2\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone1\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                        <div\r\n                          className=\"zone-layout22\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone2\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    {layout && layout.zones.length == 3 ? (\r\n                      <>\r\n                        <div\r\n                          className=\"zone-layout31\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone1\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                        <div\r\n                          className=\"zone-layout32\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone2\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                        <div\r\n                          className=\"zone-layout33\"\r\n                          style={{\r\n                            backgroundColor: zoneColor[\"Zone3\"]\r\n                              ? \"#ffc12b\"\r\n                              : \"\",\r\n                          }}\r\n                        ></div>\r\n                      </>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </span>\r\n                )}\r\n\r\n                {layout &&\r\n                  layout.zones.map((item, i) => {\r\n                    return (\r\n                      <button\r\n                        key={i}\r\n                        onClick={() => {\r\n                          handleZoneButton(item.name);\r\n                          handleButtonClick(i);\r\n                          // setActiveClass(true);\r\n                        }}\r\n                        // className=\"zone\"\r\n                        // className={activeClass ? \"zone zone-active \" : \"zone\"}\r\n                        className={\r\n                          selectedButtonIndex === i\r\n                            ? \"zone zone-active \"\r\n                            : \"zone\"\r\n                        }\r\n                      >\r\n                        {item.name}\r\n                      </button>\r\n                    );\r\n                  })}\r\n                <span className=\"duration\">\r\n                  Duration : {TotalDuration()} sec\r\n                </span>\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {content.map((composition, index) => {\r\n            return composition.zone == selectedZone ? (\r\n              <tr key={composition.id}>\r\n                <td>{index + 1}.</td>\r\n                <td>\r\n                  <span className=\"td-content d-flex name-td-content\">\r\n                    <span\r\n                      className={`name-img mr-2  ${\r\n                        composition.type === \"video\" && \"videotableName\"\r\n                      }`}\r\n                    >\r\n                      {composition.type === \"image\" && (\r\n                        <img\r\n                          className=\"media-img img-fluid\"\r\n                          src={`${BASE_URL}${composition.url}`}\r\n                          alt=\"media-img\"\r\n                        />\r\n                      )}\r\n                      {composition.type === \"video\" &&\r\n                        composition.duration.toFixed(0) / 60}\r\n                    </span>\r\n                    <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                      <strong>\r\n                        {composition.url.split(\"/\")[\r\n                          composition.url.split(\"/\").length - 1\r\n                        ].length > 22\r\n                          ? composition.url\r\n                              .split(\"/\")\r\n                              [composition.url.split(\"/\").length - 1].slice(\r\n                                0,\r\n                                7\r\n                              ) + \"...\"\r\n                          : composition.url.split(\"/\")[\r\n                              composition.url.split(\"/\").length - 1\r\n                            ]}\r\n                      </strong>\r\n                      <span>{composition.createdBy}</span>\r\n                    </span>\r\n                  </span>\r\n                </td>\r\n                <td style={{ width: \"180px\" }}>\r\n                  {Duration(composition, index)}\r\n                </td>\r\n                <td>\r\n                  <span className=\"layout-edit-btn mr-2 \">\r\n                    <img\r\n                      className=\"edit-icon cursorPointer\"\r\n                      src={editBtnImg}\r\n                      alt=\"search\"\r\n                      onClick={() => {\r\n                        // if(composition.type === \"image\"){\r\n                        editComposition(index);\r\n                        // }\r\n                      }}\r\n                    />\r\n                  </span>\r\n                  <span\r\n                    className=\"layout-edit-btn\"\r\n                    onClick={() => {\r\n                      removeComposition(index);\r\n                    }}\r\n                  >\r\n                    <img\r\n                      className=\"edit-icon cursorPointer\"\r\n                      src={deleteBtnImg}\r\n                      alt=\"search\"\r\n                    />\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              <></>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n\r\n      {editSelected !== null && (\r\n        <EditSelectedComposition\r\n          composition={content[editSelected]}\r\n          setEditSelected={setEditSelected}\r\n          updateViewType={updateViewType}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ZoneInfoTable;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionTable.jsx",["1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { BASE_URL } from \"../../../../utils/api\";\r\nimport UrlAppModal from \"../../../modals/UrlAppModal\";\r\nimport YoutubeAppModal from \"../../../modals/YoutubeAppModal\";\r\nimport ScrollerTextAppModal from \"../../../modals/ScrollerTextAppModal\";\r\nimport TextAppModal from \"../../../modals/TextAppModal\";\r\nimport editBtnImg from \"../../../../img/edit-btn.png\";\r\nimport WeatherAppModal from \"../../../modals/WeatherAppModal\";\r\nimport ClockApp from \"../../../modals/ClockApp\";\r\nimport QrCodeModal from \"../../../modals/QrCodeModal\";\r\nimport StocksAppModal from \"../../../modals/StocksAppModal\";\r\nimport BulletinBoardAppModal from \"../../../modals/BulletinBoardAppModal\";\r\nimport RssFeedAppModal from \"../../../modals/RssFeedAppModal\";\r\nimport AirQualityAppModal from \"../../../modals/AirQualityAppModal\";\r\nimport QuoteModel from \"../../../modals/QuoteModel\";\r\nimport AllNewsAppModal from \"../../../modals/AllNewsAppModal\";\r\nimport GoogleSlideAppModal from \"../../../modals/GoogleSlideAppModal\";\r\n\r\nconst CompositionTable = ({ allMedia, addComposition }) => {\r\n  const [showUrlApp, setShowUrlApp] = useState(false);\r\n  const [showYoutubeApp, setShowYoutubeApp] = useState(false);\r\n  const [selectedMedia, setSelectedMedia] = useState(null);\r\n  const [showScrollerTextApp, setShowScrollerTextApp] = useState(false);\r\n  const [showTextApp, setShowTextApp] = useState(false);\r\n  const [showWeatherApp, setShowWeatherApp] = useState(false);\r\n  const [showClockApp, setShowClockApp] = useState(false);\r\n  const [showStocksApp, setShowStocksApp] = useState(false);\r\n  const [showBulletinApp, setShowBulletinApp] = useState(false);\r\n  const [showQrCodeApp, setShowQrCodeApp] = useState(false);\r\n  const [showRssApp, setShowRssApp] = useState(false);\r\n  const [showAqiApp, setShowAqiApp] = useState(false);\r\n  const [showQuote, setShowQuote] = useState(false);\r\n  const [showNews, setShowNews] = useState(false);\r\n  const [showGoogleSlides, setShowGoogleSlides] = useState(false);\r\n\r\n  const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n      return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleEdit = (e, data) => {\r\n    e.preventDefault();\r\n    console.log(data.type);\r\n    setSelectedMedia(data);\r\n    if (data.type == \"url-apps\") {\r\n      setShowUrlApp(true);\r\n    } else if (data.type == \"youtube-apps\") {\r\n      setShowYoutubeApp(true);\r\n    } else if (data.type == \"scroller\") {\r\n      setShowScrollerTextApp(true);\r\n    } else if (data.type == \"text-apps\") {\r\n      setShowTextApp(true);\r\n    } else if (data.type == \"weather-apps\") {\r\n      setShowWeatherApp(true);\r\n    } else if (data.type == \"clock-apps\") {\r\n      setShowClockApp(true);\r\n    } else if (data.type == \"qrcode-apps\") {\r\n      setShowQrCodeApp(true);\r\n    } else if (data.type == \"stocks-apps\") {\r\n      setShowStocksApp(true);\r\n    } else if (data.type == \"bulletin-apps\") {\r\n      setShowBulletinApp(true);\r\n    } else if (data.type == \"rss-apps\") {\r\n      setShowRssApp(true);\r\n    } else if (data.type == \"aqi-apps\") {\r\n      setShowAqiApp(true);\r\n    } else if (data.type == \"quote-apps\") {\r\n      setShowQuote(true);\r\n    } else if (data.type == \"news-apps\") {\r\n      setShowNews(true);\r\n    } else if (data.type == \"google-apps\") {\r\n      setShowGoogleSlides(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UrlAppModal\r\n        setShowUrlApp={() => setShowUrlApp(false)}\r\n        show={showUrlApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <YoutubeAppModal\r\n        setShowUrlApp={() => setShowYoutubeApp(false)}\r\n        show={showYoutubeApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <AllNewsAppModal\r\n        setShowUrlApp={() => setShowNews(false)}\r\n        show={showNews}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <ScrollerTextAppModal\r\n        setShowScrollerTextApp={setShowScrollerTextApp}\r\n        show={showScrollerTextApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <TextAppModal\r\n        setShowUrlApp={() => setShowTextApp(false)}\r\n        show={showTextApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <WeatherAppModal\r\n        setShowUrlApp={() => setShowWeatherApp(false)}\r\n        show={showWeatherApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <ClockApp\r\n        setShowUrlApp={() => setShowClockApp(false)}\r\n        show={showClockApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <QrCodeModal\r\n        setShowUrlApp={() => setShowQrCodeApp(false)}\r\n        show={showQrCodeApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <StocksAppModal\r\n        setShowUrlApp={() => setShowStocksApp(false)}\r\n        show={showStocksApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <BulletinBoardAppModal\r\n        setShowUrlApp={() => setShowBulletinApp(false)}\r\n        show={showBulletinApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <RssFeedAppModal\r\n        setShowUrlApp={() => setShowRssApp(false)}\r\n        show={showRssApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <AirQualityAppModal\r\n        setShowUrlApp={() => setShowAqiApp(false)}\r\n        show={showAqiApp}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <QuoteModel\r\n        setShowUrlApp={() => setShowQuote(false)}\r\n        show={showQuote}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <GoogleSlideAppModal\r\n        setShowUrlApp={() => setShowGoogleSlides(false)}\r\n        show={showGoogleSlides}\r\n        mediaData={selectedMedia}\r\n        actionType={\"edit\"}\r\n      />\r\n      <Table\r\n        responsive\r\n        className=\"custom-table screen-table layout-table h-100\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Media</th>\r\n            <th>Type</th>\r\n            <th>Tags</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {allMedia &&\r\n            allMedia.map((media) => {\r\n              return (\r\n                <tr\r\n                  key={media._id}\r\n                  onClick={() => {\r\n                    addComposition(media);\r\n                  }}\r\n                >\r\n                  <td>\r\n                    <span className=\"td-content d-flex name-td-content\">\r\n                      <span\r\n                        className={`name-img mr-2  ${\r\n                          media.type === \"video\" && \"videotableName\"\r\n                        }`}\r\n                      >\r\n                        {media.type === \"image\" && (\r\n                          <img\r\n                            className=\"media-img img-fluid\"\r\n                            src={`${BASE_URL}${media.title}`}\r\n                            alt=\"media-img\"\r\n                          />\r\n                        )}\r\n                        {media.type === \"video\" && videoMetaDuration(media)}\r\n                      </span>\r\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                        <strong>\r\n                          {/* {\r\n                            media.title.split(\"/\")[\r\n                              media.title.split(\"/\").length - 1\r\n                            ]\r\n                          } */}\r\n\r\n                          {media.title.split(\"/\")[\r\n                            media.title.split(\"/\").length - 1\r\n                          ].length > 11\r\n                            ? media.title\r\n                                .split(\"/\")\r\n                                [media.title.split(\"/\").length - 1].slice(\r\n                                  0,\r\n                                  11\r\n                                ) + \"...\"\r\n                            : media.title.split(\"/\")[\r\n                                media.title.split(\"/\").length - 1\r\n                              ]}\r\n                        </strong>\r\n                        <span>{media.createdBy.name}</span>\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <div className=\"d-flex align-items-center \">\r\n                      <span>\r\n                        {media.type.slice(0, 1).toUpperCase() +\r\n                          media.type.slice(1)}\r\n                      </span>\r\n\r\n                      {media.type == \"youtube-apps\" ||\r\n                      media.type == \"url-apps\" ||\r\n                      media.type == \"scroller\" ||\r\n                      media.type == \"text-apps\" ||\r\n                      media.type == \"weather-apps\" ||\r\n                      media.type == \"clock-apps\" ||\r\n                      media.type == \"qrcode-apps\" ||\r\n                      media.type == \"rss-apps\" ||\r\n                      media.type == \"aqi-apps\" ||\r\n                      media.type == \"bulletin-apps\" ||\r\n                      media.type == \"quote-apps\" ||\r\n                      media.type == \"news-apps\" ||\r\n                      media.type == \"google-apps\" ||\r\n                      media.type == \"people-apps\" ||\r\n                      media.type == \"stocks-apps\" ? (\r\n                        // <button\r\n                        //   onClick={(e) => {\r\n                        //     handleEdit(e, media);\r\n                        //   }}\r\n                        // >\r\n                        //   Edi\r\n                        // </button>\r\n                        <span className=\"layout-edit-btn ml-3 \">\r\n                          <img\r\n                            className=\"edit-icon cursorPointer\"\r\n                            src={editBtnImg}\r\n                            alt=\"icon\"\r\n                            onClick={(e) => {\r\n                              handleEdit(e, media);\r\n                            }}\r\n                          />\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                  <td>\r\n                    {media.tags.map((tag) => {\r\n                      return (\r\n                        <span className=\"my-phone-tag text-truncate ml-1\">\r\n                          {tag}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompositionTable;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\WebVideoPlayer.jsx",["1525","1526"],"import React, { useEffect, useRef } from \"react\";\r\nimport videojs from \"video.js\";\r\n\r\nimport \"video.js/dist/video-js.css\";\r\nconst WebVideoPlayer = (props) => {\r\n  console.log(props, \"WebVideoPlayer.jsx props\");\r\n  const rotateMode = \"potrait\";\r\n  const videoRef = useRef(null);\r\n  const playerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    videoRef.current?.load();\r\n    // playerRef.current = videojs(videoRef.current, {\r\n    //   autoplay: true,\r\n    //   controls: false,\r\n    //   muted:true,\r\n    //   loop:true,\r\n    //   src: props.src\r\n    // });\r\n    // console.log(\"test\",playerRef.current, videoRef.current)\r\n    return () => {\r\n      videoRef.current?.load();\r\n      if (playerRef.current) {\r\n        playerRef.current.dispose();\r\n        playerRef.current = null;\r\n      }\r\n    };\r\n  }, [props.src]);\r\n\r\n  useEffect(() => {\r\n    if (playerRef.current) {\r\n      playerRef.current.src({ src: props.src });\r\n    }\r\n  }, [props.src]);\r\n\r\n  // useEffect(() => {\r\n  //   if (playerRef.current && playerRef.current.tech()) {\r\n  //     playerRef.current.tech().src({ src: props.src });\r\n  //     playerRef.current.load();\r\n  //   }\r\n  // }, [props.src]);\r\n\r\n  // const videoRef = useRef(null);\r\n  // const playerRef = useRef(null);\r\n\r\n  // useEffect(() => {\r\n  //   // Create the Video.js player instance\r\n  //   playerRef.current = videojs(videoRef.current, {\r\n  //     autoplay: true,\r\n  //     controls: false,\r\n  //     loop: true,\r\n  //     muted: true,\r\n  //     sources: [{\r\n  //       src: props.src,\r\n\r\n  //     }],\r\n  //   });\r\n\r\n  //   // Cleanup when component unmounts\r\n  //   return () => {\r\n  //     if (playerRef.current) {\r\n  //       playerRef.current.dispose();\r\n  //       playerRef.current = null;\r\n  //     }\r\n  //   };\r\n  // }, []);\r\n\r\n  // const videoRef = useRef(null);\r\n  // useEffect(() => {\r\n  //   const video = videoRef.current;\r\n\r\n  //   const handleEnded = () => {\r\n  //     video.currentTime = 0; // Restart the video from the beginning\r\n  //     video.play(); // Start playing the video again\r\n  //   };\r\n\r\n  //   video.addEventListener('ended', handleEnded);\r\n\r\n  //   return () => {\r\n  //     video.removeEventListener('ended', handleEnded);\r\n  //   };\r\n  // }, []);\r\n  return (\r\n    //<> <video ref={videoRef} className=\"video-js\" /></>\r\n    // <> <video ref={videoRef}   className=\"video-js\" </video></>\r\n\r\n    <video\r\n      ref={videoRef}\r\n      className=\"video-js\"\r\n      id={`${\r\n        props.layout && props.layout === rotateMode\r\n          ? \"video-player-portrait\"\r\n          : \"\"\r\n      }`}\r\n      // id=\"video-player-portrait\"\r\n      autoPlay\r\n      muted\r\n      loop\r\n    >\r\n      <source src={props.src} type=\"video/mp4\" />\r\n    </video>\r\n  );\r\n};\r\n\r\nexport default WebVideoPlayer;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\editSelectedComposition.jsx",["1527","1528","1529","1530","1531"],"import { useCallback, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\r\nimport { BASE_URL } from \"../../utils/api\";\r\nimport ImageCroper from \"../components/cropImage\";\r\nimport getCroppedImg from \"../components/cropImage/cropImage\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nconst EditSelectedComposition = ({\r\n  composition,\r\n  setEditSelected,\r\n  updateViewType,\r\n}) => {\r\n  const getDefault = composition.fitToScreen\r\n    ? \"fitScreen\"\r\n    : composition.crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n  const [viewImage, setViewImage] = useState(getDefault);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [zoom, setZoom] = useState(\r\n    composition.crop ? composition.crop.zoom : 1\r\n  );\r\n\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(\r\n    composition.crop ? composition.crop : null\r\n  );\r\n  const handleUpload = async () => {\r\n    const data = {\r\n      ...croppedAreaPixels,\r\n      zoom: zoom,\r\n    };\r\n    let ImgUrl = \"\";\r\n    if (viewImage === \"crop\") {\r\n      const getData = await getCroppedImg(\r\n        `${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`,\r\n        croppedAreaPixels\r\n      );\r\n      ImgUrl = getData;\r\n    } else {\r\n      ImgUrl = composition.url;\r\n    }\r\n\r\n    updateViewType(data, viewImage, ImgUrl);\r\n    setEditSelected(null);\r\n  };\r\n\r\n  const handleOptionChange = (e) => {\r\n    setViewImage(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview\"\r\n      show={true}\r\n      size=\"xl\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setEditSelected(null)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"custom-container\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"viewImage\"\r\n              value=\"fitScreen\"\r\n              id=\"fitScreen\"\r\n              onChange={handleOptionChange}\r\n              defaultChecked={viewImage === \"fitScreen\"}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"fitScreen\">\r\n              Fit to Screen\r\n            </label>\r\n          </div>\r\n          <div className=\"form-check\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"viewImage\"\r\n              value=\"aspectRation\"\r\n              id=\"aspectRation\"\r\n              onChange={handleOptionChange}\r\n              defaultChecked={viewImage === \"aspectRation\"}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"aspectRation\">\r\n              Maintain Aspect Ratio\r\n            </label>\r\n          </div>\r\n          {composition.type !== \"video\" && (\r\n            <div className=\"form-check\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"radio\"\r\n                name=\"viewImage\"\r\n                value=\"crop\"\r\n                id=\"crop\"\r\n                onChange={handleOptionChange}\r\n                defaultChecked={viewImage === \"crop\"}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"crop\">\r\n                Crop\r\n              </label>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {composition && composition.type === \"image\" && (\r\n          <>\r\n            <div\r\n              className=\"basic-list-group image-preview-container media-content image-preview-editable\"\r\n              style={{\r\n                border: \"1px solid\",\r\n                marginTop: viewImage == \"crop\" ? \"0%\" : \"4%\",\r\n                height: viewImage == \"crop\" ? \"560px\" : \"560px\",\r\n              }}\r\n            >\r\n              {viewImage === \"crop\" && (\r\n                <>\r\n                <ImageCroper\r\n                  imgSrc={`${composition.url}`}\r\n                  zoom={zoom}\r\n                  setZoom={setZoom}\r\n                  rotation={rotation}\r\n                  setRotation={setRotation}\r\n                  croppedAreaPixels={croppedAreaPixels}\r\n                  setCroppedAreaPixels={setCroppedAreaPixels}\r\n                />\r\n                {/* <button onClick={(e) => {setRotation}}>Rotate</button> */}\r\n                </>\r\n              )}\r\n              {viewImage !== \"crop\" && (\r\n                <img\r\n                  className=\"webplayer-preview-img\"\r\n                  style={{\r\n                    objectFit: `${\r\n                      viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                    }`,\r\n                  }}\r\n                  src={`${BASE_URL}${composition.url}`}\r\n                  alt=\"media-img\"\r\n                />\r\n              )}\r\n            </div>{\" \"}\r\n            {viewImage === \"crop\" && (\r\n              <div className=\"controls\">\r\n                <input\r\n                  type=\"range\"\r\n                  value={zoom}\r\n                  min={1}\r\n                  max={3}\r\n                  step={0.1}\r\n                  aria-labelledby=\"Zoom\"\r\n                  onChange={(e) => {\r\n                    setZoom(e.target.value);\r\n                  }}\r\n                  className=\"zoom-range\"\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n        {composition && composition.type === \"video\" && (\r\n          <div\r\n            className={`basic-list-group image-preview-container media-content image-preview-editable ${\r\n              viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n            }`}\r\n            style={{ border: \"1px solid\", marginTop: \"15px\" }}\r\n          >\r\n            <VideoThumbnail\r\n              videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`}\r\n              thumbnailHandler={(thumbnail) => console.log(thumbnail)}\r\n              width={1280}\r\n              height={720}\r\n            />\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div className=\"loader-button-container\">\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            disabled={isLoading}\r\n            className={`btn btn-primary btn-block primary-btn`}\r\n            onClick={() => handleUpload()}\r\n          >\r\n            {isLoading ? <div className=\"loader\"></div> : \"Apply\"}\r\n          </Button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditSelectedComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionActions.jsx",["1532"],"import { useState } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport menuIcon from \"../../../../img/menu-icon.svg\";\r\nimport veiwDetailIcon from \"../../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../../img/tack-screenshot-icon.png\";\r\nimport edit from \"../../../../img/edit-composition.svg\";\r\nimport deleteIcon from \"../../../../img/delete-icon.png\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport DuplicateComposition from \"../../../modals/duplicateComposition\";\r\nimport { postComposition } from \"../../../../utils/api\";\r\nimport ViewDetails from \"../../../modals/layouts/viewDetails\";\r\nimport PublishMediaModal from \"../../../modals/PublishMediaModal\";\r\n\r\nconst CompositionActions = ({\r\n  composition,\r\n  //mutate,\r\n  setDeleteModal,\r\n  setSelected,\r\n  permission,\r\n  setIsRefresh,\r\n}) => {\r\n  const [duplicateModal, setDuplicateModal] = useState(false);\r\n  const [viewDetailsModal, setViewDetailsModal] = useState(false);\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const createComposition = async (name) => {\r\n    let setZone = [];\r\n\r\n    composition.zones.forEach((zone) => {\r\n      const setContent = [];\r\n\r\n      zone.content.forEach((content) => {\r\n        setContent.push({\r\n          url: content.url,\r\n          type: content.type,\r\n          maintainAspectRatio: content.maintainAspectRatio,\r\n          fitToScreen: content.fitToScreen,\r\n          crop: content.crop,\r\n          duration: content.duration,\r\n          // createdBy: composition.createdBy,\r\n        });\r\n      });\r\n\r\n      const data = {\r\n        name: zone.name,\r\n        zoneId: zone.zoneId,\r\n        content: setContent,\r\n      };\r\n      setZone.push(data);\r\n    });\r\n\r\n    const data = {\r\n      name: name,\r\n      layoutId: composition.layout._id,\r\n\r\n      zones: setZone,\r\n      duration: composition.duration,\r\n      referenceUrl: composition.referenceUrl,\r\n    };\r\n    //  console.log(data)\r\n    await postComposition(data);\r\n    //mutate();\r\n    setDuplicateModal(false);\r\n    setIsRefresh(true);\r\n  };\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <Dropdown className=\"dropdown-toggle-menu\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n              style={{ height: \"50px\" }}\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {/* View Detail */}\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            disabled={permission && !permission.permission.ASSETS.view}\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setViewDetailsModal(true);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={veiwDetailIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">View Details</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          {/* Assign Quickplay */}\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            disabled={permission && !permission.permission.ASSETS.edit}\r\n            onClick={() => {\r\n              setShowPublishPopUp(true);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={assignIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Assign Quickplay</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          {/* Edit */}\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            disabled={permission && !permission.permission.ASSETS.edit}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <Link to={`/composition/edit?id=${composition._id}`}>\r\n              <div className=\"d-flex\">\r\n                <div className=\"dropdown-list-icon\">\r\n                  <img\r\n                    className=\"dropdown-list-img img-fluid\"\r\n                    src={edit}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"dropdown-menu-list\">\r\n                  <span className=\"menu-heading\">Edit</span>\r\n                  <span className=\"menu-description\">\r\n                    Make changes to this composition\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </Dropdown.Item>\r\n          {/* Duplicate */}\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            disabled={permission && !permission.permission.ASSETS.add}\r\n          >\r\n            <div\r\n              className=\"d-flex\"\r\n              onClick={() => {\r\n                console.log(\"herer\");\r\n                setDuplicateModal(true);\r\n              }}\r\n            >\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Duplicate</span>\r\n                <span className=\"menu-description\">\r\n                  Create duplicate of your composition\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          {/* Delete */}\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setSelected(composition);\r\n              setDeleteModal(true);\r\n            }}\r\n            disabled={permission && !permission.permission.ASSETS.delete}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n                <span className=\"menu-description\">\r\n                  Permanently delete this composition\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {duplicateModal && (\r\n        <DuplicateComposition\r\n          setDuplicateModal={setDuplicateModal}\r\n          createComposition={createComposition}\r\n        />\r\n      )}\r\n      {viewDetailsModal && (\r\n        <ViewDetails\r\n          setViewDetailsModal={setViewDetailsModal}\r\n          composition={composition}\r\n        />\r\n      )}\r\n      {showPublishPopUp && (\r\n        <PublishMediaModal\r\n          selected={composition}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"composition\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CompositionActions;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\PeopleSpacePreview.jsx",["1533","1534","1535","1536","1537","1538"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport person from \"../../../img/Ellipse 154.png\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { handlePeopleSpace } from \"../../../utils/UtilsService\";\r\n\r\nexport default function PeopleSpacePreview({\r\n  setShowPreview,\r\n  showPreview,\r\n  data,\r\n}) {\r\n  console.log(\"sdsdada\", showPreview, data);\r\n  const history = useHistory();\r\n  const [previewData, setPreviewData] = useState(null);\r\n  useEffect(() => {\r\n    setPreviewData(handlePeopleSpace(data));\r\n  }, [data]);\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large`}\r\n        show={showPreview}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Preview</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowPreview(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"pb-4\">\r\n          {previewData ? previewData : \"No Data Found\"}\r\n          {/* <div className=\"row people-space text-center\">\r\n                    <div className=\"col-12 col-md-4\">\r\n                        <h2>Work Anniversery</h2>\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"text-center\">\r\n                                <img src={person} alt=\"person\" />\r\n                                <h3>Jennifer Winget</h3>\r\n                                <p>\r\n                                We are proud to have someone like you We are proud to have\r\n                                someone like you.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <img src={person} alt=\"person\" />\r\n                                <h3>Jennifer Winget</h3>\r\n                                <p>\r\n                                We are proud to have someone like you We are proud to have\r\n                                someone like you.\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                                <img src={person} alt=\"person\" />\r\n                                <h3>Jennifer Winget</h3>\r\n                                <p>\r\n                                We are proud to have someone like you We are proud to have\r\n                                someone like you.\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\EditTemplate.jsx",["1539","1540","1541","1542","1543"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport Switch from \"react-switch\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\nimport Slider from \"@mui/material/Slider\";\r\n\r\nconst EditTemplate = ({ setShowUrlApp, show, setSettingData, settingData }) => {\r\n  const fontOptions = [\r\n    { value: \"'Fira Sans', sans-serif\", label: \"Fira Sans\" },\r\n    { value: \"'Montserrat', sans-serif\", label: \"Montserrat\" },\r\n    { value: \"'Manrope', sans-serif\", label: \"Manrope\" },\r\n  ];\r\n\r\n  const [isTitle, setIsTitle] = useState(true);\r\n  const [titleColor, setTitleColor] = useState(settingData.titleColor);\r\n  const [nameColor, setNameColor] = useState(settingData.nameColor);\r\n  const [messageColor, setMessageColor] = useState(settingData.messageColor);\r\n  const [bgColor, setBgColor] = useState(settingData.bgColor);\r\n\r\n  const [titleStyle, setTitleStyle] = useState(settingData.titleStyle);\r\n  const [nameStyle, setNameStyle] = useState(settingData.nameStyle);\r\n  const [messageStyle, setMessageStyle] = useState(settingData.messageStyle);\r\n  const [bgStyle, setBgStyle] = useState(settingData.bgStyle);\r\n  const [duration, setDuration] = useState(settingData.duration);\r\n  const [bgOpacity, setBgOpacity] = useState(settingData.bgOpacity);\r\n\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n    const setting = {\r\n      isTitle,\r\n      titleColor,\r\n      nameColor,\r\n      messageColor,\r\n      titleStyle,\r\n      nameStyle,\r\n      messageStyle,\r\n      bgColor,\r\n      duration,\r\n      bgOpacity,\r\n    };\r\n    console.log(\"Setting\", setting);\r\n    setSettingData(setting);\r\n    setShowUrlApp(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Update Content\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"pt-0\">\r\n          <form\r\n          // onSubmit={handleSubmit}\r\n          >\r\n            <div>\r\n              <div className=\" d-flex align-items-center justify-content-between mt-3\">\r\n                <div className=\"d-flex align-items-center justify-content-between\">\r\n                  <strong>\r\n                    <label className=\"mb-0 mr-3\">Title</label>\r\n                  </strong>\r\n                  <Switch\r\n                    onColor=\"#B3005E\"\r\n                    onChange={setIsTitle}\r\n                    checked={isTitle}\r\n                    name=\"isTitle\"\r\n                    id=\"isTitle\"\r\n                    className=\"react-switch\"\r\n                    required={true}\r\n                  />\r\n                </div>\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <strong>\r\n                      <label className=\"mb-0 mr-3\">Slide Duration</label>\r\n                    </strong>\r\n                  </div>\r\n                  <div>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"  form-control \"\r\n                      placeholder=\" Name\"\r\n                      required\r\n                      name=\"duration\"\r\n                      id=\"duration\"\r\n                      value={duration}\r\n                      onChange={(e) => setDuration(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-items-center justify-content-between mt-3\">\r\n                <div>\r\n                  <label className=\"mb-0\">Title Font</label>\r\n                </div>\r\n                <div className=\"d-flex align-items-center \">\r\n                  <div\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      marginRight: \"10px\",\r\n                      width: \"120px\",\r\n                    }}\r\n                  >\r\n                    <input\r\n                      type=\"color\"\r\n                      name=\"titleColor\"\r\n                      onChange={(e) => setTitleColor(e.target.value)}\r\n                      id=\"titleColor\"\r\n                      value={titleColor}\r\n                      className=\"  form-control \"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div style={{ width: \"150px\" }}>\r\n                    <Select\r\n                      value={titleStyle}\r\n                      onChange={setTitleStyle}\r\n                      placeholder=\"English\"\r\n                      options={fontOptions}\r\n                      className=\"app-option\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <strong>\r\n                <label className=\"mt-4\">Body</label>\r\n              </strong>\r\n\r\n              <div className=\"d-flex align-items-center justify-content-between mt-3\">\r\n                <div>\r\n                  <label className=\"mb-0\">Name</label>\r\n                </div>\r\n                <div className=\"d-flex align-items-center \">\r\n                  <div\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      marginRight: \"10px\",\r\n                      width: \"120px\",\r\n                    }}\r\n                  >\r\n                    <input\r\n                      type=\"color\"\r\n                      name=\"nameColor\"\r\n                      id=\"nameColor\"\r\n                      onChange={(e) => setNameColor(e.target.value)}\r\n                      value={nameColor}\r\n                      className=\"  form-control \"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div style={{ width: \"150px\" }}>\r\n                    <Select\r\n                      value={nameStyle}\r\n                      onChange={setNameStyle}\r\n                      placeholder=\"English\"\r\n                      options={fontOptions}\r\n                      className=\"app-option\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-items-center justify-content-between mt-3\">\r\n                <div>\r\n                  <label className=\"mb-0\">Message</label>\r\n                </div>\r\n                <div className=\"d-flex align-items-center \">\r\n                  <div\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      marginRight: \"10px\",\r\n                      width: \"120px\",\r\n                    }}\r\n                  >\r\n                    <input\r\n                      type=\"color\"\r\n                      name=\"messageColor\"\r\n                      id=\"messageColor\"\r\n                      onChange={(e) => setMessageColor(e.target.value)}\r\n                      value={messageColor}\r\n                      className=\"  form-control \"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div style={{ width: \"150px\" }}>\r\n                    <Select\r\n                      value={messageStyle}\r\n                      onChange={setMessageStyle}\r\n                      placeholder=\"English\"\r\n                      options={fontOptions}\r\n                      className=\"app-option\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-items-center justify-content-between mt-3\">\r\n                <div>\r\n                  <label className=\"mb-0\">Background</label>\r\n                </div>\r\n                <div className=\"d-flex align-items-center \">\r\n                  <div style={{ width: \"120px\" }}>\r\n                    <input\r\n                      type=\"color\"\r\n                      name=\"bgColor\"\r\n                      id=\"bgColor\"\r\n                      onChange={(e) => setBgColor(e.target.value)}\r\n                      value={bgColor}\r\n                      className=\"  form-control \"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  {/* <div\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      width: \"150px\",\r\n                    }}\r\n                  >\r\n                    <Select\r\n                      value={bgStyle}\r\n                      onChange={setBgStyle}\r\n                      placeholder=\"English\"\r\n                      options={fontOptions}\r\n                      className=\"app-option\"\r\n                    />\r\n                  </div> */}\r\n                </div>\r\n              </div>\r\n              <div className=\"d-flex align-items-center  justify-content-between mt-3\">\r\n                <div>\r\n                  <label className=\"mb-0\">Background Opacity</label>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    marginLeft: \"10px\",\r\n                    marginRight: \"10px\",\r\n                    width: \"150px\",\r\n                  }}\r\n                  className=\"d-flex align-items-center\"\r\n                >\r\n                  <Slider\r\n                    size=\"small\"\r\n                    value={bgOpacity}\r\n                    onChange={(e) => setBgOpacity(e.target.value)}\r\n                    aria-label=\"Small\"\r\n                    valueLabelDisplay=\"auto\"\r\n                  />\r\n                  <p className=\"mb-0 ml-3\">{bgOpacity}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn\"\r\n            onClick={(e) => handleUpdate(e)}\r\n          >\r\n            Update\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditTemplate;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\TemplateAddContent.jsx",["1544","1545","1546","1547","1548"],"import React, {useEffect, useState} from 'react';\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\n\r\nconst TemplateAddContent = ({ setShowUrlApp, show, setSlides, slides,editItem, setEditItem, slideIndex }) => {\r\n  console.log(\"editing\",editItem);\r\n  const [name, setName] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState(\"\");\r\n  const [slideId, setSlideId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"eeee\", editItem)\r\n    if(editItem && editItem !== null){\r\n      console.log(\"editIte\", editItem)\r\n      setSlideId(editItem.id);\r\n      setName(editItem.name);\r\n      setMessage(editItem.message);\r\n    }else{\r\n      setSlideId(null);\r\n      setName(\"\");\r\n      setMessage(\"\");\r\n    }\r\n  },[editItem, slideId])\r\n\r\n  const addSlides = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"title\",name, message)\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if (name == \"\" || name == null) {\r\n      setErr(true);\r\n      setErrorMessage(\"Name is required\");\r\n      return;\r\n    }\r\n    if (message == \"\" || message == null) {\r\n      setErr(true);\r\n      setErrorMessage(\"Message is required\");\r\n      return;\r\n    }\r\n    var newArr = slides;\r\n    if(editItem){\r\n      console.log(slideId)\r\n      newArr[slideId].name    = name;\r\n      newArr[slideId].message = message\r\n    }else{\r\n      newArr = [\r\n          ...slides.slice(0, slideIndex+1),\r\n          {name,message},\r\n          ...slides.slice(slideIndex+1)\r\n      ];\r\n    }\r\n    setSlides(newArr);\r\n    setEditItem(null)\r\n    setShowUrlApp(false);\r\n    setMessage(\"\");\r\n    setName(\"\");\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"md\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Add Content\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"pt-0\">\r\n          <p>Enter content you need to add in your template</p>\r\n          {\r\n            err && errMessage ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''\r\n          }\r\n          <form\r\n          // onSubmit={handleSubmit}\r\n          >\r\n            <div>\r\n              <strong>\r\n                <label>Name</label>\r\n              </strong>\r\n\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                id=\"name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n                className=\"  form-control \"\r\n                placeholder=\"Give a name\"\r\n                required\r\n              />\r\n              <strong>\r\n                <label className=\"mt-3\">Message</label>\r\n              </strong>\r\n\r\n              <textarea\r\n                type=\"text\"\r\n                name=\"message\"\r\n                id=\"message\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)}\r\n                className=\"form-control\"\r\n                rows={5}\r\n                placeholder=\"Eg. Hope this year be full of colors\"\r\n              ></textarea>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn\"\r\n            onClick={(e) => {addSlides(e)}}\r\n          >\r\n            Add Content\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TemplateAddContent;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\index.jsx",["1549","1550","1551"],"import React, { useState, useCallback } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Cropper from 'react-easy-crop'\r\n\r\nimport getCroppedImg from \"./cropImage\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\n\r\nconst ImageCroper = ({\r\n  imgSrc,\r\n  zoom,\r\n  rotation,\r\n  setRotation,\r\n  setZoom,\r\n  setCroppedAreaPixels,\r\n  croppedAreaPixels,\r\n}) => {\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  return (\r\n    <Cropper\r\n      image={`${BASE_URL}${imgSrc}`}\r\n      crop={crop}\r\n      zoom={zoom}\r\n      rotation={rotation}\r\n      aspect={16 / 9}\r\n      onCropChange={setCrop}\r\n      onCropComplete={onCropComplete}\r\n      onZoomChange={setZoom}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImageCroper;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\duplicateComposition.jsx",["1552","1553"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { useState } from \"react\";\r\n\r\nconst DuplicateComposition = ({\r\n  setDuplicateModal,\r\n  createComposition,\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  return (\r\n    \r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Duplicate</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setDuplicateModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"add-screen-paragraph\">\r\n          <p>The Composition will be copied with all it's properties. Just change the contents and play.</p>\r\n        </div>\r\n\r\n        <Row>\r\n        <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\" style={{color: \"#1A1A1A\", fontWeight:\"700\"}}>\r\n            New Composition Name\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                value={name}\r\n                onChange={(event) => {\r\n                  setName(event.target.value);\r\n                }}\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name for new copy\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              variant=\"outline-light\"\r\n              onClick={() => setDuplicateModal(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() =>{\r\n                if(name.length){\r\n                  createComposition(name)\r\n                }\r\n              }}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DuplicateComposition;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\modals\\layouts\\viewDetails.jsx",["1554"],"import { Button, Modal, Row, Col, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\n\r\nimport Rectangle from \"../../../img/Rectangle.png\";\r\n\r\nimport \"../../components/Table.css\";\r\nimport layoutSelected from \"../../../img/layout-select-img.png\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nconst ViewDetails = ({ setViewDetailsModal, composition }) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Composition Details</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setViewDetailsModal(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <div>\r\n            <div className=\" d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              <img className=\"\" src={Rectangle} alt=\"upload-img\" />\r\n            </div>\r\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              Duration : {composition.duration} sec\r\n            </div>\r\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              {composition.layout.zones.map((zone) => {\r\n                return (\r\n                  <span variant=\"\" type=\"button\" className=\" zoneName\">\r\n                    {zone.name}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n            <hr className=\"new1\" />\r\n            <Table responsive className=\"custom-table mt-3\">\r\n              <tbody>\r\n              {composition.zones[0].content.map((content, index) => {\r\n                return (\r\n                    <tr>\r\n                    <td>{index + 1}.</td>\r\n                    <td>\r\n                    <span className=\"td-content d-flex name-td-content\">\r\n                      <span className={`name-img mr-2  ${content.type === \"video\" && \"videotableName\"}`}>\r\n                      {content.type === \"image\" && <img\r\n                          className=\"media-img img-fluid\"\r\n                          src={`${BASE_URL}${content.url}`}\r\n                          alt=\"media-img\"\r\n                        />}\r\n                         {content.type === \"video\" && content?.duration.toFixed(0)/60}\r\n                      </span>\r\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                        <strong>{content.url.split(\"/\")[content.url.split(\"/\").length -1]}</strong>\r\n                        {/* <span>{content.createdBy}</span> */}\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <span className=\"my-phone-tag  ml-1\">{(content?.duration).toFixed(0)} Sec</span>\r\n                  </td>\r\n                </tr>\r\n                )\r\n              })}\r\n\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => {\r\n                  setViewDetailsModal(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Link to={`/composition/edit?id=${composition._id}`}>\r\n            <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n              >\r\n                Edit Details\r\n              </Button>\r\n            </Link>\r\n              \r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewDetails;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\Clock.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\Footer.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\main.jsx",["1555","1556","1557","1558","1559","1560"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  addScreenCode,\r\n  BASE_URL,\r\n  getCompositionById,\r\n} from \"../../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { io } from \"socket.io-client\";\r\nimport WebVideoPlayer from \"./WebVideoPlayer\";\r\nimport CompositionPlayer from \"./compositionPlayer\";\r\nimport useSWR from \"swr\";\r\nconst WebMain = ({ id, handleAddClass, onFullScreen }) => {\r\n  const [media, setMedia] = useState(\"\");\r\n  const [code, seCode] = useState(\"\");\r\n  const [contentType, setContentType] = useState(\"\");\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const initiaload = useRef(true);\r\n  // const [timeout, setApiTimeout] = useState(\"\");\r\n  // useEffect(() => {\r\n  //   console.log(contentType, \"contentType check inside main.jsx\");\r\n  // });\r\n  const getScreenCode = async () => {\r\n    let timeoutTimer;\r\n    const getContent = await addScreenCode(id);\r\n    setIsVerified(getContent?.isVerified);\r\n    if (getContent.isVerified) {\r\n      if (getContent?.content.length) {\r\n        const getMedia =\r\n          getContent?.content[getContent.content.length - 1].media;\r\n        const mediaType =\r\n          getContent?.content[getContent.content.length - 1].type;\r\n        if (mediaType === \"composition\") {\r\n          setMedia(getMedia);\r\n          setContentType(\"composition\");\r\n        } else {\r\n          setMedia(`${BASE_URL}${getMedia.title}`);\r\n          setContentType(getMedia.type);\r\n          clearTimeout(timeoutTimer);\r\n          timeoutTimer = setTimeout(() => {\r\n            console.log(\"normal timeout\");\r\n            getScreenCode();\r\n          }, 6000);\r\n        }\r\n      } else {\r\n        setContentType(\"default_media\");\r\n        setMedia(getContent.defaultComposition.media);\r\n      }\r\n    } else {\r\n      setContentType(\"code\");\r\n      seCode(getContent.deviceCode);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!isVerified) {\r\n      const interval = setInterval(() => {\r\n        getScreenCode();\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(interval); // Clear the interval when component unmounts\r\n      };\r\n    }\r\n  }, [isVerified]);\r\n  //const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\r\n  useEffect(() => {\r\n    // console.log(\"sdasd\");\r\n    const socket = io(BASE_URL, {\r\n      query: { deviceToken: id },\r\n      autoConnect: true,\r\n      transports: [\"websocket\"],\r\n      secure: true,\r\n    });\r\n    //console.log(\"socket\",socket)\r\n    getScreenCode();\r\n    // no-op if the socket is already connected\r\n\r\n    socket.connect();\r\n\r\n    function onReceiveContent(value) {\r\n      console.log(value, \"socket data\");\r\n      if (initiaload.current === true) {\r\n        initiaload.current = false;\r\n      } else {\r\n        //  setContentType(null);\r\n        getScreenCode();\r\n      }\r\n    }\r\n    function onDisconnectDevice(value) {\r\n      console.log(\"DisConnect\");\r\n      setContentType(null);\r\n      getScreenCode();\r\n    }\r\n    socket.on(\"disconnectDevice\", onDisconnectDevice);\r\n    socket.on(\"receiveContent\", onReceiveContent);\r\n    socket.on(\"receiveComposition\", onReceiveContent);\r\n    return () => {\r\n      socket.disconnect();\r\n      socket.off(\"receiveContent\", onReceiveContent);\r\n    };\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {\" \"}\r\n        <button\r\n          id=\"Fullscreen\"\r\n          onClick={() => onFullScreen()}\r\n          style={{ zIndex: 10 }}\r\n        >\r\n          <div className=\"full-text\">\r\n            <div className=\"sec-block\">\r\n              {\" \"}\r\n              <i className=\"fa fa-expand\"></i>\r\n              <p>View Full Screen</p>\r\n            </div>\r\n          </div>\r\n        </button>\r\n      </div>\r\n      {\r\n        <>\r\n          {contentType === \"code\" && (\r\n            <>\r\n              <div className=\"basic-list-group \">\r\n                <div className=\"main-block\">\r\n                  <div className=\"registration-block\">\r\n                    <p className=\"registration-title\">\r\n                      Screen Registration Code{\" \"}\r\n                    </p>\r\n                    <p className=\"code\">{code}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"webrowerTextSection\">\r\n                  <div className=\"how-to-register\">\r\n                    How to register this screen ?\r\n                  </div>\r\n                  <div className=\"guidelines-login\">\r\n                    1. Login to on your internet browser{\" \"}\r\n                  </div>\r\n                  <div className=\"guidelines-login\">\r\n                    2. Go to 'Screen' section &gt; Click on{\" \"}\r\n                    <Link>\r\n                      <span className=\"white-color\">'+Add Screen</span>'\r\n                    </Link>{\" \"}\r\n                    &gt; Enter above{\" \"}\r\n                    <Link>\r\n                      <span className=\"white-color\">\r\n                        Screen Registration Code\r\n                      </span>\r\n                    </Link>{\" \"}\r\n                    &gt; Click on{\" \"}\r\n                    <Link>\r\n                      <span className=\"white-color\">'Next'</span>\r\n                    </Link>\r\n                  </div>\r\n\r\n                  <div className=\"guidelines-login\">\r\n                    3. Enter screen name and other details &gt; Click on\r\n                    <Link>\r\n                      <span className=\"white-color\"> 'Register Screen'</span>\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"console-reg\" id=\"consoleReg\" style={{ zIndex: 10 }}>\r\n              <p>\r\n                Copy paste above Screen Registration Code in console{\" \"}\r\n                <em className=\"ti-arrow-circle-up\"></em>\r\n              </p>\r\n              </div>\r\n            </>\r\n          )}\r\n          {contentType !== null && contentType === \"image\" && (\r\n            <div className=\"basic-list-group image-preview-container media-content \">\r\n              <img\r\n                className=\"webplayer-preview-img\"\r\n                src={media}\r\n                alt=\"media-img\"\r\n              />\r\n            </div>\r\n          )}\r\n          {contentType !== null && contentType === \"image\" && (\r\n            <div className=\"basic-list-group image-preview-container media-content \">\r\n              <img\r\n                className=\"webplayer-preview-img\"\r\n                src={media}\r\n                alt=\"media-img\"\r\n              />\r\n            </div>\r\n          )}\r\n          {contentType !== null && contentType === \"video\" && (\r\n            <div className=\"basic-list-group video-container media-content\">\r\n              <WebVideoPlayer src={media}></WebVideoPlayer>\r\n              {/* <video\r\n                title=\"video\"\r\n                width=\"100%\"\r\n                height=\"440px\"\r\n                src={}\r\n              ></video> */}\r\n            </div>\r\n          )}\r\n          {contentType === \"default_media\" && (\r\n            <>\r\n              <GetCompositionPlayer\r\n                composition={media}\r\n                handleAddClass={handleAddClass}\r\n              />\r\n            </>\r\n            // <div className=\"basic-list-group image-preview-container media-content\">\r\n            //   <img\r\n            //     className=\"webplayer-preview-img\"\r\n            //     src={defaultMediaUrl}\r\n            //     alt=\"media-img\"\r\n            //   />\r\n            // </div>\r\n          )}\r\n\r\n          {contentType !== null && contentType === \"composition\" && (\r\n            <GetCompositionPlayer\r\n              composition={media}\r\n              handleAddClass={handleAddClass}\r\n            />\r\n          )}\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebMain;\r\n\r\nconst GetCompositionPlayer = ({ composition, handleAddClass }) => {\r\n  // const fetcher = (url) => getCompositionById(url);\r\n  // const { data: composition  } = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\r\n\r\n  useEffect(() => {\r\n    if (composition && composition?.layout?.screenType) {\r\n      handleAddClass(composition.layout.screenType);\r\n    }\r\n  }, [composition]);\r\n  return (\r\n    <>\r\n      {composition && composition.referenceUrl && (\r\n        <CompositionPlayer\r\n          contents={composition}\r\n          content={composition.zones[0].content}\r\n          referenceUrl={composition.referenceUrl}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\index.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\compositionPlayer.jsx",["1561","1562","1563","1564","1565","1566","1567"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Zone1 from \"./Zone1\";\r\nimport Zone2 from \"./Zone2\";\r\nimport Zone3 from \"./Zone3\";\r\nconst CompositionPlayer = ({ contents, content, referenceUrl }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [current1Index, setCurrent1Index] = useState(0);\r\n  const [current2Index, setCurrent2Index] = useState(0);\r\n  const timeout1Ref = useRef(\"\");\r\n  const timeout2Ref = useRef(\"\");\r\n  const timeoutRef = useRef(\"\");\r\n  useEffect(() => {\r\n    if (contents && contents.zones.length == 1) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration =\r\n          contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n    } else if (contents && contents.zones.length == 2) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration =\r\n          contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contents.zones[1].content[current1Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[1].content[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contents.zones[1].content.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    } else if (contents && contents.zones.length == 3) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration = contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          console.log(currentIndex, contents.zones[0].content)\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex(currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contents.zones[1].content[current1Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[1].content[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contents.zones[1].content.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index(current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n      if (contents.zones[2].content[current2Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[2].content[current2Index].duration * 1000;\r\n        timeout2Ref.current = setTimeout(() => {\r\n          if (current2Index === contents.zones[2].content.length - 1) {\r\n            setCurrent2Index(0);\r\n          } else {\r\n            setCurrent2Index(current2Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    }\r\n    console.log(`%c${currentIndex}`, \"font-size:20px;color:red\");\r\n    return () => {clearTimeout(timeoutRef.current);clearTimeout(timeout1Ref.current);clearTimeout(timeout2Ref.current)};\r\n  }, [currentIndex, current1Index, current2Index]);\r\n  const viewImage = content[currentIndex]?.fitToScreen\r\n    ? \"fitScreen\"\r\n    : content[currentIndex]?.crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {contents && contents.zones.length == 1 ? (\r\n        <Zone1\r\n          contents={contents}\r\n          currentIndex={currentIndex}\r\n          current1Index={current1Index}\r\n          current2Index={current2Index}\r\n          viewImage={viewImage}\r\n        />\r\n      ) : contents.zones.length == 2 ? (\r\n        <Zone2\r\n          contents={contents}\r\n          currentIndex={currentIndex}\r\n          current1Index={current1Index}\r\n          current2Index={current2Index}\r\n          viewImage={viewImage}\r\n        />\r\n      ) : contents.zones.length == 3 ? (\r\n        <Zone3\r\n          contents={contents}\r\n          currentIndex={currentIndex}\r\n          current1Index={current1Index}\r\n          current2Index={current2Index}\r\n          viewImage={viewImage}\r\n        />\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompositionPlayer;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Header.js",["1568","1569","1570"],"import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\n/// Image\r\nimport profile from \"../../../images/profile/pic1.jpg\";\r\nimport avatar from \"../../../images/avatar/1.jpg\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport LogoutPage from './Logout';\r\n\r\nconst Header = ({ onNote }) => {\r\n  const onFullScreen = () => {\r\n    var elem = document.documentElement;\r\n    if (elem.requestFullscreen) {\r\n      elem.requestFullscreen();\r\n    } else if (elem.webkitRequestFullscreen) {\r\n      elem.webkitRequestFullscreen();\r\n    } else if (elem.msRequestFullscreen) {\r\n      elem.msRequestFullscreen();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"header header-custom\" style={{ zIndex: \"11\" }}>\r\n      <div className=\"header-content\">\r\n        <nav className=\"navbar navbar-expand\">\r\n          <div className=\"collapse navbar-collapse justify-content-between\">\r\n            <div className=\"header-left\">\r\n\r\n            </div>\r\n            <ul className=\"navbar-nav header-right\">\r\n\r\n              <Dropdown as=\"li\" className=\"nav-item dropdown header-profile\">\r\n                <Dropdown.Toggle\r\n                  variant=\"\"\r\n                  as=\"a\"\r\n                  className=\"i-false c-pointer nav-link\"\r\n                  to=\"\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                >\r\n                  <div className=\"header-info\">\r\n                    <span>\r\n                      Hello, <strong>Samuel</strong>\r\n                    </span>\r\n                  </div>\r\n                  <img src={profile} width={20} alt=\"\" />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu\r\n                  align=\"right\"\r\n                  className=\"dropdown-menu dropdown-menu-right\"\r\n                >\r\n                  <Link to=\"/app-profile\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-user1\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-primary\"\r\n                      width={18}\r\n                      height={18}\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\r\n                      <circle cx={12} cy={7} r={4} />\r\n                    </svg>\r\n                    <span className=\"ml-2\">Profile </span>\r\n                  </Link>\r\n                  <Link to=\"/email-inbox\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-inbox\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-success\"\r\n                      width={18}\r\n                      height={18}\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\" />\r\n                      <polyline points=\"22,6 12,13 2,6\" />\r\n                    </svg>\r\n                    <span className=\"ml-2\">Inbox </span>\r\n                  </Link>\r\n                  <LogoutPage />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\NavHader.js",["1571"],"import React, { useState } from \"react\";\r\n\r\n/// React router dom\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/// images\r\nimport logo from \"../../../img/logo.png\";\r\nimport logo1 from \"../../../img/Logo11.svg\";\r\n\r\nconst NavHader = () => {\r\n  const [toggle, setToggle] = useState(false);\r\n  return (\r\n    <div className=\"nav-header navbar-header-custom\" style={{ zIndex: \"12\" }}>\r\n      <Link to=\"/\" className=\"brand-logo\">\r\n        <img className=\"sidebar-logo\" src={logo1} alt=\"\" />\r\n      </Link>\r\n\r\n      <div\r\n        className=\"nav-control nav-hamburger-menu\"\r\n        onClick={() => setToggle(!toggle)}\r\n      >\r\n        <div className={`hamburger ${toggle ? \"is-active\" : \"\"}`}>\r\n          <span className=\"line\"></span>\r\n          <span className=\"line\"></span>\r\n          <span className=\"line\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavHader;\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\SideBar.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\ChatBox.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Logout.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Alerts.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Notes.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Chat.js",[],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone3.jsx",["1572","1573","1574","1575"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone1.jsx",["1576","1577","1578","1579"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone2.jsx",["1580","1581","1582"],"E:\\projects\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\MfaPage.jsx",["1583","1584","1585","1586"],"import React, { useState } from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { logout } from \"../../../store/actions/AuthActions\";\r\nimport { isAuthenticated } from \"../../../store/selectors/AuthSelectors\";\r\nimport Switch from \"react-switch\";\r\nimport { verification2FaAuth } from '../../../store/actions/AuthActions';\r\nimport { mfaEnablePost } from '../../../utils/api';\r\nimport base32Decode from 'base32-decode';\r\nimport base32Encode from 'base32-encode';\r\nimport util from 'util';\r\nimport crypto from 'crypto';\r\n\r\n\r\nfunction MfaPage(props){\r\n    const dispatch = useDispatch();\r\n    const [mfaEnabled, setMfaEnabled] = useState(props.auth.vendor.mfaEnabled ? true : false);\r\n    const handleMfa = async (e) => {\r\n        setMfaEnabled(!mfaEnabled);\r\n        //makeApi for MFA\r\n        //await mfaEnablePost(mfaEnabled);\r\n        const buffer = await util.promisify(crypto.randomBytes)(14);\r\n        const mfaSecret = props.auth.vendor.mfa ? props.auth.vendor.mfa : base32Encode(buffer, 'RFC4648', { padding: false })\r\n\r\n        const payload = {\r\n            mfa:mfaSecret,\r\n            mfaEnabled:!mfaEnabled\r\n        }\r\n        //console.log('pa',payload);\r\n        dispatch(verification2FaAuth(payload, props.history));\r\n    }\r\n    return(\r\n        <div className=\"align-items-center justify-content-between\">\r\n            <div className=\"d-flex align-items-center mb-4 ml-4\">\r\n                <label className=\"mb-0 mr-3 text-white\">MFA Enabled</label>\r\n                <Switch\r\n                onColor=\"#B3005E\"\r\n                onChange={(e) => {\r\n                    handleMfa(e);\r\n                }}\r\n                checked={mfaEnabled}\r\n                name=\"deviceTime\"\r\n                id=\"deviceTime\"\r\n                className=\"react-switch\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: isAuthenticated(state),\r\n        auth:state.auth.auth\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(MfaPage));\r\n","E:\\projects\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\MsgBox.js",[],{"ruleId":"1587","replacedBy":"1588"},{"ruleId":"1589","replacedBy":"1590"},{"ruleId":"1591","severity":1,"message":"1592","line":1,"column":37,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":45},{"ruleId":"1591","severity":1,"message":"1595","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":12},{"ruleId":"1591","severity":1,"message":"1596","line":16,"column":8,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":16},{"ruleId":"1597","severity":1,"message":"1598","line":41,"column":8,"nodeType":"1599","endLine":41,"endColumn":33,"suggestions":"1600"},{"ruleId":"1591","severity":1,"message":"1601","line":11,"column":10,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1602","line":11,"column":15,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1603","line":11,"column":20,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1604","line":12,"column":10,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":27},{"ruleId":"1591","severity":1,"message":"1605","line":12,"column":29,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":43},{"ruleId":"1591","severity":1,"message":"1606","line":18,"column":8,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1607","line":21,"column":9,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1608","line":24,"column":16,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1609","line":52,"column":9,"nodeType":"1593","messageId":"1594","endLine":52,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1610","line":77,"column":10,"nodeType":"1593","messageId":"1594","endLine":77,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1611","line":77,"column":20,"nodeType":"1593","messageId":"1594","endLine":77,"endColumn":31},{"ruleId":"1591","severity":1,"message":"1612","line":78,"column":10,"nodeType":"1593","messageId":"1594","endLine":78,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1613","line":78,"column":19,"nodeType":"1593","messageId":"1594","endLine":78,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1614","line":80,"column":9,"nodeType":"1593","messageId":"1594","endLine":80,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1615","line":92,"column":9,"nodeType":"1593","messageId":"1594","endLine":92,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1616","line":14,"column":5,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1617","line":30,"column":8,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1618","line":42,"column":8,"nodeType":"1593","messageId":"1594","endLine":42,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1619","line":46,"column":8,"nodeType":"1593","messageId":"1594","endLine":46,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1620","line":11,"column":3,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1621","line":14,"column":10,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1606","line":17,"column":8,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1622","line":18,"column":10,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1623","line":29,"column":10,"nodeType":"1593","messageId":"1594","endLine":29,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1624","line":30,"column":10,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1625","line":30,"column":23,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":37},{"ruleId":"1591","severity":1,"message":"1626","line":31,"column":18,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":27},{"ruleId":"1591","severity":1,"message":"1627","line":38,"column":12,"nodeType":"1593","messageId":"1594","endLine":38,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1628","line":85,"column":9,"nodeType":"1593","messageId":"1594","endLine":85,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1629","line":90,"column":9,"nodeType":"1593","messageId":"1594","endLine":90,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1630","line":118,"column":9,"nodeType":"1593","messageId":"1594","endLine":118,"endColumn":16},{"ruleId":"1597","severity":1,"message":"1631","line":162,"column":6,"nodeType":"1599","endLine":162,"endColumn":8,"suggestions":"1632"},{"ruleId":"1633","severity":1,"message":"1634","line":187,"column":19,"nodeType":"1635","endLine":187,"endColumn":60},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1637","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1638","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1639","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":14},{"ruleId":"1597","severity":1,"message":"1640","line":45,"column":6,"nodeType":"1599","endLine":45,"endColumn":17,"suggestions":"1641"},{"ruleId":"1591","severity":1,"message":"1642","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1643","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1644","line":8,"column":25,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1645","line":24,"column":8,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1646","line":25,"column":8,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1647","line":26,"column":8,"nodeType":"1593","messageId":"1594","endLine":26,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1648","line":27,"column":8,"nodeType":"1593","messageId":"1594","endLine":27,"endColumn":12},{"ruleId":"1591","severity":1,"message":"1649","line":54,"column":10,"nodeType":"1593","messageId":"1594","endLine":54,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1650","line":54,"column":26,"nodeType":"1593","messageId":"1594","endLine":54,"endColumn":43},{"ruleId":"1597","severity":1,"message":"1651","line":113,"column":6,"nodeType":"1599","endLine":113,"endColumn":30,"suggestions":"1652"},{"ruleId":"1591","severity":1,"message":"1653","line":132,"column":9,"nodeType":"1593","messageId":"1594","endLine":132,"endColumn":27},{"ruleId":"1591","severity":1,"message":"1654","line":137,"column":9,"nodeType":"1593","messageId":"1594","endLine":137,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1655","line":142,"column":12,"nodeType":"1593","messageId":"1594","endLine":142,"endColumn":42},{"ruleId":"1591","severity":1,"message":"1656","line":177,"column":12,"nodeType":"1593","messageId":"1594","endLine":177,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":187,"column":14,"nodeType":"1659","messageId":"1660","endLine":187,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":221,"column":14,"nodeType":"1659","messageId":"1660","endLine":221,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1661","line":2,"column":5,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1662","line":3,"column":5,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1663","line":5,"column":5,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1664","line":9,"column":92,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":107},{"ruleId":"1657","severity":1,"message":"1665","line":92,"column":20,"nodeType":"1659","messageId":"1660","endLine":92,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1665","line":344,"column":18,"nodeType":"1659","messageId":"1660","endLine":344,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":434,"column":18,"nodeType":"1659","messageId":"1660","endLine":434,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":437,"column":18,"nodeType":"1659","messageId":"1660","endLine":437,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":440,"column":18,"nodeType":"1659","messageId":"1660","endLine":440,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1666","line":679,"column":9,"nodeType":"1593","messageId":"1594","endLine":679,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1668","line":1,"column":28,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":34},{"ruleId":"1591","severity":1,"message":"1669","line":11,"column":3,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1670","line":13,"column":3,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1644","line":21,"column":17,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1671","line":26,"column":10,"nodeType":"1593","messageId":"1594","endLine":26,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1672","line":28,"column":7,"nodeType":"1593","messageId":"1594","endLine":28,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1673","line":37,"column":10,"nodeType":"1593","messageId":"1594","endLine":37,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1674","line":37,"column":20,"nodeType":"1593","messageId":"1594","endLine":37,"endColumn":31},{"ruleId":"1591","severity":1,"message":"1675","line":44,"column":33,"nodeType":"1593","messageId":"1594","endLine":44,"endColumn":39},{"ruleId":"1597","severity":1,"message":"1676","line":118,"column":6,"nodeType":"1599","endLine":118,"endColumn":13,"suggestions":"1677"},{"ruleId":"1591","severity":1,"message":"1678","line":123,"column":11,"nodeType":"1593","messageId":"1594","endLine":123,"endColumn":13},{"ruleId":"1657","severity":1,"message":"1665","line":124,"column":55,"nodeType":"1659","messageId":"1660","endLine":124,"endColumn":57},{"ruleId":"1657","severity":1,"message":"1658","line":126,"column":22,"nodeType":"1659","messageId":"1660","endLine":126,"endColumn":24},{"ruleId":"1679","severity":1,"message":"1680","line":130,"column":13,"nodeType":"1681","messageId":"1682","endLine":130,"endColumn":59,"fix":"1683"},{"ruleId":"1679","severity":1,"message":"1684","line":131,"column":13,"nodeType":"1681","messageId":"1682","endLine":131,"endColumn":77,"fix":"1685"},{"ruleId":"1679","severity":1,"message":"1686","line":132,"column":13,"nodeType":"1681","messageId":"1682","endLine":132,"endColumn":75,"fix":"1687"},{"ruleId":"1679","severity":1,"message":"1680","line":136,"column":13,"nodeType":"1681","messageId":"1682","endLine":136,"endColumn":59,"fix":"1688"},{"ruleId":"1657","severity":1,"message":"1658","line":157,"column":24,"nodeType":"1659","messageId":"1660","endLine":157,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":162,"column":26,"nodeType":"1659","messageId":"1660","endLine":162,"endColumn":28},{"ruleId":"1679","severity":1,"message":"1680","line":164,"column":15,"nodeType":"1681","messageId":"1682","endLine":164,"endColumn":37,"fix":"1689"},{"ruleId":"1679","severity":1,"message":"1684","line":165,"column":15,"nodeType":"1681","messageId":"1682","endLine":165,"endColumn":55,"fix":"1690"},{"ruleId":"1679","severity":1,"message":"1686","line":166,"column":15,"nodeType":"1681","messageId":"1682","endLine":166,"endColumn":53,"fix":"1691"},{"ruleId":"1657","severity":1,"message":"1665","line":186,"column":55,"nodeType":"1659","messageId":"1660","endLine":186,"endColumn":57},{"ruleId":"1657","severity":1,"message":"1665","line":290,"column":39,"nodeType":"1659","messageId":"1660","endLine":290,"endColumn":41},{"ruleId":"1657","severity":1,"message":"1658","line":301,"column":60,"nodeType":"1659","messageId":"1660","endLine":301,"endColumn":62},{"ruleId":"1633","severity":1,"message":"1634","line":321,"column":13,"nodeType":"1635","endLine":321,"endColumn":75},{"ruleId":"1591","severity":1,"message":"1692","line":16,"column":8,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":10},{"ruleId":"1591","severity":1,"message":"1693","line":24,"column":10,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1694","line":24,"column":22,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1695","line":25,"column":10,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":29},{"ruleId":"1597","severity":1,"message":"1696","line":60,"column":6,"nodeType":"1599","endLine":60,"endColumn":10,"suggestions":"1697"},{"ruleId":"1657","severity":1,"message":"1658","line":128,"column":18,"nodeType":"1659","messageId":"1660","endLine":128,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":288,"column":38,"nodeType":"1659","messageId":"1660","endLine":288,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":339,"column":44,"nodeType":"1659","messageId":"1660","endLine":339,"endColumn":46},{"ruleId":"1633","severity":1,"message":"1634","line":456,"column":21,"nodeType":"1635","endLine":461,"endColumn":23},{"ruleId":"1633","severity":1,"message":"1634","line":464,"column":21,"nodeType":"1635","endLine":469,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1698","line":630,"column":9,"nodeType":"1593","messageId":"1594","endLine":630,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1668","line":1,"column":28,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":34},{"ruleId":"1591","severity":1,"message":"1669","line":11,"column":3,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1670","line":13,"column":3,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1644","line":20,"column":17,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1671","line":25,"column":10,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1672","line":27,"column":7,"nodeType":"1593","messageId":"1594","endLine":27,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1673","line":36,"column":10,"nodeType":"1593","messageId":"1594","endLine":36,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1674","line":36,"column":20,"nodeType":"1593","messageId":"1594","endLine":36,"endColumn":31},{"ruleId":"1591","severity":1,"message":"1699","line":39,"column":15,"nodeType":"1593","messageId":"1594","endLine":39,"endColumn":27},{"ruleId":"1591","severity":1,"message":"1675","line":43,"column":33,"nodeType":"1593","messageId":"1594","endLine":43,"endColumn":39},{"ruleId":"1591","severity":1,"message":"1678","line":82,"column":11,"nodeType":"1593","messageId":"1594","endLine":82,"endColumn":13},{"ruleId":"1657","severity":1,"message":"1665","line":83,"column":55,"nodeType":"1659","messageId":"1660","endLine":83,"endColumn":57},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":22,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":24},{"ruleId":"1679","severity":1,"message":"1680","line":89,"column":13,"nodeType":"1681","messageId":"1682","endLine":89,"endColumn":59,"fix":"1700"},{"ruleId":"1679","severity":1,"message":"1684","line":90,"column":13,"nodeType":"1681","messageId":"1682","endLine":90,"endColumn":77,"fix":"1701"},{"ruleId":"1679","severity":1,"message":"1686","line":91,"column":13,"nodeType":"1681","messageId":"1682","endLine":91,"endColumn":75,"fix":"1702"},{"ruleId":"1679","severity":1,"message":"1680","line":95,"column":13,"nodeType":"1681","messageId":"1682","endLine":95,"endColumn":59,"fix":"1703"},{"ruleId":"1657","severity":1,"message":"1658","line":137,"column":22,"nodeType":"1659","messageId":"1660","endLine":137,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":142,"column":21,"nodeType":"1659","messageId":"1660","endLine":142,"endColumn":23},{"ruleId":"1679","severity":1,"message":"1680","line":146,"column":13,"nodeType":"1681","messageId":"1682","endLine":146,"endColumn":35,"fix":"1704"},{"ruleId":"1679","severity":1,"message":"1705","line":147,"column":13,"nodeType":"1681","messageId":"1682","endLine":147,"endColumn":54,"fix":"1706"},{"ruleId":"1679","severity":1,"message":"1707","line":148,"column":13,"nodeType":"1681","messageId":"1682","endLine":148,"endColumn":52,"fix":"1708"},{"ruleId":"1657","severity":1,"message":"1665","line":170,"column":43,"nodeType":"1659","messageId":"1660","endLine":170,"endColumn":45},{"ruleId":"1657","severity":1,"message":"1658","line":189,"column":19,"nodeType":"1659","messageId":"1660","endLine":189,"endColumn":21},{"ruleId":"1679","severity":1,"message":"1680","line":194,"column":13,"nodeType":"1681","messageId":"1682","endLine":194,"endColumn":59,"fix":"1709"},{"ruleId":"1679","severity":1,"message":"1705","line":195,"column":13,"nodeType":"1681","messageId":"1682","endLine":195,"endColumn":78,"fix":"1710"},{"ruleId":"1679","severity":1,"message":"1707","line":196,"column":13,"nodeType":"1681","messageId":"1682","endLine":196,"endColumn":76,"fix":"1711"},{"ruleId":"1679","severity":1,"message":"1680","line":199,"column":29,"nodeType":"1681","messageId":"1682","endLine":199,"endColumn":75,"fix":"1712"},{"ruleId":"1657","severity":1,"message":"1665","line":221,"column":40,"nodeType":"1659","messageId":"1660","endLine":221,"endColumn":42},{"ruleId":"1633","severity":1,"message":"1634","line":256,"column":13,"nodeType":"1635","endLine":256,"endColumn":75},{"ruleId":"1591","severity":1,"message":"1644","line":17,"column":17,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1646","line":20,"column":8,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1643","line":21,"column":8,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1713","line":23,"column":8,"nodeType":"1593","messageId":"1594","endLine":23,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1647","line":24,"column":8,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1714","line":38,"column":11,"nodeType":"1593","messageId":"1594","endLine":38,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1678","line":39,"column":13,"nodeType":"1593","messageId":"1594","endLine":39,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1715","line":57,"column":11,"nodeType":"1593","messageId":"1594","endLine":57,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1716","line":30,"column":9,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1717","line":123,"column":11,"nodeType":"1593","messageId":"1594","endLine":123,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1718","line":162,"column":9,"nodeType":"1593","messageId":"1594","endLine":162,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1719","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1621","line":2,"column":17,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1645","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1720","line":6,"column":10,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1721","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1722","line":9,"column":8,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1723","line":11,"column":8,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1724","line":13,"column":8,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":12},{"ruleId":"1725","severity":1,"message":"1726","line":96,"column":7,"nodeType":"1727","messageId":"1728","endLine":96,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":99,"column":7,"nodeType":"1727","messageId":"1728","endLine":99,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":102,"column":7,"nodeType":"1727","messageId":"1728","endLine":102,"endColumn":13},{"ruleId":"1725","severity":1,"message":"1726","line":105,"column":7,"nodeType":"1727","messageId":"1728","endLine":105,"endColumn":13},{"ruleId":"1657","severity":1,"message":"1658","line":201,"column":48,"nodeType":"1659","messageId":"1660","endLine":201,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":211,"column":53,"nodeType":"1659","messageId":"1660","endLine":211,"endColumn":55},{"ruleId":"1729","severity":1,"message":"1730","line":241,"column":43,"nodeType":"1635","endLine":248,"endColumn":45},{"ruleId":"1729","severity":1,"message":"1730","line":298,"column":37,"nodeType":"1635","endLine":301,"endColumn":39},{"ruleId":"1729","severity":1,"message":"1730","line":324,"column":15,"nodeType":"1635","endLine":324,"endColumn":81},{"ruleId":"1657","severity":1,"message":"1658","line":365,"column":24,"nodeType":"1659","messageId":"1660","endLine":365,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":370,"column":23,"nodeType":"1659","messageId":"1660","endLine":370,"endColumn":25},{"ruleId":"1731","severity":1,"message":"1732","line":373,"column":9,"nodeType":"1635","endLine":377,"endColumn":10},{"ruleId":"1657","severity":1,"message":"1658","line":382,"column":30,"nodeType":"1659","messageId":"1660","endLine":382,"endColumn":32},{"ruleId":"1731","severity":1,"message":"1732","line":385,"column":9,"nodeType":"1635","endLine":389,"endColumn":10},{"ruleId":"1731","severity":1,"message":"1732","line":396,"column":7,"nodeType":"1635","endLine":400,"endColumn":8},{"ruleId":"1591","severity":1,"message":"1733","line":418,"column":7,"nodeType":"1593","messageId":"1594","endLine":418,"endColumn":10},{"ruleId":"1657","severity":1,"message":"1658","line":419,"column":17,"nodeType":"1659","messageId":"1660","endLine":419,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":435,"column":24,"nodeType":"1659","messageId":"1660","endLine":435,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":487,"column":20,"nodeType":"1659","messageId":"1660","endLine":487,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":488,"column":20,"nodeType":"1659","messageId":"1660","endLine":488,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":522,"column":24,"nodeType":"1659","messageId":"1660","endLine":522,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":524,"column":31,"nodeType":"1659","messageId":"1660","endLine":524,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1734","line":562,"column":9,"nodeType":"1593","messageId":"1594","endLine":562,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":575,"column":33,"nodeType":"1659","messageId":"1660","endLine":575,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":576,"column":21,"nodeType":"1659","messageId":"1660","endLine":576,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":577,"column":23,"nodeType":"1659","messageId":"1660","endLine":577,"endColumn":25},{"ruleId":"1633","severity":1,"message":"1634","line":614,"column":19,"nodeType":"1635","endLine":614,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":638,"column":28,"nodeType":"1659","messageId":"1660","endLine":638,"endColumn":30},{"ruleId":"1657","severity":1,"message":"1658","line":639,"column":29,"nodeType":"1659","messageId":"1660","endLine":639,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1658","line":640,"column":29,"nodeType":"1659","messageId":"1660","endLine":640,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1658","line":641,"column":29,"nodeType":"1659","messageId":"1660","endLine":641,"endColumn":31},{"ruleId":"1633","severity":1,"message":"1634","line":657,"column":31,"nodeType":"1635","endLine":657,"endColumn":52},{"ruleId":"1633","severity":1,"message":"1634","line":692,"column":13,"nodeType":"1635","endLine":695,"endColumn":15},{"ruleId":"1657","severity":1,"message":"1658","line":721,"column":28,"nodeType":"1659","messageId":"1660","endLine":721,"endColumn":30},{"ruleId":"1735","severity":1,"message":"1736","line":734,"column":21,"nodeType":"1737","messageId":"1738","endLine":736,"endColumn":22},{"ruleId":"1633","severity":1,"message":"1634","line":746,"column":33,"nodeType":"1635","endLine":752,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":787,"column":35,"nodeType":"1659","messageId":"1660","endLine":787,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":789,"column":27,"nodeType":"1659","messageId":"1660","endLine":789,"endColumn":29},{"ruleId":"1633","severity":1,"message":"1634","line":858,"column":19,"nodeType":"1635","endLine":864,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":871,"column":34,"nodeType":"1659","messageId":"1660","endLine":871,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":921,"column":21,"nodeType":"1635","endLine":927,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":935,"column":34,"nodeType":"1659","messageId":"1660","endLine":935,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":995,"column":19,"nodeType":"1635","endLine":1001,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1008,"column":34,"nodeType":"1659","messageId":"1660","endLine":1008,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1063,"column":19,"nodeType":"1635","endLine":1069,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1076,"column":34,"nodeType":"1659","messageId":"1660","endLine":1076,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1105,"column":21,"nodeType":"1635","endLine":1111,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":1151,"column":34,"nodeType":"1659","messageId":"1660","endLine":1151,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":1162,"column":35,"nodeType":"1659","messageId":"1660","endLine":1162,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":1164,"column":27,"nodeType":"1659","messageId":"1660","endLine":1164,"endColumn":29},{"ruleId":"1633","severity":1,"message":"1634","line":1227,"column":19,"nodeType":"1635","endLine":1233,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1240,"column":34,"nodeType":"1659","messageId":"1660","endLine":1240,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1290,"column":21,"nodeType":"1635","endLine":1296,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":1304,"column":34,"nodeType":"1659","messageId":"1660","endLine":1304,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1364,"column":19,"nodeType":"1635","endLine":1370,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1377,"column":34,"nodeType":"1659","messageId":"1660","endLine":1377,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1437,"column":19,"nodeType":"1635","endLine":1443,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1450,"column":34,"nodeType":"1659","messageId":"1660","endLine":1450,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1505,"column":19,"nodeType":"1635","endLine":1511,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":1518,"column":34,"nodeType":"1659","messageId":"1660","endLine":1518,"endColumn":36},{"ruleId":"1633","severity":1,"message":"1634","line":1547,"column":21,"nodeType":"1635","endLine":1553,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":1593,"column":34,"nodeType":"1659","messageId":"1660","endLine":1593,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":1768,"column":28,"nodeType":"1659","messageId":"1660","endLine":1768,"endColumn":30},{"ruleId":"1657","severity":1,"message":"1658","line":1776,"column":36,"nodeType":"1659","messageId":"1660","endLine":1776,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":1783,"column":36,"nodeType":"1659","messageId":"1660","endLine":1783,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":1793,"column":36,"nodeType":"1659","messageId":"1660","endLine":1793,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":1804,"column":36,"nodeType":"1659","messageId":"1660","endLine":1804,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":1811,"column":36,"nodeType":"1659","messageId":"1660","endLine":1811,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":1825,"column":30,"nodeType":"1659","messageId":"1660","endLine":1825,"endColumn":32},{"ruleId":"1657","severity":1,"message":"1658","line":1826,"column":31,"nodeType":"1659","messageId":"1660","endLine":1826,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":1827,"column":31,"nodeType":"1659","messageId":"1660","endLine":1827,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":1828,"column":31,"nodeType":"1659","messageId":"1660","endLine":1828,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":1836,"column":48,"nodeType":"1659","messageId":"1660","endLine":1836,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":1845,"column":48,"nodeType":"1659","messageId":"1660","endLine":1845,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":1907,"column":42,"nodeType":"1659","messageId":"1660","endLine":1907,"endColumn":44},{"ruleId":"1657","severity":1,"message":"1658","line":1919,"column":42,"nodeType":"1659","messageId":"1660","endLine":1919,"endColumn":44},{"ruleId":"1657","severity":1,"message":"1658","line":1928,"column":42,"nodeType":"1659","messageId":"1660","endLine":1928,"endColumn":44},{"ruleId":"1657","severity":1,"message":"1658","line":1953,"column":50,"nodeType":"1659","messageId":"1660","endLine":1953,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":1959,"column":32,"nodeType":"1659","messageId":"1660","endLine":1959,"endColumn":34},{"ruleId":"1657","severity":1,"message":"1658","line":1966,"column":36,"nodeType":"1659","messageId":"1660","endLine":1966,"endColumn":38},{"ruleId":"1735","severity":1,"message":"1736","line":1980,"column":21,"nodeType":"1737","messageId":"1738","endLine":1982,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":1992,"column":50,"nodeType":"1659","messageId":"1660","endLine":1992,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2002,"column":50,"nodeType":"1659","messageId":"1660","endLine":2002,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2012,"column":50,"nodeType":"1659","messageId":"1660","endLine":2012,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2031,"column":57,"nodeType":"1659","messageId":"1660","endLine":2031,"endColumn":59},{"ruleId":"1657","severity":1,"message":"1658","line":2037,"column":32,"nodeType":"1659","messageId":"1660","endLine":2037,"endColumn":34},{"ruleId":"1657","severity":1,"message":"1658","line":2046,"column":36,"nodeType":"1659","messageId":"1660","endLine":2046,"endColumn":38},{"ruleId":"1735","severity":1,"message":"1736","line":2059,"column":21,"nodeType":"1737","messageId":"1738","endLine":2061,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":2071,"column":50,"nodeType":"1659","messageId":"1660","endLine":2071,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2081,"column":50,"nodeType":"1659","messageId":"1660","endLine":2081,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2090,"column":50,"nodeType":"1659","messageId":"1660","endLine":2090,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":2108,"column":57,"nodeType":"1659","messageId":"1660","endLine":2108,"endColumn":59},{"ruleId":"1657","severity":1,"message":"1658","line":2113,"column":30,"nodeType":"1659","messageId":"1660","endLine":2113,"endColumn":32},{"ruleId":"1657","severity":1,"message":"1658","line":2122,"column":34,"nodeType":"1659","messageId":"1660","endLine":2122,"endColumn":36},{"ruleId":"1735","severity":1,"message":"1736","line":2135,"column":19,"nodeType":"1737","messageId":"1738","endLine":2137,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":2147,"column":48,"nodeType":"1659","messageId":"1660","endLine":2147,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":2158,"column":48,"nodeType":"1659","messageId":"1660","endLine":2158,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":2167,"column":48,"nodeType":"1659","messageId":"1660","endLine":2167,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":2212,"column":38,"nodeType":"1659","messageId":"1660","endLine":2212,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":2307,"column":45,"nodeType":"1659","messageId":"1660","endLine":2307,"endColumn":47},{"ruleId":"1657","severity":1,"message":"1658","line":2401,"column":45,"nodeType":"1659","messageId":"1660","endLine":2401,"endColumn":47},{"ruleId":"1657","severity":1,"message":"1658","line":2480,"column":45,"nodeType":"1659","messageId":"1660","endLine":2480,"endColumn":47},{"ruleId":"1657","severity":1,"message":"1658","line":2559,"column":45,"nodeType":"1659","messageId":"1660","endLine":2559,"endColumn":47},{"ruleId":"1657","severity":1,"message":"1658","line":2639,"column":45,"nodeType":"1659","messageId":"1660","endLine":2639,"endColumn":47},{"ruleId":"1657","severity":1,"message":"1658","line":29,"column":27,"nodeType":"1659","messageId":"1660","endLine":29,"endColumn":29},{"ruleId":"1657","severity":1,"message":"1658","line":29,"column":51,"nodeType":"1659","messageId":"1660","endLine":29,"endColumn":53},{"ruleId":"1657","severity":1,"message":"1658","line":47,"column":31,"nodeType":"1659","messageId":"1660","endLine":47,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":48,"column":18,"nodeType":"1659","messageId":"1660","endLine":48,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":49,"column":18,"nodeType":"1659","messageId":"1660","endLine":49,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":50,"column":18,"nodeType":"1659","messageId":"1660","endLine":50,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":71,"column":18,"nodeType":"1659","messageId":"1660","endLine":71,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":90,"column":20,"nodeType":"1659","messageId":"1660","endLine":90,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":110,"column":20,"nodeType":"1659","messageId":"1660","endLine":110,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":129,"column":20,"nodeType":"1659","messageId":"1660","endLine":129,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":148,"column":20,"nodeType":"1659","messageId":"1660","endLine":148,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":167,"column":20,"nodeType":"1659","messageId":"1660","endLine":167,"endColumn":22},{"ruleId":"1597","severity":1,"message":"1739","line":221,"column":6,"nodeType":"1599","endLine":221,"endColumn":35,"suggestions":"1740"},{"ruleId":"1597","severity":1,"message":"1741","line":227,"column":6,"nodeType":"1599","endLine":227,"endColumn":10,"suggestions":"1742"},{"ruleId":"1657","severity":1,"message":"1658","line":239,"column":17,"nodeType":"1659","messageId":"1660","endLine":239,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":250,"column":25,"nodeType":"1659","messageId":"1660","endLine":250,"endColumn":27},{"ruleId":"1657","severity":1,"message":"1658","line":261,"column":30,"nodeType":"1659","messageId":"1660","endLine":261,"endColumn":32},{"ruleId":"1729","severity":1,"message":"1730","line":511,"column":15,"nodeType":"1635","endLine":517,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1743","line":14,"column":3,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1744","line":25,"column":8,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1745","line":58,"column":10,"nodeType":"1593","messageId":"1594","endLine":58,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1746","line":58,"column":22,"nodeType":"1593","messageId":"1594","endLine":58,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1747","line":61,"column":10,"nodeType":"1593","messageId":"1594","endLine":61,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1748","line":61,"column":27,"nodeType":"1593","messageId":"1594","endLine":61,"endColumn":41},{"ruleId":"1591","severity":1,"message":"1749","line":197,"column":9,"nodeType":"1593","messageId":"1594","endLine":197,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1602","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1601","line":2,"column":15,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1750","line":3,"column":10,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1751","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1642","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1643","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1671","line":7,"column":10,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1621","line":8,"column":10,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1752","line":8,"column":18,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1753","line":10,"column":3,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1754","line":11,"column":3,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1755","line":12,"column":3,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1756","line":13,"column":3,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1757","line":14,"column":3,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1758","line":15,"column":3,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1759","line":16,"column":3,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1760","line":17,"column":3,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1761","line":18,"column":3,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1762","line":20,"column":10,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1645","line":25,"column":8,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1648","line":28,"column":8,"nodeType":"1593","messageId":"1594","endLine":28,"endColumn":12},{"ruleId":"1591","severity":1,"message":"1763","line":29,"column":8,"nodeType":"1593","messageId":"1594","endLine":29,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1764","line":30,"column":8,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1765","line":31,"column":8,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1638","line":35,"column":8,"nodeType":"1593","messageId":"1594","endLine":35,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1743","line":39,"column":3,"nodeType":"1593","messageId":"1594","endLine":39,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1744","line":50,"column":8,"nodeType":"1593","messageId":"1594","endLine":50,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1745","line":81,"column":10,"nodeType":"1593","messageId":"1594","endLine":81,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1746","line":81,"column":22,"nodeType":"1593","messageId":"1594","endLine":81,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1747","line":84,"column":10,"nodeType":"1593","messageId":"1594","endLine":84,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1748","line":84,"column":27,"nodeType":"1593","messageId":"1594","endLine":84,"endColumn":41},{"ruleId":"1591","severity":1,"message":"1749","line":144,"column":9,"nodeType":"1593","messageId":"1594","endLine":144,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1602","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1601","line":2,"column":15,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1750","line":3,"column":10,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1751","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1642","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1643","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1671","line":7,"column":10,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1752","line":8,"column":18,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1753","line":10,"column":3,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1754","line":11,"column":3,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1755","line":12,"column":3,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1756","line":13,"column":3,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1757","line":14,"column":3,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1758","line":15,"column":3,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1759","line":16,"column":3,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1760","line":17,"column":3,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1761","line":18,"column":3,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1762","line":20,"column":10,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1766","line":29,"column":10,"nodeType":"1593","messageId":"1594","endLine":29,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1763","line":30,"column":8,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1764","line":31,"column":8,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1765","line":32,"column":8,"nodeType":"1593","messageId":"1594","endLine":32,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1743","line":40,"column":3,"nodeType":"1593","messageId":"1594","endLine":40,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1767","line":321,"column":11,"nodeType":"1593","messageId":"1594","endLine":321,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1768","line":331,"column":11,"nodeType":"1593","messageId":"1594","endLine":331,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1769","line":336,"column":11,"nodeType":"1593","messageId":"1594","endLine":336,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1770","line":11,"column":10,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1608","line":11,"column":16,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1771","line":14,"column":21,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":256,"column":66,"nodeType":"1659","messageId":"1660","endLine":256,"endColumn":68},{"ruleId":"1591","severity":1,"message":"1714","line":10,"column":9,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1772","line":12,"column":18,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":27},{"ruleId":"1591","severity":1,"message":"1773","line":13,"column":10,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1774","line":21,"column":11,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":19},{"ruleId":"1775","severity":1,"message":"1776","line":27,"column":40,"nodeType":"1777","messageId":"1778","endLine":29,"endColumn":10},{"ruleId":"1597","severity":1,"message":"1696","line":41,"column":6,"nodeType":"1599","endLine":41,"endColumn":10,"suggestions":"1779"},{"ruleId":"1591","severity":1,"message":"1780","line":43,"column":10,"nodeType":"1593","messageId":"1594","endLine":43,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1781","line":50,"column":11,"nodeType":"1593","messageId":"1594","endLine":50,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1782","line":75,"column":9,"nodeType":"1593","messageId":"1594","endLine":75,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1783","line":604,"column":13,"nodeType":"1593","messageId":"1594","endLine":604,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1784","line":741,"column":13,"nodeType":"1593","messageId":"1594","endLine":741,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1785","line":758,"column":11,"nodeType":"1593","messageId":"1594","endLine":758,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1786","line":784,"column":15,"nodeType":"1593","messageId":"1594","endLine":784,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1668","line":2,"column":28,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":34},{"ruleId":"1591","severity":1,"message":"1672","line":10,"column":7,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1787","line":19,"column":17,"nodeType":"1593","messageId":"1594","endLine":19,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1788","line":99,"column":11,"nodeType":"1593","messageId":"1594","endLine":99,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1789","line":116,"column":9,"nodeType":"1593","messageId":"1594","endLine":116,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1790","line":124,"column":20,"nodeType":"1593","messageId":"1594","endLine":124,"endColumn":28},{"ruleId":"1633","severity":1,"message":"1634","line":171,"column":17,"nodeType":"1635","endLine":171,"endColumn":43},{"ruleId":"1591","severity":1,"message":"1668","line":1,"column":28,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":34},{"ruleId":"1591","severity":1,"message":"1672","line":9,"column":7,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1787","line":18,"column":17,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1788","line":100,"column":11,"nodeType":"1593","messageId":"1594","endLine":100,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1790","line":126,"column":20,"nodeType":"1593","messageId":"1594","endLine":126,"endColumn":28},{"ruleId":"1633","severity":1,"message":"1634","line":188,"column":17,"nodeType":"1635","endLine":188,"endColumn":43},{"ruleId":"1591","severity":1,"message":"1644","line":153,"column":18,"nodeType":"1593","messageId":"1594","endLine":153,"endColumn":26},{"ruleId":"1591","severity":1,"message":"1637","line":154,"column":8,"nodeType":"1593","messageId":"1594","endLine":154,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1638","line":155,"column":8,"nodeType":"1593","messageId":"1594","endLine":155,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1791","line":157,"column":10,"nodeType":"1593","messageId":"1594","endLine":157,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1792","line":164,"column":10,"nodeType":"1593","messageId":"1594","endLine":164,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1771","line":164,"column":21,"nodeType":"1593","messageId":"1594","endLine":164,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1791","line":3,"column":10,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1621","line":5,"column":10,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1752","line":5,"column":18,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":83,"column":33,"nodeType":"1659","messageId":"1660","endLine":83,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":84,"column":33,"nodeType":"1659","messageId":"1660","endLine":84,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":33,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1743","line":17,"column":3,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1793","line":134,"column":9,"nodeType":"1593","messageId":"1594","endLine":134,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1794","line":135,"column":13,"nodeType":"1593","messageId":"1594","endLine":135,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1639","line":2,"column":8,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":14},{"ruleId":"1597","severity":1,"message":"1795","line":27,"column":6,"nodeType":"1599","endLine":27,"endColumn":10,"suggestions":"1796"},{"ruleId":"1591","severity":1,"message":"1649","line":53,"column":10,"nodeType":"1593","messageId":"1594","endLine":53,"endColumn":24},{"ruleId":"1597","severity":1,"message":"1797","line":62,"column":6,"nodeType":"1599","endLine":62,"endColumn":17,"suggestions":"1798"},{"ruleId":"1799","severity":1,"message":"1800","line":65,"column":29,"nodeType":"1777","messageId":"1801","endLine":65,"endColumn":31},{"ruleId":"1597","severity":1,"message":"1802","line":71,"column":6,"nodeType":"1599","endLine":71,"endColumn":14,"suggestions":"1803"},{"ruleId":"1591","severity":1,"message":"1804","line":91,"column":9,"nodeType":"1593","messageId":"1594","endLine":91,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":108,"column":26,"nodeType":"1659","messageId":"1660","endLine":108,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":111,"column":47,"nodeType":"1659","messageId":"1660","endLine":111,"endColumn":49},{"ruleId":"1591","severity":1,"message":"1767","line":217,"column":11,"nodeType":"1593","messageId":"1594","endLine":217,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1768","line":232,"column":11,"nodeType":"1593","messageId":"1594","endLine":232,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1769","line":238,"column":11,"nodeType":"1593","messageId":"1594","endLine":238,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1749","line":280,"column":9,"nodeType":"1593","messageId":"1594","endLine":280,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":323,"column":167,"nodeType":"1659","messageId":"1660","endLine":323,"endColumn":169},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1805","line":4,"column":39,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":51},{"ruleId":"1591","severity":1,"message":"1770","line":11,"column":10,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1608","line":11,"column":16,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":40,"column":71,"nodeType":"1659","messageId":"1660","endLine":40,"endColumn":73},{"ruleId":"1657","severity":1,"message":"1658","line":54,"column":36,"nodeType":"1659","messageId":"1660","endLine":54,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":57,"column":36,"nodeType":"1659","messageId":"1660","endLine":57,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":60,"column":36,"nodeType":"1659","messageId":"1660","endLine":60,"endColumn":38},{"ruleId":"1597","severity":1,"message":"1806","line":64,"column":6,"nodeType":"1599","endLine":64,"endColumn":18,"suggestions":"1807"},{"ruleId":"1657","severity":1,"message":"1658","line":210,"column":37,"nodeType":"1659","messageId":"1660","endLine":210,"endColumn":39},{"ruleId":"1657","severity":1,"message":"1658","line":215,"column":37,"nodeType":"1659","messageId":"1660","endLine":215,"endColumn":39},{"ruleId":"1657","severity":1,"message":"1658","line":220,"column":37,"nodeType":"1659","messageId":"1660","endLine":220,"endColumn":39},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":17,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":26},{"ruleId":"1591","severity":1,"message":"1720","line":17,"column":10,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1621","line":21,"column":10,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1808","line":25,"column":8,"nodeType":"1593","messageId":"1594","endLine":25,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1809","line":26,"column":8,"nodeType":"1593","messageId":"1594","endLine":26,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1810","line":27,"column":8,"nodeType":"1593","messageId":"1594","endLine":27,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1719","line":28,"column":8,"nodeType":"1593","messageId":"1594","endLine":28,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1811","line":29,"column":8,"nodeType":"1593","messageId":"1594","endLine":29,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1812","line":30,"column":8,"nodeType":"1593","messageId":"1594","endLine":30,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":76,"column":24,"nodeType":"1659","messageId":"1660","endLine":76,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":79,"column":24,"nodeType":"1659","messageId":"1660","endLine":79,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":82,"column":24,"nodeType":"1659","messageId":"1660","endLine":82,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":24,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":88,"column":24,"nodeType":"1659","messageId":"1660","endLine":88,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":91,"column":24,"nodeType":"1659","messageId":"1660","endLine":91,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":94,"column":24,"nodeType":"1659","messageId":"1660","endLine":94,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":97,"column":24,"nodeType":"1659","messageId":"1660","endLine":97,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":100,"column":24,"nodeType":"1659","messageId":"1660","endLine":100,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":103,"column":24,"nodeType":"1659","messageId":"1660","endLine":103,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":106,"column":24,"nodeType":"1659","messageId":"1660","endLine":106,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":109,"column":24,"nodeType":"1659","messageId":"1660","endLine":109,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":112,"column":24,"nodeType":"1659","messageId":"1660","endLine":112,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":115,"column":24,"nodeType":"1659","messageId":"1660","endLine":115,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":118,"column":24,"nodeType":"1659","messageId":"1660","endLine":118,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":121,"column":24,"nodeType":"1659","messageId":"1660","endLine":121,"endColumn":26},{"ruleId":"1591","severity":1,"message":"1813","line":136,"column":9,"nodeType":"1593","messageId":"1594","endLine":136,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1814","line":169,"column":10,"nodeType":"1593","messageId":"1594","endLine":169,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1815","line":169,"column":19,"nodeType":"1593","messageId":"1594","endLine":169,"endColumn":29},{"ruleId":"1633","severity":1,"message":"1634","line":325,"column":19,"nodeType":"1635","endLine":325,"endColumn":57},{"ruleId":"1591","severity":1,"message":"1816","line":4,"column":10,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1744","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1637","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1638","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1817","line":11,"column":19,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":30},{"ruleId":"1591","severity":1,"message":"1818","line":11,"column":32,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":43},{"ruleId":"1591","severity":1,"message":"1639","line":13,"column":8,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1819","line":14,"column":8,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":22},{"ruleId":"1597","severity":1,"message":"1820","line":58,"column":6,"nodeType":"1599","endLine":58,"endColumn":17,"suggestions":"1821"},{"ruleId":"1591","severity":1,"message":"1637","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1638","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1747","line":17,"column":10,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1748","line":17,"column":27,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":41},{"ruleId":"1597","severity":1,"message":"1822","line":29,"column":6,"nodeType":"1599","endLine":29,"endColumn":17,"suggestions":"1823"},{"ruleId":"1591","severity":1,"message":"1601","line":2,"column":25,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":2,"column":30,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1671","line":5,"column":10,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":14},{"ruleId":"1597","severity":1,"message":"1825","line":25,"column":6,"nodeType":"1599","endLine":25,"endColumn":8,"suggestions":"1826"},{"ruleId":"1657","severity":1,"message":"1658","line":42,"column":26,"nodeType":"1659","messageId":"1660","endLine":42,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":45,"column":47,"nodeType":"1659","messageId":"1660","endLine":45,"endColumn":49},{"ruleId":"1657","severity":1,"message":"1658","line":49,"column":26,"nodeType":"1659","messageId":"1660","endLine":49,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":52,"column":47,"nodeType":"1659","messageId":"1660","endLine":52,"endColumn":49},{"ruleId":"1657","severity":1,"message":"1658","line":57,"column":28,"nodeType":"1659","messageId":"1660","endLine":57,"endColumn":30},{"ruleId":"1657","severity":1,"message":"1658","line":60,"column":51,"nodeType":"1659","messageId":"1660","endLine":60,"endColumn":53},{"ruleId":"1679","severity":1,"message":"1827","line":123,"column":23,"nodeType":"1681","messageId":"1682","endLine":123,"endColumn":49,"fix":"1828"},{"ruleId":"1679","severity":1,"message":"1829","line":141,"column":23,"nodeType":"1681","messageId":"1682","endLine":141,"endColumn":52,"fix":"1830"},{"ruleId":"1679","severity":1,"message":"1831","line":159,"column":23,"nodeType":"1681","messageId":"1682","endLine":159,"endColumn":56,"fix":"1832"},{"ruleId":"1657","severity":1,"message":"1665","line":16,"column":20,"nodeType":"1659","messageId":"1660","endLine":16,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":19,"column":22,"nodeType":"1659","messageId":"1660","endLine":19,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":21,"column":29,"nodeType":"1659","messageId":"1660","endLine":21,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1658","line":23,"column":29,"nodeType":"1659","messageId":"1660","endLine":23,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1665","line":37,"column":19,"nodeType":"1659","messageId":"1660","endLine":37,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":40,"column":22,"nodeType":"1659","messageId":"1660","endLine":40,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":42,"column":29,"nodeType":"1659","messageId":"1660","endLine":42,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1658","line":44,"column":29,"nodeType":"1659","messageId":"1660","endLine":44,"endColumn":31},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1644","line":1,"column":42,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":50},{"ruleId":"1591","severity":1,"message":"1601","line":1,"column":25,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":1,"column":30,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1644","line":1,"column":42,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":50},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1644","line":2,"column":42,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":50},{"ruleId":"1591","severity":1,"message":"1770","line":15,"column":10,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1608","line":15,"column":16,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1833","line":16,"column":10,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1771","line":18,"column":21,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":65,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":67},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1770","line":15,"column":10,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1608","line":15,"column":16,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1833","line":16,"column":10,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1834","line":48,"column":9,"nodeType":"1593","messageId":"1594","endLine":48,"endColumn":30},{"ruleId":"1657","severity":1,"message":"1658","line":84,"column":65,"nodeType":"1659","messageId":"1660","endLine":84,"endColumn":67},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1835","line":38,"column":10,"nodeType":"1593","messageId":"1594","endLine":38,"endColumn":19},{"ruleId":"1597","severity":1,"message":"1836","line":54,"column":6,"nodeType":"1599","endLine":54,"endColumn":17,"suggestions":"1837"},{"ruleId":"1657","severity":1,"message":"1658","line":61,"column":21,"nodeType":"1659","messageId":"1660","endLine":61,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":75,"column":36,"nodeType":"1659","messageId":"1660","endLine":75,"endColumn":38},{"ruleId":"1591","severity":1,"message":"1838","line":101,"column":11,"nodeType":"1593","messageId":"1594","endLine":101,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":324,"column":43,"nodeType":"1659","messageId":"1660","endLine":324,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":356,"column":19,"nodeType":"1635","endLine":356,"endColumn":81},{"ruleId":"1657","severity":1,"message":"1658","line":40,"column":50,"nodeType":"1659","messageId":"1660","endLine":40,"endColumn":52},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":27,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1743","line":20,"column":3,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1839","line":32,"column":3,"nodeType":"1593","messageId":"1594","endLine":32,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1840","line":33,"column":3,"nodeType":"1593","messageId":"1594","endLine":33,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1841","line":222,"column":9,"nodeType":"1593","messageId":"1594","endLine":222,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1819","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1592","line":6,"column":10,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":18},{"ruleId":"1657","severity":1,"message":"1658","line":49,"column":28,"nodeType":"1659","messageId":"1660","endLine":49,"endColumn":30},{"ruleId":"1657","severity":1,"message":"1658","line":52,"column":28,"nodeType":"1659","messageId":"1660","endLine":52,"endColumn":30},{"ruleId":"1591","severity":1,"message":"1842","line":3,"column":10,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1843","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1601","line":8,"column":25,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":8,"column":30,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":8,"column":35,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1743","line":22,"column":3,"nodeType":"1593","messageId":"1594","endLine":22,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1844","line":93,"column":9,"nodeType":"1593","messageId":"1594","endLine":93,"endColumn":18},{"ruleId":"1657","severity":1,"message":"1658","line":96,"column":20,"nodeType":"1659","messageId":"1660","endLine":96,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":96,"column":45,"nodeType":"1659","messageId":"1660","endLine":96,"endColumn":47},{"ruleId":"1591","severity":1,"message":"1845","line":99,"column":13,"nodeType":"1593","messageId":"1594","endLine":99,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":160,"column":33,"nodeType":"1659","messageId":"1660","endLine":160,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":160,"column":59,"nodeType":"1659","messageId":"1660","endLine":160,"endColumn":61},{"ruleId":"1633","severity":1,"message":"1634","line":428,"column":15,"nodeType":"1635","endLine":431,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":81,"column":22,"nodeType":"1659","messageId":"1660","endLine":81,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":183,"column":27,"nodeType":"1659","messageId":"1660","endLine":183,"endColumn":29},{"ruleId":"1657","severity":1,"message":"1658","line":291,"column":48,"nodeType":"1659","messageId":"1660","endLine":291,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":300,"column":36,"nodeType":"1659","messageId":"1660","endLine":300,"endColumn":38},{"ruleId":"1679","severity":1,"message":"1846","line":318,"column":31,"nodeType":"1681","messageId":"1682","endLine":318,"endColumn":52,"fix":"1847"},{"ruleId":"1679","severity":1,"message":"1848","line":336,"column":31,"nodeType":"1681","messageId":"1682","endLine":336,"endColumn":52,"fix":"1849"},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":27,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1603","line":2,"column":27,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":31},{"ruleId":"1591","severity":1,"message":"1621","line":2,"column":33,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":39},{"ruleId":"1591","severity":1,"message":"1850","line":6,"column":10,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":26},{"ruleId":"1591","severity":1,"message":"1743","line":15,"column":3,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1851","line":170,"column":9,"nodeType":"1593","messageId":"1594","endLine":170,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":27,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1852","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1853","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1854","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1855","line":8,"column":8,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1856","line":10,"column":24,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1644","line":4,"column":3,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1621","line":5,"column":3,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":9},{"ruleId":"1591","severity":1,"message":"1857","line":6,"column":3,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":8},{"ruleId":"1591","severity":1,"message":"1636","line":9,"column":3,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":8},{"ruleId":"1591","severity":1,"message":"1858","line":13,"column":10,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":16},{"ruleId":"1597","severity":1,"message":"1859","line":25,"column":6,"nodeType":"1599","endLine":25,"endColumn":30,"suggestions":"1860"},{"ruleId":"1657","severity":1,"message":"1658","line":119,"column":37,"nodeType":"1659","messageId":"1660","endLine":119,"endColumn":39},{"ruleId":"1657","severity":1,"message":"1658","line":648,"column":37,"nodeType":"1659","messageId":"1660","endLine":648,"endColumn":39},{"ruleId":"1657","severity":1,"message":"1658","line":1177,"column":37,"nodeType":"1659","messageId":"1660","endLine":1177,"endColumn":39},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1861","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1862","line":20,"column":11,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":18},{"ruleId":"1657","severity":1,"message":"1658","line":28,"column":24,"nodeType":"1659","messageId":"1660","endLine":28,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":31,"column":29,"nodeType":"1659","messageId":"1660","endLine":31,"endColumn":31},{"ruleId":"1657","severity":1,"message":"1658","line":40,"column":16,"nodeType":"1659","messageId":"1660","endLine":40,"endColumn":18},{"ruleId":"1657","severity":1,"message":"1658","line":110,"column":39,"nodeType":"1659","messageId":"1660","endLine":110,"endColumn":41},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":34,"column":17,"nodeType":"1659","messageId":"1660","endLine":34,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":37,"column":26,"nodeType":"1659","messageId":"1660","endLine":37,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":40,"column":23,"nodeType":"1659","messageId":"1660","endLine":40,"endColumn":25},{"ruleId":"1657","severity":1,"message":"1658","line":52,"column":16,"nodeType":"1659","messageId":"1660","endLine":52,"endColumn":18},{"ruleId":"1657","severity":1,"message":"1658","line":126,"column":35,"nodeType":"1659","messageId":"1660","endLine":126,"endColumn":37},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":27,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1852","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1853","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1854","line":6,"column":8,"nodeType":"1593","messageId":"1594","endLine":6,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1643","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1863","line":10,"column":23,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":34},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":40,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":42},{"ruleId":"1591","severity":1,"message":"1843","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1817","line":8,"column":19,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":30},{"ruleId":"1591","severity":1,"message":"1818","line":8,"column":32,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":43},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1810","line":9,"column":8,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1864","line":43,"column":10,"nodeType":"1593","messageId":"1594","endLine":43,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1835","line":45,"column":10,"nodeType":"1593","messageId":"1594","endLine":45,"endColumn":19},{"ruleId":"1597","severity":1,"message":"1836","line":62,"column":6,"nodeType":"1599","endLine":62,"endColumn":17,"suggestions":"1865"},{"ruleId":"1657","severity":1,"message":"1658","line":69,"column":21,"nodeType":"1659","messageId":"1660","endLine":69,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":36,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":38},{"ruleId":"1591","severity":1,"message":"1838","line":112,"column":11,"nodeType":"1593","messageId":"1594","endLine":112,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":340,"column":43,"nodeType":"1659","messageId":"1660","endLine":340,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":372,"column":19,"nodeType":"1635","endLine":372,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1866","line":16,"column":27,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":39},{"ruleId":"1591","severity":1,"message":"1867","line":23,"column":10,"nodeType":"1593","messageId":"1594","endLine":23,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1868","line":23,"column":19,"nodeType":"1593","messageId":"1594","endLine":23,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1835","line":24,"column":10,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1869","line":24,"column":21,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":33},{"ruleId":"1597","severity":1,"message":"1870","line":87,"column":6,"nodeType":"1599","endLine":87,"endColumn":36,"suggestions":"1871"},{"ruleId":"1657","severity":1,"message":"1658","line":94,"column":21,"nodeType":"1659","messageId":"1660","endLine":94,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":115,"column":36,"nodeType":"1659","messageId":"1660","endLine":115,"endColumn":38},{"ruleId":"1657","severity":1,"message":"1658","line":364,"column":43,"nodeType":"1659","messageId":"1660","endLine":364,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":396,"column":19,"nodeType":"1635","endLine":396,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1872","line":31,"column":10,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1864","line":32,"column":10,"nodeType":"1593","messageId":"1594","endLine":32,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1665","line":83,"column":19,"nodeType":"1659","messageId":"1660","endLine":83,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":131,"column":14,"nodeType":"1659","messageId":"1660","endLine":131,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":146,"column":34,"nodeType":"1659","messageId":"1660","endLine":146,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":295,"column":49,"nodeType":"1659","messageId":"1660","endLine":295,"endColumn":51},{"ruleId":"1657","severity":1,"message":"1658","line":305,"column":49,"nodeType":"1659","messageId":"1660","endLine":305,"endColumn":51},{"ruleId":"1657","severity":1,"message":"1658","line":322,"column":48,"nodeType":"1659","messageId":"1660","endLine":322,"endColumn":50},{"ruleId":"1657","severity":1,"message":"1658","line":587,"column":43,"nodeType":"1659","messageId":"1660","endLine":587,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":619,"column":19,"nodeType":"1635","endLine":619,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1872","line":15,"column":10,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1864","line":16,"column":10,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1835","line":17,"column":10,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1869","line":17,"column":21,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":39,"column":21,"nodeType":"1659","messageId":"1660","endLine":39,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":45,"column":24,"nodeType":"1659","messageId":"1660","endLine":45,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":56,"column":34,"nodeType":"1659","messageId":"1660","endLine":56,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":217,"column":53,"nodeType":"1659","messageId":"1660","endLine":217,"endColumn":55},{"ruleId":"1657","severity":1,"message":"1658","line":255,"column":43,"nodeType":"1659","messageId":"1660","endLine":255,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":287,"column":19,"nodeType":"1635","endLine":287,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1810","line":10,"column":8,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1835","line":39,"column":10,"nodeType":"1593","messageId":"1594","endLine":39,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":71,"column":14,"nodeType":"1659","messageId":"1660","endLine":71,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":77,"column":24,"nodeType":"1659","messageId":"1660","endLine":77,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":78,"column":25,"nodeType":"1659","messageId":"1660","endLine":78,"endColumn":27},{"ruleId":"1657","severity":1,"message":"1658","line":79,"column":26,"nodeType":"1659","messageId":"1660","endLine":79,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":94,"column":34,"nodeType":"1659","messageId":"1660","endLine":94,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":369,"column":43,"nodeType":"1659","messageId":"1660","endLine":369,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":401,"column":19,"nodeType":"1635","endLine":401,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1872","line":20,"column":10,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1864","line":21,"column":10,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1835","line":27,"column":10,"nodeType":"1593","messageId":"1594","endLine":27,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1869","line":27,"column":21,"nodeType":"1593","messageId":"1594","endLine":27,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":65,"column":21,"nodeType":"1659","messageId":"1660","endLine":65,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":71,"column":24,"nodeType":"1659","messageId":"1660","endLine":71,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":77,"column":25,"nodeType":"1659","messageId":"1660","endLine":77,"endColumn":27},{"ruleId":"1657","severity":1,"message":"1658","line":83,"column":24,"nodeType":"1659","messageId":"1660","endLine":83,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":99,"column":34,"nodeType":"1659","messageId":"1660","endLine":99,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":341,"column":53,"nodeType":"1659","messageId":"1660","endLine":341,"endColumn":55},{"ruleId":"1657","severity":1,"message":"1658","line":379,"column":43,"nodeType":"1659","messageId":"1660","endLine":379,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":411,"column":19,"nodeType":"1635","endLine":411,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1592","line":4,"column":29,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":37},{"ruleId":"1597","severity":1,"message":"1873","line":185,"column":6,"nodeType":"1599","endLine":185,"endColumn":22,"suggestions":"1874"},{"ruleId":"1591","severity":1,"message":"1875","line":21,"column":10,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":15},{"ruleId":"1876","severity":1,"message":"1877","line":25,"column":5,"nodeType":"1878","messageId":"1660","endLine":25,"endColumn":14},{"ruleId":"1597","severity":1,"message":"1879","line":158,"column":6,"nodeType":"1599","endLine":158,"endColumn":23,"suggestions":"1880"},{"ruleId":"1591","severity":1,"message":"1881","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1867","line":14,"column":10,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1868","line":14,"column":19,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1882","line":16,"column":10,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1883","line":16,"column":31,"nodeType":"1593","messageId":"1594","endLine":16,"endColumn":53},{"ruleId":"1591","severity":1,"message":"1884","line":17,"column":10,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1885","line":17,"column":30,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":51},{"ruleId":"1591","severity":1,"message":"1886","line":18,"column":10,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1887","line":18,"column":21,"nodeType":"1593","messageId":"1594","endLine":18,"endColumn":33},{"ruleId":"1633","severity":1,"message":"1634","line":107,"column":17,"nodeType":"1635","endLine":111,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1601","line":1,"column":25,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":1,"column":30,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1888","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":12},{"ruleId":"1591","severity":1,"message":"1671","line":7,"column":10,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1861","line":8,"column":8,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1889","line":7,"column":10,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1771","line":12,"column":21,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":106,"column":32,"nodeType":"1659","messageId":"1660","endLine":106,"endColumn":34},{"ruleId":"1591","severity":1,"message":"1890","line":1,"column":27,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":38},{"ruleId":"1591","severity":1,"message":"1891","line":2,"column":8,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1601","line":4,"column":25,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":4,"column":30,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":4,"column":35,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1761","line":7,"column":10,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1892","line":10,"column":5,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1893","line":31,"column":12,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1894","line":31,"column":18,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":30},{"ruleId":"1591","severity":1,"message":"1895","line":41,"column":20,"nodeType":"1593","messageId":"1594","endLine":41,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1872","line":31,"column":10,"nodeType":"1593","messageId":"1594","endLine":31,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1864","line":32,"column":10,"nodeType":"1593","messageId":"1594","endLine":32,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":62,"column":21,"nodeType":"1659","messageId":"1660","endLine":62,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":79,"column":34,"nodeType":"1659","messageId":"1660","endLine":79,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":334,"column":35,"nodeType":"1659","messageId":"1660","endLine":334,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":347,"column":35,"nodeType":"1659","messageId":"1660","endLine":347,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":360,"column":35,"nodeType":"1659","messageId":"1660","endLine":360,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":398,"column":43,"nodeType":"1659","messageId":"1660","endLine":398,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":430,"column":19,"nodeType":"1635","endLine":430,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1896","line":11,"column":10,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1897","line":21,"column":9,"nodeType":"1593","messageId":"1594","endLine":21,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1898","line":26,"column":9,"nodeType":"1593","messageId":"1594","endLine":26,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1864","line":45,"column":10,"nodeType":"1593","messageId":"1594","endLine":45,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1899","line":52,"column":10,"nodeType":"1593","messageId":"1594","endLine":52,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1900","line":53,"column":10,"nodeType":"1593","messageId":"1594","endLine":53,"endColumn":18},{"ruleId":"1591","severity":1,"message":"1835","line":55,"column":10,"nodeType":"1593","messageId":"1594","endLine":55,"endColumn":19},{"ruleId":"1657","severity":1,"message":"1658","line":111,"column":21,"nodeType":"1659","messageId":"1660","endLine":111,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":117,"column":26,"nodeType":"1659","messageId":"1660","endLine":117,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":138,"column":34,"nodeType":"1659","messageId":"1660","endLine":138,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":243,"column":53,"nodeType":"1659","messageId":"1660","endLine":243,"endColumn":55},{"ruleId":"1657","severity":1,"message":"1658","line":473,"column":43,"nodeType":"1659","messageId":"1660","endLine":473,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":505,"column":19,"nodeType":"1635","endLine":505,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1864","line":50,"column":10,"nodeType":"1593","messageId":"1594","endLine":50,"endColumn":20},{"ruleId":"1597","severity":1,"message":"1836","line":76,"column":6,"nodeType":"1599","endLine":76,"endColumn":17,"suggestions":"1901"},{"ruleId":"1657","severity":1,"message":"1658","line":83,"column":21,"nodeType":"1659","messageId":"1660","endLine":83,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":89,"column":24,"nodeType":"1659","messageId":"1660","endLine":89,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":109,"column":36,"nodeType":"1659","messageId":"1660","endLine":109,"endColumn":38},{"ruleId":"1633","severity":1,"message":"1634","line":349,"column":19,"nodeType":"1635","endLine":349,"endColumn":81},{"ruleId":"1657","severity":1,"message":"1658","line":373,"column":43,"nodeType":"1659","messageId":"1660","endLine":373,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":405,"column":19,"nodeType":"1635","endLine":405,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1902","line":4,"column":10,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1903","line":10,"column":8,"nodeType":"1593","messageId":"1594","endLine":10,"endColumn":12},{"ruleId":"1657","severity":1,"message":"1658","line":89,"column":21,"nodeType":"1659","messageId":"1660","endLine":89,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":95,"column":24,"nodeType":"1659","messageId":"1660","endLine":95,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":96,"column":25,"nodeType":"1659","messageId":"1660","endLine":96,"endColumn":27},{"ruleId":"1657","severity":1,"message":"1658","line":97,"column":26,"nodeType":"1659","messageId":"1660","endLine":97,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":115,"column":34,"nodeType":"1659","messageId":"1660","endLine":115,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":385,"column":43,"nodeType":"1659","messageId":"1660","endLine":385,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":417,"column":19,"nodeType":"1635","endLine":417,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1597","severity":1,"message":"1836","line":50,"column":5,"nodeType":"1599","endLine":50,"endColumn":16,"suggestions":"1904"},{"ruleId":"1657","severity":1,"message":"1658","line":58,"column":20,"nodeType":"1659","messageId":"1660","endLine":58,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":64,"column":20,"nodeType":"1659","messageId":"1660","endLine":64,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":82,"column":35,"nodeType":"1659","messageId":"1660","endLine":82,"endColumn":37},{"ruleId":"1633","severity":1,"message":"1634","line":235,"column":19,"nodeType":"1635","endLine":235,"endColumn":81},{"ruleId":"1657","severity":1,"message":"1658","line":259,"column":45,"nodeType":"1659","messageId":"1660","endLine":259,"endColumn":47},{"ruleId":"1633","severity":1,"message":"1634","line":292,"column":17,"nodeType":"1635","endLine":292,"endColumn":79},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1905","line":8,"column":41,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":50},{"ruleId":"1591","severity":1,"message":"1810","line":9,"column":8,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1808","line":11,"column":8,"nodeType":"1593","messageId":"1594","endLine":11,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1809","line":12,"column":8,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":11},{"ruleId":"1591","severity":1,"message":"1719","line":13,"column":8,"nodeType":"1593","messageId":"1594","endLine":13,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1811","line":14,"column":8,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1906","line":15,"column":8,"nodeType":"1593","messageId":"1594","endLine":15,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1872","line":37,"column":10,"nodeType":"1593","messageId":"1594","endLine":37,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1907","line":40,"column":10,"nodeType":"1593","messageId":"1594","endLine":40,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1908","line":40,"column":19,"nodeType":"1593","messageId":"1594","endLine":40,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1835","line":41,"column":10,"nodeType":"1593","messageId":"1594","endLine":41,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1869","line":41,"column":21,"nodeType":"1593","messageId":"1594","endLine":41,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":64,"column":21,"nodeType":"1659","messageId":"1660","endLine":64,"endColumn":23},{"ruleId":"1657","severity":1,"message":"1658","line":70,"column":24,"nodeType":"1659","messageId":"1660","endLine":70,"endColumn":26},{"ruleId":"1657","severity":1,"message":"1658","line":85,"column":34,"nodeType":"1659","messageId":"1660","endLine":85,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1909","line":138,"column":9,"nodeType":"1593","messageId":"1594","endLine":138,"endColumn":13},{"ruleId":"1876","severity":1,"message":"1910","line":172,"column":9,"nodeType":"1878","messageId":"1660","endLine":172,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":410,"column":43,"nodeType":"1659","messageId":"1660","endLine":410,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":442,"column":19,"nodeType":"1635","endLine":442,"endColumn":81},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":37,"column":20,"nodeType":"1659","messageId":"1660","endLine":37,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":43,"column":23,"nodeType":"1659","messageId":"1660","endLine":43,"endColumn":25},{"ruleId":"1657","severity":1,"message":"1658","line":54,"column":33,"nodeType":"1659","messageId":"1660","endLine":54,"endColumn":35},{"ruleId":"1633","severity":1,"message":"1634","line":153,"column":19,"nodeType":"1635","endLine":153,"endColumn":81},{"ruleId":"1657","severity":1,"message":"1658","line":178,"column":43,"nodeType":"1659","messageId":"1660","endLine":178,"endColumn":45},{"ruleId":"1633","severity":1,"message":"1634","line":212,"column":17,"nodeType":"1635","endLine":212,"endColumn":79},{"ruleId":"1591","severity":1,"message":"1592","line":1,"column":17,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1621","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":18,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1644","line":2,"column":25,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1592","line":1,"column":17,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1621","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":18,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1644","line":2,"column":25,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1840","line":4,"column":5,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":37},{"ruleId":"1591","severity":1,"message":"1714","line":17,"column":9,"nodeType":"1593","messageId":"1594","endLine":17,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":65,"column":20,"nodeType":"1659","messageId":"1660","endLine":65,"endColumn":22},{"ruleId":"1657","severity":1,"message":"1658","line":125,"column":41,"nodeType":"1659","messageId":"1660","endLine":125,"endColumn":43},{"ruleId":"1657","severity":1,"message":"1658","line":137,"column":40,"nodeType":"1659","messageId":"1660","endLine":137,"endColumn":42},{"ruleId":"1657","severity":1,"message":"1658","line":148,"column":43,"nodeType":"1659","messageId":"1660","endLine":148,"endColumn":45},{"ruleId":"1657","severity":1,"message":"1658","line":164,"column":46,"nodeType":"1659","messageId":"1660","endLine":164,"endColumn":48},{"ruleId":"1657","severity":1,"message":"1658","line":176,"column":46,"nodeType":"1659","messageId":"1660","endLine":176,"endColumn":48},{"ruleId":"1657","severity":1,"message":"1658","line":187,"column":41,"nodeType":"1659","messageId":"1660","endLine":187,"endColumn":43},{"ruleId":"1657","severity":1,"message":"1658","line":200,"column":44,"nodeType":"1659","messageId":"1660","endLine":200,"endColumn":46},{"ruleId":"1657","severity":1,"message":"1658","line":209,"column":44,"nodeType":"1659","messageId":"1660","endLine":209,"endColumn":46},{"ruleId":"1591","severity":1,"message":"1592","line":1,"column":17,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":25},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":10,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1591","severity":1,"message":"1639","line":2,"column":8,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1911","line":9,"column":3,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":17},{"ruleId":"1679","severity":1,"message":"1912","line":37,"column":37,"nodeType":"1681","messageId":"1682","endLine":37,"endColumn":56,"fix":"1913"},{"ruleId":"1657","severity":1,"message":"1658","line":61,"column":19,"nodeType":"1659","messageId":"1660","endLine":61,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":65,"column":19,"nodeType":"1659","messageId":"1660","endLine":65,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":69,"column":19,"nodeType":"1659","messageId":"1660","endLine":69,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":109,"column":22,"nodeType":"1659","messageId":"1660","endLine":109,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1658","line":109,"column":47,"nodeType":"1659","messageId":"1660","endLine":109,"endColumn":49},{"ruleId":"1591","severity":1,"message":"1914","line":121,"column":13,"nodeType":"1593","messageId":"1594","endLine":121,"endColumn":15},{"ruleId":"1657","severity":1,"message":"1665","line":132,"column":22,"nodeType":"1659","messageId":"1660","endLine":132,"endColumn":24},{"ruleId":"1657","severity":1,"message":"1665","line":132,"column":47,"nodeType":"1659","messageId":"1660","endLine":132,"endColumn":49},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":20},{"ruleId":"1657","severity":1,"message":"1658","line":23,"column":39,"nodeType":"1659","messageId":"1660","endLine":23,"endColumn":41},{"ruleId":"1657","severity":1,"message":"1658","line":34,"column":46,"nodeType":"1659","messageId":"1660","endLine":34,"endColumn":48},{"ruleId":"1657","severity":1,"message":"1658","line":56,"column":46,"nodeType":"1659","messageId":"1660","endLine":56,"endColumn":48},{"ruleId":"1597","severity":1,"message":"1915","line":92,"column":6,"nodeType":"1599","endLine":92,"endColumn":35,"suggestions":"1916"},{"ruleId":"1657","severity":1,"message":"1658","line":167,"column":40,"nodeType":"1659","messageId":"1660","endLine":167,"endColumn":42},{"ruleId":"1657","severity":1,"message":"1658","line":198,"column":33,"nodeType":"1659","messageId":"1660","endLine":198,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":271,"column":33,"nodeType":"1659","messageId":"1660","endLine":271,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1917","line":19,"column":10,"nodeType":"1593","messageId":"1594","endLine":19,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1918","line":19,"column":23,"nodeType":"1593","messageId":"1594","endLine":19,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":37,"column":31,"nodeType":"1659","messageId":"1660","endLine":37,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":136,"column":46,"nodeType":"1659","messageId":"1660","endLine":136,"endColumn":48},{"ruleId":"1657","severity":1,"message":"1658","line":139,"column":52,"nodeType":"1659","messageId":"1660","endLine":139,"endColumn":54},{"ruleId":"1657","severity":1,"message":"1658","line":168,"column":46,"nodeType":"1659","messageId":"1660","endLine":168,"endColumn":48},{"ruleId":"1657","severity":1,"message":"1658","line":168,"column":74,"nodeType":"1659","messageId":"1660","endLine":168,"endColumn":76},{"ruleId":"1657","severity":1,"message":"1658","line":173,"column":52,"nodeType":"1659","messageId":"1660","endLine":173,"endColumn":54},{"ruleId":"1657","severity":1,"message":"1658","line":195,"column":52,"nodeType":"1659","messageId":"1660","endLine":195,"endColumn":54},{"ruleId":"1657","severity":1,"message":"1658","line":259,"column":37,"nodeType":"1659","messageId":"1660","endLine":259,"endColumn":39},{"ruleId":"1657","severity":1,"message":"1658","line":49,"column":19,"nodeType":"1659","messageId":"1660","endLine":49,"endColumn":21},{"ruleId":"1657","severity":1,"message":"1658","line":51,"column":26,"nodeType":"1659","messageId":"1660","endLine":51,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":53,"column":26,"nodeType":"1659","messageId":"1660","endLine":53,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":55,"column":26,"nodeType":"1659","messageId":"1660","endLine":55,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":57,"column":26,"nodeType":"1659","messageId":"1660","endLine":57,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":59,"column":26,"nodeType":"1659","messageId":"1660","endLine":59,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":61,"column":26,"nodeType":"1659","messageId":"1660","endLine":61,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":63,"column":26,"nodeType":"1659","messageId":"1660","endLine":63,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":65,"column":26,"nodeType":"1659","messageId":"1660","endLine":65,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":67,"column":26,"nodeType":"1659","messageId":"1660","endLine":67,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":69,"column":26,"nodeType":"1659","messageId":"1660","endLine":69,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":71,"column":26,"nodeType":"1659","messageId":"1660","endLine":71,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":73,"column":26,"nodeType":"1659","messageId":"1660","endLine":73,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":75,"column":26,"nodeType":"1659","messageId":"1660","endLine":75,"endColumn":28},{"ruleId":"1657","severity":1,"message":"1658","line":236,"column":35,"nodeType":"1659","messageId":"1660","endLine":236,"endColumn":37},{"ruleId":"1657","severity":1,"message":"1658","line":237,"column":34,"nodeType":"1659","messageId":"1660","endLine":237,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":238,"column":34,"nodeType":"1659","messageId":"1660","endLine":238,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":239,"column":34,"nodeType":"1659","messageId":"1660","endLine":239,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":240,"column":34,"nodeType":"1659","messageId":"1660","endLine":240,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":241,"column":34,"nodeType":"1659","messageId":"1660","endLine":241,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":242,"column":34,"nodeType":"1659","messageId":"1660","endLine":242,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":243,"column":34,"nodeType":"1659","messageId":"1660","endLine":243,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":244,"column":34,"nodeType":"1659","messageId":"1660","endLine":244,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":245,"column":34,"nodeType":"1659","messageId":"1660","endLine":245,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":246,"column":34,"nodeType":"1659","messageId":"1660","endLine":246,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":247,"column":34,"nodeType":"1659","messageId":"1660","endLine":247,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":248,"column":34,"nodeType":"1659","messageId":"1660","endLine":248,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":249,"column":34,"nodeType":"1659","messageId":"1660","endLine":249,"endColumn":36},{"ruleId":"1657","severity":1,"message":"1658","line":250,"column":34,"nodeType":"1659","messageId":"1660","endLine":250,"endColumn":36},{"ruleId":"1591","severity":1,"message":"1919","line":2,"column":8,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":15},{"ruleId":"1597","severity":1,"message":"1920","line":22,"column":16,"nodeType":"1593","endLine":22,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1890","line":1,"column":10,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1921","line":4,"column":8,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1922","line":20,"column":21,"nodeType":"1593","messageId":"1594","endLine":20,"endColumn":33},{"ruleId":"1657","severity":1,"message":"1658","line":122,"column":38,"nodeType":"1659","messageId":"1660","endLine":122,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":123,"column":35,"nodeType":"1659","messageId":"1660","endLine":123,"endColumn":37},{"ruleId":"1591","severity":1,"message":"1643","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1601","line":2,"column":25,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":2,"column":30,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1752","line":2,"column":42,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":47},{"ruleId":"1591","severity":1,"message":"1923","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1714","line":14,"column":9,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1601","line":1,"column":25,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":1,"column":30,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1924","line":24,"column":10,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":17},{"ruleId":"1591","severity":1,"message":"1925","line":24,"column":19,"nodeType":"1593","messageId":"1594","endLine":24,"endColumn":29},{"ruleId":"1591","severity":1,"message":"1601","line":2,"column":25,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":28},{"ruleId":"1591","severity":1,"message":"1602","line":2,"column":30,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":33},{"ruleId":"1591","severity":1,"message":"1636","line":2,"column":35,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":40},{"ruleId":"1657","severity":1,"message":"1658","line":33,"column":14,"nodeType":"1659","messageId":"1660","endLine":33,"endColumn":16},{"ruleId":"1657","severity":1,"message":"1658","line":38,"column":17,"nodeType":"1659","messageId":"1660","endLine":38,"endColumn":19},{"ruleId":"1591","severity":1,"message":"1891","line":2,"column":8,"nodeType":"1593","messageId":"1594","endLine":2,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1926","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1597","severity":1,"message":"1927","line":21,"column":6,"nodeType":"1599","endLine":21,"endColumn":8,"suggestions":"1928"},{"ruleId":"1591","severity":1,"message":"1636","line":1,"column":35,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":40},{"ruleId":"1591","severity":1,"message":"1824","line":3,"column":8,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":20},{"ruleId":"1591","severity":1,"message":"1929","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":22},{"ruleId":"1591","severity":1,"message":"1930","line":5,"column":3,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1602","line":8,"column":10,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":13},{"ruleId":"1591","severity":1,"message":"1639","line":12,"column":8,"nodeType":"1593","messageId":"1594","endLine":12,"endColumn":14},{"ruleId":"1597","severity":1,"message":"1931","line":64,"column":6,"nodeType":"1599","endLine":64,"endColumn":18,"suggestions":"1932"},{"ruleId":"1597","severity":1,"message":"1933","line":101,"column":5,"nodeType":"1599","endLine":101,"endColumn":7,"suggestions":"1934"},{"ruleId":"1597","severity":1,"message":"1935","line":241,"column":6,"nodeType":"1599","endLine":241,"endColumn":19,"suggestions":"1936"},{"ruleId":"1657","severity":1,"message":"1658","line":13,"column":43,"nodeType":"1659","messageId":"1660","endLine":13,"endColumn":45},{"ruleId":"1657","severity":1,"message":"1658","line":25,"column":50,"nodeType":"1659","messageId":"1660","endLine":25,"endColumn":52},{"ruleId":"1657","severity":1,"message":"1658","line":48,"column":50,"nodeType":"1659","messageId":"1660","endLine":48,"endColumn":52},{"ruleId":"1597","severity":1,"message":"1937","line":85,"column":6,"nodeType":"1599","endLine":85,"endColumn":50,"suggestions":"1938"},{"ruleId":"1657","severity":1,"message":"1658","line":95,"column":42,"nodeType":"1659","messageId":"1660","endLine":95,"endColumn":44},{"ruleId":"1657","severity":1,"message":"1658","line":103,"column":33,"nodeType":"1659","messageId":"1660","endLine":103,"endColumn":35},{"ruleId":"1657","severity":1,"message":"1658","line":111,"column":33,"nodeType":"1659","messageId":"1660","endLine":111,"endColumn":35},{"ruleId":"1591","severity":1,"message":"1939","line":5,"column":8,"nodeType":"1593","messageId":"1594","endLine":5,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1940","line":9,"column":8,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1941","line":14,"column":9,"nodeType":"1593","messageId":"1594","endLine":14,"endColumn":21},{"ruleId":"1591","severity":1,"message":"1942","line":7,"column":8,"nodeType":"1593","messageId":"1594","endLine":7,"endColumn":12},{"ruleId":"1591","severity":1,"message":"1838","line":201,"column":11,"nodeType":"1593","messageId":"1594","endLine":201,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1838","line":214,"column":11,"nodeType":"1593","messageId":"1594","endLine":214,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1838","line":228,"column":11,"nodeType":"1593","messageId":"1594","endLine":228,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":269,"column":42,"nodeType":"1659","messageId":"1660","endLine":269,"endColumn":44},{"ruleId":"1591","severity":1,"message":"1762","line":1,"column":17,"nodeType":"1593","messageId":"1594","endLine":1,"endColumn":26},{"ruleId":"1591","severity":1,"message":"1943","line":28,"column":10,"nodeType":"1593","messageId":"1594","endLine":28,"endColumn":24},{"ruleId":"1591","severity":1,"message":"1838","line":96,"column":11,"nodeType":"1593","messageId":"1594","endLine":96,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":123,"column":42,"nodeType":"1659","messageId":"1660","endLine":123,"endColumn":44},{"ruleId":"1591","severity":1,"message":"1838","line":153,"column":11,"nodeType":"1593","messageId":"1594","endLine":153,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1838","line":166,"column":11,"nodeType":"1593","messageId":"1594","endLine":166,"endColumn":14},{"ruleId":"1657","severity":1,"message":"1658","line":200,"column":42,"nodeType":"1659","messageId":"1660","endLine":200,"endColumn":44},{"ruleId":"1591","severity":1,"message":"1671","line":3,"column":10,"nodeType":"1593","messageId":"1594","endLine":3,"endColumn":14},{"ruleId":"1591","severity":1,"message":"1944","line":4,"column":10,"nodeType":"1593","messageId":"1594","endLine":4,"endColumn":16},{"ruleId":"1591","severity":1,"message":"1945","line":8,"column":10,"nodeType":"1593","messageId":"1594","endLine":8,"endColumn":23},{"ruleId":"1591","severity":1,"message":"1946","line":9,"column":8,"nodeType":"1593","messageId":"1594","endLine":9,"endColumn":20},"no-native-reassign",["1947"],"no-negated-in-lhs",["1948"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'io' is defined but never used.","'Error404' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'path'. Either include it or remove the dependency array.","ArrayExpression",["1949"],"'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'LoginSocialGoogle' is defined but never used.","'IResolveParams' is defined but never used.","'googleIcon' is defined but never used.","'REDIRECT_URI' is assigned a value but never used.","'setName' is assigned a value but never used.","'onSignup' is assigned a value but never used.","'provider' is assigned a value but never used.","'setProvider' is assigned a value but never used.","'profile' is assigned a value but never used.","'setProfile' is assigned a value but never used.","'onLoginStart' is assigned a value but never used.","'onSocialLogin' is assigned a value but never used.","'GET_PERMISSION_FAILED_ACTION' is defined but never used.","'testDaySchudele' is defined but never used.","'reportsList' is defined but never used.","'Verification' is defined but never used.","'clearErrors' is defined but never used.","'Button' is defined but never used.","'authenticator' is defined but never used.","'validCode' is assigned a value but never used.","'isCodeValid' is assigned a value but never used.","'setIsCodeValid' is assigned a value but never used.","'setSecret' is assigned a value but never used.","'onLogin' is defined but never used.","'sendOtpAgain' is assigned a value but never used.","'handleLoginAgain' is assigned a value but never used.","'getCode' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSecret'. Either include it or remove the dependency array.",["1950"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Badge' is defined but never used.","'searchIcon' is defined but never used.","'listIcon' is defined but never used.","'useSWR' is defined but never used.","React Hook useEffect has a missing dependency: 'callAllCompApi'. Either include it or remove the dependency array.",["1951"],"'quickPlayIcon' is defined but never used.","'defaultComparisonIcon' is defined but never used.","'Dropdown' is defined but never used.","'moment' is defined but never used.","'menuIcon' is defined but never used.","'deleteIcon' is defined but never used.","'edit' is defined but never used.","'selectedScreen' is assigned a value but never used.","'setSelectedScreen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSchedule'. Either include it or remove the dependency array.",["1952"],"'handleEditSchedule' is assigned a value but never used.","'handleDefaultScreen' is assigned a value but never used.","'convertTimestampTo12HourFormat' is defined but never used.","'findEndTime' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'formatError' is defined but never used.","'runLogoutTimer' is defined but never used.","'signUp' is defined but never used.","'verification2fa' is defined but never used.","Expected '!==' and instead saw '!='.","'rapidHeader' is assigned a value but never used.","'submitHandler' is assigned a value but never used.","'useRef' is defined but never used.","'getAllMedia' is defined but never used.","'getAllDaySequence' is defined but never used.","'Link' is defined but never used.","'MyCustomPlugin' is assigned a value but never used.","'sequence' is assigned a value but never used.","'setSequence' is assigned a value but never used.","'mutate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callSingleDaySequence'. Either include it or remove the dependency array.",["1953"],"'id' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"timing\"] found.","Property","unnecessarilyComputedProperty",{"range":"1954","text":"1955"},"Unnecessarily computed property ['startTime'] found.",{"range":"1956","text":"1957"},"Unnecessarily computed property ['endTime'] found.",{"range":"1958","text":"1959"},{"range":"1960","text":"1955"},{"range":"1961","text":"1955"},{"range":"1962","text":"1957"},{"range":"1963","text":"1959"},"'da' is defined but never used.","'activeCard' is assigned a value but never used.","'setActiveCard' is assigned a value but never used.","'selectedButtonIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAllDaySequence'. Either include it or remove the dependency array.",["1964"],"'handleWeekCellChange' is assigned a value but never used.","'schedulename' is assigned a value but never used.",{"range":"1965","text":"1955"},{"range":"1966","text":"1957"},{"range":"1967","text":"1959"},{"range":"1968","text":"1955"},{"range":"1969","text":"1955"},"Unnecessarily computed property [\"startTime\"] found.",{"range":"1970","text":"1971"},"Unnecessarily computed property [\"endTime\"] found.",{"range":"1972","text":"1973"},{"range":"1974","text":"1955"},{"range":"1975","text":"1971"},{"range":"1976","text":"1973"},{"range":"1977","text":"1955"},"'nameAvatar' is defined but never used.","'history' is assigned a value but never used.","'handlePublishcOpen' is assigned a value but never used.","'onFullScreenn' is assigned a value but never used.","'divElement' is assigned a value but never used.","'onFullScreenh' is assigned a value but never used.","'Paper' is defined but never used.","'getWeather' is defined but never used.","'Parser' is defined but never used.","'weathericon' is defined but never used.","'yellow' is defined but never used.","'blue' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","'txt' is assigned a value but never used.","'cdate' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["1978"],"React Hook useEffect has a missing dependency: 'callMediaDetailApi'. Either include it or remove the dependency array.",["1979"],"'GridToolbarExport' is defined but never used.","'FilterModal' is defined but never used.","'filterData' is assigned a value but never used.","'setFilterData' is assigned a value but never used.","'showFilterModal' is assigned a value but never used.","'setFilterModal' is assigned a value but never used.","'tagsRender' is assigned a value but never used.","'connect' is defined but never used.","'scheduleIcon' is defined but never used.","'Table' is defined but never used.","'deleteSchedule' is defined but never used.","'getAllSchedule' is defined but never used.","'getQuickPlay' is defined but never used.","'deleteQuickPlay' is defined but never used.","'getDefaultComposition' is defined but never used.","'getAllScreens' is defined but never used.","'getAllComposition' is defined but never used.","'setDefaultComposition' is defined but never used.","'BASE_URL' is defined but never used.","'useEffect' is defined but never used.","'TableLoader' is defined but never used.","'LockScreen' is defined but never used.","'SelectScreenModal' is defined but never used.","'useHistory' is defined but never used.","'formatedDt' is assigned a value but never used.","'maxTime' is assigned a value but never used.","'endTime' is assigned a value but never used.","'name' is assigned a value but never used.","'setPublished' is assigned a value but never used.","'setEvents' is assigned a value but never used.","'daySequence' is assigned a value but never used.","'seqArray' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs",["1980"],"'currentMonth' is assigned a value but never used.","'checkboxKey' is assigned a value but never used.","'disablePrp' is assigned a value but never used.","'hasEvent' is assigned a value but never used.","'event' is assigned a value but never used.","'desiredFormat' is assigned a value but never used.","'eventToRemove' is assigned a value but never used.","'setState' is assigned a value but never used.","'newEvent' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'timeText' is assigned a value but never used.","'useParams' is defined but never used.","'published' is assigned a value but never used.","'renderSchedule' is assigned a value but never used.","'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1981"],"React Hook useEffect has a missing dependency: 'callAllScreenApi'. Either include it or remove the dependency array.",["1982"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'selectedGroups'. Either include it or remove the dependency array. You can also do a functional update 'setSelectedGroups(s => ...)' if you only need 'selectedGroups' in the 'setSelectedGroups' call.",["1983"],"'handleQuickPlay' is assigned a value but never used.","'setQuickplay' is defined but never used.","React Hook useEffect has missing dependencies: 'permission' and 'reportSlug'. Either include them or remove the dependency array.",["1984"],"'Carousel' is defined but never used.","'Box' is defined but never used.","'Switch' is defined but never used.","'Slide' is defined but never used.","'FormControlLabel' is defined but never used.","'list' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'roles' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'PhotoEditorSDK' is defined but never used.","React Hook useEffect has a missing dependency: 'callAllMedialApi'. Either include it or remove the dependency array.",["1985"],"React Hook useEffect has missing dependencies: 'callAllScreenApi' and 'filterData'. Either include them or remove the dependency array.",["1986"],"'tagCloseIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'callAllTagsApi'. Either include it or remove the dependency array.",["1987"],"Unnecessarily computed property [\"live\"] found.",{"range":"1988","text":"1989"},"Unnecessarily computed property [\"offline\"] found.",{"range":"1990","text":"1991"},"Unnecessarily computed property [\"deactivated\"] found.",{"range":"1992","text":"1993"},"'checkedItems' is assigned a value but never used.","'handleSelectAllChange' is assigned a value but never used.","'isRefresh' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'actionType'. Either include it or remove the dependency array.",["1994"],"'prp' is assigned a value but never used.","'getDatetimeIn12Hours' is defined but never used.","'humanReadableFormattedDateString' is defined but never used.","'renderDefault' is assigned a value but never used.","'addMedia' is defined but never used.","'emptyMediaImg' is defined but never used.","'parseMeta' is assigned a value but never used.","'jsonData' is assigned a value but never used.","Unnecessarily computed property [\"x\"] found.",{"range":"1995","text":"1996"},"Unnecessarily computed property [\"y\"] found.",{"range":"1997","text":"1998"},"'addDeviceProfile' is defined but never used.","'columns' is assigned a value but never used.","'AddNewTagModal' is defined but never used.","'downArrow' is defined but never used.","'veiwDetailIcon' is defined but never used.","'assignIcon' is defined but never used.","'updateGroups' is defined but never used.","'Modal' is defined but never used.","'Editor' is defined but never used.","React Hook useEffect has a missing dependency: 'roles'. Either include it or remove the dependency array.",["1999"],"'Select' is defined but never used.","'options' is assigned a value but never used.","'updateUsers' is defined but never used.","'errMessage' is assigned a value but never used.",["2000"],"'authResponse' is assigned a value but never used.","'preview' is assigned a value but never used.","'setPreview' is assigned a value but never used.","'setIsRefresh' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actionType' and 'data'. Either include them or remove the dependency array.",["2001"],"'err' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setIsRefresh' and 'setOpenEditor'. Either include them or remove the dependency array. If 'setOpenEditor' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2002"],"'cesdk' is assigned a value but never used.","no-dupe-keys","Duplicate key 'callbacks'.","ObjectExpression","React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["2003"],"'ImageRotation' is defined but never used.","'selectedCroppedFile' is assigned a value but never used.","'setSelectedCroppedFile' is assigned a value but never used.","'selectedCroppedUrl' is assigned a value but never used.","'setSelectedCroppedUrl' is assigned a value but never used.","'checkCrop' is assigned a value but never used.","'setCheckCrop' is assigned a value but never used.","'icon' is defined but never used.","'toast' is defined but never used.","'useCallback' is defined but never used.","'ReactDOM' is defined but never used.","'DialogActions' is defined but never used.","'zoom' is assigned a value but never used.","'onZoomChange' is assigned a value but never used.","'url' is assigned a value but never used.","'Preview' is defined but never used.","'languageOptions' is assigned a value but never used.","'timeZoneOptions' is assigned a value but never used.","'timeZone' is assigned a value but never used.","'language' is assigned a value but never used.",["2004"],"'usePlacesWidget' is defined but never used.","'Form' is defined but never used.",["2005"],"'rssParser' is defined but never used.","'newsimg' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'data' is assigned a value but never used.","Duplicate key 'urlLink'.","'getAllMediaSWR' is defined but never used.","Unnecessarily computed property [\"zone\"] found.",{"range":"2006","text":"2007"},"'dt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contentnew.Zone1', 'contentnew.Zone2', 'contentnew.Zone3', 'current2Index', and 'layout'. Either include them or remove the dependency array.",["2008"],"'activeClass' is assigned a value but never used.","'setActiveClass' is assigned a value but never used.","'videojs' is defined but never used.","The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function.","'WebVideoPlayer' is defined but never used.","'setIsLoading' is assigned a value but never used.","'person' is defined but never used.","'bgStyle' is assigned a value but never used.","'setBgStyle' is assigned a value but never used.","'getCroppedImg' is defined but never used.","React Hook useCallback has a missing dependency: 'setCroppedAreaPixels'. Either include it or remove the dependency array. If 'setCroppedAreaPixels' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2009"],"'layoutSelected' is defined but never used.","'getCompositionById' is defined but never used.","React Hook useEffect has a missing dependency: 'getScreenCode'. Either include it or remove the dependency array.",["2010"],"React Hook useEffect has missing dependencies: 'getScreenCode' and 'id'. Either include them or remove the dependency array.",["2011"],"React Hook useEffect has a missing dependency: 'handleAddClass'. Either include it or remove the dependency array. If 'handleAddClass' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["2012"],"React Hook useEffect has a missing dependency: 'contents'. Either include it or remove the dependency array.",["2013"],"'PerfectScrollbar' is defined but never used.","'avatar' is defined but never used.","'onFullScreen' is assigned a value but never used.","'logo' is defined but never used.","'dividerClasses' is defined but never used.","'logout' is defined but never used.","'mfaEnablePost' is defined but never used.","'base32Decode' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"2014","fix":"2015"},{"desc":"2016","fix":"2017"},{"desc":"2018","fix":"2019"},{"desc":"2020","fix":"2021"},{"desc":"2022","fix":"2023"},[4466,4476],"\"timing\"",[4527,4540],"'startTime'",[4606,4617],"'endTime'",[4741,4751],[5744,5754],[5783,5796],[5840,5851],{"desc":"2024","fix":"2025"},[2942,2952],[3003,3016],[3082,3093],[3217,3227],[5069,5079],[5106,5119],"\"startTime\"",[5162,5173],"\"endTime\"",[6515,6525],[6576,6589],[6656,6667],[6782,6792],{"desc":"2026","fix":"2027"},{"desc":"2028","fix":"2029"},{"desc":"2024","fix":"2030"},{"desc":"2031","fix":"2032"},{"desc":"2033","fix":"2034"},{"desc":"2035","fix":"2036"},{"desc":"2037","fix":"2038"},{"desc":"2039","fix":"2040"},{"desc":"2041","fix":"2042"},{"desc":"2043","fix":"2044"},[3699,3707],"\"live\"",[4388,4399],"\"offline\"",[5098,5113],"\"deactivated\"",{"desc":"2045","fix":"2046"},[10673,10678],"\"x\"",[11459,11464],"\"y\"",{"desc":"2047","fix":"2048"},{"desc":"2045","fix":"2049"},{"desc":"2050","fix":"2051"},{"desc":"2052","fix":"2053"},{"desc":"2054","fix":"2055"},{"desc":"2045","fix":"2056"},{"desc":"2045","fix":"2057"},[1537,1545],"\"zone\"",{"desc":"2058","fix":"2059"},{"desc":"2060","fix":"2061"},{"desc":"2062","fix":"2063"},{"desc":"2064","fix":"2065"},{"desc":"2066","fix":"2067"},{"desc":"2068","fix":"2069"},"Update the dependencies array to be: [dispatch, path, props.history]",{"range":"2070","text":"2071"},"Update the dependencies array to be: [getSecret]",{"range":"2072","text":"2073"},"Update the dependencies array to be: [callAllCompApi, isRefresh]",{"range":"2074","text":"2075"},"Update the dependencies array to be: [publishType, isRefresh, getSchedule]",{"range":"2076","text":"2077"},"Update the dependencies array to be: [callSingleDaySequence, schId]",{"range":"2078","text":"2079"},"Update the dependencies array to be: [callAllDaySequence, id]",{"range":"2080","text":"2081"},"Update the dependencies array to be: [editItem, slides, isRefresh, id]",{"range":"2082","text":"2083"},"Update the dependencies array to be: [callMediaDetailApi, id]",{"range":"2084","text":"2085"},{"range":"2086","text":"2081"},"Update the dependencies array to be: [getData, id]",{"range":"2087","text":"2088"},"Update the dependencies array to be: [callAllScreenApi, isRefresh]",{"range":"2089","text":"2090"},"Update the dependencies array to be: [screen, selectedGroups]",{"range":"2091","text":"2092"},"Update the dependencies array to be: [permission, reportData, reportSlug]",{"range":"2093","text":"2094"},"Update the dependencies array to be: [callAllMedialApi, isRefresh]",{"range":"2095","text":"2096"},"Update the dependencies array to be: [callAllScreenApi, filterData, isRefresh]",{"range":"2097","text":"2098"},"Update the dependencies array to be: [callAllTagsApi]",{"range":"2099","text":"2100"},"Update the dependencies array to be: [actionType, mediaData]",{"range":"2101","text":"2102"},"Update the dependencies array to be: [makeRefresh, roles, rolesData]",{"range":"2103","text":"2104"},{"range":"2105","text":"2102"},"Update the dependencies array to be: [actionType, data, mediaData, tokenDetailsString]",{"range":"2106","text":"2107"},"Update the dependencies array to be: [cesdkContainer, setIsRefresh, setOpenEditor]",{"range":"2108","text":"2109"},"Update the dependencies array to be: [cesdk_container, config]",{"range":"2110","text":"2111"},{"range":"2112","text":"2102"},{"range":"2113","text":"2102"},"Update the dependencies array to be: [currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",{"range":"2114","text":"2115"},"Update the dependencies array to be: [setCroppedAreaPixels]",{"range":"2116","text":"2117"},"Update the dependencies array to be: [getScreenCode, isVerified]",{"range":"2118","text":"2119"},"Update the dependencies array to be: [getScreenCode, id]",{"range":"2120","text":"2121"},"Update the dependencies array to be: [composition, handleAddClass]",{"range":"2122","text":"2123"},"Update the dependencies array to be: [currentIndex, current1Index, current2Index, contents]",{"range":"2124","text":"2125"},[1616,1641],"[dispatch, path, props.history]",[4884,4886],"[getSecret]",[1612,1623],"[callAllCompApi, isRefresh]",[4013,4037],"[publishType, isRefresh, getSchedule]",[3942,3949],"[callSingleDaySequence, schId]",[2306,2310],"[callAllDaySequence, id]",[7480,7509],"[editItem, slides, isRefresh, id]",[7594,7598],"[callMediaDetailApi, id]",[1578,1582],[936,940],"[getData, id]",[2393,2404],"[callAllScreenApi, isRefresh]",[2635,2643],"[screen, selectedGroups]",[2269,2281],"[permission, reportData, reportSlug]",[2094,2105],"[callAllMedialApi, isRefresh]",[1116,1127],"[callAllScreenApi, filterData, isRefresh]",[772,774],"[callAllTagsApi]",[2137,2148],"[actionType, mediaData]",[639,663],"[makeRefresh, roles, rolesData]",[2620,2631],[3408,3438],"[actionType, data, mediaData, tokenDetailsString]",[6056,6072],"[cesdkContainer, setIsRefresh, setOpenEditor]",[5233,5250],"[cesdk_container, config]",[3103,3114],[2118,2129],[3591,3620],"[currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",[546,548],"[setCroppedAreaPixels]",[2172,2184],"[getScreenCode, isVerified]",[3277,3279],"[getScreenCode, id]",[8140,8153],"[composition, handleAddClass]",[3596,3640],"[currentIndex, current1Index, current2Index, contents]"]