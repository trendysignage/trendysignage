<<<<<<< HEAD
[{"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\index.js":"1","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\store.js":"3","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\App.js":"4","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\context\\ThemeContext.js":"5","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\Reducers.js":"6","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\PostsReducer.js":"7","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\AuthReducer.js":"8","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\services\\AuthService.js":"9","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\selectors\\AuthSelectors.js":"10","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\ForgotPassword.js":"11","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Login.js":"12","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Error404.js":"13","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Registration.js":"14","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\index.jsx":"15","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Layout.jsx":"16","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\PushScreen.jsx":"17","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\actions\\AuthActions.js":"18","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\actions\\PostTypes.js":"19","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\index.jsx":"20","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDaySchudele.js":"21","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDay.js":"22","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SequenceEdit.js":"23","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SecondMonth.js":"24","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DesignMonthSchedule.js":"25","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DaySchedule.js":"26","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\Footer.js":"27","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\ScrollToTop.js":"28","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\UtilsService.js":"29","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\api.js":"30","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\ChooseLayout.jsx":"31","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\MonthSchedule.jsx":"32","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyTestDay.jsx":"33","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SelectComparison.jsx":"34","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyMonthSchedule.jsx":"35","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\viewSchedule.jsx":"36","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\reportsList.jsx":"37","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\details.jsx":"38","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CreateComposition.jsx":"39","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\listComposition.jsx":"40","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\EditComposition.jsx":"41","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\TableLoader.jsx":"42","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\index.js":"43","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\index.jsx":"44","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\index.jsx":"45","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\index.jsx":"46","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\index.jsx":"47","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\index.jsx":"48","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\main.jsx":"49","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DeleteConfirmation.jsx":"50","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\PublishMediaModal.jsx":"51","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Media.jsx":"52","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Audit.jsx":"53","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Uptime.jsx":"54","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionActions.jsx":"55","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\Common.jsx":"56","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\QuickPlayModal.jsx":"57","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\WindowsModal.jsx":"58","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UpdateModal.jsx":"59","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddNewTagModal.jsx":"60","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Header.js":"61","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\ChatBox.js":"62","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\NavHader.js":"63","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\FilterModal.jsx":"64","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\BulletinBoardAppModal.jsx":"65","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AirQualityAppModal.jsx":"66","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\YoutubeAppModal.jsx":"67","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\StocksAppModal.jsx":"68","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\QrCodeModal.jsx":"69","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\WeatherAppModal.jsx":"70","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\TextAppModal.jsx":"71","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\ClockApp.jsx":"72","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UrlAppModal.jsx":"73","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\RssFeedAppModal.jsx":"74","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\ScrollerTextAppModal.jsx":"75","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\compositionPlayer.jsx":"76","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\WebVideoPlayer.jsx":"77","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddDeviceProfile.jsx":"78","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\profile.jsx":"79","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Logout.js":"80","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UploadMediaFileModal.jsx":"81","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\saveCompositionName.jsx":"82","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Alerts.js":"83","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Chat.js":"84","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\layouts\\viewDetails.jsx":"85","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\previewComposition.jsx":"86","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Notes.js":"87","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionTable.jsx":"88","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\ZoneInfoTable.jsx":"89","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\duplicateComposition.jsx":"90","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DragMove.jsx":"91","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddMedia.jsx":"92","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\SelectScreenModal.jsx":"93","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\MsgBox.js":"94","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\fileUploadWithPreview.jsx":"95","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\editSelectedComposition.jsx":"96","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\group.jsx":"97","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\roles.jsx":"98","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddGroup.jsx":"99","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddUserModal.jsx":"100","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\defaultComposition.jsx":"101","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\User.jsx":"102","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\listScreens.jsx":"103","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddScreenModal.jsx":"104","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\listMedia.jsx":"105","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\generateReportModal.jsx":"106","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\SideBar.js":"107","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\cropImage.jsx":"108","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\index.jsx":"109","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\tagInputField.jsx":"110","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\CompolistionListModel.jsx":"111","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DefaultCompositionModal.jsx":"112","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\fetchClient.js":"113","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\Clock.js":"114","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone1.jsx":"115","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone3.jsx":"116","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone2.jsx":"117"},{"size":1396,"mtime":1688586140504,"results":"118","hashOfConfig":"119"},{"size":375,"mtime":1683793012246,"results":"120","hashOfConfig":"119"},{"size":777,"mtime":1683793014367,"results":"121","hashOfConfig":"119"},{"size":3457,"mtime":1688064842291,"results":"122","hashOfConfig":"119"},{"size":1906,"mtime":1683793002186,"results":"123","hashOfConfig":"119"},{"size":1054,"mtime":1683793014360,"results":"124","hashOfConfig":"119"},{"size":1739,"mtime":1683793014359,"results":"125","hashOfConfig":"119"},{"size":1878,"mtime":1683793014357,"results":"126","hashOfConfig":"119"},{"size":2508,"mtime":1683793014341,"results":"127","hashOfConfig":"119"},{"size":122,"mtime":1683793014366,"results":"128","hashOfConfig":"119"},{"size":2091,"mtime":1683793012170,"results":"129","hashOfConfig":"119"},{"size":7445,"mtime":1687204651451,"results":"130","hashOfConfig":"119"},{"size":1036,"mtime":1683793012167,"results":"131","hashOfConfig":"119"},{"size":5838,"mtime":1683793012175,"results":"132","hashOfConfig":"119"},{"size":4846,"mtime":1689874679469,"results":"133","hashOfConfig":"119"},{"size":2278,"mtime":1687204651389,"results":"134","hashOfConfig":"119"},{"size":33804,"mtime":1691317421458,"results":"135","hashOfConfig":"119"},{"size":2659,"mtime":1683793014352,"results":"136","hashOfConfig":"119"},{"size":513,"mtime":1683793014353,"results":"137","hashOfConfig":"119"},{"size":2805,"mtime":1687284325124,"results":"138","hashOfConfig":"119"},{"size":5556,"mtime":1687204651404,"results":"139","hashOfConfig":"119"},{"size":13288,"mtime":1689189942986,"results":"140","hashOfConfig":"119"},{"size":15139,"mtime":1688907522621,"results":"141","hashOfConfig":"119"},{"size":26986,"mtime":1687283721923,"results":"142","hashOfConfig":"119"},{"size":16483,"mtime":1689189942956,"results":"143","hashOfConfig":"119"},{"size":9537,"mtime":1687204651389,"results":"144","hashOfConfig":"119"},{"size":431,"mtime":1683793012103,"results":"145","hashOfConfig":"119"},{"size":256,"mtime":1683793012106,"results":"146","hashOfConfig":"119"},{"size":3847,"mtime":1687638348313,"results":"147","hashOfConfig":"119"},{"size":11530,"mtime":1691940619349,"results":"148","hashOfConfig":"119"},{"size":4601,"mtime":1687686798438,"results":"149","hashOfConfig":"119"},{"size":6027,"mtime":1687283721921,"results":"150","hashOfConfig":"119"},{"size":6765,"mtime":1687204651389,"results":"151","hashOfConfig":"119"},{"size":11956,"mtime":1688907522596,"results":"152","hashOfConfig":"119"},{"size":45744,"mtime":1687283721841,"results":"153","hashOfConfig":"119"},{"size":6430,"mtime":1688658331859,"results":"154","hashOfConfig":"119"},{"size":3264,"mtime":1690541443531,"results":"155","hashOfConfig":"119"},{"size":15695,"mtime":1687799402090,"results":"156","hashOfConfig":"119"},{"size":607,"mtime":1687686798466,"results":"157","hashOfConfig":"119"},{"size":5062,"mtime":1687204651389,"results":"158","hashOfConfig":"119"},{"size":1094,"mtime":1687204651389,"results":"159","hashOfConfig":"119"},{"size":330,"mtime":1683793012038,"results":"160","hashOfConfig":"119"},{"size":983,"mtime":1683793012131,"results":"161","hashOfConfig":"119"},{"size":7474,"mtime":1691317421490,"results":"162","hashOfConfig":"119"},{"size":2397,"mtime":1683793012075,"results":"163","hashOfConfig":"119"},{"size":4176,"mtime":1687204651389,"results":"164","hashOfConfig":"119"},{"size":6932,"mtime":1691347077658,"results":"165","hashOfConfig":"119"},{"size":38935,"mtime":1691842276466,"results":"166","hashOfConfig":"119"},{"size":8395,"mtime":1691921012605,"results":"167","hashOfConfig":"119"},{"size":804,"mtime":1683793012158,"results":"168","hashOfConfig":"119"},{"size":7768,"mtime":1691317421562,"results":"169","hashOfConfig":"119"},{"size":1525,"mtime":1690541443481,"results":"170","hashOfConfig":"119"},{"size":1710,"mtime":1691435469546,"results":"171","hashOfConfig":"119"},{"size":2321,"mtime":1690541443502,"results":"172","hashOfConfig":"119"},{"size":7242,"mtime":1689879338609,"results":"173","hashOfConfig":"119"},{"size":8999,"mtime":1691689721737,"results":"174","hashOfConfig":"119"},{"size":6459,"mtime":1687204651451,"results":"175","hashOfConfig":"119"},{"size":1008,"mtime":1687204651451,"results":"176","hashOfConfig":"119"},{"size":2751,"mtime":1687204651451,"results":"177","hashOfConfig":"119"},{"size":2460,"mtime":1687204651436,"results":"178","hashOfConfig":"119"},{"size":3776,"mtime":1683793012109,"results":"179","hashOfConfig":"119"},{"size":2328,"mtime":1683793012097,"results":"180","hashOfConfig":"119"},{"size":863,"mtime":1683793012110,"results":"181","hashOfConfig":"119"},{"size":3413,"mtime":1683793012158,"results":"182","hashOfConfig":"119"},{"size":8419,"mtime":1691959838919,"results":"183","hashOfConfig":"119"},{"size":3633,"mtime":1689874679474,"results":"184","hashOfConfig":"119"},{"size":6689,"mtime":1691942421926,"results":"185","hashOfConfig":"119"},{"size":8761,"mtime":1691952424105,"results":"186","hashOfConfig":"119"},{"size":7279,"mtime":1691943506272,"results":"187","hashOfConfig":"119"},{"size":9638,"mtime":1691861106921,"results":"188","hashOfConfig":"119"},{"size":11654,"mtime":1691954721264,"results":"189","hashOfConfig":"119"},{"size":10061,"mtime":1691871353516,"results":"190","hashOfConfig":"119"},{"size":6968,"mtime":1691681063074,"results":"191","hashOfConfig":"119"},{"size":5571,"mtime":1690573799005,"results":"192","hashOfConfig":"119"},{"size":10033,"mtime":1691860992975,"results":"193","hashOfConfig":"119"},{"size":9057,"mtime":1691919783568,"results":"194","hashOfConfig":"119"},{"size":2505,"mtime":1687284325121,"results":"195","hashOfConfig":"119"},{"size":14405,"mtime":1691341697461,"results":"196","hashOfConfig":"119"},{"size":10163,"mtime":1691573401238,"results":"197","hashOfConfig":"119"},{"size":1250,"mtime":1683793012110,"results":"198","hashOfConfig":"119"},{"size":3844,"mtime":1689708531769,"results":"199","hashOfConfig":"119"},{"size":2267,"mtime":1687204651451,"results":"200","hashOfConfig":"119"},{"size":5894,"mtime":1683793012045,"results":"201","hashOfConfig":"119"},{"size":12953,"mtime":1683793012046,"results":"202","hashOfConfig":"119"},{"size":4257,"mtime":1687204651451,"results":"203","hashOfConfig":"119"},{"size":15522,"mtime":1687799402327,"results":"204","hashOfConfig":"119"},{"size":5948,"mtime":1683793012059,"results":"205","hashOfConfig":"119"},{"size":7712,"mtime":1691946365135,"results":"206","hashOfConfig":"119"},{"size":11207,"mtime":1691684713487,"results":"207","hashOfConfig":"119"},{"size":2627,"mtime":1687204651451,"results":"208","hashOfConfig":"119"},{"size":938,"mtime":1690541443807,"results":"209","hashOfConfig":"119"},{"size":9757,"mtime":1690541443783,"results":"210","hashOfConfig":"119"},{"size":7905,"mtime":1690541443807,"results":"211","hashOfConfig":"119"},{"size":12988,"mtime":1683793012047,"results":"212","hashOfConfig":"119"},{"size":4399,"mtime":1689708770315,"results":"213","hashOfConfig":"119"},{"size":6574,"mtime":1687686798507,"results":"214","hashOfConfig":"119"},{"size":4279,"mtime":1690541443617,"results":"215","hashOfConfig":"119"},{"size":65176,"mtime":1691340616835,"results":"216","hashOfConfig":"119"},{"size":6372,"mtime":1690541443777,"results":"217","hashOfConfig":"119"},{"size":7430,"mtime":1691325522866,"results":"218","hashOfConfig":"119"},{"size":3741,"mtime":1691604967183,"results":"219","hashOfConfig":"119"},{"size":7125,"mtime":1690541443562,"results":"220","hashOfConfig":"119"},{"size":9139,"mtime":1689953648863,"results":"221","hashOfConfig":"119"},{"size":10281,"mtime":1687204651436,"results":"222","hashOfConfig":"119"},{"size":12189,"mtime":1691318924513,"results":"223","hashOfConfig":"119"},{"size":7850,"mtime":1691317421634,"results":"224","hashOfConfig":"119"},{"size":6297,"mtime":1691317421554,"results":"225","hashOfConfig":"119"},{"size":2661,"mtime":1687599996173,"results":"226","hashOfConfig":"119"},{"size":798,"mtime":1687284325112,"results":"227","hashOfConfig":"119"},{"size":1756,"mtime":1683793012080,"results":"228","hashOfConfig":"119"},{"size":7324,"mtime":1689953648863,"results":"229","hashOfConfig":"119"},{"size":6808,"mtime":1689189942994,"results":"230","hashOfConfig":"119"},{"size":810,"mtime":1683793014370,"results":"231","hashOfConfig":"119"},{"size":1494,"mtime":1691869607015,"results":"232","hashOfConfig":"119"},{"size":8692,"mtime":1691940879452,"results":"233","hashOfConfig":"119"},{"size":15654,"mtime":1691913738568,"results":"234","hashOfConfig":"119"},{"size":11933,"mtime":1691872758869,"results":"235","hashOfConfig":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},"vv2hle",{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"238"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"238"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"238"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"238"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"238"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"286","usedDeprecatedRules":"238"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":4,"source":"289","usedDeprecatedRules":"238"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"238"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"238"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"238"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"238"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"238"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"238"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"238"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"238"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"238"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"238"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"238"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"238"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"238"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"238"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"238"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"238"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"238"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"238"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"238"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"238"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"238"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"377","usedDeprecatedRules":"238"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"238"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"238"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"238"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"238"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"238"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"401","messages":"402","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"238"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"406","messages":"407","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"408","messages":"409","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"410","messages":"411","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"238"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"415","messages":"416","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"238"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"238"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"238"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"238"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"238"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"238"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"435","usedDeprecatedRules":"238"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"238"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"238"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"238"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"238"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"460","messages":"461","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"238"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"238"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"238"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"238"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"238"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"238"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"238"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"238"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"238"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"238"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"238"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"238"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"238"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"238"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"238"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"238"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"238"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"531","messages":"532","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"238"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"238"},"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\index.js",[],["537","538"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\store.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\App.js",["539","540","541","542"],"import { lazy, Suspense, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n/// Components\r\nimport Index from './jsx/index';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\n// action\r\nimport { checkAutoLogin } from './services/AuthService';\r\nimport { isAuthenticated } from './store/selectors/AuthSelectors';\r\n/// Style\r\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./css/style.css\";\r\nimport Webplayer from './jsx/components/web-player';\r\nimport Layout from './jsx/components/layout/Layout';\r\nimport PushScreen from './jsx/components/push/PushScreen';\r\nimport Error404 from './jsx/pages/Error404';\r\n// import { socket } from './utils/socket';\r\n\r\n\r\nconst SignUp = lazy(() => import('./jsx/pages/Registration'));\r\nconst ForgotPassword = lazy(() => import('./jsx/pages/ForgotPassword'));\r\nconst Login = lazy(() => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => resolve(import('./jsx/pages/Login')), 500);\r\n    });\r\n});\r\nfunction App(props) {\r\n    let path = window.location.pathname\r\n    path = path.split('/')\r\n    path = path[path.length - 1]\r\n    // const [isConnected, setIsConnected] = useState(socket.connected);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (path !== 'web-player') {\r\n            checkAutoLogin(dispatch, props.history);\r\n        }\r\n\r\n    }, [dispatch, props.history]);\r\n    let routes = (\r\n        <Switch>\r\n            <Route path='/login' component={Login} />\r\n            <Route path='/page-register' component={SignUp} />\r\n            <Route path='/page-forgot-password' component={ForgotPassword} />\r\n            <Route path='/layout' component={Layout} />\r\n            <Route path='/push' component={PushScreen} />\r\n\r\n\r\n        </Switch>\r\n    );\r\n    if (path === 'web-player') {\r\n        return (\r\n            <Switch>\r\n                <Route path='/web-player' component={Webplayer} />\r\n            </Switch>\r\n        )\r\n    }\r\n    else if (props.isAuthenticated) {\r\n        return (\r\n            <>\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    <Index />\r\n                </Suspense>\r\n            </>\r\n        );\r\n\r\n    } else {\r\n        return (\r\n            <div className=\"vh-100\">\r\n                <Suspense fallback={\r\n                    <div id=\"preloader\">\r\n                        <div className=\"sk-three-bounce\">\r\n                            <div className=\"sk-child sk-bounce1\"></div>\r\n                            <div className=\"sk-child sk-bounce2\"></div>\r\n                            <div className=\"sk-child sk-bounce3\"></div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                >\r\n                    {routes}\r\n                </Suspense>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuthenticated: isAuthenticated(state),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(App)); \r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\context\\ThemeContext.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\Reducers.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\PostsReducer.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\reducers\\AuthReducer.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\services\\AuthService.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\selectors\\AuthSelectors.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\ForgotPassword.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Login.js",["543","544","545"],"import React, { useState } from 'react'\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport { loadingToggleAction,loginAction,\r\n} from '../../store/actions/AuthActions';\r\nimport { Row, Col, Card,  Tab, Nav, Button } from 'react-bootstrap'\r\n//\r\nimport logo from '../../img/logo.png'\r\nimport eyeOff from '../../img/eye-off.svg'\r\nimport googleIcon from '../../img/google-icon.png'\r\n\r\nfunction Login (props) {\r\n    const [email, setEmail] = useState('demo@example.com');\r\n    let errorsObj = { email: '', password: '' };\r\n    const [errors, setErrors] = useState(errorsObj);\r\n    const [password, setPassword] = useState('123456');\r\n    const dispatch = useDispatch();\r\n\r\n    function onLogin(e) {\r\n        e.preventDefault();\r\n        let error = false;\r\n        const errorObj = { ...errorsObj };\r\n        if (email === '') {\r\n            errorObj.email = 'Email is Required';\r\n            error = true;\r\n        }\r\n        if (password === '') {\r\n            errorObj.password = 'Password is Required';\r\n            error = true;\r\n        }\r\n        setErrors(errorObj);\r\n        if (error) {\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\tdispatch(loadingToggleAction(true));\t\r\n        dispatch(loginAction(email, password, props.history));\r\n    }\r\n\r\n\r\n\tconst tabData = [\r\n\t\t{\r\n\t\t  name: 'Sign in',\r\n\t\t  content:\t<div>\r\n\t\t  <div className=\"mb-4\">\r\n\t\t\t  <h3 className=\"mb-1 font-w600\">Welcome Back</h3>\r\n\t\t\t  <p className=\"welcome-content-paragraph\">Log in with your data that you entered during your registration</p>\r\n\t\t  </div>\r\n\t\t  {props.errorMessage && (\r\n\t\t\t  <div className='bg-red-300 text-red-900 border border-red-900 p-1 my-2'>\r\n\t\t\t\t  {props.errorMessage}\r\n\t\t\t  </div>\r\n\t\t  )}\r\n\t\t  {props.successMessage && (\r\n\t\t\t  <div className='bg-green-300 text-green-900 border border-green-900 p-1 my-2'>\r\n\t\t\t\t  {props.successMessage}\r\n\t\t\t  </div>\r\n\t\t  )}\r\n\t\t  <form onSubmit={onLogin}>\r\n\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t  <input type=\"email\" className=\"form-control\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n\t\t\t\t  {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"form-group password-textfield\">\r\n\t\t\t\t  <input type=\"password\" className=\"form-control\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n\t\t\t  <span className='eye-off'><img src={eyeOff} alt=\"\" className=\"eye-off\"/> </span>\r\n\t\t\t\t  {errors.password && <div className=\"text-danger fs-12\">{errors.password}</div>}\r\n\t\t\t  </div>\r\n\t\t\t  <div className='recover-password d-flex justify-content-end'>\r\n\t\t\t\t  <Link  className='revover-password'  to=\"./page-register\">Recover Password ?</Link>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"text-center\">\r\n\t\t\t\t  <button type=\"submit\" className=\"btn btn-primary btn-block btn-pink\">Sign In</button>\r\n\t\t\t  </div>\r\n\t\t  </form>\r\n\t\t  <div className=\"new-account add-new-account  text-center mt-2\">\r\n\t\t\t  <p className=\"mb-0\">Don't have an account?{\" \"}\r\n\t\t\t\t  <Link className=\"signup-link\" to=\"./page-register\">Sign up</Link>\r\n\t\t\t  </p>\r\n\t\t  </div>\r\n\r\n\t\t  <Button className='btn-google-signin' variant='outline-primary'>\r\n\t\t  <img src={googleIcon} alt=\"\" className=\"logo-icon mr-2\"/> <span>Sign in with Google</span>\r\n\t\t  </Button>\r\n\t\t  </div>\r\n\r\n\t\t},\r\n\t\t{\r\n\t\t  name: 'Register',\r\n\t\t  content:<div>\r\n\t\t  <div className=\"mb-4\">\r\n\t\t\t  <h3 className=\"mb-1 font-w600\">Let’s get Started</h3>\r\n\t\t\t  <p className=\"welcome-content-paragraph\">Enter your basic information to create new account on Trendyy</p>\r\n\t\t  </div>\r\n\t\t  {props.errorMessage && (\r\n\t\t\t  <div className='bg-red-300 text-red-900 border border-red-900 p-1 my-2'>\r\n\t\t\t\t  {props.errorMessage}\r\n\t\t\t  </div>\r\n\t\t  )}\r\n\t\t  {props.successMessage && (\r\n\t\t\t  <div className='bg-green-300 text-green-900 border border-green-900 p-1 my-2'>\r\n\t\t\t\t  {props.successMessage}\r\n\t\t\t  </div>\r\n\t\t  )}\r\n\t\t  <form onSubmit={onLogin}>\r\n\t\t  <div className=\"form-group\">\r\n\t\t\t\t  <input type=\"text\" className=\"form-control\" placeholder='Enter Name' value='Enter Name'/>\r\n\t\t\t\t  {/* {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>} */}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t  <input type=\"email\" className=\"form-control\" value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n\t\t\t\t  {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t  <input type=\"phone\" className=\"form-control\" placeholder='Phone Number' value='Phone Number'/>\r\n\t\t\t\t  {/* {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>} */}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"form-group password-textfield\">\r\n\t\t\t\t  <input type=\"password\" className=\"form-control\" value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n\t\t\t  <span className='eye-off'><img src={eyeOff} alt=\"\" className=\"eye-off\"/> </span>\r\n\t\t\t\t  {errors.password && <div className=\"text-danger fs-12\">{errors.password}</div>}\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"text-center\">\r\n\t\t\t\t  <button type=\"submit\" className=\"btn btn-primary btn-block btn-pink\">Register</button>\r\n\t\t\t  </div>\r\n\t\t  </form>\r\n\t\t  <div className=\"new-account add-new-account  text-center mt-2\">\r\n\t\t\t  <p className=\"mb-0\">Already have an account?{\" \"}\r\n\t\t\t\t  <Link className=\"signup-link\" to=\"./page-register\">Sign in</Link>\r\n\t\t\t  </p>\r\n\t\t  </div>\r\n\t\t  </div>\r\n\t\t},\r\n\r\n\t\r\n\t  ]\r\n  return (\r\n  \r\n\t\t<div className=\"login-form-bx auth-page\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-lg-8 col-md-7 d-flex box-skew1 relative login-leftpanel\">\r\n\t\t\t\t\t\t<div className=\"inner-content align-self-center\">\r\n\t\t\t\t\t\t\t<Link to=\"/dashboard\" className=\"login-logo\">\r\n\t\t\t\t\t\t\t\t<img src={logo} alt=\"\" className=\"logo-icon mr-2\"/>\r\n\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t<h2 className=\"m-b10 text-white\">Sign In to <br/> Trendy Website</h2>\r\n\t\t\t\t\t\t\t<p className=\"m-b40 text-white\">Boost your engagement & productivity, streamline processes, and make faster communications.</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className='login-center-img'>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"col-lg-4 col-md-5 box-skew d-flex pl-0 pr-0 login-rightpanel\">\r\n\t\t\t\t\t\t<div className=\"authincation-content\">\r\n\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t<Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\r\n                <Nav as='ul' className='nav-pills light'>\r\n\t\t\t\t{tabData.map((data, i) => (\r\n                      <Nav.Item as='li' key={i}>\r\n                        <Nav.Link eventKey={data.name.toLowerCase()}>\r\n                          <i className={`la la-${data.icon} mr-2`} />\r\n                          {data.name}\r\n                        </Nav.Link>\r\n                      </Nav.Item>\r\n                    ))}\r\n                </Nav>\r\n                <Tab.Content className='auth-tab-content'>\r\n\t\t\t\t{tabData.map((data, i) => (\r\n                        <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\r\n\t\t\t\t\t\t\t<div>{data.content}</div>\r\n\t\t\t\t\t\t\r\n                         \r\n                        </Tab.Pane> \r\n                      )\r\n                  )}\r\n                </Tab.Content>\r\n              </Tab.Container>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        errorMessage: state.auth.errorMessage,\r\n        successMessage: state.auth.successMessage,\r\n        showLoading: state.auth.showLoading,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Login);","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Error404.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\pages\\Registration.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\index.jsx",["546","547"],"import React, { useState } from \"react\";\r\n/// React router dom\r\nimport { Switch, Route } from \"react-router-dom\";\r\n/// Css\r\nimport \"./index.css\";\r\nimport \"./chart.css\";\r\nimport \"./step.css\";\r\nimport \"./custom.css\";\r\n\r\n/// Layout\r\nimport Nav from \"./layouts/nav\";\r\nimport Footer from \"./layouts/Footer\";\r\n\r\n/// Dashboard\r\nimport Screen from \"./components/screen\";\r\n\r\n//Scroll To Top\r\nimport ScrollToTop from \"./layouts/ScrollToTop\";\r\nimport Media from \"./components/media\";\r\nimport Settings from \"./components/settings\";\r\n// import Webplayer from './components/web-player'\r\nimport ScreenDetails from \"./components/screen/details\";\r\nimport Layout from \"./components/layout/Layout\";\r\nimport ChooseLayout from \"./components/layout/ChooseLayout\";\r\nimport CreateComposition from \"./components/layout/Composition/CreateComposition\";\r\nimport Push from \"./components/push/PushScreen\";\r\nimport SelectComparison from \"./components/push/SelectComparison\";\r\nimport EditComposition from \"./components/layout/Composition/EditComposition\";\r\nimport DaySchedule from \"./components/push/DaySchedule\";\r\nimport testDaySchudele from \"./components/push/TestDaySchudele\";\r\nimport TestDaySchudele from \"./components/push/TestDaySchudele\";\r\nimport TestDay from \"./components/push/TestDay\";\r\nimport CopyTestDay from \"./components/push/CopyTestDay\";\r\nimport MonthSchedule from \"./components/push/MonthSchedule\";\r\nimport CopyMonthSchedule from \"./components/push/CopyMonthSchedule\";\r\nimport SecondMonth from \"./components/push/SecondMonth\";\r\nimport DesignMonthSchedule from \"./components/push/DesignMonthSchedule\";\r\nimport ViewSchedule from \"./components/push/viewSchedule\";\r\nimport Integrations from \"./components/integrations\";\r\nimport Reports from \"./components/reports\";\r\nimport SequenceTime from \"./components/push/SequenceEdit\";\r\nimport reportsList from \"./components/reports/reportsList\";\r\nimport ReportsList from \"./components/reports/reportsList\";\r\n\r\nconst Markup = () => {\r\n  let path = window.location.pathname;\r\n  path = path.split(\"/\");\r\n  path = path[path.length - 1];\r\n  let pagePath = path.split(\"-\").includes(\"page\");\r\n  const [activeEvent, setActiveEvent] = useState(!path);\r\n\r\n  const routes = [\r\n    /// Dashboard\r\n    { url: \"\", component: Screen },\r\n    { url: \"display\", component: Screen },\r\n    { url: \"assets\", component: Media },\r\n    { url: \"settings\", component: Settings },\r\n    { url: \"layout\", component: Layout },\r\n    { url: \"chooselayout\", component: ChooseLayout },\r\n    { url: \"createComposition\", component: CreateComposition },\r\n    { url: \"composition/edit\", component: EditComposition },\r\n    { url: \"push\", component: Push },\r\n    { url: \"SelectComparison\", component: SelectComparison },\r\n    // {url: \"web-player\", component: Webplayer},\r\n    { url: \"display/:id\", component: ScreenDetails },\r\n    { url: \"dayschedule/:id\", component: DaySchedule },\r\n    { url: \"test\", component: TestDaySchudele },\r\n    { url: \"testday/:id\", component: TestDay },\r\n    { url: \"copytestday\", component: CopyTestDay },\r\n    { url: \"monthschedule\", component: MonthSchedule },\r\n    { url: \"copymonthschedule\", component: CopyMonthSchedule },\r\n    { url: \"secondmonth\", component: SecondMonth },\r\n    { url: \"design-month-schedule/:id\", component: DesignMonthSchedule },\r\n    { url: \"push/view/:id\", component: ViewSchedule },\r\n    { url: \"integrations\", component: Integrations },\r\n    { url: \"push/sequence/:schId/:seqId\", component: SequenceTime },\r\n\r\n    { url: \"reports\", component: Reports },\r\n    { url: \"reports-list\", component: ReportsList },\r\n  ];\r\n  console.log(path);\r\n  return (\r\n    <>\r\n      <div\r\n        id={`${!pagePath ? \"main-wrapper\" : \"\"}`}\r\n        className={`${!pagePath ? \"show\" : \"mh100vh\"}`}\r\n      >\r\n        {!pagePath && path !== \"web-player\" && (\r\n          <Nav\r\n            onClick={() => setActiveEvent(!activeEvent)}\r\n            activeEvent={activeEvent}\r\n            onClick2={() => setActiveEvent(false)}\r\n            onClick3={() => setActiveEvent(true)}\r\n          />\r\n        )}\r\n        <div\r\n          className={` ${!path && activeEvent ? \"rightside-event\" : \"\"} ${\r\n            !pagePath ? \"content-body content-body-custom\" : \"\"\r\n          } ${path === \"web-player\" ? \"web-player-body\" : \"\"}`}\r\n        >\r\n          <div\r\n            className={`${!pagePath ? \"container-fluid\" : \"\"}`}\r\n            style={{ minHeight: window.screen.height - 60 }}\r\n          >\r\n            <Switch>\r\n              {routes.map((data, i) => (\r\n                <Route\r\n                  key={i}\r\n                  exact\r\n                  path={`/${data.url}`}\r\n                  component={data.component}\r\n                />\r\n              ))}\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n        {!pagePath && <Footer />}\r\n      </div>\r\n      <ScrollToTop />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Markup;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Layout.jsx",["548","549"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\nimport emptyMediaImg from \"../../../img/layout-img.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useSWR from 'swr'\r\nimport { getAllComposition } from \"../../../utils/api\";\r\nimport ListComposition from \"./Composition/listComposition\";\r\nconst Layout = () => {\r\n  const { data: allComposition, mutate } = useSWR('/vendor/layouts/compositions', getAllComposition);\r\n \r\n  return (\r\n    <div>\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1>Layouts</h1>\r\n      </div>\r\n      <div className=\"form-head d-flex mb-3 align-items-start\">\r\n        <Link\r\n          to={{\r\n            pathname: `/chooselayout`,\r\n          }}\r\n          className=\"mr-2 add-composition-btn\"\r\n        >\r\n          Add Composition <span className=\"btn-icon-right\">\r\n            <div class=\"glyph-icon flaticon-381-add-1\"></div>\r\n          </span>\r\n        </Link>\r\n        <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {!allComposition &&   <div className=\"empty-media text-center\">\r\n        <div class=\"empty-media-img layout-empty-img mx-auto\">\r\n          <img\r\n            className=\"media-img img-fluid\"\r\n            src={emptyMediaImg}\r\n            alt=\"media-img\"\r\n          />\r\n        </div>\r\n        <h3>Add Composition</h3>\r\n        <p>\r\n          Add Media files to composition, Lorem ipsum dolor is a dummy <br />{\" \"}\r\n          text. Dummy text.\r\n        </p>\r\n      </div>}\r\n    \r\n      {allComposition && <ListComposition allComposition={allComposition}  mutate={mutate}/>}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\PushScreen.jsx",["550","551","552","553"],"import React, { useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport scheduleIcon from \"../../../img/schedule-icon.png\";\r\nimport quickPlayIcon from \"../../../img/quickplay-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/comparison-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n  deleteSchedule,\r\n  getAllSchedule,\r\n  getQuickPlay,\r\n  deleteQuickPlay,\r\n  getDefaultComposition,\r\n  getAllScreens,\r\n  getAllComposition,\r\n  setDefaultComposition,\r\n} from \"../../../utils/api\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport moment from \"moment\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport edit from \"../../../img/edit-composition.png\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TableLoader from \"../../components/TableLoader\";\r\n\r\nconst PushScreen = () => {\r\n  const history = useHistory();\r\n  const [scheduleData, setScheduleData] = useState([]);\r\n  const [quickPlayData, setQuickPlayData] = useState([]);\r\n  const [defaultData, setDefaultData] = useState([]);\r\n  const [showPublishBtn, setShowPublishBtn] = useState(false);\r\n  const [publishType, setPublishType] = useState(\"schedule\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [showDefaultScreen, setShowDefaultScreen] = useState(false);\r\n  const [showDefaultComp, setShowDefaultComp] = useState(false);\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [checkedValuesComp, setCheckedValuesComp] = useState(null);\r\n  const [allComposition, setAllComposition] = useState([]);\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n\r\n  const callAllScreenApi = async () => {\r\n    const list = await getAllScreens();\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const getAllCompositionList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllComposition();\r\n    console.log(\"lsit\", list);\r\n    setAllComposition(list);\r\n    setLoading(false);\r\n  };\r\n\r\n  async function getSchedule() {\r\n    setLoading(true);\r\n    await getAllSchedule().then((res) => {\r\n      console.log(res, \"res push screen\");\r\n      setScheduleData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  async function getQuickplay() {\r\n    setLoading(true);\r\n    await getQuickPlay().then((res) => {\r\n      console.log(res, \"res Quickplay\");\r\n      setQuickPlayData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  async function getDefault() {\r\n    setLoading(true);\r\n    await getDefaultComposition().then((res) => {\r\n      console.log(res.data, \"res Default\");\r\n      setDefaultData(res.data.data);\r\n      setLoading(false);\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    getSchedule();\r\n    callAllScreenApi();\r\n    getAllCompositionList();\r\n    if (publishType && publishType === \"schedule\") {\r\n      getSchedule();\r\n    }\r\n    if (publishType && publishType === \"quickplay\") {\r\n      getQuickplay();\r\n    }\r\n    if (publishType && publishType === \"defaultComposition\") {\r\n      getDefault();\r\n    }\r\n  }, [publishType]);\r\n\r\n  function handleDeleteSchedule(id) {\r\n    deleteSchedule(id).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        getSchedule();\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleDeleteQuickPlay = (e, id) => {\r\n    e.preventDefault();\r\n    deleteQuickPlay(id).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        getQuickplay();\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleEditSchedule = (e, id) => {\r\n    e.preventDefault();\r\n    history.push(`/design-month-schedule/${id}`);\r\n  };\r\n\r\n  const handleDefaultScreen = (e) => {\r\n    e.preventDefault();\r\n    setShowDefaultScreen(true);\r\n  };\r\n\r\n  function convertTimestampTo12HourFormat(timestamp) {\r\n    if (!timestamp) {\r\n      return \"Invalid timestamp\";\r\n    }\r\n    if (timestamp === \"time not find\") {\r\n      return \"Invalid timestamp\";\r\n    }\r\n\r\n    const timeParts = timestamp.split(\"T\")[1].split(\".\")[0].split(\":\");\r\n    let hours = 0;\r\n    const minutes = timeParts[1];\r\n\r\n    if (timeParts.length >= 1) {\r\n      hours = parseInt(timeParts[0]);\r\n\r\n      let amPm;\r\n      if (hours >= 12) {\r\n        amPm = \"PM\";\r\n        if (hours > 12) {\r\n          hours -= 12;\r\n        }\r\n      } else {\r\n        amPm = \"AM\";\r\n        if (hours === 0) {\r\n          hours = 12;\r\n        }\r\n      }\r\n\r\n      const convertedTime = `${hours}:${minutes} ${amPm}`;\r\n      return convertedTime;\r\n    } else {\r\n      return \"Invalid timestamp format\";\r\n    }\r\n  }\r\n\r\n  function findEndTime(value) {\r\n    if (!value || value === undefined) {\r\n      return \"time not find\";\r\n    }\r\n    if (value !== undefined) {\r\n      return value?.timings[value.timings.length - 1]?.endTime;\r\n    }\r\n  }\r\n\r\n  const handleCheckboxChange = (event, type) => {\r\n    if (type == \"screen\") {\r\n      const newCheckedItems = {\r\n        ...checkedItems,\r\n        [event.target.name]: event.target.checked,\r\n      };\r\n      const selectedScreens = [];\r\n      for (const key in newCheckedItems) {\r\n        if (newCheckedItems[key] === true) {\r\n          selectedScreens.push(key);\r\n        }\r\n      }\r\n      setCheckedValues(selectedScreens);\r\n      setCheckedItems(newCheckedItems);\r\n    } else {\r\n      setCheckedValuesComp(event.target.name);\r\n    }\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleProceed = (e, type) => {\r\n    if (type == \"screen\") {\r\n      e.preventDefault();\r\n      setShowDefaultComp(true);\r\n      setShowDefaultScreen(false);\r\n    }\r\n  };\r\n\r\n  const handleProceedComp = async (e, type) => {\r\n    e.preventDefault();\r\n    console.log(checkedValues, checkedItems, checkedValuesComp);\r\n    await setDefaultComposition({\r\n      screens: checkedValues,\r\n      compositionId: checkedValuesComp,\r\n    });\r\n    setShowDefaultComp(false);\r\n    setShowDefaultScreen(false);\r\n    setShowPublishBtn(!showPublishBtn);\r\n    setCheckedItems([]);\r\n    setCheckedValues([]);\r\n    setCheckedValuesComp(null);\r\n    setPublishType(\"defaultComposition\");\r\n  };\r\n\r\n  const handlePublish = (e) => {\r\n    e.preventDefault();\r\n    if (showPublishBtn === true) {\r\n      setShowDefaultComp(false);\r\n      setShowDefaultScreen(false);\r\n      setCheckedItems([]);\r\n      setCheckedValues([]);\r\n      setCheckedValuesComp(null);\r\n      setPublishType(\"schedule\");\r\n    }\r\n    setShowPublishBtn(!showPublishBtn);\r\n  };\r\n\r\n  // const handleSubmit = async () => {\r\n  //  await publishMedia({\r\n  //     id: selected._id,\r\n  //     screenIds: checkedValues,\r\n  //     duration: 600,\r\n  //     type:type\r\n  //   });\r\n  //   await setQuickplay({\r\n  //     name,\r\n  //     compositionId: selected._id,\r\n  //     screens: checkedValues,\r\n  //     duration: 600\r\n  //   });\r\n  //   setPublished(true);\r\n  //   // setShowPublishPopUp(false);\r\n  // };\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading d-flex flex-wrap flex-row align-items-center justify-content-between\">\r\n        <div>\r\n          <h1 className=\"mb-1\">Push</h1>\r\n          <p className=\"three-layout-paragrapgh\">\r\n            How would you like to publish your content?\r\n          </p>\r\n        </div>\r\n        {scheduleData.length !== 0 && (\r\n          <Button\r\n            className=\"\"\r\n            variant=\"info add-screen-btn\"\r\n            type=\"button\"\r\n            onClick={(e) => handlePublish(e)}\r\n          >\r\n            Publish\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"layout-row push-row mb-4\">\r\n        {showPublishBtn && !showDefaultScreen && !showDefaultComp ? (\r\n          <Row>\r\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n              <Link\r\n                to={{\r\n                  pathname: `/SelectComparison`,\r\n                }}\r\n              >\r\n                <div className=\"push-column text-center\">\r\n                  <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                    <img\r\n                      className=\"layout-select-img\"\r\n                      src={scheduleIcon}\r\n                      alt=\"menu-icon\"\r\n                    />\r\n                  </div>\r\n                  <h6>Schedule</h6>\r\n                  <p>\r\n                    Scheduled content gets displayed only for time you choose\r\n                  </p>\r\n                </div>\r\n              </Link>\r\n            </Col>\r\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={quickPlayIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Quickplay</h6>\r\n                <p>\r\n                  Quickplay let's you display content instantly. Can be used\r\n                  Emergency cases\r\n                </p>\r\n              </div>\r\n            </Col>\r\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={defaultComparisonIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Default Composition</h6>\r\n                <p>\r\n                  Default content keeps on playing irrespective of the time when\r\n                  there is no active\r\n                </p>\r\n                <button\r\n                  onClick={(e) => {\r\n                    handleDefaultScreen(e);\r\n                  }}\r\n                >\r\n                  Add Content\r\n                </button>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {!showPublishBtn && (\r\n          <div className=\"d-flex mb-2 mt-3\">\r\n            <Button\r\n              className={\r\n                publishType === \"schedule\"\r\n                  ? \"mr-3 activeType\"\r\n                  : \"mr-3 push-screen-btn\"\r\n              }\r\n              variant=\"info \"\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                setPublishType(\"schedule\");\r\n              }}\r\n            >\r\n              Schedule\r\n            </Button>\r\n\r\n            <Button\r\n              className={\r\n                publishType === \"quickplay\"\r\n                  ? \"mr-3 activeType\"\r\n                  : \"mr-3 push-screen-btn\"\r\n              }\r\n              variant=\"info \"\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                setPublishType(\"quickplay\");\r\n              }}\r\n            >\r\n              Quickplay\r\n            </Button>\r\n            <Button\r\n              className={\r\n                publishType === \"defaultComposition\"\r\n                  ? \"mr-3 activeType\"\r\n                  : \"mr-3 push-screen-btn\"\r\n              }\r\n              variant=\"info \"\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                setPublishType(\"defaultComposition\");\r\n              }}\r\n            >\r\n              Default Composition\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {!showPublishBtn && publishType && publishType === \"quickplay\" && (\r\n        <Table responsive className=\"custom-table screen-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Date Added</th>\r\n              <th>Screens Assigned</th>\r\n              <th>Start Date</th>\r\n              <th>End Date</th>\r\n              <th>more</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {quickPlayData &&\r\n              quickPlayData.map((composition) => {\r\n                return (\r\n                  <tr key={composition._id}>\r\n                    <td>{composition.name}</td>\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>\r\n                          {humanReadableFormattedDateString(\r\n                            composition.createdAt\r\n                          )}\r\n                        </strong>\r\n                        <span>\r\n                          {getDatetimeIn12Hours(composition.createdAt)}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td> {composition.screens?.length}</td>\r\n\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>\r\n                          {humanReadableFormattedDateString(\r\n                            composition.createdAt\r\n                          )}\r\n                        </strong>\r\n                        <span>\r\n                          {getDatetimeIn12Hours(composition.createdAt)}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>\r\n                          {humanReadableFormattedDateString(\r\n                            composition.createdAt\r\n                          )}\r\n                        </strong>\r\n                        <span>\r\n                          {moment(composition.createdAt)\r\n                            .add(10, \"minutes\")\r\n                            .format(\"hh:mm A\")}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <Dropdown className=\"dropdown-toggle-menu\">\r\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                          <span className=\"table-menu-icon\">\r\n                            <img\r\n                              className=\"menu-img img-fluid\"\r\n                              src={menuIcon}\r\n                              alt=\"menu-icon\"\r\n                            />\r\n                          </span>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item\r\n                            href=\"#\"\r\n                            className=\"dropdown-list-item\"\r\n                            onClick={(e) => {\r\n                              handleDeleteQuickPlay(e, composition._id);\r\n                            }}\r\n                          >\r\n                            <div className=\"d-flex\">\r\n                              <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                  className=\"dropdown-list-img img-fluid\"\r\n                                  src={deleteIcon}\r\n                                  alt=\"menu-icon\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">Delete</span>\r\n                                <span className=\"menu-description\">\r\n                                  Get to know more about screen info\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n      {!showPublishBtn &&\r\n        publishType &&\r\n        publishType === \"defaultComposition\" && (\r\n          <>\r\n            <Table responsive className=\"custom-table screen-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <th>Date Added</th>\r\n                  <th>Screens Assigned</th>\r\n                  <th>Start Date</th>\r\n                  <th>End Date</th>\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {defaultData &&\r\n                  defaultData.map((composition) => {\r\n                    return (\r\n                      <tr key={composition._id}>\r\n                        <td>{composition._id}</td>\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>\r\n                              {getDatetimeIn12Hours(composition.createdAt)}\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.screens?.length}</td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>\r\n                              {getDatetimeIn12Hours(composition.createdAt)}\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>\r\n                              {moment(composition.createdAt)\r\n                                .add(10, \"minutes\")\r\n                                .format(\"hh:mm A\")}\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        )}\r\n      {!showPublishBtn && publishType && publishType === \"schedule\" && (\r\n        <Table responsive className=\"custom-table screen-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Date Added</th>\r\n              <th>Screens Assigned</th>\r\n              <th>Start Date</th>\r\n              <th>End Date</th>\r\n              <th>more</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {scheduleData &&\r\n              scheduleData.map((composition) => {\r\n                const maxDates = composition.sequence.reduce((max, obj) => {\r\n                  const parseDts = obj.dates.map((dt) => new Date(dt));\r\n                  const objMax =\r\n                    obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n                  return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n                }, null);\r\n                const formatedDt = moment(new Date(maxDates)).format(\r\n                  \"YYYY-MM-DD\"\r\n                );\r\n\r\n                const minDates = composition.sequence.reduce((min, obj) => {\r\n                  const parseDt = obj.dates.map((dt) => new Date(dt));\r\n                  const objMin =\r\n                    parseDt.length > 0 ? Math.min(...parseDt) : null;\r\n                  return objMin ? (min ? Math.min(min, objMin) : objMin) : min;\r\n                }, null);\r\n\r\n                const formatedDtMin = moment(new Date(minDates)).format(\r\n                  \"YYYY-MM-DD\"\r\n                );\r\n\r\n                const maxTime = composition.sequence.reduce((max, obj) => {\r\n                  const parseDts = obj.dates.map((dt) => new Date(dt));\r\n                  const objMax =\r\n                    obj.dates.length > 0 ? Math.max(...parseDts) : null;\r\n                  return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\r\n                }, null);\r\n                const endTime = findEndTime(\r\n                  composition?.sequence[composition?.sequence.length - 1]\r\n                );\r\n\r\n                return (\r\n                  <tr key={composition._id}>\r\n                    <td>{composition.name}</td>\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>\r\n                          {humanReadableFormattedDateString(\r\n                            composition.createdAt\r\n                          )}\r\n                        </strong>\r\n                        <span>\r\n                          {getDatetimeIn12Hours(composition.createdAt)}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td> {composition.screens?.length}</td>\r\n\r\n                    <td>\r\n                      <div>\r\n                        <span className=\"td-content\">\r\n                          <strong> {formatedDtMin}</strong>\r\n                          <span>\r\n                            {convertTimestampTo12HourFormat(\r\n                              composition?.sequence[0]?.timings[0]?.startTime\r\n                            )}\r\n                          </span>\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n\r\n                    <td>\r\n                      <spam className=\"td-content\">\r\n                        <strong>{formatedDt}</strong>\r\n\r\n                        <span>{convertTimestampTo12HourFormat(endTime)}</span>\r\n                      </spam>\r\n                    </td>\r\n                    <td>\r\n                      <Dropdown className=\"dropdown-toggle-menu\">\r\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                          <span className=\"table-menu-icon\">\r\n                            <img\r\n                              className=\"menu-img img-fluid\"\r\n                              src={menuIcon}\r\n                              alt=\"menu-icon\"\r\n                            />\r\n                          </span>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item\r\n                            href={`/design-month-schedule/${composition._id}`}\r\n                            className=\"dropdown-list-item\"\r\n                          >\r\n                            <div className=\"d-flex\">\r\n                              <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                  className=\"dropdown-list-img img-fluid\"\r\n                                  src={edit}\r\n                                  alt=\"menu-icon\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">Edit</span>\r\n                                <span className=\"menu-description\">\r\n                                  Get to know more about screen info\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            href=\"#\"\r\n                            className=\"dropdown-list-item\"\r\n                            onClick={() => {\r\n                              handleDeleteSchedule(composition._id);\r\n                              console.log(\"oooo\");\r\n                            }}\r\n                          >\r\n                            <div className=\"d-flex\">\r\n                              <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                  className=\"dropdown-list-img img-fluid\"\r\n                                  src={deleteIcon}\r\n                                  alt=\"menu-icon\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">Delete</span>\r\n                                <span className=\"menu-description\">\r\n                                  Get to know more about screen info\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            href=\"#\"\r\n                            className=\"dropdown-list-item\"\r\n                            onClick={() => {\r\n                              history.push(`/push/view/${composition._id}`);\r\n                            }}\r\n                          >\r\n                            <div className=\"d-flex\">\r\n                              <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                  className=\"dropdown-list-img img-fluid\"\r\n                                  src={deleteIcon}\r\n                                  alt=\"menu-icon\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">\r\n                                  View Schedule\r\n                                </span>\r\n                                <span className=\"menu-description\">\r\n                                  Get to know more about screen info\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n      {showPublishBtn &&\r\n        checkedValues &&\r\n        checkedValues.length > 0 &&\r\n        checkedValuesComp == null && (\r\n          <button\r\n            className=\"btn btn-sm btn-primary\"\r\n            onClick={(e) => {\r\n              handleProceed(e, \"screen\");\r\n            }}\r\n          >\r\n            Proceed\r\n          </button>\r\n        )}\r\n      {showDefaultScreen && (\r\n        <>\r\n          <h4>Plesae Select Screen</h4>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Screen</th>\r\n                <th>Last Seen</th>\r\n                <th>Default Composition</th>\r\n                <th>Current Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading ? (\r\n              <TableLoader colSpan={5} />\r\n            ) : (\r\n              <tbody>\r\n                {allScreens !== \"\" &&\r\n                  allScreens.map((screen) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={screen._id}\r\n                              name={screen._id}\r\n                              checked={checkedItems[screen._id]}\r\n                              onChange={(e) => {\r\n                                handleCheckboxChange(e, \"screen\");\r\n                              }}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={screen._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>{screen.name}</strong>\r\n                            <span>{screen.screenLocation}</span>\r\n                          </span>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"d-flex align-items-center\">\r\n                            <span className=\"status status-green\"></span>\r\n                            <span className=\"td-content\">\r\n                              <strong>{screen.name}</strong>\r\n                              <span>{screen.screenLocation}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                        <td>Default Compo. </td>\r\n                        <td>No Schedule</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </>\r\n      )}\r\n      {showPublishBtn && checkedValuesComp != null && (\r\n        <button\r\n          className=\"btn btn-sm btn-primary\"\r\n          onClick={(e) => {\r\n            handleProceedComp(e, \"composition\");\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      )}\r\n      {checkedValues && checkedValues.length > 0 && showDefaultComp && (\r\n        <>\r\n          <h4>Please select composition</h4>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      disabled\r\n                      // onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Name</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading ? (\r\n              <TableLoader colSpan={5} />\r\n            ) : (\r\n              <tbody>\r\n                {allComposition !== \"\" &&\r\n                  allComposition.map((composition) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={composition._id}\r\n                              name={composition._id}\r\n                              checked={checkedValuesComp === composition._id}\r\n                              onChange={(e) => {\r\n                                handleCheckboxChange(e, \"composition\");\r\n                              }}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={composition._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"td-content d-flex name-td-content\">\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                              <strong>{composition.name}</strong>\r\n                              <span>{composition.createdBy}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>\r\n                              {getDatetimeIn12Hours(composition.createdAt)}\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.duration} Sec</td>\r\n                        <td>No Composition</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PushScreen;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\actions\\AuthActions.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\store\\actions\\PostTypes.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\index.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDaySchudele.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\TestDay.js",["554","555","556","557","558","559","560","561","562","563","564","565"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  BASE_URL,\r\n  getAllComposition,\r\n  getAllMedia,\r\n  saveSequence,\r\n  getAllDaySequence,\r\n} from \"../../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport useSWR from \"swr\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function TestDay() {\r\n  const [events, setEvents] = useState([]);\r\n  const [def, setDef] = useState([]);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [renderTime, setRenderTime] = useState(\"\");\r\n  const history = useHistory();\r\n  const { id, schedulename } = useParams();\r\n  const [sqName, setSqName] = useState(\"\");\r\n\r\n  const { data: allComposition, mutate } = useSWR(\r\n    \"/vendor/layouts/compositions\",\r\n    getAllComposition\r\n  );\r\n\r\n  const callSingleDaySequence = async (id) => {\r\n    const list = await getAllDaySequence(id);\r\n    setSequence(list.sequence);\r\n    //const listTimings = [];\r\n    if (list && list.sequence && list.sequence[0] && list.sequence[0].timings) {\r\n      const listTimings = list.sequence[0].timings.map((item) => {\r\n        const sT = item.startTime.split(\"T\")[1].split(\":\");\r\n        const eT = item.endTime.split(\"T\")[1].split(\":\");\r\n        return {\r\n          id: item.composition._id,\r\n          timing: sT[0] + \":\" + sT[1] + \" - \" + eT[0] + \":\" + eT[1],\r\n          //defId: eventInfo.event._def.defId,\r\n        };\r\n      });\r\n      setEvents(listTimings);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    callSingleDaySequence(id);\r\n  }, [id]);\r\n\r\n  let timeFormet = {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    hour12: false,\r\n  };\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let sourceId = eventEl.getAttribute(\"sourceId\");\r\n        let publicId = eventEl.getAttribute(\"publicId\");\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          sourceId,\r\n          publicId,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, [events]);\r\n  function eventFunction(info) {\r\n    //const newArray = events;\r\n    const id = info.el.fcSeg.eventRange.def.sourceId;\r\n    const defId = info.event._def.defId;\r\n    let newArr = events.map((item, i) => {\r\n      if (item.defId == defId) {\r\n        return { ...item, [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1] };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setEvents(newArr);\r\n  }\r\n  // handle event receive\r\n  const handleEventReceive = (eventInfo) => {\r\n    const id = eventInfo.event._def.sourceId;\r\n    const [startTime, endTime] = renderTime.split(\" - \");\r\n    const formattedStartTime = startTime.padStart(5, \"0\");\r\n    const formattedEndTime =\r\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\r\n\r\n    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\r\n\r\n    const newEvent = {\r\n      id: id,\r\n      timing: timeRange,\r\n      defId: eventInfo.event._def.defId,\r\n    };\r\n    setEvents((events) => [...events, newEvent]);\r\n    setDef({ ...def, [eventInfo.event._def.defId]: true });\r\n  };\r\n  const handleEventClick = (info) => {\r\n    console.log(info, \"sssss\");\r\n    const defId = info.event._def.defId;\r\n    setEvents((current) => current.filter((event) => event.defId !== defId));\r\n    info.event.remove();\r\n  };\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const scheduleId = id;\r\n    const timings = events.map((item) => {\r\n      return {\r\n        composition: item.id,\r\n        startTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[0] +\r\n          \":00Z\",\r\n        endTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[1] +\r\n          \":00Z\",\r\n      };\r\n    });\r\n    if (!sqName) {\r\n      toast.error(\"Please enter sequence name\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    if (!id) {\r\n      toast.error(\"something went wrong\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    const payload = {\r\n      scheduleId: scheduleId,\r\n      name: sqName,\r\n      timings,\r\n    };\r\n\r\n    await saveSequence(payload).then((res) => {\r\n      console.log(res, \"res save schedule\");\r\n      if (res.data.statusCode === 200) {\r\n        history.push(`/design-month-schedule/${id}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(\"eventInfo\", eventInfo);\r\n    const { event } = eventInfo;\r\n    const { title } = event;\r\n    const checkTime = eventInfo.timeText.split(\" - \");\r\n    if (!checkTime[1]) {\r\n      const secondTime =\r\n        parseInt(checkTime[0].split(\":\")[0]) +\r\n        1 +\r\n        \":\" +\r\n        checkTime[0].split(\":\")[1];\r\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\r\n    }\r\n    if (!def[eventInfo.event._def.defId]) {\r\n      setRenderTime(eventInfo.timeText);\r\n    }\r\n    return (\r\n      <>\r\n        <div className={`fullcalendar-main-container`}>\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcalendar-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\r\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\r\n\r\n          <div\r\n            className=\"fullcalendar-delete-btn\"\r\n            onClick={() => handleEventClick(eventInfo)}\r\n          >\r\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          <input\r\n            type=\"text\"\r\n            className=\" schedule-name-input-feild form-control input-default \"\r\n            placeholder=\"Schedule Name\"\r\n            value={sqName}\r\n            onChange={(e) => setSqName(e.target.value)}\r\n            required\r\n          />\r\n          {renderTime && (\r\n            <div className=\"d-flex justify-content-end\">\r\n              <Button\r\n                className=\"mr-2\"\r\n                type=\"submit\"\r\n                variant=\"info add-screen-btn\"\r\n                // onClick={(e) => handleSubmit(e)}\r\n              >\r\n                Save Sequence\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </form>\r\n\r\n      <div>\r\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ height: \"100%\" }}\r\n            id=\"external-events\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {allComposition &&\r\n                allComposition.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\r\n                      title={composition.name}\r\n                      sourceId={composition._id}\r\n                      // data-color={\"yellow\"}\r\n                      data-custom={`${BASE_URL}${content.url}`}\r\n                      style={{\r\n                        backgroundColor: \"#fff\",\r\n                        // borderColor: \"blue\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      // id={composition._id}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          // onClick={() => {\r\n                          //     setSelected(composition);\r\n                          //     setNewTagModal(true);\r\n                          // }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n\r\n        <div style={{ float: \"left\", width: \"50%\" }}>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={false}\r\n            initialView=\"timeGridDay\"\r\n            slotDuration=\"00:10:00\"\r\n            slotLabelInterval={{ hours: 1 }}\r\n            allDaySlot={false}\r\n            eventTimeFormat={timeFormet}\r\n            editable={true}\r\n            selectable={false}\r\n            selectMirror={true}\r\n            dayMaxEvents={false}\r\n            droppable={true}\r\n            eventReceive={handleEventReceive}\r\n            eventAdd={(arg) => {\r\n              console.log(\"add\", arg);\r\n            }}\r\n            slotEventOverlap={false}\r\n            eventOverlap={false}\r\n            eventContent={renderEventContent}\r\n            contentHeight=\"700px\"\r\n            events={events}\r\n            eventResize={eventFunction}\r\n          ></FullCalendar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SequenceEdit.js",["566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  BASE_URL,\r\n  getAllComposition,\r\n  getAllMedia,\r\n  updateSequence,\r\n  getAllDaySequence,\r\n  getSingleSequence,\r\n} from \"../../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport useSWR from \"swr\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function SequenceTime() {\r\n  const [events, setEvents] = useState([]);\r\n  const [def, setDef] = useState([]);\r\n  const [sequence, setSequence] = useState([]);\r\n  const [renderTime, setRenderTime] = useState(\"\");\r\n  const history = useHistory();\r\n  const { schId, seqId } = useParams({26:true});\r\n  const [sqName, setSqName] = useState(\"\");\r\n\r\n  const { data: allComposition, mutate } = useSWR(\r\n    \"/vendor/layouts/compositions\",\r\n    getAllComposition\r\n  );\r\n\r\n  const callSingleDaySequence = async (schId) => {\r\n    const seqData = await getSingleSequence(schId, seqId)\r\n    if (seqData && seqData.sequence && seqData.sequence[0] && seqData.sequence[0].timings) {\r\n      const listTimings = [];\r\n      let defArray = {};\r\n      setSqName(seqData.sequence[0].name)\r\n      let defId = 105;\r\n      seqData.sequence[0].timings.forEach((item) => {\r\n        defId = defId + +1;\r\n        defArray = {...defArray,[defId]:true}\r\n        const sT = item.startTime.split(\"T\")[1].split(\":\");\r\n        const eT = item.endTime.split(\"T\")[1].split(\":\");\r\n        const data = {\r\n          id: item.composition._id,\r\n          sourceId: item.composition._id,\r\n          publicId: item.composition._id,\r\n          title:item.composition.name,\r\n          name:item.composition.name,\r\n          startTime:sT[0] + \":\" + sT[1],\r\n          endTime:eT[0] + \":\" + eT[1],\r\n          timing: sT[0] + \":\" + sT[1] + \" - \" + eT[0] + \":\" + eT[1],\r\n          image:`${BASE_URL}${item.composition.zones[0].content[0]}`,\r\n          extendedProps:{\r\n            custom:`${BASE_URL}${item.composition.zones[0].content[0].url}`,\r\n            defId: defId.toString()\r\n          },\r\n          _def:{\r\n            defId: defId.toString()\r\n          },\r\n          defId: defId.toString()\r\n        }\r\n        //handleEventReceive(data)\r\n        listTimings.push(data);\r\n      });\r\n      setDef(defArray);\r\n      setEvents(listTimings);\r\n    }\r\n  };\r\n\r\n  let timeFormet = {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    hour12: false,\r\n  };\r\n  // load external events\r\n  useEffect(() => {\r\n    callSingleDaySequence(schId);\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let sourceId = eventEl.getAttribute(\"sourceId\");\r\n        let publicId = eventEl.getAttribute(\"publicId\");\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          sourceId,\r\n          publicId,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, [schId]);\r\n\r\n  function eventFunction(info) {\r\n    //const newArray = events;\r\n    const id = info.el.fcSeg.eventRange.def.sourceId;\r\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\r\n    //console.log(\"resize\",id,defId,def)\r\n    let newArr = events.map((item, i) => {\r\n     // console.log(item.defId,defId)\r\n      if (item.defId == defId) {\r\n        if(item.startTime && item.endTime){\r\n         // console.log(\"time\",info.el.innerText.split(\"\\n\\n\")[1])\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\r\n            ['startTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\r\n            ['endTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1]\r\n          };\r\n        }else{\r\n          return { ...item,\r\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1]\r\n          };\r\n        }\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n   // console.log(\"resize\",newArr)\r\n    setEvents(newArr);\r\n  }\r\n  // handle event receive\r\n  \r\n  const handleEventReceive = (eventInfo) => {\r\n    //console.log(\"eventInfo\",eventInfo)\r\n    const id = eventInfo.event._def.sourceId;\r\n    const [startTime, endTime] = renderTime.split(\" - \");\r\n    const formattedStartTime = startTime.padStart(5, \"0\");\r\n    const formattedEndTime =\r\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\r\n\r\n    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\r\n\r\n    const newEvent = {\r\n      id: id,\r\n      timing: timeRange,\r\n      defId: eventInfo.event._def.defId,\r\n    };\r\n  \r\n    setEvents((events) => [...events, newEvent]);\r\n    setDef({ ...def, [eventInfo.event._def.defId]: true });\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\r\n    setEvents((current) => current.filter((event) => event.defId !== defId));\r\n    info.event.remove();\r\n  };\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const scheduleId = schId;\r\n    const timings = events.map((item) => {\r\n      return {\r\n        composition: item.id,\r\n        startTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[0] +\r\n          \":00Z\",\r\n        endTime:\r\n          new Date().toISOString().slice(0, 10) +\r\n          \"T\" +\r\n          item.timing.split(\" - \")[1] +\r\n          \":00Z\",\r\n      };\r\n    });\r\n    if (!sqName) {\r\n      toast.error(\"Please enter sequence name\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    if (!schId) {\r\n      toast.error(\"something went wrong\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    const payload = {\r\n      scheduleId: scheduleId,\r\n      sequenceId:seqId,\r\n      name: sqName,\r\n      timings,\r\n    };\r\n\r\n    //console.log(\"payload\",def,events,payload,renderTime)\r\n\r\n    await updateSequence(payload).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        history.push(`/design-month-schedule/${schId}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(\"eventInfo\",eventInfo)\r\n    const { event } = eventInfo;\r\n    const { title } = event;\r\n    const checkTime = eventInfo.timeText.split(\" - \");\r\n    if (!checkTime[1]) {\r\n      const secondTime =\r\n        parseInt(checkTime[0].split(\":\")[0]) +\r\n        1 +\r\n        \":\" +\r\n        checkTime[0].split(\":\")[1];\r\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\r\n    }\r\n    if(event._def.extendedProps.defId != undefined){\r\n      if (!def[eventInfo.event._def.extendedProps.defId]) {\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    }else{\r\n      if (!def[eventInfo.event._def.defId]) {\r\n        setRenderTime(eventInfo.timeText);\r\n      }\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <div className={`fullcalendar-main-container`}>\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcalendar-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\r\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\r\n\r\n          <div\r\n            className=\"fullcalendar-delete-btn\"\r\n            onClick={() => handleEventClick(eventInfo)}\r\n          >\r\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <input\r\n          type=\"text\"\r\n          className=\" schedule-name-input-feild form-control input-default \"\r\n          placeholder=\"Schedule Name\"\r\n          value={sqName}\r\n          onChange={(e) => setSqName(e.target.value)}\r\n          required\r\n        />\r\n        <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              className=\"mr-2\"\r\n              variant=\"info add-screen-btn\"\r\n              onClick={(e) => handleSubmit(e)}\r\n            >\r\n              Update Sequence\r\n            </Button>\r\n          </div>\r\n        {/* {renderTime && (\r\n          <div className=\"d-flex justify-content-end\">\r\n            <Button\r\n              className=\"mr-2\"\r\n              variant=\"info add-screen-btn\"\r\n              onClick={(e) => handleSubmit(e)}\r\n            >\r\n              Save Sequence\r\n            </Button>\r\n          </div>\r\n        )} */}\r\n      </div>\r\n\r\n      <div>\r\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ height: \"100%\" }}\r\n            id=\"external-events\"\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {allComposition &&\r\n                allComposition.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\r\n                      title={composition.name}\r\n                      sourceId={composition._id}\r\n                      // data-color={\"yellow\"}\r\n                      data-custom={`${BASE_URL}${content.url}`}\r\n                      style={{\r\n                        backgroundColor: \"#fff\",\r\n                        // borderColor: \"blue\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      // id={composition._id}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          // onClick={() => {\r\n                          //     setSelected(composition);\r\n                          //     setNewTagModal(true);\r\n                          // }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n\r\n        <div style={{ float: \"left\", width: \"50%\" }}>\r\n          <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={false}\r\n            initialView=\"timeGridDay\"\r\n            slotDuration=\"00:10:00\"\r\n            slotLabelInterval={{ hours: 1 }}\r\n            allDaySlot={false}\r\n            eventTimeFormat={timeFormet}\r\n            editable={true}\r\n            selectable={false}\r\n            selectMirror={true}\r\n            dayMaxEvents={false}\r\n            droppable={true}\r\n            eventReceive={handleEventReceive}\r\n            slotEventOverlap={false}\r\n            eventOverlap={false}\r\n            eventContent={renderEventContent}\r\n            contentHeight=\"700px\"\r\n            events={events}\r\n            eventResize={eventFunction}\r\n          ></FullCalendar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SecondMonth.js",["586"],"import React, { useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function SecondMonth() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   console.log(events, \"events ssssssss\");\r\n//   const externalEvent = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n//   ];\r\n\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   console.log(selectedEvent, \"lllllllloooooo\");\r\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     // dateInfo.event = selectedEvent;\r\n//     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n\r\n//     // console.log(selectedDateValuea, \"selectedDateValuea id\")\r\n//     const selectedDateValue = dateInfo.date.valueOf();\r\n//     console.log(dateInfo.event.id, \"dateInfo -> dateInfo.kkk\");\r\n\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       console.log(filteredEvents, \"iiiiiii\");\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const selectedDateValue = dateInfo.date.valueOf();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//     const isEventSelected = selectedEvent;\r\n\r\n//     if (isEventSelected) {\r\n//       const checkboxKey = dateInfo.date.toISOString();\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"containe\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {externalEvent.map((event, i) => (\r\n//             <li\r\n//               key={i}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>{info.event.title}</div>\r\n//               </div>\r\n//             );\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default function SecondMonth() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   const externalEvent = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n//   ];\r\n\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n//   const [isEventSelected, setIsEventSelected] = useState(false);\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start !== dateInfo.date.toISOString()\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date,\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//     setSelectedCheckboxes({});\r\n//     setIsEventSelected(true); // Set isEventSelected to true\r\n//   };\r\n\r\n//   function handleDateCellChange(dateInfo) {\r\n//     const checkboxKey = dateInfo.date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isChecked) {\r\n//       // Unselecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//         delete updatedCheckboxes[checkboxKey];\r\n//         return updatedCheckboxes;\r\n//       });\r\n\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start !== dateInfo.date.toISOString()\r\n//       );\r\n\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//       setEvents(filteredEvents);\r\n//     } else {\r\n//       // Selecting the checkbox\r\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//         ...prevSelectedCheckboxes,\r\n//         [checkboxKey]: true,\r\n//       }));\r\n\r\n//       const event = {\r\n//         id: selectedEvent.id,\r\n//         title: selectedEvent.title,\r\n//         start: dateInfo.date.toISOString(),\r\n//       };\r\n//       setEvents((prevEvents) => [...prevEvents, event]);\r\n//     }\r\n//   }\r\n//   // ...existing code...\r\n\r\n//   //\r\n\r\n//   const handleWeekCellChange = (dayInfo) => {\r\n//     const { date } = dayInfo;\r\n//     const selectedDay = new Date(date);\r\n//     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n//     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//       ...prevSelectedCheckboxes,\r\n//       [checkboxKey]: true,\r\n//     }));\r\n\r\n//     // Add event to the selected day (Sunday)\r\n//     const eventToAdd = {\r\n//       id: selectedEvent.id,\r\n//       title: selectedEvent.title,\r\n//       start: selectedDay.toISOString().split(\"T\")[0],\r\n//     };\r\n//     setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n//   };\r\n\r\n//   const renderDayHeader = (dayInfo) => {\r\n//     const { date } = dayInfo;\r\n//     const checkboxKey = date.toISOString();\r\n//     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     if (isEventSelected) {\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isChecked}\r\n//             onChange={() => handleWeekCellChange(dayInfo)}\r\n//           />\r\n//           {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\r\n//         </div>\r\n//       );\r\n//     } else {\r\n//       return (\r\n//         <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//     const isEventSelected = selectedEvent;\r\n\r\n//     if (isEventSelected) {\r\n//       const checkboxKey = dateInfo.date.toISOString();\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={`checkbox-${checkboxKey}`}\r\n//             type=\"checkbox\"\r\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"fullcalendar-box\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {externalEvent.map((event, i) => (\r\n//             <li\r\n//               key={i}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayHeaderContent={renderDayHeader}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => (\r\n//             <div>\r\n//               <div>{info.event.title}</div>\r\n//             </div>\r\n//           )}\r\n//           headerToolbar={{\r\n//             start: \"title\",\r\n//             center: \"selectWeekButton\",\r\n//             end: \"today prev,next\",\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n// month day logic\r\nexport default function SecondMonth() {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [events, setEvents] = useState([]);\r\n  const externalEvent = [\r\n    { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\r\n    { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\r\n    { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\r\n    { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\r\n  ];\r\n\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n  const [isEventSelected, setIsEventSelected] = useState(false);\r\n\r\n  //   function handleDateCellChange(dateInfo) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n  //     if (isChecked) {\r\n  //       // Unselecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n\r\n  //       const filteredEvents = events.filter(\r\n  //         (event) => event.start !== dateInfo.date.toISOString()\r\n  //       );\r\n\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //     } else {\r\n  //       // Selecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       const event = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, event]);\r\n  //     }\r\n  //   }\r\n\r\n  const handleEventClick = (event) => {\r\n    setSelectedEvent(event);\r\n    setSelectedDate(null); // Reset selected date\r\n    setSelectedCheckboxes({});\r\n    setIsEventSelected(true); // Set isEventSelected to true\r\n  };\r\n\r\n  //   function handleDateCellChange(dateInfo) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n  //     if (isChecked) {\r\n  //       // Unselecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n\r\n  //       const filteredEvents = events.filter(\r\n  //         (event) => event.start !== dateInfo.date.toISOString()\r\n  //       );\r\n\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //     } else {\r\n  //       // Selecting the checkbox\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       const event = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date.toISOString(),\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, event]);\r\n  //     }\r\n  //   }\r\n\r\n  function handleDateCellChange(dateInfo) {\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n    if (isChecked) {\r\n      // Unselecting the checkbox\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n        delete updatedCheckboxes[checkboxKey];\r\n        return updatedCheckboxes;\r\n      });\r\n\r\n      const filteredEvents = events.filter(\r\n        (event) => event.start !== dateInfo.date.toISOString()\r\n      );\r\n\r\n      setSelectedEvent(null);\r\n      setSelectedDate(null);\r\n      setEvents(filteredEvents);\r\n    } else {\r\n      // Selecting the checkbox\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n        [checkboxKey]: true,\r\n      }));\r\n\r\n      const existingEvent = events.find(\r\n        (event) => event.start === dateInfo.date.toISOString()\r\n      );\r\n\r\n      if (!existingEvent) {\r\n        const event = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: dateInfo.date.toISOString(),\r\n        };\r\n        setEvents((prevEvents) => [...prevEvents, event]);\r\n      }\r\n    }\r\n  }\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(date.getDate());\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n  //     console.log(dates, \"datesssss\");\r\n  //     const { date } = dayInfo;\r\n  //     const selectedDay = new Date(date);\r\n  //     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //       ...prevSelectedCheckboxes,\r\n  //       [checkboxKey]: true,\r\n  //     }));\r\n\r\n  //     // Add event to the selected day (Sunday)\r\n  //     // const eventToAdd = {\r\n  //     //   id: selectedEvent.id,\r\n  //     //   title: selectedEvent.title,\r\n  //     //   start: selectedDay.toISOString().split(\"T\")[0],\r\n  //     // };\r\n  //     // setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //   };\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(date.getDate());\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n\r\n  //     dates.forEach((date) => {\r\n  //       const selectedDay = new Date(dayInfo.date);\r\n  //       selectedDay.setDate(date);\r\n  //       const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       // Add event to the selected day\r\n  //       const eventToAdd = {\r\n  //         id: selectedEvent.id,\r\n  //         title: selectedEvent.title,\r\n  //         start: selectedDay.toISOString().split(\"T\")[0],\r\n  //       };\r\n  //       setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //     });\r\n  //   };\r\n\r\n  //   const handleWeekCellChange = (dayInfo) => {\r\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n  //       const dates = [];\r\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n  //       while (date.getMonth() === month) {\r\n  //         if (date.getDay() === targetDay) {\r\n  //           dates.push(new Date(date)); // Push a new Date object to the array\r\n  //         }\r\n  //         date.setDate(date.getDate() + 1);\r\n  //       }\r\n  //       return dates;\r\n  //     }\r\n\r\n  //     const dates = getDatesForDayOfWeek(\r\n  //       new Date(dayInfo.date).getFullYear(),\r\n  //       new Date(dayInfo.date).getMonth(),\r\n  //       new Date(dayInfo.date).getDay()\r\n  //     );\r\n\r\n  //     dates.forEach((date) => {\r\n  //       const checkboxKey = date.toISOString().split(\"T\")[0];\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n\r\n  //       // Check if the event already exists for the selected date\r\n  //       const existingEvent = events.find(\r\n  //         (event) => event.start === date.toISOString().split(\"T\")[0]\r\n  //       );\r\n\r\n  //       // Add event to the selected day if it doesn't already exist\r\n  //       if (!existingEvent) {\r\n  //         const eventToAdd = {\r\n  //           id: selectedEvent.id,\r\n  //           title: selectedEvent.title,\r\n  //           start: date.toISOString().split(\"T\")[0],\r\n  //         };\r\n  //         setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n  //       }\r\n  //     });\r\n  //   };\r\n\r\n  const handleWeekCellChange = (year, month, dayOfWeek) => {\r\n    function getDatesForDayOfWeek(year, month, dayOfWeek) {\r\n      const dates = [];\r\n      const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\r\n      const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\r\n      while (date.getMonth() === month) {\r\n        if (date.getDay() === targetDay) {\r\n          dates.push(new Date(date)); // Push a new Date object to the array\r\n        }\r\n        date.setDate(date.getDate() + 1);\r\n      }\r\n      return dates;\r\n    }\r\n\r\n    // const dates = getDatesForDayOfWeek(\r\n    //   new Date(dayInfo.date).getFullYear(),\r\n    //   new Date(dayInfo.date).getMonth(),\r\n    //   new Date(dayInfo.date).getDay()\r\n    // );\r\n\r\n    const dates = getDatesForDayOfWeek(year, month, dayOfWeek);\r\n\r\n    dates.forEach((date) => {\r\n      console.log(date, \"kkkkkk\");\r\n\r\n      // const checkboxKey = inputdate.replace(/\\//g, \"-\");\r\n      const checkboxKey = date;\r\n\r\n      console.log(checkboxKey, \"unitqkjn\");\r\n\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n        ...prevSelectedCheckboxes,\r\n        [checkboxKey]: true,\r\n      }));\r\n      console.log(selectedCheckboxes, \"sgvyhjmffgbhnj\");\r\n\r\n      // Check if the event already exists for the selected date\r\n      const existingEvent = events.find(\r\n        (event) => event.start === date.toISOString().split(\"T\")[0]\r\n      );\r\n\r\n      if (!existingEvent) {\r\n        // Add event to the selected date\r\n        const eventToAdd = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: date.toISOString().split(\"T\")[0],\r\n        };\r\n        setEvents((prevEvents) => [...prevEvents, eventToAdd]);\r\n      }\r\n    });\r\n  };\r\n\r\n  function getMonthFromString(mon) {\r\n    return new Date(Date.parse(mon + \" 1, 2012\")).getMonth() + 1;\r\n  }\r\n\r\n  const renderDayHeader = (dayInfo) => {\r\n    console.log(dayInfo, \"renderDayHeader console\");\r\n    const { date } = dayInfo;\r\n    const checkboxKey = date.toISOString();\r\n    const isChecked = selectedCheckboxes[checkboxKey];\r\n    console.log(isChecked, \"kkkk\");\r\n\r\n    if (isEventSelected) {\r\n      return (\r\n        <div>\r\n          <input\r\n            className=\"day-checkbox\"\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isChecked}\r\n            onChange={() => {\r\n              const monthYrStr = document.querySelector(\"#fc-dom-2\").innerHTML;\r\n              const monthYrArr = monthYrStr.split(\" \");\r\n              console.log(\"monthYrArr #696\", monthYrArr);\r\n              console.log(\r\n                monthYrArr[1],\r\n                getMonthFromString(monthYrArr[0]),\r\n                date.getDay()\r\n              );\r\n            }}\r\n          />\r\n          {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n    const isEventSelected = selectedEvent;\r\n\r\n    if (isEventSelected) {\r\n      const checkboxKey = dateInfo.date.toISOString();\r\n      return (\r\n        <div>\r\n          <input\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n            onChange={() => handleDateCellChange(dateInfo)}\r\n          />\r\n          {dateInfo.dayNumberText}\r\n        </div>\r\n      );\r\n    }\r\n    return dateInfo.dayNumberText;\r\n  };\r\n\r\n  return (\r\n    <div className=\"fullcalendar-box\">\r\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n        <h2>Event List</h2>\r\n        <ul>\r\n          {externalEvent.map((event, i) => (\r\n            <li\r\n              key={i}\r\n              onClick={() => handleEventClick(event)}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                fontWeight:\r\n                  selectedEvent && selectedEvent.id === event.id\r\n                    ? \"bold\"\r\n                    : \"normal\",\r\n              }}\r\n            >\r\n              {event.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          selectable={true}\r\n          events={events}\r\n          dayHeaderContent={renderDayHeader}\r\n          dayCellContent={renderDateCell}\r\n          eventContent={(info) => (\r\n            <div>\r\n              <div>{info.event.title}</div>\r\n            </div>\r\n          )}\r\n          headerToolbar={{\r\n            start: \"title\",\r\n            center: \"selectWeekButton\",\r\n            end: \"today prev,next\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DesignMonthSchedule.js",["587","588","589","590","591","592","593","594","595","596"],"import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  deleteSequence,\r\n  getAllDaySequence,\r\n  pushAddDates,\r\n} from \"../../../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport edit from \"../../../img/edit-composition.png\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport da from \"date-fns/locale/da/index.js\";\r\nimport { toast } from \"react-toastify\";\r\nexport default function DesignMonthSchedule() {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [events, setEvents] = useState([]);\r\n  const [daySequence, setDaySequence] = useState([]);\r\n  const [activeCard, setActiveCard] = useState(false);\r\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\r\n  const [isEventSelected, setIsEventSelected] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(0);\r\n\r\n  var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n  const handleEventClick = (event) => {\r\n    //setEvents([]);\r\n    setSelectedEvent(event);\r\n    setSelectedDate(null); // Reset selected date\r\n    //setSelectedCheckboxes([]);\r\n    setIsEventSelected(true);\r\n  };\r\n\r\n  const callAllDaySequence = async (id) => {\r\n    const list = await getAllDaySequence(id);\r\n    setDaySequence(list.sequence);\r\n    console.log(\"list.sequence\", list.sequence);\r\n    list.sequence.forEach((item) => {\r\n      if (item.dates && item.dates.length > 0) {\r\n        console.log(\"isLoading:true\");\r\n        const datesList = [];\r\n        item.dates.forEach((item2) => {\r\n          datesList.push(item2.split(\"T\")[0] + \"*****\" + item._id);\r\n        });\r\n        //console.log(\"selectedEvent\",selectedEvent)\r\n        handlCustomeWeek(datesList, item, true);\r\n      }\r\n    });\r\n    console.log(\"isLoading:false\");\r\n  };\r\n  useEffect(() => {\r\n    callAllDaySequence(id);\r\n  }, [id]);\r\n\r\n  useEffect(() => {}, [selectedCheckboxes, selectedEvent]);\r\n\r\n  function handleDateCellChange(dateInfo, isWk, isCustom = false, ev = {}) {\r\n    if (!isCustom) {\r\n      const checkboxKey = dateInfo + \"*****\" + selectedEvent._id;\r\n      const dt = new Date(dateInfo);\r\n      const isChecked = selectedCheckboxes[checkboxKey];\r\n      if (isWk) {\r\n        if (!isChecked) {\r\n          // Unselecting the checkbox\r\n          setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n            const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n            delete updatedCheckboxes[checkboxKey];\r\n            return updatedCheckboxes;\r\n          });\r\n          setEvents((current) =>\r\n            current.filter((event) => event.start !== dateInfo)\r\n          );\r\n        } else {\r\n          // Selecting the checkbox\r\n          setSelectedCheckboxes({ ...selectedCheckboxes, [checkboxKey]: true });\r\n          const existingEvent = events.find(\r\n            (event) => event.start === dateInfo\r\n          );\r\n\r\n          if (!existingEvent) {\r\n            const event = {\r\n              id: selectedEvent._id,\r\n              title: selectedEvent.name,\r\n              start: dateInfo,\r\n            };\r\n            setEvents((prevEvents) => [...prevEvents, event]);\r\n          }\r\n        }\r\n      } else {\r\n        if (isChecked) {\r\n          setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n            const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n            delete updatedCheckboxes[checkboxKey];\r\n            updatedCheckboxes[days[dt.getDay()]] = false;\r\n            return updatedCheckboxes;\r\n          });\r\n          //setSelectedCheckboxes({...selectedCheckboxes,[days[dt.getDay()]] : false})\r\n\r\n          const filteredEvents = events.filter(\r\n            (event) => event.start !== dateInfo\r\n          );\r\n          setEvents(filteredEvents);\r\n        } else {\r\n          const dayList = getSundays(days[dt.getDay()], dt.getDay());\r\n          let ct = false;\r\n\r\n          dayList.forEach((item) => {\r\n            if (\r\n              selectedCheckboxes[item.format(\"YYYY-MM-DD\")] &&\r\n              selectedCheckboxes[item.format(\"YYYY-MM-DD\")] !== undefined\r\n            ) {\r\n              ct = true;\r\n            } else {\r\n              ct = false;\r\n            }\r\n          });\r\n          setSelectedCheckboxes({\r\n            ...selectedCheckboxes,\r\n            [checkboxKey]: true,\r\n            [days[dt.getDay()]]:\r\n              ct == true ? true : selectedCheckboxes[dt.getDay()],\r\n          });\r\n          const existingEvent = events.find(\r\n            (event) => event.start === dateInfo\r\n          );\r\n\r\n          if (!existingEvent) {\r\n            const event = {\r\n              id: selectedEvent._id,\r\n              title: selectedEvent.name,\r\n              start: dateInfo,\r\n            };\r\n            setEvents((prevEvents) => [...prevEvents, event]);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const checkboxKey = dateInfo;\r\n      setSelectedCheckboxes({ ...selectedCheckboxes, [checkboxKey]: true });\r\n      const existingEvent = events.find(\r\n        (event) => event.start === dateInfo.split(\"*****\")[0]\r\n      );\r\n      if (!existingEvent) {\r\n        const event = {\r\n          id: ev._id,\r\n          title: ev.name,\r\n          start: dateInfo.split(\"*****\")[0],\r\n        };\r\n        setEvents((prevEvents) => [...prevEvents, event]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const handlCustomeWeek = async (dayList, ev, iswk = true) => {\r\n    const newArray = selectedCheckboxes;\r\n    dayList.forEach((item) => {\r\n      const checkboxKey = item;\r\n      if (\r\n        moment(item.split(\"*****\")[0]).format(\"YYYY-MM-DD\") >=\r\n        moment(new Date()).format(\"YYYY-MM-DD\")\r\n      ) {\r\n        newArray[checkboxKey] = true;\r\n        handleDateCellChange(item, true, true, ev);\r\n      }\r\n    });\r\n    setSelectedCheckboxes(newArray);\r\n    handleEventClick(ev);\r\n  };\r\n\r\n  const handleWeek = async (e, day, dayInfo, iswk = true) => {\r\n    const dayList = getSundays(days[day], day);\r\n    const newArray = selectedCheckboxes;\r\n    if (e.target.checked) {\r\n      dayList.forEach((item) => {\r\n        const checkboxKey =\r\n          item.format(\"YYYY-MM-DD\") + \"*****\" + selectedEvent._id;\r\n        if (\r\n          moment(item._d).format(\"YYYY-MM-DD\") >=\r\n          moment(new Date()).format(\"YYYY-MM-DD\")\r\n        ) {\r\n          newArray[checkboxKey] = true;\r\n          handleDateCellChange(item.format(\"YYYY-MM-DD\"), iswk);\r\n          newArray[days[day]] = true;\r\n        }\r\n      });\r\n    } else {\r\n      dayList.forEach((item) => {\r\n        const checkboxKey =\r\n          item.format(\"YYYY-MM-DD\") + \"*****\" + selectedEvent._id;\r\n        if (newArray[checkboxKey] !== undefined) {\r\n          delete newArray[checkboxKey];\r\n        }\r\n        handleDateCellChange(item.format(\"YYYY-MM-DD\"), iswk);\r\n        newArray[days[day]] = false;\r\n      });\r\n    }\r\n    setSelectedCheckboxes(newArray);\r\n  };\r\n\r\n  const getSundays = (dayName, dayId) => {\r\n    const result = [];\r\n    var startDate = new Date();\r\n    const cMonth = currentMonth;\r\n    const cYear = startDate.getFullYear();\r\n    var endDate = new Date(cYear, cMonth, 31);\r\n    var day = dayId;\r\n    for (var i = 0; i <= 7; i++) {\r\n      if (startDate.toString().indexOf(dayName) !== -1) {\r\n        break;\r\n      }\r\n      startDate = new Date(cYear, cMonth, i);\r\n    }\r\n    startDate = moment(startDate);\r\n    endDate = moment(endDate);\r\n    result.push(startDate);\r\n    var current = startDate.clone();\r\n    while (current.day(7 + day).isBefore(endDate)) {\r\n      result.push(current.clone());\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const renderDayHeader = (dayInfo) => {\r\n    const { date } = dayInfo;\r\n    const checkboxKey = dayInfo.date.toISOString();\r\n    //const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n    if (isEventSelected) {\r\n      return (\r\n        <div className=\"month-schedule-header-checkbox\">\r\n          <input\r\n            className={`day-checkbox checkbox-day-${dayInfo.date.getDay()} month--${currentMonth}`}\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            id={`checkbox-${checkboxKey}`}\r\n            checked={selectedCheckboxes[days[dayInfo.date.getDay()]]}\r\n            onChange={(e) => {\r\n              handleWeek(e, dayInfo.date.getDay(), dayInfo);\r\n            }}\r\n          />\r\n          {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n    const isEventSelected = selectedEvent;\r\n    if (isEventSelected) {\r\n      const checkboxKey = dateInfo.date.toISOString();\r\n      const checkDate = checkboxKey.split(\"T\")[0];\r\n      const lastDate = moment(checkDate, \"YYYY-MM-DD\")\r\n        .add(\"days\", 1)\r\n        .format(\"YYYY-MM-DD\");\r\n      let disablePrp = false;\r\n      if (moment(checkDate, \"YYYY-MM-DD\").add(\"days\", 2) < moment()) {\r\n        disablePrp = true;\r\n      }\r\n      let checker = false;\r\n      daySequence.forEach((i) => {\r\n        if (selectedCheckboxes[lastDate + \"*****\" + i._id] !== undefined) {\r\n          checker = true;\r\n        }\r\n      });\r\n\r\n      return (\r\n        <div className=\"month-schedule-checkbox\">\r\n          <input\r\n            name={`checkbox-${lastDate}`}\r\n            className={`${disablePrp == true ? \"disabled-checkbox\" : \"\"}`}\r\n            type=\"checkbox\"\r\n            //disabled={disablePrp}\r\n            checked={isSelected || selectedCheckboxes[lastDate] || checker}\r\n            onChange={() => handleDateCellChange(lastDate, false)}\r\n          />\r\n          {dateInfo.dayNumberText}\r\n        </div>\r\n      );\r\n    }\r\n    return dateInfo.dayNumberText;\r\n  };\r\n\r\n  const makePublishData = (data) => {\r\n    const result = [];\r\n    daySequence.forEach((item) => {\r\n      const newA = [];\r\n      data.forEach((items, i) => {\r\n        const spl = items.split(\"*****\");\r\n        const dt = spl[0];\r\n        const sq = spl[1];\r\n        if (sq === item._id) {\r\n          newA.push(dt);\r\n        }\r\n      });\r\n      if (newA.length > 0) {\r\n        result.push({\r\n          sequenceId: item._id,\r\n          dates: newA,\r\n        });\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  const handlePublish = async (e) => {\r\n    e.preventDefault();\r\n\r\n    //console.log(\"selectedCheckboxes\",selectedCheckboxes);\r\n\r\n    const dates = Object.keys(selectedCheckboxes).filter(\r\n      (i) =>\r\n        i !== \"Sun\" &&\r\n        i !== \"Mon\" &&\r\n        i !== \"Tue\" &&\r\n        i !== \"Wed\" &&\r\n        i !== \"Thu\" &&\r\n        i !== \"Fri\" &&\r\n        i !== \"Sat\"\r\n    );\r\n    const publishData = makePublishData(dates);\r\n    if (!publishData || publishData.length == 0) {\r\n      toast.error(\"Please select at least one date\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n\r\n      return false;\r\n    }\r\n    const payload = {\r\n      scheduleId: id,\r\n      scheduleArray: publishData,\r\n    };\r\n    await pushAddDates(payload).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        history.push(`/push`);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getCurrentMonth = (arg) => {\r\n    const startDate = arg.view.activeStart;\r\n    if (arg.view.type === \"dayGridMonth\") {\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n    if (arg.view.type === \"dayGridDay\") {\r\n      startDate.setDate(startDate.getDate() + 8);\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleDeleteSequesce = async (sequenceId, id) => {\r\n    await deleteSequence(sequenceId, id).then((res) => {\r\n      if (res.data.statusCode === 200) {\r\n        callAllDaySequence(id);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleButtonClick = (index) => {\r\n    setSelectedButtonIndex(index);\r\n    // Perform any other logic specific to the clicked button\r\n  };\r\n\r\n  const handleEditSequesce = (e, seqId, schId) => {\r\n    e.preventDefault();\r\n    history.push(`/push/sequence/${schId}/${seqId}`);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"fullcalendar-box\">\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button\r\n            className=\"mr-2\"\r\n            onClick={(e) => {\r\n              handlePublish(e);\r\n            }}\r\n            variant=\"info add-screen-btn\"\r\n          >\r\n            Publish\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"event-list\">\r\n          <div className=\"d-flex align-items-center justify-content-between pb-4\">\r\n            <h3 className=\"p-0\">Day Sequence</h3>\r\n            <Link to={`/testday/${id}`} className=\"mr-2\">\r\n              <Button variant=\"info add-screen-btn\">Create New</Button>\r\n            </Link>\r\n          </div>\r\n\r\n          {daySequence.map((event, i) => {\r\n            return (\r\n              <div\r\n                key={i}\r\n                className=\"month-schedule-list mt-4\"\r\n                onClick={() => {\r\n                  handleButtonClick(i);\r\n                  handleEventClick(event);\r\n                  // setActiveCard(true);\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"d-flex align-items-center px-2 py-4 justify-content-between\"\r\n                  style={{\r\n                    boxShadow:\r\n                      selectedEvent &&\r\n                      selectedEvent._id &&\r\n                      selectedEvent._id === event._id\r\n                        ? \"rgba(0, 0, 0, 0.5) 0px 4px 12px\"\r\n                        : \"\",\r\n                  }}\r\n                  // className={\r\n                  //   selectedButtonIndex === i\r\n                  //     ? \"zone zone-active \"\r\n                  //     : \"zone\"\r\n                  // }\r\n                >\r\n                  <span>\r\n                    {event.name?.length > 6\r\n                      ? event.name.slice(0, 6) + \"...\"\r\n                      : event.name}\r\n                  </span>\r\n\r\n                  <span className=\"total-composition\">\r\n                    Contains {event.timings.length} compositions\r\n                  </span>\r\n                  <span onClick={(e) => handleEditSequesce(e, event._id, id)}>\r\n                    <img\r\n                      src={edit}\r\n                      className=\"dropdown-list-img img-fluid\"\r\n                      height=\"25px\"\r\n                      width=\"25px\"\r\n                    />\r\n                  </span>\r\n                  <span onClick={() => handleDeleteSequesce(event._id, id)}>\r\n                    <img\r\n                      src={deleteIcon}\r\n                      className=\"dropdown-list-img img-fluid\"\r\n                      height=\"30px\"\r\n                      width=\"30px\"\r\n                    />\r\n                  </span>\r\n                  <span className=\"add-btn\">Add to Calendar </span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"calendar\" style={{ float: \"left\", width: \"55%\" }}>\r\n          <FullCalendar\r\n            className=\"month-schedule\"\r\n            weekends={true}\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            selectable={true}\r\n            events={events}\r\n            dayHeaderContent={renderDayHeader}\r\n            dayCellContent={renderDateCell}\r\n            //validRange={{\"start\":moment().format('YYYY-MM-DD'),'end':null}}\r\n            datesSet={(arg) => getCurrentMonth(arg)}\r\n            eventContent={(info) => (\r\n              <div className=\"month-schedule-event\">\r\n                <div>\r\n                  {info.event.title.length > 5\r\n                    ? info.event.title.slice(0, 5) + \"...\"\r\n                    : info.event.title}\r\n                </div>\r\n              </div>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\DaySchedule.js",["597","598","599","600","601","602","603","604"],"// import React from 'react'\r\n// import { useParams, useHistory } from \"react-router-dom\";\r\n\r\n// export default function DaySchedule() {\r\n//     const history = useHistory();\r\n//     const { id } = useParams();\r\n//     console.log(id, \"DaySchedule page id\")\r\n//     return (\r\n//         <div>DaySchedule</div>\r\n//     )\r\n// }\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\r\nimport nameAvatar from \"../../../img/assets-avatar-img.png\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { getAllMedia } from \"../../../utils/api\";\r\nimport useSWR from 'swr'\r\n\r\nimport {\r\n    getDatetimeIn12Hours,\r\n    humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\r\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\r\n\r\nconst DaySchedule = () => {\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    const { data: allMedia, mutate } = useSWR('/vendor/display/media', getAllMedia);\r\n    console.log(allMedia, \"day schedule\")\r\n\r\n    const [showNewTagModal, setNewTagModal] = useState(false);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const [selectedMedia, setSelectedMedia] = useState(\"\");\r\n    const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n\r\n    // use effect\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setDeleteModal(false)\r\n        await deleteMedia(selectedMedia._id)\r\n        mutate()\r\n    };\r\n\r\n    const handlePublishcOpen = (media) => {\r\n        setShowPublishPopUp(media);\r\n    }\r\n    // const parseMeta = (media) => {\r\n    //     const meta = JSON.parse(media.properties)\r\n    //     return (\r\n    //         <span className=\"td-content\">\r\n    //             {media?.type === \"image\" && <strong>{meta.height} x  {meta.width}</strong>}\r\n    //             {media?.type === \"video\" && <strong>{meta.length.toFixed(0) / 60} Sec</strong>}\r\n    //             <span>{meta.size} MB</span>\r\n    //         </span>\r\n    //     )\r\n    // }\r\n\r\n    const parseMeta = (media) => {\r\n        const meta = JSON.parse(media.properties);\r\n        return (\r\n            <span className=\"td-content\">\r\n                {media?.type === \"image\" && <strong>{meta?.height} x {meta?.width}</strong>}\r\n                {media?.type === \"video\" && meta?.length && (\r\n                    <strong>{(meta.length / 60).toFixed(0)} Sec</strong>\r\n                )}\r\n                {meta?.size && <span>{meta.size} MB</span>}\r\n            </span>\r\n        );\r\n    };\r\n\r\n\r\n    const videoMetaDuration = (media) => {\r\n        const properties = JSON.parse(media?.properties);\r\n        if (properties && properties.length) {\r\n            return (properties.length.toFixed(0) / 60).toFixed(0);\r\n        }\r\n        return null;\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\" d-flex\">\r\n\r\n\r\n                <div className=\"col-7\">\r\n\r\n\r\n                    {allMedia && allMedia.length !== 0 ? (\r\n                        <Table responsive className=\"custom-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Uploaded Date</th>\r\n                                    <th>Properties</th>\r\n                                    <th>Tags</th>\r\n\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {allMedia.map((media) => {\r\n                                    return (\r\n                                        <tr key={media._id}>\r\n                                            <td>\r\n                                                <span className=\"td-content d-flex name-td-content\">\r\n                                                    <span className={`name-img mr-2  ${media.type === \"video\" && \"videotableName\"}`}>\r\n                                                        {media.type === \"image\" && <img\r\n                                                            className=\"media-img img-fluid\"\r\n                                                            src={`${BASE_URL}${media.title}`}\r\n                                                            alt=\"media-img\"\r\n                                                        />}\r\n                                                        {media.type === \"video\" && videoMetaDuration(media)}\r\n                                                    </span>\r\n                                                    <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                                                        <strong>{media.title.split(\"/\")[media.title.split(\"/\").length - 1]}</strong>\r\n                                                        <span>{media.createdBy.name}</span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </td>\r\n                                            <td>{media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}</td>\r\n                                            <td>\r\n                                                <span className=\"td-content\">\r\n                                                    <strong>\r\n                                                        {humanReadableFormattedDateString(media.createdAt)}\r\n                                                    </strong>\r\n                                                    <span>{getDatetimeIn12Hours(media.createdAt)}</span>\r\n                                                </span>\r\n                                            </td>\r\n                                            <td>\r\n                                                {parseMeta(media)}\r\n                                            </td>\r\n                                            <td>\r\n                                                {media.tags.map((tag) => {\r\n                                                    return <span className=\"my-phone-tag text-truncate ml-1\">{tag}</span>;\r\n                                                })}\r\n                                                <span\r\n                                                    className=\"down-arrow\"\r\n                                                    onClick={() => {\r\n                                                        setSelectedMedia(media)\r\n                                                        setNewTagModal(true);\r\n                                                    }}\r\n                                                >\r\n                                                    <img\r\n                                                        className=\"down-arrow-img img-fluid\"\r\n                                                        src={downArrow}\r\n                                                        alt=\"arrow\"\r\n                                                    />\r\n                                                </span>\r\n                                            </td>\r\n\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    ) : (\r\n                        <div className=\"empty-media text-center\">\r\n                            <div class=\"empty-media-img mx-auto\">\r\n                                <img\r\n                                    className=\"media-img img-fluid\"\r\n                                    src={emptyMediaImg}\r\n                                    alt=\"media-img\"\r\n                                />\r\n                            </div>\r\n                            <h3>Add Media</h3>\r\n                            <p>\r\n                                Upload your favourite images and videos from the local storage\r\n                                <br /> of your device\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n\r\n                    {showNewTagModal && (\r\n                        <AddNewTagModal\r\n                            selected={selectedMedia}\r\n                            setNewTagModal={setNewTagModal}\r\n\r\n                        />\r\n                    )}\r\n                    {showPublishPopUp && (\r\n                        <PublishMediaModal\r\n                            selected={showPublishPopUp}\r\n                            setShowPublishPopUp={setShowPublishPopUp}\r\n                            type=\"media\"\r\n                        />\r\n                    )}\r\n                    {deleteModal && <DeleteConfirmation setDeleteModal={setDeleteModal} callbackFunction={handleDelete} text=\"Are you sure you want to delete?\" yes={\"Yes Deactivate\"} />}\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <h4>jjjj</h4>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\nexport default DaySchedule;\r\n\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\Footer.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\ScrollToTop.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\UtilsService.js",["605","606","607","608"],"export const isValidDate = (d) => {\r\n    return d instanceof Date && !isNaN(d);\r\n}\r\n\r\nexport const formattedDateString = (d) => {\r\n    d = new Date(d);\r\n    const yyyy = d.getFullYear();\r\n    const mm = dateDigits(d.getMonth() + 1);\r\n    const dd = dateDigits(d.getDate());\r\n    return yyyy + \"-\" + mm + \"-\" + dd;\r\n};\r\n\r\nexport const humanReadableFormattedDateString = (date) => {\r\n    date = new Date(date);\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    let day = dateDigits(date.getDate());\r\n    let month = months[date.getMonth()];\r\n    let year = date.getFullYear();\r\n    return day + ' ' + month + ', ' + year;\r\n}\r\n\r\nexport const formattedTimeString = (d) => {\r\n    d = new Date(d);\r\n    return dateDigits(d.getHours()) + \":\" + dateDigits(d.getMinutes()) + \":00\";\r\n};\r\n\r\nexport const getHOrMFromLocalTimeString = (localTimeString, hOrM = 'h') => {\r\n    const localTimeArr = localTimeString.split(':');\r\n    if (localTimeArr.length > 1) {\r\n        if (hOrM === 'h') {\r\n            return +localTimeString.split(':')[0];\r\n        } else {\r\n            return +localTimeString.split(':')[1];\r\n        }\r\n    } else {\r\n        return 0;\r\n    }\r\n};\r\n\r\nexport const dateDigits = (v, digits = 2) => {\r\n    let str = \"\";\r\n    for (let i = digits; i > 1; i--) {\r\n        str += \"0\";\r\n    }\r\n\r\n    return (str + v).slice(-digits);\r\n};\r\n\r\nexport const currencyFormat = (num, toFixed = 2) => {\r\n    num = num ? +num : 0;\r\n    return '$' + num.toFixed(toFixed).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n}\r\n\r\nexport const numberThFormat = (num) => {\r\n    switch(num) {\r\n        case 1: \r\n            return num + 'st';\r\n        break;\r\n        case 2: \r\n            return num + 'nd';\r\n        break;\r\n        case 3: \r\n            return num + 'rd';\r\n        break;\r\n        default: \r\n            return num + 'th';\r\n        break;\r\n    }\r\n}\r\n\r\nexport const priceValue = (formattedPrice = \"$0.00\") => {\r\n    formattedPrice = formattedPrice ? formattedPrice + \"\" : \"$0.00\";\r\n    return +formattedPrice.split(\",\").join(\"\").split(\" \").join(\"\").split(\"$\").join(\"\")\r\n};\r\n\r\nexport const isMobile = () => {\r\n    return window.innerWidth < 768;\r\n};\r\n\r\nexport const randomStr = (length) => {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const defaultPeriods = [\r\n    {\r\n        dayOfWeek: \"SUN\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"MON\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"TUE\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"WED\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"THU\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"FRI\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    },\r\n    {\r\n        dayOfWeek: \"SAT\",\r\n        startLocalTime: \"7:00:00\",\r\n        endLocalTime: \"20:00:00\",\r\n        closed: false\r\n    }\r\n];\r\n\r\nexport const getDatetimeIn12Hours = (datetimeString) =>{\r\n    const date = new Date(datetimeString);\r\n    const options = { hour: 'numeric', minute: 'numeric', hour12: true };\r\n    return  date.toLocaleTimeString('en-US', options);\r\n}\r\nexport const isBlobUrl = (url)=> {\r\n    return url.startsWith('blob:');\r\n  }","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\api.js",["609","610","611","612","613"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\ChooseLayout.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\MonthSchedule.jsx",["614","615","616","617","618","619","620"],"\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function MonthSchedule() {\r\n  // initial state\r\n\r\n  const [state, setState] = useState({\r\n    weekendsVisible: true,\r\n    externalEvents: [\r\n      {\r\n        title: \"Art 1\",\r\n        color: \"#0097a7\",\r\n        id: 34432,\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 2\",\r\n        color: \"#f44336\",\r\n        id: 323232,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 3\",\r\n        color: \"#f57f17\",\r\n        id: 1111,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 4\",\r\n        color: \"#90a4ae\",\r\n        id: 432432,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n    ],\r\n    // calendarEvents: [\r\n    //     {\r\n    //         id: 1,\r\n    //         title: \"All-day event\",\r\n    //         color: \"#388e3c\",\r\n    //         start: \"2020-12-12\",\r\n    //         end: \"2020-12-12\",\r\n    //         custom: \"questo è un campo custom\"\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: \"Timed event\",\r\n    //         color: \"#0097a7\",\r\n    //         start: \"2020-12-07\",\r\n    //         end: \"2020-12-10\",\r\n    //         custom: \"custom stuff\"\r\n    //     }\r\n    // ].map((event) => ({\r\n    //     ...event,\r\n    //     showDeleteButton: true,\r\n    //     extendedProps: {\r\n    //         ...event.extendedProps,\r\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\r\n    //     },\r\n    // }))\r\n  });\r\n\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n\r\n        return {\r\n          id: id,\r\n          title: title,\r\n          color: color,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // handle event receive\r\n  const handleEventReceive = (eventInfo) => {\r\n    const newEvent = {\r\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n      start: eventInfo.date,\r\n      end: eventInfo.date,\r\n      showDeleteButton: true,\r\n    };\r\n\r\n    // setState((prevState) => ({\r\n    //     ...prevState,\r\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n    // }));\r\n  };\r\n\r\n  // handle deletion of an event\r\n\r\n  const handleEventClick = (info) => {\r\n    console.log(info, \"sssss\");\r\n    info.event.remove();\r\n  };\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\r\n    const { event } = eventInfo;\r\n    const { title, timeText } = event;\r\n    console.log(eventInfo.timeText, \"ooooo\");\r\n    return (\r\n      <>\r\n        <div\r\n        //   style={{\r\n        //     display: \"flex\",\r\n        //     flexDirection: \"row\",\r\n        //     alignItems: \"center\",\r\n        //     justifyContent: \"space-evenly\",\r\n        //     height: \"-webkit-fill-available\",\r\n        //   }}\r\n        >\r\n       \r\n          <p className=\"m-0 fullcalender-title\">{title}</p>\r\n          {/* <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p> */}\r\n\r\n          {/* <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\r\n            de\r\n          </h5> */}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ float: \"left\", width: \"25%\" }}>\r\n        <div id=\"external-events\">\r\n          {state.externalEvents.map((event) => (\r\n            <div\r\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n              title={event.title}\r\n              data-id={event.id}\r\n              data-color={event.color}\r\n            \r\n              key={event.id}\r\n              style={{\r\n                backgroundColor: event.color,\r\n                borderColor: event.color,\r\n                cursor: \"pointer\"\r\n              }}\r\n            >\r\n              <div className=\"fc-event-main\">\r\n                <div>\r\n                  <strong>{event.title}</strong>\r\n                </div>\r\n                <img src={event.custom} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n            id=\"fullCalendar-table\"\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          // headerToolbar={{\r\n          //     left: \"\",\r\n          //     center: \"\",\r\n          //     right: \"\"\r\n          // }}\r\n          headerToolbar={false}\r\n          initialView=\"dayGridMonth\"\r\n        //   slotDuration=\"00:10:00\"\r\n        //   slotLabelInterval={{ hours: 1 }}\r\n          allDaySlot={false}\r\n          editable={true}\r\n          selectable={false}\r\n          selectMirror={true}\r\n          dayMaxEvents={false}\r\n          weekends={state.weekendsVisible}\r\n          // events={state.calendarEvents}\r\n          droppable={true}\r\n          eventReceive={handleEventReceive}\r\n          slotEventOverlap={false}\r\n          eventOverlap={false}\r\n          // select={handleSelect}\r\n          // eventClick={handleEventClick}\r\n          // eventRender={handleEventRender}\r\n          eventContent={renderEventContent}\r\n         \r\n        ></FullCalendar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyTestDay.jsx",["621","622","623","624","625","626"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { createPlugin } from \"@fullcalendar/core\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n\r\nconst MyCustomPlugin = createPlugin({\r\n  ...timeGridPlugin,\r\n  ...interactionPlugin,\r\n  // other plugin options\r\n});\r\n\r\nexport default function CopyTestDay() {\r\n  // initial state\r\n\r\n  const [state, setState] = useState({\r\n    weekendsVisible: true,\r\n    externalEvents: [\r\n      {\r\n        title: \"Art 1\",\r\n        color: \"#0097a7\",\r\n        id: 34432,\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 2\",\r\n        color: \"#f44336\",\r\n        id: 323232,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 3\",\r\n        color: \"#f57f17\",\r\n        id: 1111,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n      {\r\n        title: \"Art 4\",\r\n        color: \"#90a4ae\",\r\n        id: 432432,\r\n\r\n        custom: defaultComparisonIcon,\r\n      },\r\n    ],\r\n    // calendarEvents: [\r\n    //     {\r\n    //         id: 1,\r\n    //         title: \"All-day event\",\r\n    //         color: \"#388e3c\",\r\n    //         start: \"2020-12-12\",\r\n    //         end: \"2020-12-12\",\r\n    //         custom: \"questo è un campo custom\"\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: \"Timed event\",\r\n    //         color: \"#0097a7\",\r\n    //         start: \"2020-12-07\",\r\n    //         end: \"2020-12-10\",\r\n    //         custom: \"custom stuff\"\r\n    //     }\r\n    // ].map((event) => ({\r\n    //     ...event,\r\n    //     showDeleteButton: true,\r\n    //     extendedProps: {\r\n    //         ...event.extendedProps,\r\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\r\n    //     },\r\n    // }))\r\n  });\r\n\r\n  // load external events\r\n  useEffect(() => {\r\n    let draggableEl = document.getElementById(\"external-events\");\r\n    new Draggable(draggableEl, {\r\n      itemSelector: \".fc-event\",\r\n      eventData: function (eventEl) {\r\n        let id = eventEl.dataset.id;\r\n        let title = eventEl.getAttribute(\"title\");\r\n        let color = \"#FFE494\";\r\n        let custom = eventEl.dataset.custom;\r\n\r\n        return {\r\n          id: id,\r\n          title: title,\r\n          color: color,\r\n          custom: custom,\r\n          create: true,\r\n        };\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  // handle event receive\r\n  const handleEventReceive = (eventInfo) => {\r\n    const newEvent = {\r\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n      start: eventInfo.date,\r\n      end: eventInfo.date,\r\n      custom: eventInfo.draggedEl.getAttribute(\"data-custom\"),\r\n      showDeleteButton: true,\r\n    };\r\n\r\n    // setState((prevState) => ({\r\n    //     ...prevState,\r\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n    // }));\r\n  };\r\n\r\n  // handle deletion of an event\r\n\r\n  const handleEventClick = (info) => {\r\n    console.log(info, \"sssss\");\r\n    info.event.remove();\r\n  };\r\n\r\n  function renderEventContent(eventInfo) {\r\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\r\n    const { event } = eventInfo;\r\n    const { title, timeText } = event;\r\n    console.log(eventInfo.timeText, \"ooooo\");\r\n    return (\r\n      <>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-evenly\",\r\n            height: \"-webkit-fill-available\",\r\n          }}\r\n        >\r\n          <img\r\n            src={event.extendedProps.custom}\r\n            className=\"day-schedule-fullcelender-img\"\r\n            alt=\"Event\"\r\n          />\r\n          <p className=\"m-0 fullcalender-title\">{title}</p>\r\n          <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p>\r\n\r\n          <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\r\n            de\r\n          </h5>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  useEffect(() => {\r\n    const calendarEl = document.getElementById(\"fullCalendar-table\");\r\n    if (calendarEl) {\r\n      calendarEl.style.backgroundColor = \"#fff\"; // Set your desired background color here\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    const calendarContainer = document.querySelector(\".fullcalendar-container\");\r\n    if (calendarContainer) {\r\n      calendarContainer.style.backgroundColor = \"#f0f0f0\"; // Set the desired background color here\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ float: \"left\", width: \"25%\" }}>\r\n        <div id=\"external-events\">\r\n          {state.externalEvents.map((event) => (\r\n            <div\r\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n              title={event.title}\r\n              data-id={event.id}\r\n              data-color={event.color}\r\n              data-custom={event.custom}\r\n              key={event.id}\r\n              style={{\r\n                backgroundColor: event.color,\r\n                borderColor: event.color,\r\n                cursor: \"pointer\"\r\n              }}\r\n            >\r\n              <div className=\"fc-event-main\">\r\n                <div>\r\n                  <strong>{event.title}</strong>\r\n                </div>\r\n                <img src={event.custom} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n            id=\"fullCalendar-table\"\r\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n          // headerToolbar={{\r\n          //     left: \"\",\r\n          //     center: \"\",\r\n          //     right: \"\"\r\n          // }}\r\n          headerToolbar={false}\r\n          initialView=\"timeGridDay\"\r\n          slotDuration=\"00:10:00\"\r\n          slotLabelInterval={{ hours: 1 }}\r\n          allDaySlot={false}\r\n          editable={true}\r\n          selectable={false}\r\n          selectMirror={true}\r\n          dayMaxEvents={false}\r\n          weekends={state.weekendsVisible}\r\n          // events={state.calendarEvents}\r\n          droppable={true}\r\n          eventReceive={handleEventReceive}\r\n          slotEventOverlap={false}\r\n          eventOverlap={false}\r\n          // select={handleSelect}\r\n          // eventClick={handleEventClick}\r\n          // eventRender={handleEventRender}\r\n          eventContent={renderEventContent}\r\n         \r\n        ></FullCalendar>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\SelectComparison.jsx",["627","628","629","630"],"// import React, { useState } from 'react'\r\n// import { Button, Dropdown, Table } from \"react-bootstrap\";\r\n// import searchIcon from \"../../../img/search.png\";\r\n// import listIcon from \"../../../img/list-icon.png\";\r\n// import layoutSelected from \"../../../img/layout-select-img.png\";\r\n// import downArrow from \"../../../img/down-arrow.png\";\r\n// import menuIcon from \"../../../img/menu-icon.png\";\r\n// import defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\n// import deleteIcon from \"../../../img/delete-icon.png\";\r\n// const SelectComparison = () => {\r\n//   const [allScreens, setAllScreens] = useState(\"\");\r\n\r\n//   const [checkedItems, setCheckedItems] = useState({});\r\n//   const [checkedValues, setCheckedValues] = useState([]);\r\n\r\n//   const handleCheckboxChange = (event) => {\r\n//     const newCheckedItems = {\r\n//       ...checkedItems,\r\n//       [event.target.name]: event.target.checked,\r\n//     };\r\n//     const selectedScreens = [];\r\n//     for (const key in newCheckedItems) {\r\n//       if (newCheckedItems[key] === true) {\r\n//         selectedScreens.push(key);\r\n//       }\r\n//     }\r\n//     setCheckedValues(selectedScreens);\r\n//     setCheckedItems(newCheckedItems);\r\n//   };\r\n\r\n//   const handleSelectAllChange = (event) => {\r\n//     const newCheckedItems = {};\r\n//     allScreens.forEach((item) => {\r\n//       newCheckedItems[item._id] = event.target.checked;\r\n//     });\r\n//     const selectedScreens = [];\r\n//     for (const key in newCheckedItems) {\r\n//       if (newCheckedItems[key] === true) {\r\n//         selectedScreens.push(key);\r\n//       }\r\n//     }\r\n//     setCheckedValues(selectedScreens);\r\n//     setCheckedItems(newCheckedItems);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//           <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\r\n//         <h1>Select Composition</h1>\r\n\r\n//         <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\r\n//           <div className=\"form-group mb-0\">\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control input-default \"\r\n//               placeholder=\"Search...\"\r\n//             />\r\n//             <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n//           </div>\r\n//           <Button\r\n//             className=\"ml-2 icon-btn\"\r\n//             variant=\"primary\"\r\n//           >\r\n//             <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n//           </Button>\r\n//         </div>\r\n//       </div>\r\n// {/*\r\n//       <Table responsive className=\"custom-table mt-3\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Composition</th>\r\n//               <th>Date Added</th>\r\n//               <th>Associated Schedule</th>\r\n//               <th>Tags</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n\r\n//                 <tr>\r\n//                   <td>\r\n//                     <span className=\"td-content d-flex name-td-content\">\r\n//                       <span className=\"name-img mr-2\">\r\n//                       <img\r\n//                   className=\"layout-select-img\"\r\n//                   src={layoutSelected}\r\n//                   alt=\"menu-icon\"\r\n//                 />\r\n//                       </span>\r\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>C-c02Nov 21 12:03</strong>\r\n//                         <span>Added by Gauri Batra</span>\r\n//                       </span>\r\n//                     </span>\r\n//                   </td>\r\n//                   <td>\r\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>2 Nov, 2021</strong>\r\n//                         <span>12:02 PM</span>\r\n//                       </span>\r\n//                   </td>\r\n//                   <td>\r\n//                    0\r\n//                   </td>\r\n//                   <td>\r\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\r\n\r\n//                   </td>\r\n//                 </tr>\r\n//                 <tr>\r\n//                   <td>\r\n//                     <span className=\"td-content d-flex name-td-content\">\r\n//                       <span className=\"name-img mr-2\">\r\n//                       <img\r\n//                   className=\"layout-select-img\"\r\n//                   src={layoutSelected}\r\n//                   alt=\"menu-icon\"\r\n//                 />\r\n//                       </span>\r\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>C-c02Nov 21 12:03</strong>\r\n//                         <span>Added by Gauri Batra</span>\r\n//                       </span>\r\n//                     </span>\r\n//                   </td>\r\n//                   <td>\r\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n//                         <strong>2 Nov, 2021</strong>\r\n//                         <span>12:02 PM</span>\r\n//                       </span>\r\n//                   </td>\r\n//                   <td>\r\n//                    0\r\n//                   </td>\r\n//                   <td>\r\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\r\n\r\n//                   </td>\r\n//                 </tr>\r\n//           </tbody>\r\n//         </Table> */}\r\n\r\n//     </>\r\n//   )\r\n// }\r\n\r\n// export default SelectComparison\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport TableLoader from \"../TableLoader\";\r\nimport \"../Table.css\";\r\nimport { getAllScreens, pushAddSchedule } from \"../../../utils/api\";\r\nimport { Button, Dropdown, Table } from \"react-bootstrap\";\r\nimport searchIcon from \"../../../img/search.png\";\r\nimport listIcon from \"../../../img/list-icon.png\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nconst SelectComparison = () => {\r\n  const history = useHistory();\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [scheduleName, setScheduleName] = useState(\"\");\r\n  // use effect\r\n  console.log(checkedItems, \"SelectCompariso checkedItemsn\");\r\n  console.log(checkedValues, \"SelectCompariso checkedValues\");\r\n\r\n  useEffect(() => {\r\n    callAllScreenApi();\r\n  }, []);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await pushAddSchedule({\r\n      name: scheduleName,\r\n      screens: checkedValues,\r\n    }).then((res) => {\r\n      console.log(res, \"res schedule name\");\r\n      if (res.data.statusCode === 200) {\r\n        console.log(res.data.data.name);\r\n        history.push(`/testday/${res.data.data._id}`);\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\r\n        <h1>Select Screen</h1>\r\n\r\n        <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"d-flex justify-content-between align-items-center my-4\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          className=\" schedule-name-input-feild form-control input-default \"\r\n          placeholder=\"Schedule Name\"\r\n          value={scheduleName}\r\n          onChange={(e) => setScheduleName(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <Button className=\"mr-2\" variant=\"info add-screen-btn\" type=\"submit\">\r\n          Save\r\n        </Button>\r\n      </form>\r\n\r\n      <Table responsive>\r\n        <thead>\r\n          <tr>\r\n            <th className=\"width50\">\r\n              <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  id=\"checkbox1_exam_all\"\r\n                  onChange={handleSelectAllChange}\r\n                  required=\"\"\r\n                />\r\n                <label\r\n                  className=\"custom-control-label\"\r\n                  htmlFor=\"checkbox1_exam_all\"\r\n                ></label>\r\n              </div>\r\n            </th>\r\n            <th>Screen</th>\r\n            <th>Last Seen</th>\r\n            <th>Default Composition</th>\r\n            <th>Current Schedule</th>\r\n          </tr>\r\n        </thead>\r\n        {loading ? (\r\n          <TableLoader colSpan={5} />\r\n        ) : (\r\n          <tbody>\r\n            {allScreens !== \"\" &&\r\n              allScreens.map((screen) => {\r\n                return (\r\n                  <tr>\r\n                    <td>\r\n                      <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                        <input\r\n                          type=\"checkbox\"\r\n                          className=\"custom-control-input\"\r\n                          id={screen._id}\r\n                          name={screen._id}\r\n                          checked={checkedItems[screen._id]}\r\n                          onChange={handleCheckboxChange}\r\n                        />\r\n                        <label\r\n                          className=\"custom-control-label\"\r\n                          htmlFor={screen._id}\r\n                        ></label>\r\n                      </div>\r\n                    </td>\r\n\r\n                    <td>\r\n                      <span className=\"td-content\">\r\n                        <strong>{screen.name}</strong>\r\n                        <span>{screen.screenLocation}</span>\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <span className=\"status status-green\"></span>\r\n                        <span className=\"td-content\">\r\n                          <strong>{screen.name}</strong>\r\n                          <span>{screen.screenLocation}</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>Default Compo. </td>\r\n                    <td>No Schedule</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        )}\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectComparison;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\CopyMonthSchedule.jsx",["631","632","633","634"],"// import React, { useEffect, useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\r\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\n\r\n// export default function CopyMonthSchedule() {\r\n//   // initial state\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n// const [assignedDates, setAssignedDates] = useState([]);\r\n// const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n//   const [state, setState] = useState({\r\n//     weekendsVisible: true,\r\n//     externalEvents: [\r\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\r\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\r\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\r\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\r\n//     ],\r\n//     calendarEvents: [\r\n//       {\r\n//         id: 1,\r\n//         title: \"All-day event\",\r\n//         color: \"#388e3c\",\r\n//         start: \"2020-12-12\",\r\n//         end: \"2020-12-12\",\r\n//         custom: \"questo è un campo custom\"\r\n//       },\r\n//       {\r\n//         id: 2,\r\n//         title: \"Timed event\",\r\n//         color: \"#0097a7\",\r\n//         start: \"2020-12-07\",\r\n//         end: \"2020-12-10\",\r\n//         custom: \"custom stuff\"\r\n//       }\r\n//     ]\r\n//   });\r\n\r\n//   // load external events\r\n//   useEffect(() => {\r\n//     let draggableEl = document.getElementById(\"external-events\");\r\n//     new Draggable(draggableEl, {\r\n//       itemSelector: \".fc-event\",\r\n//       eventData: function (eventEl) {\r\n//         let id = eventEl.dataset.id;\r\n//         let title = eventEl.getAttribute(\"title\");\r\n//         let color = eventEl.dataset.color;\r\n//         let custom = eventEl.dataset.custom;\r\n\r\n//         return {\r\n//           id: id,\r\n//           title: title,\r\n//           color: color,\r\n//           custom: custom,\r\n//           create: true\r\n//         };\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   // add external events\r\n//   const addEvent = () => {\r\n//     let newEvent = {\r\n//       id: 3433,\r\n//       title: \"Timed event\",\r\n//       color: \"#333333\",\r\n//       start: \"2020-12-31\",\r\n//       end: \"2020-12-31\",\r\n//       custom: \"custom stuff\"\r\n//     };\r\n\r\n//     setState((state) => {\r\n//       return {\r\n//         ...state,\r\n//         externalEvents: state.externalEvents.concat(newEvent)\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // handle event receive\r\n//   const handleEventReceive = (eventInfo) => {\r\n//     const newEvent = {\r\n//       id: eventInfo.draggedEl.getAttribute(\"data-id\"),\r\n//       title: eventInfo.draggedEl.getAttribute(\"title\"),\r\n//       color: eventInfo.draggedEl.getAttribute(\"data-color\"),\r\n//       start: eventInfo.date,\r\n//       end: eventInfo.date,\r\n//       custom: eventInfo.draggedEl.getAttribute(\"data-custom\")\r\n//     };\r\n\r\n//     setSelectedEvent(null);\r\n\r\n//     setState((state) => ({\r\n//       ...state,\r\n//       calendarEvents: state.calendarEvents.concat(newEvent)\r\n//     }));\r\n//   };\r\n// //   const handleExternalEventClick = (event) => {\r\n// //     const eventId = event.currentTarget.getAttribute(\"data-id\");\r\n// //     const eventTitle = event.currentTarget.getAttribute(\"title\");\r\n// //     const eventColor = event.currentTarget.getAttribute(\"data-color\");\r\n// //     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\r\n\r\n// //     if (selectedEvent && selectedEvent.id === eventId) {\r\n// //       // Uncheck the selected event\r\n// //       setSelectedEvent(null);\r\n// //       setAssignedDates([]);\r\n// //     } else {\r\n// //       // Check a new event\r\n// //       setSelectedEvent({\r\n// //         id: eventId,\r\n// //         title: eventTitle,\r\n// //         color: eventColor,\r\n// //         custom: eventCustom\r\n// //       });\r\n// //       setAssignedDates(\r\n// //         state.calendarEvents\r\n// //           .filter((event) => event.title === eventTitle)\r\n// //           .map((event) => event.start)\r\n// //       );\r\n// //     }\r\n// //   };\r\n\r\n//   const handleExternalEventClick = (event) => {\r\n//     const eventId = event.currentTarget.getAttribute(\"data-id\");\r\n//     const eventTitle = event.currentTarget.getAttribute(\"title\");\r\n//     const eventColor = event.currentTarget.getAttribute(\"data-color\");\r\n//     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\r\n\r\n//     if (selectedEvent && selectedEvent.id === eventId && selectedDate) {\r\n//       // Uncheck the selected event and clear the selected date\r\n//       setSelectedEvent(null);\r\n//       setSelectedDate(null);\r\n//     } else {\r\n//       // Check a new event and set the selected date to the current date\r\n//       setSelectedEvent({\r\n//         id: eventId,\r\n//         title: eventTitle,\r\n//         color: eventColor,\r\n//         custom: eventCustom\r\n//       });\r\n//       setSelectedDate(new Date());\r\n//     }\r\n//   };\r\n\r\n//   const handleDateSelect = (selectInfo) => {\r\n//     setSelectedDate(selectInfo.startStr);\r\n//   };\r\n//   // Define handleEventRadioChange function\r\n// const handleEventRadioChange = (selectedEvent, selectedDate) => {\r\n//     if (selectedEvent && selectedDate) {\r\n//       setState((prevState) => {\r\n//         // Check if the event is already assigned to the selected date\r\n//         const isEventAssigned = prevState.calendarEvents.some(\r\n//           (event) =>\r\n//             event.id === selectedEvent.id &&\r\n//             event.start.toDateString() === selectedDate.toDateString()\r\n//         );\r\n\r\n//         if (isEventAssigned) {\r\n//           // Remove the event from the selected date\r\n//           const updatedEvents = prevState.calendarEvents.filter(\r\n//             (event) =>\r\n//               event.id !== selectedEvent.id ||\r\n//               event.start.toDateString() !== selectedDate.toDateString()\r\n//           );\r\n\r\n//           return {\r\n//             ...prevState,\r\n//             calendarEvents: updatedEvents\r\n//           };\r\n//         } else {\r\n//           // Add the event to the selected date\r\n//           const newEvent = {\r\n//             id: selectedEvent.id,\r\n//             title: selectedEvent.title,\r\n//             color: selectedEvent.color,\r\n//             start: selectedDate,\r\n//             end: selectedDate,\r\n//             custom: selectedEvent.custom\r\n//           };\r\n\r\n//           return {\r\n//             ...prevState,\r\n//             calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n//           };\r\n//         }\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   const renderEventContent = (eventInfo) => {\r\n//     return (\r\n//       <>\r\n//         <div>{eventInfo.timeText}</div>\r\n//         <div>\r\n//           <input\r\n//             type=\"radio\"\r\n//             checked={\r\n//               selectedEvent &&\r\n//               selectedEvent.id === eventInfo.event.extendedProps.id &&\r\n//               selectedDate &&\r\n//               selectedDate.toDateString() === eventInfo.event.start.toDateString()\r\n//             }\r\n//             onChange={() => handleEventRadioChange(eventInfo.event)}\r\n//           />\r\n//           {eventInfo.event.title}\r\n//         </div>\r\n//       </>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div style={{ float: \"left\", width: \"25%\" }}>\r\n//         <div style={{ margin: \"0 0 20px\" }}>\r\n//           <input\r\n//             type=\"submit\"\r\n//             name=\"name\"\r\n//             onClick={addEvent}\r\n//             value=\"add external event\"\r\n//           />\r\n//         </div>\r\n//         <div id=\"external-events\" style={{width:\"100%\"}}>\r\n//           {/* {state.externalEvents.map((event) => (\r\n//             <div\r\n//               className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\r\n//               title={event.title}\r\n//               data-id={event.id}\r\n//               data-color={event.color}\r\n//               data-custom={event.custom}\r\n//               key={event.id}\r\n//               style={{\r\n//                 backgroundColor: event.color,\r\n//                 borderColor: event.color,\r\n//                 cursor: \"pointer\"\r\n//               }}\r\n//             >\r\n//               <div className=\"fc-event-main\" >\r\n//                 <div>\r\n//                   <strong>{event.title}</strong>\r\n//                 </div>\r\n//                 {event.custom}\r\n//               </div>\r\n//             </div>\r\n//           ))} */}\r\n//    {/* {state.externalEvents.map((event) => (\r\n//   <div\r\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\r\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\r\n//     }`}\r\n//     title={event.title}\r\n//     data-id={event.id}\r\n//     data-color={event.color}\r\n//     data-custom={event.custom}\r\n//     key={event.id}\r\n//     onClick={handleExternalEventClick}\r\n//     style={{\r\n//       backgroundColor: event.color,\r\n//       borderColor: event.color,\r\n//       cursor: \"pointer\"\r\n//     }}\r\n//   >\r\n//     <div className=\"fc-event-main\">\r\n//       <div>\r\n//         <strong>{event.title}</strong>\r\n//       </div>\r\n//       {event.custom}\r\n//     </div>\r\n//     {selectedEvent && selectedEvent.id === event.id && (\r\n//       <div>\r\n//         {state.calendarEvents.some(\r\n//           (calendarEvent) =>\r\n//             calendarEvent.title === selectedEvent.title &&\r\n//             assignedDates.includes(calendarEvent.start)\r\n//         ) ? (\r\n//           <span>Assigned</span>\r\n//         ) : (\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={assignedDates.length > 0}\r\n//             onChange={() => handleExternalEventClick(event)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//     )}\r\n//   </div>\r\n// ))} */}\r\n\r\n// {state.externalEvents.map((event) => (\r\n//   <div\r\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\r\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\r\n//     }`}\r\n//     title={event.title}\r\n//     data-id={event.id}\r\n//     data-color={event.color}\r\n//     data-custom={event.custom}\r\n//     key={event.id}\r\n//     onClick={handleExternalEventClick}\r\n//     style={{\r\n//       backgroundColor: event.color,\r\n//       borderColor: event.color,\r\n//       cursor: \"pointer\"\r\n//     }}\r\n//   >\r\n//     <div className=\"fc-event-main\">\r\n//       <div>\r\n//         <strong>{event.title}</strong>\r\n//       </div>\r\n//       {event.custom}\r\n//     </div>\r\n//     {selectedEvent && selectedEvent.id === event.id && (\r\n//       <div>\r\n//         {state.calendarEvents.some(\r\n//           (calendarEvent) =>\r\n//             calendarEvent.title === selectedEvent.title &&\r\n//             calendarEvent.start.getDate() === selectedDate?.getDate()\r\n//         ) ? (\r\n//           <span>Assigned</span>\r\n//         ) : (\r\n//           <input\r\n//             type=\"checkbox\"\r\n//             checked={selectedDate && selectedDate.getDate() === new Date().getDate()}\r\n//             onChange={() => handleExternalEventClick(event)}\r\n//           />\r\n//         )}\r\n//       </div>\r\n//     )}\r\n//   </div>\r\n// ))}\r\n\r\n//         </div>\r\n//       </div>\r\n//       <div style={{ float: \"left\", width: \"75%\" }}>\r\n//         {/* <FullCalendar\r\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n\r\n//         headerToolbar={false}\r\n//           initialView=\"dayGridMonth\"\r\n//           editable={true}\r\n//           selectable={true}\r\n//           selectMirror={true}\r\n//           dayMaxEvents={true}\r\n//           weekends={state.weekendsVisible}\r\n//           events={state.calendarEvents}\r\n//           droppable={true}\r\n//           eventReceive={handleEventReceive}\r\n//         /> */}\r\n\r\n// <FullCalendar\r\n//   plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n//   headerToolbar={{\r\n//     left: \"prev,next today\",\r\n//     center: \"title\",\r\n//     right: \"dayGridMonth,timeGridWeek,timeGridDay\"\r\n//   }}\r\n//   initialView=\"dayGridMonth\"\r\n//   editable={true}\r\n//   selectable={true}\r\n//   selectMirror={true}\r\n//   dayMaxEvents={true}\r\n//   weekends={state.weekendsVisible}\r\n//   events={state.calendarEvents}\r\n//   droppable={true}\r\n//   eventReceive={handleEventReceive}\r\n//   eventContent={renderEventContent} // Add this line\r\n// />\r\n\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\r\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\r\n\r\n// export default function CopyMonthSchedule() {\r\n//   // initial state\r\n//   const [state, setState] = useState({\r\n//     weekendsVisible: true,\r\n//     externalEvents: [\r\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\r\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\r\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\r\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\r\n//     ],\r\n//     calendarEvents: []\r\n//   });\r\n\r\n//   // load external events\r\n//   useEffect(() => {\r\n//     let draggableEl = document.getElementById(\"external-events\");\r\n//     new Draggable(draggableEl, {\r\n//       itemSelector: \".fc-event\",\r\n//       eventData: function (eventEl) {\r\n//         let id = eventEl.dataset.id;\r\n//         let title = eventEl.getAttribute(\"title\");\r\n//         let color = eventEl.dataset.color;\r\n//         let custom = eventEl.dataset.custom;\r\n\r\n//         return {\r\n//           id: id,\r\n//           title: title,\r\n//           color: color,\r\n//           custom: custom,\r\n//           create: true\r\n//         };\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   // handle external event selection\r\n//   const handleExternalEventSelect = (event) => {\r\n//     setState((prevState) => {\r\n//       // Clear any previously selected events\r\n//       const calendarEvents = prevState.calendarEvents.map((event) => ({\r\n//         ...event,\r\n//         selected: false\r\n//       }));\r\n\r\n//       // Find the selected event\r\n//       const selectedEvent = calendarEvents.find(\r\n//         (ev) => ev.id === event.id && ev.selected\r\n//       );\r\n\r\n//       if (selectedEvent) {\r\n//         // Unselect the event if already selected\r\n//         selectedEvent.selected = false;\r\n//       } else {\r\n//         // Select the event\r\n//         event.selected = true;\r\n//       }\r\n\r\n//       return {\r\n//         ...prevState,\r\n//         calendarEvents: calendarEvents\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   // handle date click\r\n//   const handleDateClick = (arg) => {\r\n//     const selectedDate = arg.date;\r\n\r\n//     setState((prevState) => {\r\n//       const selectedEvent = prevState.calendarEvents.find(\r\n//         (event) => event.selected\r\n//       );\r\n\r\n//       if (selectedEvent) {\r\n//         // Add the selected event to the selected date\r\n//         const newEvent = {\r\n//           id: selectedEvent.id,\r\n//           title: selectedEvent.title,\r\n//           color: selectedEvent.color,\r\n//           start: selectedDate,\r\n//           end: selectedDate,\r\n//           custom: selectedEvent.custom\r\n//         };\r\n\r\n//         return {\r\n//           ...prevState,\r\n//           calendarEvents: prevState.calendarEvents.concat(newEvent)\r\n//         };\r\n//       }\r\n\r\n//       return prevState;\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <div style={{ float: \"left\", width: \"25%\" }}>\r\n//         <div id=\"external-events\" style={{ width: \"100%\" }}>\r\n//           {state.externalEvents.map((event) => (\r\n//             <div\r\n//               className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2${\r\n//                 event.selected ? \" selected\" : \"\"\r\n//               }`}\r\n//               title={event.title}\r\n//               data-id={event.id}\r\n//               data-color={event.color}\r\n//               data-custom={event.custom}\r\n//               key={event.id}\r\n//               onClick={() => handleExternalEventSelect(event)}\r\n//               style={{\r\n//                 backgroundColor: event.color,\r\n//                 borderColor: event.color,\r\n//                 cursor: \"pointer\"\r\n//               }}\r\n//             >\r\n//               <div className=\"fc-event-main\">\r\n//                 <div>\r\n//                   <strong>{event.title}</strong>\r\n//                 </div>\r\n//                 {event.custom}\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//       <div style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n//           headerToolbar={false}\r\n//           initialView=\"dayGridMonth\"\r\n//           editable={true}\r\n//           selectable={true}\r\n//           selectMirror={true}\r\n//           dayMaxEvents={true}\r\n//           weekends={state.weekendsVisible}\r\n//           events={state.calendarEvents}\r\n//           dateClick={handleDateClick}\r\n//           eventRender={({ event, el }) => {\r\n//             // Add radio button to each date\r\n//             const inputEl = document.createElement(\"input\");\r\n//             inputEl.type = \"radio\";\r\n//             inputEl.addEventListener(\"change\", () =>\r\n//               handleExternalEventSelect(event)\r\n//             );\r\n\r\n//             el.prepend(inputEl);\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// -----------------------------------\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n\r\n// export default function CalendarWithRadioButtons() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n//   const handleDateClick = (dateClickInfo) => {\r\n//     setSelectedDate(dateClickInfo.date);\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const isSelected = selectedDate && dateInfo.date.valueOf() === selectedDate.valueOf();\r\n\r\n//     return (\r\n//       <div>\r\n//         <input\r\n//           type=\"radio\"\r\n//           checked={isSelected}\r\n//           onChange={() => setSelectedDate(dateInfo.date)}\r\n//         />\r\n//         {dateInfo.dayNumberText}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calendar\">\r\n//       <FullCalendar\r\n//         plugins={[dayGridPlugin]}\r\n//         initialView=\"dayGridMonth\"\r\n//         selectable={true}\r\n//         dateClick={handleDateClick}\r\n//         dayCellContent={renderDateCell}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// -----------------------------------\r\n\r\n//******************************* */\r\nimport React, { useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nexport default function CalendarWithEventList() {\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [events, setEvents] = useState([\r\n    { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n    { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n    { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n    { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n  ]);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  console.log(selectedEvent, \"lllllllloooooo\");\r\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n    const isEventSelected = selectedEvent;\r\n\r\n    if (isEventSelected) {\r\n      const checkboxKey = dateInfo.date.toISOString();\r\n      const hasEvent = events.some(\r\n        (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <input\r\n            name={`checkbox-${checkboxKey}`}\r\n            type=\"checkbox\"\r\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n            onChange={() => handleDateCellChange(dateInfo)}\r\n          />\r\n          {dateInfo.dayNumberText}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return dateInfo.dayNumberText;\r\n  };\r\n\r\n  // const handleDateCellChange = (dateInfo) => {\r\n  //   if (selectedEvent) {\r\n  //     const checkboxKey = dateInfo.date.toISOString();\r\n  //     const selectedDateValue = dateInfo.date.valueOf();\r\n  //     const filteredEvents = events.filter(\r\n  //       (event) => event.start.valueOf() !== selectedDateValue\r\n  //     );\r\n\r\n  //     const hasEvent = filteredEvents.some(\r\n  //       (event) => event.start.valueOf() === selectedDateValue\r\n  //     );\r\n\r\n  //     if (hasEvent) {\r\n  //       setSelectedEvent(null);\r\n  //       setSelectedDate(null);\r\n  //       setEvents(filteredEvents);\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //         delete updatedCheckboxes[checkboxKey];\r\n  //         return updatedCheckboxes;\r\n  //       });\r\n  //     } else {\r\n  //       setSelectedDate(dateInfo.date);\r\n\r\n  //       const event = {\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n\r\n  //       setEvents([...filteredEvents, event]);\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n  //     }\r\n  //   } else {\r\n  //     setSelectedDate(dateInfo.date);\r\n  //   }\r\n  // };\r\n\r\n  // const handleDateCellChange = (dateInfo) => {\r\n  //   console.log(dateInfo, \"iiiiiiiiiii\");\r\n  //   const checkboxKey = dateInfo.date.toISOString();\r\n  //   const selectedDateValue = dateInfo.date.valueOf();\r\n  //   const filteredEvents = events.filter(\r\n  //     (event) => event.start.valueOf() !== selectedDateValue\r\n  //   );\r\n\r\n  //   const date = new Date(dateInfo.date);\r\n  //   const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n  //     year: \"numeric\",\r\n  //     month: \"2-digit\",\r\n  //     day: \"2-digit\",\r\n  //   });\r\n\r\n  //   const [day, month, year] = formattedDate.split(\"/\");\r\n  //   const desiredFormat = `${year}-${month}-${day}`;\r\n  //   // console.log(filteredEvents, \"cgvjhjghgk\");\r\n  //   let hasEvent = false;\r\n  //   console.log(dateInfo, \"arti\");\r\n  //   console.log(Object.keys(dateInfo), \"dj\");\r\n  //   // console.log(example, \"test\");\r\n  //   // if (dateInfo.event) {\r\n  //   //   hasEvent = filteredEvents.some((event) =>\r\n  //   //     console.log(event, \"ttttttttt\")\r\n  //   //   );\r\n  //   // }\r\n  //   console.log(events.id);\r\n\r\n  //   if (dateInfo.event && dateInfo.event.id === dateInfo.id) {\r\n  //     hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n  //   }\r\n  //   // console.log(hasEvent, \"pppppp\");\r\n  //   if (hasEvent) {\r\n  //     setSelectedEvent(null);\r\n  //     setSelectedDate(null);\r\n  //     setEvents(filteredEvents);\r\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n  //       const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n  //       delete updatedCheckboxes[checkboxKey];\r\n  //       return updatedCheckboxes;\r\n  //     });\r\n  //   } else {\r\n  //     setSelectedDate(dateInfo.date);\r\n\r\n  //     if (selectedEvent) {\r\n  //       // console.log(selectedEvent, \"pppppppp\");\r\n  //       dateInfo.kkk = selectedEvent;\r\n  //       // var example = dateInfo.kkk;\r\n  //       // console.log(dateInfo, \"eeeeeee\");\r\n  //       const event = {\r\n  //         title: selectedEvent.title,\r\n  //         start: dateInfo.date,\r\n  //       };\r\n\r\n  //       setEvents([...filteredEvents, event]);\r\n\r\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n  //         ...prevSelectedCheckboxes,\r\n  //         [checkboxKey]: true,\r\n  //       }));\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  function handleDateCellChange(dateInfo) {\r\n    console.log(dateInfo, \"handleDateCellChange top console\");\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const selectedDateValue = dateInfo.date.valueOf();\r\n    if (selectedEvent !== null) {\r\n      let testObj = JSON.parse(JSON.stringify(dateInfo));\r\n      testObj.event = selectedEvent;\r\n      dateInfo.kkk = selectedEvent;\r\n      console.log(dateInfo, testObj, \"dateInfo -> testObj\");\r\n      console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\r\n\r\n      const event = {\r\n        title: selectedEvent.title,\r\n        start: dateInfo.date,\r\n      };\r\n    }\r\n    const filteredEvents = events.filter(\r\n      (event) => event.start.valueOf() !== selectedDateValue\r\n    );\r\n\r\n    const date = new Date(dateInfo.date);\r\n    const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n      year: \"numeric\",\r\n      month: \"2-digit\",\r\n      day: \"2-digit\",\r\n    });\r\n\r\n    const [day, month, year] = formattedDate.split(\"/\");\r\n    const desiredFormat = `${year}-${month}-${day}`;\r\n\r\n    let hasEvent = false;\r\n    console.log(dateInfo, \"arti\");\r\n\r\n    if (dateInfo.event && dateInfo.event.id) {\r\n      hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n    }\r\n\r\n    if (hasEvent) {\r\n      setSelectedEvent(null);\r\n      setSelectedDate(null);\r\n      setEvents(filteredEvents);\r\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n        delete updatedCheckboxes[checkboxKey];\r\n        return updatedCheckboxes;\r\n      });\r\n    } else {\r\n      setSelectedDate(dateInfo.date);\r\n\r\n      if (\r\n        selectedEvent &&\r\n        dateInfo.event &&\r\n        selectedEvent.id === dateInfo.event.id\r\n      ) {\r\n        const eventToRemove = events.find(\r\n          (event) => event.id === selectedEvent.id\r\n        );\r\n        const updatedEvents = events.filter(\r\n          (event) => event.id !== selectedEvent.id\r\n        );\r\n        setSelectedEvent(null);\r\n        setSelectedDate(null);\r\n        setEvents(updatedEvents);\r\n        setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n          const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n          delete updatedCheckboxes[checkboxKey];\r\n          return updatedCheckboxes;\r\n        });\r\n      } else if (selectedEvent) {\r\n        const event = {\r\n          id: selectedEvent.id,\r\n          title: selectedEvent.title,\r\n          start: dateInfo.date,\r\n        };\r\n        setEvents([...filteredEvents, event]);\r\n\r\n        setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n          ...prevSelectedCheckboxes,\r\n          [checkboxKey]: true,\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  const getDatesBetween = (start, end) => {\r\n    const dates = [];\r\n    let currentDate = new Date(start);\r\n\r\n    while (currentDate <= end) {\r\n      dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    return dates;\r\n  };\r\n\r\n  const addCheckboxesToDates = (event) => {\r\n    const allDates = getDatesBetween(event.start, event.end);\r\n\r\n    const calendarEl = document.querySelector(\".calendar-container\");\r\n    allDates.forEach((date) => {\r\n      const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n      dateCell.classList.add(\"selected-date\");\r\n    });\r\n  };\r\n\r\n  const handleEventClick = (event) => {\r\n    setSelectedEvent(event);\r\n    setSelectedDate(null); // Reset selected date\r\n    addCheckboxesToDates(event);\r\n  };\r\n\r\n  // const events = [\r\n  //   { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n  //   { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n  //   { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n  //   { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n  // ];\r\n  return (\r\n    <div className=\"containe\">\r\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n        <h2>Event List</h2>\r\n        <ul>\r\n          {events.map((event) => (\r\n            <li\r\n              key={event.id}\r\n              onClick={() => handleEventClick(event)}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                fontWeight:\r\n                  selectedEvent && selectedEvent.id === event.id\r\n                    ? \"bold\"\r\n                    : \"normal\",\r\n              }}\r\n            >\r\n              {event.title}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n        <FullCalendar\r\n          plugins={[dayGridPlugin, interactionPlugin]}\r\n          initialView=\"dayGridMonth\"\r\n          selectable={true}\r\n          events={events}\r\n          dayCellContent={renderDateCell}\r\n          eventContent={(info) => {\r\n            return (\r\n              <div>\r\n                <div>{info.event.title}</div>\r\n              </div>\r\n            );\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//*********************************** */\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function CalendarWithEventList() {\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [events, setEvents] = useState([]);\r\n//   const [selectedEvent, setSelectedEvent] = useState(null);\r\n//   const [selectedRadio, setSelectedRadio] = useState({});\r\n\r\n//   const handleDateCellChange = (dateInfo) => {\r\n//     if (selectedEvent) {\r\n//       const selectedDateValue = dateInfo.date.valueOf();\r\n//       const filteredEvents = events.filter(\r\n//         (event) => event.start.valueOf() !== selectedDateValue\r\n//       );\r\n\r\n//       const hasEvent = filteredEvents.some(\r\n//         (event) => event.start.valueOf() === selectedDateValue\r\n//       );\r\n\r\n//       if (hasEvent) {\r\n//         setSelectedEvent(null);\r\n//         setSelectedDate(null);\r\n//         setEvents(filteredEvents);\r\n//         setSelectedRadio({}); // Clear the selected radio state for the date\r\n//       } else {\r\n//         setSelectedDate(dateInfo.date);\r\n\r\n//         const event = {\r\n//           title: selectedEvent.title,\r\n//           start: dateInfo.date,\r\n//         };\r\n\r\n//         setEvents([...filteredEvents, event]);\r\n//         setSelectedRadio((prevSelectedRadio) => ({\r\n//           ...prevSelectedRadio,\r\n//           [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\r\n//         }));\r\n//       }\r\n//     } else {\r\n//       setSelectedDate(dateInfo.date);\r\n//       setSelectedRadio((prevSelectedRadio) => ({\r\n//         ...prevSelectedRadio,\r\n//         [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   const renderDateCell = (dateInfo) => {\r\n//     const isSelected = selectedDate\r\n//       ? selectedDate.valueOf() === dateInfo.date.valueOf()\r\n//       : false;\r\n//     const isEventSelected = selectedEvent;\r\n//     const radioKey = dateInfo.date.toISOString();\r\n\r\n//     if (isEventSelected) {\r\n//       const radioButtonName = `radio-${radioKey}`;\r\n//       const hasEvent = events.some(\r\n//         (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n//       );\r\n\r\n//       return (\r\n//         <div>\r\n//           <input\r\n//             name={radioButtonName}\r\n//             type=\"radio\"\r\n//             checked={isSelected && selectedRadio[radioKey]}\r\n//             onChange={() => handleDateCellChange(dateInfo)}\r\n//           />\r\n//           {dateInfo.dayNumberText}\r\n//         </div>\r\n//       );\r\n//     }\r\n\r\n//     return dateInfo.dayNumberText;\r\n//   };\r\n\r\n//   const getDatesBetween = (start, end) => {\r\n//     const dates = [];\r\n//     let currentDate = new Date(start);\r\n\r\n//     while (currentDate <= end) {\r\n//       dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n//       currentDate.setDate(currentDate.getDate() + 1);\r\n//     }\r\n\r\n//     return dates;\r\n//   };\r\n\r\n//   const addRadioButtonsToDates = (event) => {\r\n//     const allDates = getDatesBetween(event.start, event.end);\r\n\r\n//     const calendarEl = document.querySelector(\".calendar-container\");\r\n//     allDates.forEach((date) => {\r\n//       const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n//       dateCell.classList.add(\"selected-date\");\r\n//     });\r\n//   };\r\n\r\n//   const handleEventClick = (event) => {\r\n//     setSelectedEvent(event);\r\n//     setSelectedDate(null); // Reset selected date\r\n//     addRadioButtonsToDates(event);\r\n//   };\r\n\r\n//   const eventsa = [\r\n//     { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n//     { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n//     { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n//     { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n//   ];\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//         <h2>Event List</h2>\r\n//         <ul>\r\n//           {eventsa.map((event) => (\r\n//             <li\r\n//               key={event.id}\r\n//               onClick={() => handleEventClick(event)}\r\n//               style={{\r\n//                 cursor: \"pointer\",\r\n//                 fontWeight:\r\n//                   selectedEvent && selectedEvent.id === event.id\r\n//                     ? \"bold\"\r\n//                     : \"normal\",\r\n//               }}\r\n//             >\r\n//               {event.title}\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//         <FullCalendar\r\n//           plugins={[dayGridPlugin, interactionPlugin]}\r\n//           initialView=\"dayGridMonth\"\r\n//           selectable={true}\r\n//           events={events}\r\n//           dayCellContent={renderDateCell}\r\n//           eventContent={(info) => {\r\n//             return (\r\n//               <div>\r\n//                 <div>{info.event.title}</div>\r\n//               </div>\r\n//             );\r\n//           }}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// second month\r\n\r\n// import React, { useState } from \"react\";\r\n// import FullCalendar from \"@fullcalendar/react\";\r\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\r\n// import interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n// export default function SecondMonth() {\r\n//     const [selectedDate, setSelectedDate] = useState(null);\r\n//     const [events, setEvents] = useState([\r\n//         { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\r\n//         { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\r\n//         { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\r\n//         { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\r\n//     ]);\r\n//     const [selectedEvent, setSelectedEvent] = useState(null);\r\n//     console.log(selectedEvent, \"lllllllloooooo\");\r\n//     const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\r\n\r\n//     function handleDateCellChange(dateInfo) {\r\n//         console.log(dateInfo, \"oooooo\")\r\n//         console.log(dateInfo, \"handleDateCellChange top console\");\r\n//         const checkboxKey = dateInfo.date.toISOString();\r\n//         const selectedDateValue = dateInfo.date.valueOf();\r\n//         const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//         if (isChecked) {\r\n//             // Unselecting the checkbox\r\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//                 delete updatedCheckboxes[checkboxKey];\r\n//                 return updatedCheckboxes;\r\n//             });\r\n\r\n//             const filteredEvents = events.filter(\r\n//                 (event) => event.start.valueOf() !== selectedDateValue\r\n//             );\r\n\r\n//             setSelectedEvent(null);\r\n//             setSelectedDate(null);\r\n//             setEvents(filteredEvents);\r\n//         } else {\r\n//             // Selecting the checkbox\r\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//                 ...prevSelectedCheckboxes,\r\n//                 [checkboxKey]: true,\r\n//             }));\r\n\r\n//             const event = {\r\n//                 id: selectedEvent.id,\r\n//                 title: selectedEvent.title,\r\n//                 start: dateInfo.date,\r\n//             };\r\n//             setEvents((prevEvents) => [...prevEvents, event]);\r\n//         }\r\n//     }\r\n\r\n//     // function handleDateCellChange(dateInfo) {\r\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     //     const checkboxKey = dateInfo.date.toISOString();\r\n//     //     const isChecked = selectedCheckboxes[checkboxKey];\r\n\r\n//     //     if (isChecked) {\r\n//     //         // Unselecting the checkbox\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //             delete updatedCheckboxes[checkboxKey];\r\n//     //             return updatedCheckboxes;\r\n//     //         });\r\n\r\n//     //         const eventToRemove = events.find(\r\n//     //             (event) => event.start.valueOf() === dateInfo.date.valueOf()\r\n//     //         );\r\n\r\n//     //         if (eventToRemove) {\r\n//     //             const updatedEvents = events.filter(\r\n//     //                 (event) => event.id !== eventToRemove.id\r\n//     //             );\r\n//     //             setEvents(updatedEvents);\r\n//     //         }\r\n//     //     } else {\r\n//     //         // Selecting the checkbox\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//     //             ...prevSelectedCheckboxes,\r\n//     //             [checkboxKey]: true,\r\n//     //         }));\r\n\r\n//     //         const event = {\r\n//     //             id: selectedEvent.id,\r\n//     //             title: selectedEvent.title,\r\n//     //             start: dateInfo.date,\r\n//     //         };\r\n\r\n//     //         setEvents((prevEvents) => [...prevEvents, event]);\r\n//     //     }\r\n//     // }\r\n\r\n//     const renderDateCell = (dateInfo) => {\r\n//         console.log(dateInfo, \"ppppp\")\r\n//         const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\r\n//         const isSelected = selectedDateValue === dateInfo.date.valueOf();\r\n//         const isEventSelected = selectedEvent;\r\n\r\n//         if (isEventSelected) {\r\n//             const checkboxKey = dateInfo.date.toISOString();\r\n\r\n//             return (\r\n//                 <div>\r\n//                     <input\r\n//                         name={`checkbox-${checkboxKey}`}\r\n//                         type=\"checkbox\"\r\n//                         checked={isSelected || selectedCheckboxes[checkboxKey]}\r\n//                         onChange={() => handleDateCellChange(dateInfo)}\r\n//                     />\r\n//                     {dateInfo.dayNumberText}\r\n//                 </div>\r\n//             );\r\n//         }\r\n\r\n//         return dateInfo.dayNumberText;\r\n//     };\r\n\r\n//     // function handleDateCellChange(dateInfo) {\r\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\r\n//     //     const checkboxKey = dateInfo.date.toISOString();\r\n//     //     const selectedDateValue = dateInfo.date.valueOf();\r\n//     //     if (selectedEvent !== null) {\r\n//     //         let testObj = JSON.parse(JSON.stringify(dateInfo));\r\n//     //         testObj.event = selectedEvent;\r\n//     //         dateInfo.kkk = selectedEvent;\r\n//     //         console.log(dateInfo, testObj, \"dateInfo -> testObj\");\r\n//     //         console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\r\n\r\n//     //         const event = {\r\n//     //             title: selectedEvent.title,\r\n//     //             start: dateInfo.date,\r\n//     //         };\r\n//     //     }\r\n//     //     const filteredEvents = events.filter(\r\n//     //         (event) => event.start.valueOf() !== selectedDateValue\r\n//     //     );\r\n\r\n//     //     const date = new Date(dateInfo.date);\r\n//     //     const formattedDate = date.toLocaleDateString(\"en-GB\", {\r\n//     //         year: \"numeric\",\r\n//     //         month: \"2-digit\",\r\n//     //         day: \"2-digit\",\r\n//     //     });\r\n\r\n//     //     const [day, month, year] = formattedDate.split(\"/\");\r\n//     //     const desiredFormat = `${year}-${month}-${day}`;\r\n\r\n//     //     let hasEvent = false;\r\n//     //     console.log(dateInfo, \"arti\");\r\n\r\n//     //     if (dateInfo.event && dateInfo.event.id) {\r\n//     //         hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\r\n//     //     }\r\n\r\n//     //     if (hasEvent) {\r\n//     //         setSelectedEvent(null);\r\n//     //         setSelectedDate(null);\r\n//     //         setEvents(filteredEvents);\r\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //             delete updatedCheckboxes[checkboxKey];\r\n//     //             return updatedCheckboxes;\r\n//     //         });\r\n//     //     } else {\r\n//     //         setSelectedDate(dateInfo.date);\r\n\r\n//     //         if (\r\n//     //             selectedEvent &&\r\n//     //             dateInfo.event &&\r\n//     //             selectedEvent.id === dateInfo.event.id\r\n//     //         ) {\r\n//     //             const eventToRemove = events.find(\r\n//     //                 (event) => event.id === selectedEvent.id\r\n//     //             );\r\n//     //             const updatedEvents = events.filter(\r\n//     //                 (event) => event.id !== selectedEvent.id\r\n//     //             );\r\n//     //             setSelectedEvent(null);\r\n//     //             setSelectedDate(null);\r\n//     //             setEvents(updatedEvents);\r\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => {\r\n//     //                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\r\n//     //                 delete updatedCheckboxes[checkboxKey];\r\n//     //                 return updatedCheckboxes;\r\n//     //             });\r\n//     //         } else if (selectedEvent) {\r\n//     //             const event = {\r\n//     //                 id: selectedEvent.id,\r\n//     //                 title: selectedEvent.title,\r\n//     //                 start: dateInfo.date,\r\n//     //             };\r\n//     //             setEvents([...filteredEvents, event]);\r\n\r\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\r\n//     //                 ...prevSelectedCheckboxes,\r\n//     //                 [checkboxKey]: true,\r\n//     //             }));\r\n//     //         }\r\n//     //     }\r\n//     // }\r\n\r\n//     // const getDatesBetween = (start, end) => {\r\n//     //     const dates = [];\r\n//     //     let currentDate = new Date(start);\r\n\r\n//     //     while (currentDate <= end) {\r\n//     //         dates.push(currentDate.toISOString().split(\"T\")[0]);\r\n//     //         currentDate.setDate(currentDate.getDate() + 1);\r\n//     //     }\r\n\r\n//     //     return dates;\r\n//     // };\r\n\r\n//     // const addCheckboxesToDates = (event) => {\r\n//     //     const allDates = getDatesBetween(event.start, event.end);\r\n\r\n//     //     const calendarEl = document.querySelector(\".calendar-container\");\r\n//     //     allDates.forEach((date) => {\r\n//     //         const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\r\n//     //         dateCell.classList.add(\"selected-date\");\r\n//     //     });\r\n//     // };\r\n\r\n//     const handleEventClick = (event) => {\r\n//         setSelectedEvent(event);\r\n//         setSelectedDate(null); // Reset selected date\r\n//         // addCheckboxesToDates(event);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"containe\">\r\n//             <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\r\n//                 <h2>Event List</h2>\r\n//                 <ul>\r\n//                     {events.map((event, i) => (\r\n//                         <li\r\n//                             key={i}\r\n//                             onClick={() => handleEventClick(event)}\r\n//                             style={{\r\n//                                 cursor: \"pointer\",\r\n//                                 fontWeight:\r\n//                                     selectedEvent && selectedEvent.id === event.id\r\n//                                         ? \"bold\"\r\n//                                         : \"normal\",\r\n//                             }}\r\n//                         >\r\n//                             {event.title}\r\n//                         </li>\r\n//                     ))}\r\n//                 </ul>\r\n//             </div>\r\n//             <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\r\n//                 <FullCalendar\r\n//                     plugins={[dayGridPlugin, interactionPlugin]}\r\n//                     initialView=\"dayGridMonth\"\r\n//                     selectable={true}\r\n//                     events={events}\r\n//                     dayCellContent={renderDateCell}\r\n//                     eventContent={(info) => {\r\n//                         return (\r\n//                             <div>\r\n//                                 <div>{info.event.title}</div>\r\n//                             </div>\r\n//                         );\r\n//                     }}\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\push\\viewSchedule.jsx",["635","636","637","638","639","640","641","642","643"],"import React, { useState, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\nimport { getAllDaySequence } from \"../../../utils/api\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nexport default function ViewSchedule() {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [events, setEvents] = useState([]);\r\n  const [daySequence, setDaySequence] = useState([]);\r\n  const [timings, setTimings] = useState([]);\r\n  const [selectedTime, setSelectedTime] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  //var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  console.log(selectedTime, \"selectedTime\");\r\n  const callAllDaySequence = async (id) => {\r\n    const list = await getAllDaySequence(id);\r\n    setDaySequence(list.sequence);\r\n    const seqArray = [];\r\n    if (list && list.sequence && list.sequence[0] && list.sequence.length > 0) {\r\n      var flat = [];\r\n      const datesTiming = [];\r\n      for (var i = 0; i < list.sequence.length; i++) {\r\n        flat = flat.concat(list.sequence[i].dates);\r\n        list.sequence[i].dates.forEach((v) => {\r\n          datesTiming[v] = list.sequence[i].timings;\r\n        });\r\n      }\r\n      setTimings(datesTiming);\r\n      //console.log(\"seqArray\",seqArray,flat);\r\n      setDatesArray(flat);\r\n    }\r\n\r\n    console.log(list, datesArray);\r\n  };\r\n  useEffect(() => {\r\n    callAllDaySequence(id);\r\n  }, [id]);\r\n\r\n  const [currentMonth, setCurrentMonth] = useState(0);\r\n  const [datesArray, setDatesArray] = useState();\r\n\r\n  // useEffect(() => {}, [selectedCheckboxes]);\r\n\r\n  const renderDayHeader = (dayInfo) => {\r\n    const { date } = dayInfo;\r\n    const checkboxKey = dayInfo.date.toISOString();\r\n    //const isChecked = selectedCheckboxes[checkboxKey];\r\n    return <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>;\r\n  };\r\n\r\n  const handleDayTime = (e, dateInfo) => {\r\n    e.preventDefault();\r\n    const str = dateInfo + \"T00:00:00.000Z\";\r\n    setSelectedTime(timings[str]);\r\n    setSelectedDate(dateInfo);\r\n  };\r\n\r\n  const renderDateCell = (dateInfo) => {\r\n    console.log(dateInfo, \"dateInfo\");\r\n    const checkboxKey = dateInfo.date.toISOString();\r\n    const lastDate = moment(checkboxKey, \"YYYY-MM-DD\")\r\n      .add(\"days\", 1)\r\n      .format(\"YYYY-MM-DD\");\r\n    const isSelected =\r\n      datesArray && datesArray.length > 0\r\n        ? datesArray.find((item) => {\r\n            return item.split(\"T\")[0] === lastDate;\r\n          })\r\n        : false;\r\n    let disablePrp = false;\r\n\r\n    return (\r\n      <div className=\"d-flex\">\r\n        <div className=\"month-schedule-checkbox\">\r\n          {isSelected ? (\r\n            <span\r\n              className=\"btn\"\r\n              onClick={(e) => {\r\n                handleDayTime(e, lastDate);\r\n              }}\r\n              style={{\r\n                background: \"#b3005e\",\r\n                padding: \"5px\",\r\n                marginRight: \"10px\",\r\n                color: \"#fff\",\r\n                position: \"relative\",\r\n                top: \"30px\",\r\n                fontSize: \"8px\",\r\n                width: \"100%\",\r\n              }}\r\n            >\r\n              {/* {dateInfo.dayNumberText} */}\r\n              Events\r\n            </span>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n        <div> {dateInfo.dayNumberText}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getCurrentMonth = (arg) => {\r\n    const startDate = arg.view.activeStart;\r\n    if (arg.view.type === \"dayGridMonth\") {\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n    if (arg.view.type === \"dayGridDay\") {\r\n      startDate.setDate(startDate.getDate() + 8);\r\n      setCurrentMonth(startDate.getMonth() + 1);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const renderTime = (data) => {\r\n    let d = data.split(\"T\")[1];\r\n    d = d.split(\":\");\r\n    return d[0] + \":\" + d[1];\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fullcalendar-box\">\r\n        <div className=\"d-flex justify-content-end\">\r\n          <Button\r\n            className=\"mr-2\"\r\n            // onClick={(e) => {\r\n            //   handlePublish(e);\r\n            // }}\r\n            variant=\"info add-screen-btn\"\r\n          >\r\n            Edit\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"event-list\">\r\n          <h3>{selectedDate && selectedDate}</h3>\r\n          {selectedTime &&\r\n            selectedTime.map((event, i) => (\r\n              <div key={i} className=\"month-schedule-list mt-4\">\r\n                <div className=\"d-flex align-items-center px-2 py-4 justify-content-between\">\r\n                  <span className=\"view-schedule-list\">\r\n                    {event.composition.name?.length > 20\r\n                      ? event.composition.name.slice(0, 20) + \"...\"\r\n                      : event.composition.name}\r\n                  </span>\r\n                  <div className=\"view-schedule-time\">\r\n                    <span className=\"total-composition mr-2\">\r\n                      {renderTime(event.startTime)}\r\n                    </span>\r\n                    <span className=\"total-composition\">\r\n                      {renderTime(event.endTime)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n        <div className=\"calendar\" style={{ float: \"left\", width: \"55%\" }}>\r\n          <FullCalendar\r\n            className=\"month-schedule view-schedule-fullcalender\"\r\n            weekends={true}\r\n            plugins={[dayGridPlugin, interactionPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            selectable={true}\r\n            events={events}\r\n            dayHeaderContent={renderDayHeader}\r\n            dayCellContent={renderDateCell}\r\n            //validRange={{\"start\":moment().format('YYYY-MM-DD'),'end':null}}\r\n            datesSet={(arg) => getCurrentMonth(arg)}\r\n            eventContent={(info) => (\r\n              <div className=\"month-schedule-event\">\r\n                <div>\r\n                  {info.event.title.length > 5\r\n                    ? info.event.title.slice(0, 5) + \"...\"\r\n                    : info.event.title}\r\n                </div>\r\n              </div>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\reportsList.jsx",["644","645","646","647","648","649"],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { getReports } from \"../../../utils/api\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport GenerateReportModal from \"../../modals/generateReportModal\";\r\nimport Uptime from './Uptime';\r\nimport Media from './Media';\r\nimport Audit from './Audit';\r\n\r\nexport default function ReportsList() {\r\n  const history = useHistory();\r\n  const [dropValue, setDropValue] = useState(\"Select\");\r\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\r\n\r\n  let params = new URLSearchParams(history.location.search);\r\n  let startDate = params.get(\"startDate\");\r\n  let endDate = params.get(\"endDate\");\r\n  let type = params.get(\"type\");\r\n  let reportSlug = params.get(\"report\");\r\n  const [reportData, setReportData] = useState([]);\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n  useEffect(() => {\r\n    console.log(startDate, endDate, \"semnd api\");\r\n    getReports(startDate, endDate, reportSlug).then((res) => {\r\n      console.log(res, \"res schedule getReports\");\r\n      if (res.data.statusCode === 200) {\r\n        setReportData(res.data.data);\r\n        // history.push(`/reports-list/${res.data.data}`);\r\n        // <ReportsList data={res.data.data} />;\r\n      }\r\n    });\r\n  }, [startDate, endDate, reportSlug]);\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div className=\"custom-content-heading d-flex align-items-center\">\r\n        <div>\r\n          <h1 className=\"mb-4\">{reportSlug}</h1>\r\n        </div>\r\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              className=\"mt-1 mb-2\"\r\n            >\r\n              {dropValue}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Monthly\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Monthly\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Daily\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Daily\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Custom\");\r\n                  setShowGenerateModal(true);\r\n                }}\r\n              >\r\n                Custom\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n      {reportSlug && reportSlug == 'uptime-report' ? <Uptime reportData={reportData}/> : ''}\r\n      {reportSlug && reportSlug == 'media-report' ? <Media reportData={reportData}/> : ''}\r\n      {reportSlug && reportSlug == 'audit-logs' ? <Audit reportData={reportData}/> : ''}\r\n      \r\n      <GenerateReportModal\r\n        close={() => setShowGenerateModal(false)}\r\n        show={showGenerateModal}\r\n        reportType={reportSlug}\r\n        type={type}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\details.jsx",["650"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  Dropdown,\r\n  DropdownButton,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\n\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport editIcon from \"../../../img/edit-icon.png\";\r\nimport powerIcon from \"../../../img/power-icon.png\";\r\nimport screenShotIcon from \"../../../img/screenshot-icon.png\";\r\nimport locationIcon from \"../../../img/location-icon.png\";\r\nimport accordionImg from \"../../../img/screen-accordion-img.png\";\r\nimport editComposition from \"../../../img/edit-composition.png\";\r\nimport clockIcon from \"../../../img/clock-icon.png\";\r\nimport tagAddIcon from \"../../../img/icon-tag-add.png\";\r\n\r\nimport { deleteScreen, getAllScreens } from \"../../../utils/api\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport QuickPlayModal from \"../../modals/QuickPlayModal\";\r\nimport WindowsModal from \"../../modals/WindowsModal\";\r\nimport UpdateModal from \"../../modals/UpdateModal\";\r\n\r\nconst ScreenDetails = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [screen, setScreen] = useState(\"\");\r\n\r\n  const [activeDefault, setActiveDefault] = useState(\"\");\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [showQuickPlayModal, setQuickPlayModal] = useState(false);\r\n  const [showWindowsModal, setWindowsModal] = useState(false);\r\n  const [showUpdateModal, setUpdateModal] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    callAllScreenApi();\r\n  }, []);\r\n  const callAllScreenApi = async () => {\r\n    const list = await getAllScreens();\r\n    setScreen(\r\n      list.find((item) => {\r\n        return item._id === id;\r\n      })\r\n    );\r\n  };\r\n  console.log(screen, \"details screen \");\r\n  const handleDelete = async () => {\r\n    setDeleteModal(false);\r\n    await deleteScreen(id);\r\n    history.push(\"/display\");\r\n  };\r\n\r\n  const handleQuickPlay = async () => {\r\n    setDeleteModal(false);\r\n  };\r\n\r\n  const handleWindows = async () => {\r\n    setWindowsModal(false);\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    setWindowsModal(false);\r\n  };\r\n  const defaultAccordion = [\r\n    {\r\n      title: \"Content\",\r\n      text: (\r\n        <div className=\"row\">\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"accordion-custom-img\">\r\n                <img\r\n                  className=\"accordion-img\"\r\n                  src={accordionImg}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"accordion-custom-content flex-1\">\r\n                <h6>Currently Playing</h6>\r\n                <p>Default Composition</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"accordion-custom-img\">\r\n                <img\r\n                  className=\"accordion-img\"\r\n                  src={accordionImg}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"accordion-custom-content flex-1\">\r\n                <h6>\r\n                  Default Composition{\" \"}\r\n                  <span className=\"edit-compostion\">\r\n                    {\" \"}\r\n                    <img\r\n                      className=\"accordion-img\"\r\n                      src={editComposition}\r\n                      alt=\"menu-icon\"\r\n                    />\r\n                  </span>\r\n                </h6>\r\n                <p>Default Composition 1</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\r\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\r\n              <div className=\"schedule-custom-img\">\r\n                <img className=\"schedule-img\" src={clockIcon} alt=\"menu-icon\" />\r\n              </div>\r\n              <div className=\"accordion-custom-content active-schedule flex-1\">\r\n                <h6>Active Schedule</h6>\r\n                <h5>Schedule 1</h5>\r\n                <p className=\"date-schedule\">\r\n                  From 02 Apr, 23 ,04:00PM - To 05 Apr,23, 05:00Pm\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      bg: \"primary\",\r\n    },\r\n    {\r\n      title: \"Device\",\r\n      text: (\r\n        <div className=\"device-accordion-content\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Private IP</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>10.10.1.10</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Device OS</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>Windows</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Public IP</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>17.12.13.10</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>APK Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>NA</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>MAC Address</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>NA</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>SDK Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>NA</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Device ID</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>509373783ASDH766</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <h6>Javascript Version</h6>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\r\n                  <div className=\"device-content\">\r\n                    <p>5.3.0.0</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      bg: \"info\",\r\n    },\r\n    {\r\n      title: \"Tag\",\r\n      text: (\r\n        <div className=\"tag-accordion-content\">\r\n          <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\r\n            <Badge\r\n              className=\"badge-common-light badge-tag mr-2\"\r\n              variant=\"outline-light\"\r\n            >\r\n              Test Devices\r\n            </Badge>\r\n            <Badge\r\n              className=\"badge-common-light badge-tag mr-2\"\r\n              variant=\"outline-light\"\r\n            >\r\n              Test Devices\r\n            </Badge>\r\n            <Badge\r\n              className=\"badge-common-light badge-tag mr-2\"\r\n              variant=\"outline-light\"\r\n            >\r\n              Test Devices\r\n            </Badge>\r\n            <span className=\"tag-added\">\r\n              {\" \"}\r\n              <img className=\"tag-add-icon\" src={tagAddIcon} alt=\"menu-icon\" />\r\n            </span>\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      bg: \"success\",\r\n    },\r\n  ];\r\n  if (!screen) return <></>;\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading d-flex flex-wrap align-items-center\">\r\n        <h1 className=\"mr-auto\">Screen Details</h1>\r\n        <Button\r\n          className=\"edit-screen-btn d-flex align-items-center\"\r\n          variant=\"outline-light\"\r\n          onClick={() => {\r\n            setUpdateModal(true);\r\n          }}\r\n        >\r\n          Edit Screen{\" \"}\r\n          <span className=\"btn-icon-right\">\r\n            <img className=\"edit-icon\" src={editIcon} alt=\"menu-icon\" />\r\n          </span>\r\n        </Button>\r\n      </div>\r\n      <div className=\"accordion-overflow\">\r\n        <div className=\"form-head d-flex mb-3 align-items-start mt-2 pr-3\">\r\n          <span className=\"screen-subheading\">{screen.name}</span>\r\n\r\n          <div className=\"ml-auto d-flex flex-wrap align-items-center\">\r\n            <a\r\n              className=\" btn btn-primary btn-xs\"\r\n              variant=\"primary\"\r\n              href={`/web-player?id=${screen.device.deviceToken}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Launch Web Player\r\n            </a>\r\n\r\n            <Button\r\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\r\n              variant=\"primary\"\r\n              onClick={() => {\r\n                setQuickPlayModal(true);\r\n              }}\r\n            >\r\n              <img\r\n                className=\"dropdown-list-img-icon img-fluid\"\r\n                src={powerIcon}\r\n                alt=\"menu-icon\"\r\n              />\r\n            </Button>\r\n            <Button\r\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\r\n              variant=\"primary\"\r\n              onClick={() => {\r\n                setWindowsModal(true);\r\n              }}\r\n            >\r\n              <img\r\n                className=\"dropdown-list-img-icon img-fluid screenshot-icon\"\r\n                src={screenShotIcon}\r\n                alt=\"menu-icon\"\r\n              />\r\n            </Button>\r\n            <DropdownButton\r\n              as={ButtonGroup}\r\n              title=\"\"\r\n              id=\"bg-nested-dropdown\"\r\n              className=\"ml-2  more-icon-dropdown\"\r\n            >\r\n              <Dropdown.Item eventKey=\"1\">Reload Screen</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"2\">Clear Cache</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"3\">Clear Data</Dropdown.Item>\r\n              <Dropdown.Item eventKey=\"4\">Reboot display</Dropdown.Item>\r\n\r\n              <Dropdown.Item\r\n                eventKey=\"5\"\r\n                onClick={() => {\r\n                  setDeleteModal(true);\r\n                }}\r\n              >\r\n                Deactivate Screen\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row location-row mx-0\">\r\n          <div className=\"col-sm-6 p-md-0\">\r\n            <div className=\"location-col\">\r\n              <h4>\r\n                <img\r\n                  className=\"locationt-icon-img\"\r\n                  src={locationIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n                {screen.googleLocation}\r\n              </h4>\r\n              <p className=\"active-row d-flex align-items-center\">\r\n                <span className=\"active-status\"></span> Active Now\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row accordion-overflow-scroll\">\r\n          <div className=\"col-md-12 \">\r\n            <Accordion\r\n              className=\"accordion accordion-primary custom-accordion\"\r\n              defaultActiveKey=\"\"\r\n            >\r\n              {defaultAccordion.map((d, i) => (\r\n                <div className=\"accordion__item details-accordian\" key={i}>\r\n                  <Accordion.Toggle\r\n                    as={Card.Text}\r\n                    eventKey={`${i}`}\r\n                    className={`accordion__header rounded-lg ${\r\n                      activeDefault === i ? \"\" : \"collapsed\"\r\n                    }`}\r\n                    onClick={() =>\r\n                      setActiveDefault(activeDefault === i ? -1 : i)\r\n                    }\r\n                  >\r\n                    <span className=\"accordion__header--text\">{d.title}</span>\r\n                    <span className=\"accordion__header--indicator\"></span>\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`${i}`}>\r\n                    <div className=\"accordion__body--text\">{d.text}</div>\r\n                  </Accordion.Collapse>\r\n                </div>\r\n              ))}\r\n            </Accordion>\r\n          </div>\r\n          {deleteModal && (\r\n            <DeleteConfirmation\r\n              setDeleteModal={setDeleteModal}\r\n              callbackFunction={handleDelete}\r\n              text=\"Are you sure you want to deactivate?\"\r\n              yes={\"Yes Deactivate\"}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        <QuickPlayModal\r\n          showQuickPlayModal={showQuickPlayModal}\r\n          setQuickPlayModal={setQuickPlayModal}\r\n          handleQuickPlay={handleQuickPlay}\r\n        />\r\n\r\n        <WindowsModal\r\n          showWindowsModal={showWindowsModal}\r\n          setWindowsModal={setWindowsModal}\r\n          handleWindows={handleWindows}\r\n        />\r\n\r\n        <UpdateModal\r\n          showUpdateModal={showUpdateModal}\r\n          setUpdateModal={setUpdateModal}\r\n          handleUpdate={handleUpdate}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScreenDetails;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CreateComposition.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\listComposition.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\EditComposition.jsx",["651","652"],"import { useLocation } from \"react-router-dom\";\r\nimport useSWR from 'swr'\r\nimport CommonComposition from \"./Common\";\r\nimport { getCompositionById } from \"../../../../utils/api\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst EditComposition = () => {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const id = queryParams.get('id');\r\n\r\n  // const { data: composition , mutate , error} = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\r\n  const [composition,setComposition] = useState(null)\r\n  const layout = composition ? composition.layout : {};\r\n\r\n\r\n  // Example useEffect for triggering SWR mutate on route change\r\n  const getData = async ()=>{\r\n    const data  =await getCompositionById(`/vendor/layouts/composition?compositionId=${id}`)\r\n    setComposition(data)\r\n  }\r\n  useEffect(() => {\r\n    if(id){\r\n      getData()\r\n      \r\n    }\r\n  }, [id]);\r\n\r\n  return (<>{composition && <CommonComposition type=\"edit\" layout={layout} composition={composition}/>}</>)\r\n};\r\n\r\nexport default EditComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\TableLoader.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\index.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\index.jsx",["653","654","655","656","657","658","659","660"],"import React, { useEffect, useState } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport scheduleIcon from \"../../../img/Vector.png\";\r\nimport computer from \"../../../img/computer.png\";\r\nimport logs from \"../../../img/logs.png\";\r\nimport GenerateReportModal from \"../../modals/generateReportModal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getReports } from \"../../../utils/api\";\r\nimport Uptime from \"./Uptime\";\r\nimport Media from \"./Media\";\r\nimport Audit from \"./Audit\";\r\nimport backicon from \"../../../img/backicon.png\";\r\n\r\nconst Reports = () => {\r\n  const history = useHistory();\r\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\r\n  const [reportType, setReportType] = useState(\"\");\r\n  const [filter, setFilter] = useState({});\r\n  const [reportData, setReportData] = useState([]);\r\n  const [dropValue, setDropValue] = useState(\"Filter\");\r\n  let params = new URLSearchParams(history.location.search);\r\n  let reportSlug = params.get(\"report\");\r\n\r\n  const handleClick = (e, type) => {\r\n    e.preventDefault();\r\n    history.push(`/reports?report=${type}`);\r\n  };\r\n\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (reportSlug && reportSlug !== \"\" && Object.keys(filter).length == 0) {\r\n      setShowGenerateModal(true);\r\n    }\r\n    if (Object.keys(filter).length > 0 && reportSlug !== \"\") {\r\n      getReports(filter.startDate, filter.endDate, reportSlug).then((res) => {\r\n        if (res.data.statusCode === 200) {\r\n          setReportData(res.data.data);\r\n        }\r\n      });\r\n    }\r\n  }, [reportSlug, filter]);\r\n\r\n  useEffect(() => {\r\n    if (reportSlug && reportSlug == \"media-report\") {\r\n      setReportType(\"Media Report\");\r\n    }\r\n    if (reportSlug && reportSlug == \"uptime-report\") {\r\n      setReportType(\"Uptime Report\");\r\n    }\r\n    if (reportSlug && reportSlug == \"audit-logs\") {\r\n      setReportType(\"Audit Logs\");\r\n    }\r\n  }, [reportData]);\r\n\r\n  const redirectBack = (e) => {\r\n    e.preventDefault();\r\n    setReportData([]);\r\n    setFilter({});\r\n    setReportType(\"\");\r\n    history.push(\"/reports\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {reportSlug && reportSlug !== \"\" ? (\r\n        \"\"\r\n      ) : (\r\n        <>\r\n          <div className=\"custom-content-heading d-flex flex-wrap \">\r\n            <div>\r\n              <h1 className=\"mb-1\">Reports</h1>\r\n              <p className=\"three-layout-paragrapgh\">\r\n                Which report would you like to generate?\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <Row>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"media-report\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={scheduleIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6> Media Report</h6>\r\n                <p>Shows for how much time Media file is played</p>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"uptime-report\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={computer}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Uptime Report</h6>\r\n                <p>Shows for how much time screen was displaying content</p>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              lg=\"4\"\r\n              md=\"4\"\r\n              sm=\"12\"\r\n              xs=\"12\"\r\n              onClick={(e) => {\r\n                handleClick(e, \"audit-logs\");\r\n              }}\r\n            >\r\n              <div className=\"push-column text-center\">\r\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\r\n                  <img\r\n                    className=\"layout-select-img\"\r\n                    src={logs}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <h6>Audit Logs</h6>\r\n                <p>Shows data about users and their activity</p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      )}\r\n      {reportData && reportSlug ? (\r\n        <>\r\n          <div className=\"custom-content-heading d-flex align-items-center\">\r\n            <div>\r\n              <button\r\n                onClick={(e) => {\r\n                  redirectBack(e);\r\n                }}\r\n                className=\"back-button\"\r\n              >\r\n                <img src={backicon} alt=\"icon\" />\r\n              </button>\r\n            </div>\r\n            <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n              <Dropdown>\r\n                <Dropdown.Toggle\r\n                  variant=\"outline-primary\"\r\n                  size=\"sm\"\r\n                  className=\"mt-1 mb-2\"\r\n                >\r\n                  {dropValue}\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Monthly\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Monthly\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Daily\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Daily\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    onClick={(e) => {\r\n                      handleDropDown(e, \"Custom\");\r\n                      setShowGenerateModal(true);\r\n                    }}\r\n                  >\r\n                    Custom\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </div>\r\n          </div>\r\n          <div className=\"custom-content-heading\">\r\n            <h1 className=\"mb-4\">{reportType}</h1>\r\n          </div>\r\n\r\n          {reportSlug && reportSlug == \"uptime-report\" ? (\r\n            <Uptime reportData={reportData} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {reportSlug && reportSlug == \"media-report\" ? (\r\n            <Media reportData={reportData} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {reportSlug && reportSlug == \"audit-logs\" ? (\r\n            <Audit reportData={reportData} />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <GenerateReportModal\r\n        close={() => setShowGenerateModal(false)}\r\n        show={showGenerateModal}\r\n        setReportType={reportType}\r\n        setFilter={setFilter}\r\n        filter={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Reports;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\index.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\index.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\index.jsx",["661"],"import React, { useState, useEffect } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport ListMedia from \"./defaultComposition\";\r\nimport { roles } from \"aria-query\";\r\nimport {\r\n  getUsers,\r\n  getGroups,\r\n  getRoles,\r\n  getDeviceProfile,\r\n} from \"../../../utils/api\";\r\nimport User from \"./User\";\r\nimport AddUserModal from \"../../modals/AddUserModal\";\r\nimport AddGroup from \"../../modals/AddGroup\";\r\nimport Group from \"./group\";\r\nimport Roles from \"./roles\";\r\nimport Profile from \"./profile\";\r\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\r\n\r\nconst Settings = () => {\r\n  const [dropValue, setDropValue] = useState(\"Default Content\");\r\n  const [allUsers, setAllUsers] = useState([]);\r\n  const [allGroups, setAllGroups] = useState([]);\r\n  const [allRoles, setAllRoles] = useState([]);\r\n  const [allDeviceProfile, setAllDeviceProfile] = useState([]);\r\n  const [showGroupModel, setShowGroupModel] = useState(false);\r\n  const [showProfileModel, setShowProfileModel] = useState(false);\r\n  const [showAddUserModel, setShowAddUserModel] = useState(false);\r\n  const [isRefresh, setIsRefresh] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleDropDown = (e, data) => {\r\n    e.preventDefault();\r\n    setDropValue(data);\r\n  };\r\n\r\n  const callUsersApi = async () => {\r\n    const list = await getUsers();\r\n    console.log(\"users\", list);\r\n    setAllUsers(list);\r\n  };\r\n\r\n  const callGroupsApi = async () => {\r\n    const list = await getGroups();\r\n    console.log(\"groups\", list);\r\n    setAllGroups(list);\r\n  };\r\n\r\n  const callRolesApi = async () => {\r\n    const list = await getRoles();\r\n    console.log(\"roles\", list);\r\n    setAllRoles(list);\r\n  };\r\n\r\n  const callDeviceProfileApi = async () => {\r\n    setLoading(true)\r\n    const list = await getDeviceProfile();\r\n    console.log(\"deviceProfile\", list);\r\n    setAllDeviceProfile(list);\r\n    setLoading(false)\r\n  };\r\n\r\n  useEffect(() => {\r\n    callUsersApi();\r\n    callGroupsApi();\r\n    callRolesApi();\r\n    callDeviceProfileApi();\r\n    setIsRefresh(false);\r\n    // if(publishType && publishType === 'schedule'){\r\n    //   getSchedule();\r\n    // }\r\n    // if(publishType && publishType === 'quickplay'){\r\n    //   getQuickplay();\r\n    // }\r\n    // if(publishType && publishType === 'defaultComposition'){\r\n    //   getDefault();\r\n    // }\r\n  }, [dropValue, isRefresh]);\r\n\r\n  const handleUser = (e) => {\r\n    e.preventDefault();\r\n    setShowAddUserModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  const handleGroup = (e) => {\r\n    e.preventDefault();\r\n    setShowGroupModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  const handleDevice = (e) => {\r\n    e.preventDefault();\r\n    setShowProfileModel(true);\r\n    console.log(\"Add User\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddUserModal\r\n        open={showAddUserModel}\r\n        setShowAddUserModel={setShowAddUserModel}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n      <AddGroup\r\n        open={showGroupModel}\r\n        setShowGroupModel={setShowGroupModel}\r\n        setIsRefresh={setIsRefresh}\r\n      />\r\n      <AddDeviceProfile\r\n        open={showProfileModel}\r\n        setShowProfileModel={setShowProfileModel}\r\n        setIsRefresh={setIsRefresh}\r\n        loading={loading}\r\n      />\r\n      <div\r\n        className=\"custom-content-heading d-flex flex-wrap\"\r\n        style={{ minHeight: \"600px !important\" }}\r\n      >\r\n        <h1>Settings</h1>\r\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              variant=\"outline-primary\"\r\n              size=\"sm\"\r\n              className=\"mt-1 mb-2\"\r\n            >\r\n              {dropValue}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Default Content\");\r\n                }}\r\n              >\r\n                Default Content\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Groups\");\r\n                }}\r\n              >\r\n                Groups\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Users\");\r\n                }}\r\n              >\r\n                Users\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Roles\");\r\n                }}\r\n              >\r\n                Roles\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                onClick={(e) => {\r\n                  handleDropDown(e, \"Device Profile\");\r\n                }}\r\n              >\r\n                Device Profile\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n\r\n      <h4>{dropValue}</h4>\r\n      {dropValue && dropValue === \"Default Content\" && <ListMedia />}\r\n      {dropValue && dropValue === \"Users\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn-sm  btn-success btn btn-primary  primary-btn setting-page-btn \"\r\n              onClick={(e) => {\r\n                handleUser(e);\r\n              }}\r\n            >\r\n              Add User\r\n            </button>\r\n          </div>\r\n          <User\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            users={allUsers}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Groups\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn  btn-success btn btn-primary  primary-btn  setting-page-btn\"\r\n              onClick={(e) => {\r\n                handleGroup(e);\r\n              }}\r\n            >\r\n              Add Groups\r\n            </button>\r\n          </div>\r\n          <Group\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            groups={allGroups}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Roles\" && (\r\n        <>\r\n          <Roles\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n            roles={allRoles}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n      {dropValue && dropValue === \"Device Profile\" && (\r\n        <>\r\n          <div className=\"d-flex mb-4\">\r\n            <button\r\n              className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn\"\r\n              onClick={(e) => {\r\n                handleDevice(e);\r\n              }}\r\n            >\r\n              Add Device Profile\r\n            </button>\r\n          </div>\r\n          <Profile\r\n            allDeviceProfile={allDeviceProfile}\r\n            setIsRefresh={setIsRefresh}\r\n            isRefresh={isRefresh}\r\n          />{\" \"}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\integrations\\index.jsx",["662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678"],"import React from \"react\";\r\nimport weather from \"../../../img/weather.svg\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport UrlAppModal from \"../../modals/UrlAppModal\";\r\nimport { useState } from \"react\";\r\nimport RssFeedAppModal from \"../../modals/RssFeedAppModal\";\r\nimport ScrollerTextAppModal from \"../../modals/ScrollerTextAppModal\";\r\nimport WeatherAppModal from \"../../modals/WeatherAppModal\";\r\nimport TextAppModal from \"../../modals/TextAppModal\";\r\nimport ClockApp from \"../../modals/ClockApp\";\r\nimport StocksAppModal from \"../../modals/StocksAppModal\";\r\nimport QrCodeModal from \"../../modals/QrCodeModal\";\r\nimport AirQualityAppModal from \"../../modals/AirQualityAppModal\";\r\nimport YoutubeAppModal from \"../../modals/YoutubeAppModal\";\r\nimport BulletinBoardAppModal from \"../../modals/BulletinBoardAppModal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { usePlacesWidget } from \"react-google-autocomplete\";\r\n\r\nexport default function Integrations() {\r\n  const [showUrlApp, setShowUrlApp] = useState(false);\r\n  const [showRssFeedApp, setShowRssFeedApp] = useState(false);\r\n  const [showScrollerTextApp, setShowScrollerTextApp] = useState(false);\r\n  const [showWeatherApp, setShowWeatherApp] = useState(false);\r\n  const [showTextApp, setShowTextApp] = useState(false);\r\n  const [showClockApp, setShowClockApp] = useState(false);\r\n  const [showStocksApp, setShowStocksApp] = useState(false);\r\n  const [showQrCodeApp, setShowQrCodeApp] = useState(false);\r\n  const [showAirQualityApp, setShowAirQualityApp] = useState(false);\r\n  const [showYoutubeApp, setShowYoutubeApp] = useState(false);\r\n  const [showBulletinBoardApp, setShowBulletinBoardApp] = useState(false);\r\n  const appList = [\r\n    { title:'URL APP', slug:'url-app', icon:weather },\r\n    { title:'YOUTUBE', slug:'youtube', icon:weather },\r\n    { title:'RSS FEED', slug:'rss-feed', icon:weather },\r\n    { title:'SCROLLER', slug:'scroller', icon:weather },\r\n    { title:'WEATHER', slug:'weather', icon:weather },\r\n    { title:'TEXT',   slug:'text', icon:weather },\r\n    { title:'CLOCK APP', slug:'clock-app', icon:weather },\r\n    { title:'STOCKS', slug:'stocks', icon:weather },\r\n    { title:'QR CODE', slug:'qr-code', icon:weather },\r\n    { title:'AIR QUALITY APP', slug:'air-qualty-app', icon:weather },\r\n    { title:'PEOPLE SPACE', slug:'people-space', icon:weather },\r\n    { title:'GOOGLE SLIDES', slug:'google-slides', icon:weather },\r\n    { title:'QUOTES', slug:'quotes', icon:weather },\r\n    { title:'ALL NEWS APP', slug:'all-news-app', icon:weather },\r\n  ]\r\n\r\n  const handleChange = (e, type) => {\r\n    e.preventDefault();\r\n    if(type && type == 'url-app'){\r\n      setShowUrlApp(true);\r\n    }\r\n    if(type && type == 'rss-feed'){\r\n      setShowRssFeedApp(true);\r\n    }\r\n    if(type && type == 'youtube'){\r\n      setShowYoutubeApp(true);\r\n    }\r\n    if(type && type == 'scroller'){\r\n      setShowScrollerTextApp(true);\r\n    }\r\n    if(type && type == 'text'){\r\n      setShowTextApp(true);\r\n    }\r\n    if(type && type == 'clock-app'){\r\n      setShowClockApp(true);\r\n    }\r\n    if(type && type == 'weather'){\r\n      setShowWeatherApp(true);\r\n    }\r\n    if(type && type == 'qr-code'){\r\n      setShowQrCodeApp(true);\r\n    }\r\n    if(type && type == 'air-quality-app'){\r\n      setShowAirQualityApp(true);\r\n    }\r\n    if(type && type == 'stocks'){\r\n      setShowStocksApp(true);\r\n    }\r\n    if(type && type == 'all-news-app'){\r\n      setShowBulletinBoardApp(true);\r\n    }\r\n    // if(type && type == 'quotes'){\r\n    //   setShowUrlApp(true);\r\n    // }\r\n  }\r\n\r\n  const [addressError, setAddressError] = useState(\"\");\r\n  const { ref: bootstrapRef } = usePlacesWidget({\r\n      apiKey : \"AIzaSyA_JO9H6JEScutFurdvFw1t-v31GIf2Q2o\",\r\n      onPlaceSelected: (place) => {handleLocation(place)},\r\n      options: {\r\n          types: [\"(regions)\"],\r\n          componentRestrictions: { country: [\"IN\", 'AE'] },\r\n      },\r\n  });\r\n\r\n  const handleLocation = (place) => {\r\n    let location = JSON.parse(JSON.stringify(place?.geometry?.location));\r\n    console.log(\"location\",location )\r\n    const adres = {\r\n        address : place.formatted_address,\r\n        latitude : location.lat,\r\n        longitude : location.lng\r\n    }\r\n    //handleUpdate({...values,['address'] : adres})\r\n    //setAdd(adres);\r\n}\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"col-md-6\">                 \r\n          <div >\r\n              <Form.Group controlId=\"formBasicEmail\" className=\"\">\r\n                  <label className=\"text-label\" >Address</label>\r\n                  \r\n                  <Form.Control \r\n                      type=\"text\" \r\n                      ref={bootstrapRef} \r\n                      onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                      autoComplete=\"off\" \r\n                      //value={values.address.address} \r\n                  />\r\n              </Form.Group>\r\n              <div\r\n                      id=\"val-username1-error\"\r\n                      className=\"invalid-feedback animated fadeInUp\"\r\n                      style={{ display: \"block\" }}\r\n                  >\r\n                      {}\r\n              </div>\r\n          </div>\r\n      </div> */}\r\n      <div className=\"custom-content-heading d-flex flex-wrap flex-column\">\r\n        <h1 className=\"mb-3\">Integrations</h1>\r\n      </div>\r\n      <div\r\n        className=\"integration-container h-100\"\r\n        style={{ overflowY: \"auto\" }}\r\n      >\r\n        {\r\n          appList.map((item) => {\r\n            return <div className=\"app-card \">\r\n                    <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n                      <Dropdown\r\n                        className=\"dropdown-toggle-menu app-card-menu\"\r\n                        drop=\"left\"\r\n                      >\r\n                        <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                          <span className=\"table-menu-icon\">\r\n                            <img\r\n                              className=\"app-card-menu-img img-fluid\"\r\n                              src={menuIcon}\r\n                              alt=\"menu-icon\"\r\n                            />\r\n                          </span>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item\r\n                            href=\"#\"\r\n                            className=\"\"\r\n                            onClick={(e) => e.stopPropagation()}\r\n                          >\r\n                            <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                              <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                                {\" \"}\r\n                                Mark as favourite\r\n                              </label>\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                id=\"favourite\"\r\n                                name=\"favourite\"\r\n                                value=\"favourite\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"d-flex align-items-center justify-content-between\">\r\n                              <label htmlFor=\"learn\" className=\"mb-0\">\r\n                                {\" \"}\r\n                                Learn More\r\n                              </label>\r\n                              <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                    <div\r\n                      className=\"d-flex align-items-center justify-content-center\"\r\n                      onClick={(e) => {handleChange(e, item.slug)}}\r\n                    >\r\n                      <div className=\"text-center\">\r\n                        <img className=\"mb-3\" src={weather} />\r\n                        <p>{item.title}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n          })\r\n        }\r\n        {/* <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowUrlApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>URL APP</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowYoutubeApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>YOUTUBE </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowRssFeedApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>RSS FEED</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowScrollerTextApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>SCROLLER</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowWeatherApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>WEATHER</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowTextApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>Text</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowClockApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>CLOCK APP</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowStocksApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>STOCKS </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowQrCodeApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>QR CODE </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowAirQualityApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>AIR QUALITY APP </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            // onClick={() => {\r\n            //   setShowYoutubeApp(true);\r\n            // }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>PEOPLE SPACE </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            onClick={() => {\r\n              setShowYoutubeApp(true);\r\n            }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>GOOGLE SLIDES </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            // onClick={() => {\r\n            //   setShowYoutubeApp(true);\r\n            // }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>QUOTES </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"app-card \">\r\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\r\n            <Dropdown\r\n              className=\"dropdown-toggle-menu app-card-menu\"\r\n              drop=\"left\"\r\n            >\r\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\r\n                <span className=\"table-menu-icon\">\r\n                  <img\r\n                    className=\"app-card-menu-img img-fluid\"\r\n                    src={menuIcon}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </span>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item\r\n                  href=\"#\"\r\n                  className=\"\"\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\r\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Mark as favourite\r\n                    </label>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"favourite\"\r\n                      name=\"favourite\"\r\n                      value=\"favourite\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"d-flex align-items-center justify-content-between\">\r\n                    <label htmlFor=\"learn\" className=\"mb-0\">\r\n                      {\" \"}\r\n                      Learn More\r\n                    </label>\r\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\r\n                  </div>\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            // onClick={() => {\r\n            //   setShowYoutubeApp(true);\r\n            // }}\r\n          >\r\n            <div className=\"text-center\">\r\n              <img className=\"mb-3\" src={weather} />\r\n              <p>ALL NEWS APP </p>\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n\r\n      <UrlAppModal\r\n        setShowUrlApp={() => setShowUrlApp(false)}\r\n        show={showUrlApp}\r\n      />\r\n      <RssFeedAppModal\r\n        setShowUrlApp={() => setShowRssFeedApp(false)}\r\n        show={showRssFeedApp}\r\n      />\r\n      <ScrollerTextAppModal\r\n        show={showScrollerTextApp}\r\n        setShowScrollerTextApp={setShowScrollerTextApp}\r\n      />\r\n      <WeatherAppModal\r\n        setShowUrlApp={() => setShowWeatherApp(false)}\r\n        show={showWeatherApp}\r\n      />\r\n      <TextAppModal\r\n        setShowUrlApp={() => setShowTextApp(false)}\r\n        show={showTextApp}\r\n      />\r\n      <ClockApp\r\n        setShowUrlApp={() => setShowClockApp(false)}\r\n        show={showClockApp}\r\n      />\r\n      <StocksAppModal\r\n        setShowUrlApp={() => setShowStocksApp(false)}\r\n        show={showStocksApp}\r\n      />\r\n      <QrCodeModal\r\n        setShowUrlApp={() => setShowQrCodeApp(false)}\r\n        show={showQrCodeApp}\r\n      />\r\n      <AirQualityAppModal\r\n        setShowUrlApp={() => setShowAirQualityApp(false)}\r\n        show={showAirQualityApp}\r\n      />\r\n      {showYoutubeApp && <YoutubeAppModal\r\n        setShowUrlApp={() => setShowYoutubeApp(false)}\r\n        show={showYoutubeApp}\r\n      />}\r\n      \r\n      <BulletinBoardAppModal\r\n        setShowUrlApp={() => setShowBulletinBoardApp(false)}\r\n        show={showBulletinBoardApp}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\main.jsx",["679","680","681","682","683"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  addScreenCode,\r\n  BASE_URL,\r\n  getCompositionById,\r\n} from \"../../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport { io } from \"socket.io-client\";\r\nimport WebVideoPlayer from \"./WebVideoPlayer\";\r\nimport CompositionPlayer from \"./compositionPlayer\";\r\nimport useSWR from \"swr\";\r\nconst WebMain = ({ id, handleAddClass, onFullScreen }) => {\r\n  const [media, setMedia] = useState(\"\");\r\n  console.log(media, \"media\");\r\n  const [code, seCode] = useState(\"\");\r\n  const [contentType, setContentType] = useState(\"\");\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  console.log(`%c${contentType}`, \"font-size:20px;color:red\");\r\n  const initiaload = useRef(true);\r\n  // const [timeout, setApiTimeout] = useState(\"\");\r\n  useEffect(() => {\r\n    console.log(contentType, \"contentType check inside main.jsx\");\r\n  });\r\n  const getScreenCode = async () => {\r\n    let timeoutTimer;\r\n    const getContent = await addScreenCode(id);\r\n    console.log(getContent, \"llllllll\");\r\n    setIsVerified(getContent?.isVerified);\r\n    if (getContent.isVerified) {\r\n      if (getContent?.content.length) {\r\n        const getMedia =\r\n          getContent?.content[getContent.content.length - 1].media;\r\n        const mediaType =\r\n          getContent?.content[getContent.content.length - 1].type;\r\nconsole.log(mediaType)\r\n        if (mediaType === \"composition\") {\r\n          setMedia(getMedia);\r\n          setContentType(\"composition\");\r\n        } else {\r\n          setMedia(`${BASE_URL}${getMedia.title}`);\r\n          setContentType(getMedia.type);\r\n          clearTimeout(timeoutTimer);\r\n          timeoutTimer = setTimeout(() => {\r\n            console.log(\"normal timeout\");\r\n            getScreenCode();\r\n          }, 6000);\r\n        }\r\n      } else {\r\n        setContentType(\"default_media\");\r\n        setMedia(getContent.defaultComposition.media);\r\n      }\r\n    } else {\r\n      setContentType(\"code\");\r\n      seCode(getContent.deviceCode);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   if (!isVerified) {\r\n  //     const interval = setInterval(() => {\r\n  //       getScreenCode();\r\n  //     }, 1000);\r\n\r\n  //     return () => {\r\n  //       clearInterval(interval); // Clear the interval when component unmounts\r\n  //     };\r\n  //   }\r\n  // }, [isVerified]);\r\n  //const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\r\n  useEffect(() => {\r\n    console.log(\"sdasd\");\r\n    const socket = io(BASE_URL, {\r\n      query: { deviceToken: id },\r\n      autoConnect: false,\r\n      transports: [\"websocket\"],\r\n      secure: true,\r\n    });\r\n    getScreenCode();\r\n    // no-op if the socket is already connected\r\n\r\n    socket.connect();\r\n\r\n    function onReceiveContent(value) {\r\n      console.log(value, \"socket data\");\r\n      if (initiaload.current === true) {\r\n        initiaload.current = false;\r\n      } else {\r\n        //  setContentType(null);\r\n        getScreenCode();\r\n      }\r\n    }\r\n    function onDisconnectDevice(value) {\r\n      setContentType(null);\r\n      getScreenCode();\r\n    }\r\n    socket.on(\"disconnectDevice\", onDisconnectDevice);\r\n    socket.on(\"receiveContent\", onReceiveContent);\r\n    socket.on(\"receiveComposition\", onReceiveContent);\r\n    return () => {\r\n      socket.disconnect();\r\n      socket.off(\"receiveContent\", onReceiveContent);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {\" \"}\r\n        <button\r\n          id=\"Fullscreen\"\r\n          onClick={() => onFullScreen()}\r\n          style={{ zIndex: 10 }}\r\n        >\r\n          <div class=\"full-text\">\r\n            <div class=\"sec-block\">\r\n              {\" \"}\r\n              <i class=\"fa fa-expand\"></i>\r\n              <p>View Full Screen</p>\r\n            </div>\r\n          </div>\r\n        </button>\r\n      </div>\r\n      {\r\n        <>\r\n          {contentType === \"code\" && (\r\n            <div className=\"basic-list-group \">\r\n              <div className=\"main-block\">\r\n                <div className=\"registration-block\">\r\n                  <p className=\"registration-title\">\r\n                    Screen Registration Code{\" \"}\r\n                  </p>\r\n                  <p className=\"code\">{code}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"webrowerTextSection\">\r\n                <div className=\"how-to-register\">\r\n                  How to register this screen ?\r\n                </div>\r\n                <div className=\"guidelines-login\">\r\n                  1. Login to on your internet browser{\" \"}\r\n                </div>\r\n                <div className=\"guidelines-login\">\r\n                  2. Go to 'Screen' section &gt; Click on{\" \"}\r\n                  <Link>\r\n                    <span className=\"white-color\">'+Add Screen</span>'\r\n                  </Link>{\" \"}\r\n                  &gt; Enter above{\" \"}\r\n                  <Link>\r\n                    <span className=\"white-color\">\r\n                      Screen Registration Code\r\n                    </span>\r\n                  </Link>{\" \"}\r\n                  &gt; Click on{\" \"}\r\n                  <Link>\r\n                    <span className=\"white-color\">'Next'</span>\r\n                  </Link>\r\n                </div>\r\n\r\n                <div className=\"guidelines-login\">\r\n                  3. Enter screen name and other details &gt; Click on\r\n                  <Link>\r\n                    <span className=\"white-color\"> 'Register Screen'</span>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {contentType !== null && contentType === \"image\" && (\r\n            <div className=\"basic-list-group image-preview-container media-content \">\r\n              <img\r\n                className=\"webplayer-preview-img\"\r\n                src={media}\r\n                alt=\"media-img\"\r\n              />\r\n            </div>\r\n          )}\r\n          {contentType !== null && contentType === \"image\" && (\r\n            <div className=\"basic-list-group image-preview-container media-content \">\r\n              <img\r\n                className=\"webplayer-preview-img\"\r\n                src={media}\r\n                alt=\"media-img\"\r\n              />\r\n            </div>\r\n          )}\r\n          {contentType !== null && contentType === \"video\" && (\r\n            <div className=\"basic-list-group video-container media-content\">\r\n              <WebVideoPlayer src={media}></WebVideoPlayer>\r\n              {/* <video\r\n                title=\"video\"\r\n                width=\"100%\"\r\n                height=\"440px\"\r\n                src={}\r\n              ></video> */}\r\n            </div>\r\n          )}\r\n          {contentType === \"default_media\" && (\r\n            <>\r\n              <GetCompositionPlayer\r\n                composition={media}\r\n                handleAddClass={handleAddClass}\r\n              />\r\n            </>\r\n            // <div className=\"basic-list-group image-preview-container media-content\">\r\n            //   <img\r\n            //     className=\"webplayer-preview-img\"\r\n            //     src={defaultMediaUrl}\r\n            //     alt=\"media-img\"\r\n            //   />\r\n            // </div>\r\n          )}\r\n\r\n          {contentType !== null && contentType === \"composition\" && (\r\n            <GetCompositionPlayer\r\n              composition={media}\r\n              handleAddClass={handleAddClass}\r\n            />\r\n          )}\r\n\r\n          <div class=\"console-reg\" id=\"consoleReg\" style={{ zIndex: 10 }}>\r\n            <p>\r\n              Copy paste above Screen Registration Code in console{\" \"}\r\n              <em class=\"ti-arrow-circle-up\"></em>\r\n            </p>\r\n          </div>\r\n        </>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebMain;\r\n\r\nconst GetCompositionPlayer = ({ composition, handleAddClass }) => {\r\n  // const fetcher = (url) => getCompositionById(url);\r\n  // const { data: composition  } = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\r\n\r\n  useEffect(() => {\r\n    if (composition && composition?.layout?.screenType) {\r\n      handleAddClass(composition.layout.screenType);\r\n    }\r\n  }, [composition]);\r\n  return (\r\n    <>\r\n      {composition && composition.referenceUrl && (\r\n        <CompositionPlayer\r\n          contents={composition}\r\n          content={composition.zones[0].content}\r\n          referenceUrl={composition.referenceUrl}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DeleteConfirmation.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\PublishMediaModal.jsx",["684","685"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllScreens, publishMedia, setQuickplay } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport \"../components/Table.css\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState([]);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    callAllScreenApi();\r\n  }, []);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    await publishMedia({\r\n      id: selected._id,\r\n      screenIds: checkedValues,\r\n      duration: 600,\r\n      type: type,\r\n    });\r\n    // await setQuickplay({\r\n    //   name,\r\n    //   compositionId: selected._id,\r\n    //   screens: checkedValues,\r\n    //   duration: 600\r\n    // });\r\n    setPublished(true);\r\n    // setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {type === \"media\" ? \"Publish Media\" : \"Assign Quickplay\"}\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowPublishPopUp(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        {published && (\r\n          <Modal.Body>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <h3>Media Published</h3>\r\n            </div>\r\n          </Modal.Body>\r\n        )}\r\n        {!published && (\r\n          <Modal.Body>\r\n            <div className=\"mb-3 mr-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"quickplayname\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                required=\"true\"\r\n                placeholder=\"Name...\"\r\n              />\r\n            </div>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        onChange={handleSelectAllChange}\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Screen</th>\r\n                  <th>Last Seen</th>\r\n                  <th>Default Composition</th>\r\n                  <th>Current Schedule</th>\r\n                </tr>\r\n              </thead>\r\n              {loading ? (\r\n                <TableLoader colSpan={5} />\r\n              ) : (\r\n                <tbody>\r\n                  {allScreens !== \"\" &&\r\n                    allScreens.map((screen) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>\r\n                            <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                className=\"custom-control-input\"\r\n                                id={screen._id}\r\n                                name={screen._id}\r\n                                checked={checkedItems[screen._id]}\r\n                                onChange={handleCheckboxChange}\r\n                              />\r\n                              <label\r\n                                className=\"custom-control-label\"\r\n                                htmlFor={screen._id}\r\n                              ></label>\r\n                            </div>\r\n                          </td>\r\n\r\n                          <td>\r\n                            <span className=\"td-content\">\r\n                              <strong>{screen.name}</strong>\r\n                              <span>{screen.screenLocation}</span>\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <span className=\"d-flex align-items-center\">\r\n                              <span className=\"status status-green\"></span>\r\n                              <span className=\"td-content\">\r\n                                <strong>{screen.name}</strong>\r\n                                <span>{screen.screenLocation}</span>\r\n                              </span>\r\n                            </span>\r\n                          </td>\r\n                          <td>Default Compo. </td>\r\n                          <td>No Schedule</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n        )}\r\n\r\n        <Modal.Footer>\r\n          {!published && (\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={\r\n                    checkedValues.length === 0 || name == null || name === \"\"\r\n                  }\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Media.jsx",["686","687","688","689","690"],"import React, { useState } from \"react\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n    humanReadableFormattedDateString,\r\n  } from \"../../../utils/UtilsService\";\r\nimport Datatable from \"react-data-table-component\";\r\nexport default function Media({reportData}) {\r\n\r\n    const columns = [\r\n        {\r\n            name : \"Media\",\r\n            selector : (row) => row?.mediaObject?._id\r\n        },\r\n        {\r\n            name : \"Loop Count\",\r\n            selector : (row) => row.loop\r\n        },\r\n        {\r\n            name : \"Duration\",\r\n            selector : (row) => row.duration\r\n        },\r\n    ];\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Media</th>\r\n            <th>Loop Count</th>\r\n            <th>Duration</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.media}</td>\r\n                  <td>{data.loop} </td>\r\n                  <td>{data.duration} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination />\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Audit.jsx",["691","692","693","694"],"import React, { useState } from \"react\";\r\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\r\nimport {\r\n    humanReadableFormattedDateString,\r\n  } from \"../../../utils/UtilsService\";\r\n  import Datatable from \"react-data-table-component\";\r\n\r\nexport default function Audit({reportData, cPage, pCount}) {\r\n    const columns = [\r\n        {\r\n            name : \"Title\",\r\n            selector : (row) => row?.title,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name : \"Vendor\",\r\n            selector : (row) => row?.vendor?.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name : \"Created At\",\r\n            selector : (row) => humanReadableFormattedDateString(row.createdAt),\r\n            sortable: true,\r\n        },\r\n    ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Title</th>\r\n            <th>Vendor</th>\r\n            <th>CreatedAt</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n\r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.title}</td>\r\n                  <td>{data.vendor.name} </td>\r\n                  <td>{humanReadableFormattedDateString(data.createdAt)} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination sorting />\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\reports\\Uptime.jsx",["695","696"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport Datatable from \"react-data-table-component\";\r\n\r\nexport default function Uptime({reportData}) {\r\n\r\n    const getUptimeData = (data) => {\r\n        const sumOfTime = data?.uptimeReport?.reduce(\r\n            (total, obj) => total + obj?.time,\r\n            0\r\n          );\r\n\r\n          // Convert the sum to hours\r\n          const sumInHours = sumOfTime;\r\n          const hours = Math.floor(sumOfTime / 60);\r\n          const minutes = sumOfTime % 60;\r\n\r\n          const formattedSum = `${hours} hr ${\r\n            minutes < 10 ? \"0\" : \"\"\r\n          }${Math.floor(minutes)} min`;\r\n\r\n          const average = sumInHours / data?.uptimeReport?.length;\r\n          const aveHours = Math.floor(average / 60);\r\n          const aveMinutes = average % 60;\r\n\r\n          const aveFormattedSum = `${aveHours} hr ${\r\n            aveMinutes < 10 ? \"0\" : \"\"\r\n          }${Math.floor(aveMinutes)} min`;\r\n\r\n          return [formattedSum, aveFormattedSum];\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name : \"Screen\",\r\n            selector : (row) => row?.name\r\n        },\r\n        {\r\n            name : \"Total Uptime\",\r\n            selector : (row) => getUptimeData(row)[0]\r\n        },\r\n        {\r\n            name : \"Total Avg Time\",\r\n            selector : (row) => getUptimeData(row)[1]\r\n        },\r\n    ];\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <Table\r\n        responsive\r\n        className=\"custom-table screen-table\"\r\n        style={{ height: \"100%\" }}\r\n        id=\"external-events\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th>Screen</th>\r\n            <th>Total Uptime</th>\r\n            <th>Daily Average Uptime</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {reportData.length > 0 &&\r\n            reportData.map((data) => {\r\n              \r\n              return (\r\n                <tr key={data?._id}>\r\n                  <td>{data?.name}</td>\r\n                  <td>{formattedSum} </td>\r\n                  <td>{aveFormattedSum} </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\r\n      </Table> */}\r\n      <Datatable columns={columns} data={reportData} pagination />\r\n    </>\r\n  );\r\n}\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionActions.jsx",["697"],"import { useState } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport menuIcon from \"../../../../img/menu-icon.png\";\r\nimport veiwDetailIcon from \"../../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../../img/tack-screenshot-icon.png\";\r\nimport edit from \"../../../../img/edit-composition.png\";\r\nimport deleteIcon from \"../../../../img/delete-icon.png\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport DuplicateComposition from \"../../../modals/duplicateComposition\";\r\nimport { postComposition } from \"../../../../utils/api\";\r\nimport ViewDetails from \"../../../modals/layouts/viewDetails\";\r\nimport PublishMediaModal from \"../../../modals/PublishMediaModal\";\r\n\r\nconst CompositionActions = ({\r\n  composition,\r\n  mutate,\r\n  setDeleteModal,\r\n  setSelected,\r\n}) => {\r\n  const [duplicateModal, setDuplicateModal] = useState(false);\r\n  const [viewDetailsModal, setViewDetailsModal] = useState(false);\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const createComposition = async (name) => {\r\n    let setZone = [];\r\n\r\n    composition.zones.forEach((zone) => {\r\n      const setContent = [];\r\n\r\n      zone.content.forEach((content) => {\r\n        setContent.push({\r\n          url: content.url,\r\n          type: content.type,\r\n          maintainAspectRatio: content.maintainAspectRatio,\r\n          fitToScreen: content.fitToScreen,\r\n          crop: content.crop,\r\n          duration: content.duration,\r\n          // createdBy: composition.createdBy,\r\n        });\r\n      });\r\n\r\n      const data = {\r\n        name: zone.name,\r\n        zoneId: zone.zoneId,\r\n        content: setContent,\r\n      };\r\n      setZone.push(data);\r\n    });\r\n\r\n    const data = {\r\n      name: name,\r\n      layoutId: composition.layout._id,\r\n\r\n      zones: setZone,\r\n      duration: composition.duration,\r\n      referenceUrl: composition.referenceUrl,\r\n    };\r\n    //  console.log(data)\r\n    await postComposition(data);\r\n    mutate();\r\n    setDuplicateModal(false);\r\n  };\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <Dropdown className=\"dropdown-toggle-menu\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setViewDetailsModal(true);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={veiwDetailIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">View Details</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setShowPublishPopUp(true);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={assignIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Assign Quickplay</span>\r\n                <span className=\"menu-description\">\r\n                  Get to know more about screen info\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n            <Link to={`/composition/edit?id=${composition._id}`}>\r\n              <div className=\"d-flex\">\r\n                <div className=\"dropdown-list-icon\">\r\n                  <img\r\n                    className=\"dropdown-list-img img-fluid\"\r\n                    src={edit}\r\n                    alt=\"menu-icon\"\r\n                  />\r\n                </div>\r\n                <div className=\"dropdown-menu-list\">\r\n                  <span className=\"menu-heading\">Edit</span>\r\n                  <span className=\"menu-description\">\r\n                    Make changes to this composition\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n            <div\r\n              className=\"d-flex\"\r\n              onClick={() => {\r\n                console.log(\"herer\");\r\n                setDuplicateModal(true);\r\n              }}\r\n            >\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Duplicate</span>\r\n                <span className=\"menu-description\">\r\n                  Create duplicate of your composition\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            href=\"#\"\r\n            className=\"dropdown-list-item\"\r\n            onClick={() => {\r\n              setSelected(composition);\r\n              setDeleteModal(true);\r\n            }}\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={deleteIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n                <span className=\"menu-description\">\r\n                  Permanently delete this composition\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {duplicateModal && (\r\n        <DuplicateComposition\r\n          setDuplicateModal={setDuplicateModal}\r\n          createComposition={createComposition}\r\n        />\r\n      )}\r\n      {viewDetailsModal && (\r\n        <ViewDetails\r\n          setViewDetailsModal={setViewDetailsModal}\r\n          composition={composition}\r\n        />\r\n      )}\r\n      {showPublishPopUp && (\r\n        <PublishMediaModal\r\n          selected={composition}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"composition\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CompositionActions;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\Common.jsx",["698","699","700","701","702","703","704","705","706"],"import React, { useState } from \"react\";\r\nimport useSWR from \"swr\";\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport searchIcon from \"../../../../img/search.png\";\r\nimport listIcon from \"../../../../img/list-icon.png\";\r\nimport CompositionTable from \"./CompositionTable\";\r\nimport ZoneInfoTable from \"./ZoneInfoTable\";\r\n\r\nimport {\r\n  getAllMedia,\r\n  postComposition,\r\n  putComposition,\r\n  uploadBlob,\r\n} from \"../../../../utils/api\";\r\n\r\nimport PreviewComposition from \"../../../modals/previewComposition\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport SaveCompositionName from \"../../../modals/saveCompositionName\";\r\nimport UploadMediaModal from \"../../../modals/UploadMediaFileModal\";\r\nimport { isBlobUrl } from \"../../../../utils/UtilsService\";\r\nconst CommonComposition = ({ type, composition, layout }) => {\r\n  const [showUploadMediaModal, setUploadMediaModal] = useState(false);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [name, setName] = useState(composition ? composition.name : \"\");\r\n  const [namePopUp, setOpenNamePopUp] = useState(false);\r\n  const [zone, setZone] = useState(\"Zone1\");\r\n\r\n  // const [content, setContent] = useState(\r\n  //   composition ? composition.zones[0].content : []\r\n  // );\r\n  const makeArray = (data) => {\r\n    const newArray = [];\r\n    data.forEach((item) => {\r\n      if (item.content.length > 0) {\r\n        item.content.forEach((item2) => {\r\n          newArray.push({ ...item2, [\"zone\"]: item.name });\r\n        });\r\n      }\r\n    });\r\n    return newArray;\r\n  };\r\n  const makeArray2 = (data, size) => {\r\n    const result = data.reduce(function (r, a) {\r\n      r[a.zone] = r[a.zone] || [];\r\n      r[a.zone].push(a);\r\n      return r;\r\n    }, Object.create(null));\r\n\r\n    return result;\r\n  };\r\n  const makeArrayReference = (referenceUrl) => {\r\n    const result = [];\r\n    const Zone1 = [];\r\n    const Zone2 = [];\r\n    const Zone3 = [];\r\n\r\n    referenceUrl.forEach((i) => {\r\n      const item = i.split(\"**\");\r\n\r\n      if (item[1] == \"Zone1\") {\r\n        Zone1.push(item[0]);\r\n        result[\"Zone1\"] = Zone1;\r\n      }\r\n      if (item[1] == \"Zone2\") {\r\n        Zone2.push(item[0]);\r\n        result[\"Zone2\"] = Zone2;\r\n      }\r\n      if (item[1] == \"Zone3\") {\r\n        Zone3.push(item[0]);\r\n        result[\"Zone3\"] = Zone3;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  };\r\n  const [content, setContent] = useState(\r\n    composition ? makeArray(composition.zones) : []\r\n  );\r\n  const [referenceUrl, setReferenceUrl] = useState(\r\n    composition ? composition.referenceUrl : []\r\n  );\r\n  console.log(referenceUrl, \"referenceUrl\");\r\n  const handleLayout = (data) => {\r\n    setZone(data);\r\n  };\r\n\r\n  const { data: allMedia, mutate } = useSWR(\r\n    \"/vendor/display/media\",\r\n    getAllMedia\r\n  );\r\n\r\n  const history = useHistory();\r\n  const addComposition = (media) => {\r\n    let url = media.title;  \r\n    setContent((prev) => {\r\n      let meta = {};\r\n      \r\n      if(media.type == 'image' || media.type == 'video'){\r\n        meta = JSON.parse(media.properties);\r\n      }else{\r\n        const jsonData = JSON.parse(media.appData);\r\n        url = jsonData.url\r\n        meta = {\r\n          length:10,\r\n          height:10,\r\n          duration:0\r\n        };\r\n      }\r\n      \r\n      const dt = prev.find((o) => o.name === zone);\r\n      const createContent = {\r\n        url,\r\n        type: media.type,\r\n        maintainAspectRatio: false,\r\n        fitToScreen: true,\r\n        crop: false,\r\n        duration: meta.length ? meta.length : 10,\r\n        createdBy: media.createdBy.name,\r\n        zone,\r\n        data:media.type !='video' && media.type != 'image' ? media.appData : \"\",\r\n      };\r\n      const newdata = [...prev, { ...createContent }];\r\n      return newdata;\r\n    });\r\n    setReferenceUrl((prev) => {\r\n      return [...prev, url + \"**\" + zone];\r\n    });\r\n  };\r\n  const saveComposition = async () => {\r\n    console.log(\"referenceUrl\",referenceUrl)\r\n    const updateFiles = referenceUrl.map(async (url) => {\r\n      if (isBlobUrl(url)) {\r\n        const urlItem = url.split(\"**\");\r\n        const uri = await uploadBlob(urlItem[0]);\r\n        return uri + \"**\" + urlItem[1];\r\n      }\r\n      return url;\r\n    });\r\n    const results = await Promise.all(updateFiles);\r\n\r\n    let zones = [];\r\n    let zoneNew = makeArray2(content, layout.zones.length);\r\n    layout.zones.forEach((zone, index) => {\r\n      const contentData = zoneNew[zone.name].map(({ zone, ...rest }) => {\r\n        return rest;\r\n      });\r\n      zones.push({\r\n        name: zone.name,\r\n        zoneId: zone._id,\r\n        //content: removeCreatedBy(index),\r\n        content: removeCreatedBy(contentData),\r\n      });\r\n    });\r\n    const data = {\r\n      name: name,\r\n      zones: zones,\r\n      duration: TotalDuration(),\r\n      referenceUrl: results,\r\n    };\r\n    if (type === \"create\") {\r\n      data.layoutId = layout._id;\r\n      console.log(data)\r\n      await postComposition(data);\r\n    } else {\r\n      data.compositionId = composition._id;\r\n      await putComposition(data);\r\n    }\r\n    history.push(\"/layout\");\r\n  };\r\n  const TotalDuration = () => {\r\n    let total = 0;\r\n    content.forEach((composition) => {\r\n      total += Number(composition.duration);\r\n    });\r\n    return total.toFixed(0);\r\n  };\r\n  function removeCreatedBy(data) {\r\n    return data.map((item) => {\r\n      delete item[\"createdBy\"];\r\n      delete item[\"_id\"];\r\n      delete item[\"zone\"];\r\n      // if(item['type'] == 'url-apps' || item['type'] == 'youtube-apps'){\r\n      //   item['type'] = 'app';\r\n      // }\r\n      return item;\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"custom-content-heading d-flex flex-wrap\">\r\n        <h1 className=\"mr-auto\">\r\n          {type === \"edit\" ? \"Edit Compostition\" : \"Create Compostition\"}\r\n        </h1>\r\n        <div className=\"preview-composition d-flex flex-wrap\">\r\n          <Button\r\n            onClick={() => {\r\n              if (content.length) {\r\n                setShowPreview(true);\r\n              }\r\n            }}\r\n            className=\"mr-2 preview-btn\"\r\n            variant=\"info\"\r\n            disabled={!content.length}\r\n          >\r\n            Preview\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              console.log(content, \"conteettttnnnnn\", zone);\r\n              if (content.length) {\r\n                setOpenNamePopUp(true);\r\n              }\r\n            }}\r\n            className=\"save-composition-btn\"\r\n            variant=\"info\"\r\n          >\r\n            Save Composition\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"form-head d-flex mb-3 align-items-start\">\r\n        <Button\r\n          className=\"mr-2\"\r\n          variant=\"info add-screen-btn\"\r\n          onClick={() => {\r\n            setUploadMediaModal(true);\r\n          }}\r\n        >\r\n          Add Media\r\n          <span className=\"btn-icon-right\">\r\n            <div class=\"glyph-icon flaticon-381-add-1\"></div>\r\n          </span>\r\n        </Button>\r\n        <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"custom-comp-table flex-1 editComposition\">\r\n        <Row className=\"h-100\">\r\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pr-0 border-col\">\r\n            <CompositionTable\r\n              allMedia={allMedia}\r\n              addComposition={addComposition}\r\n            />\r\n          </Col>\r\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pl-0\">\r\n            <ZoneInfoTable\r\n              content={content}\r\n              setContent={setContent}\r\n              setReferenceUrl={setReferenceUrl}\r\n              layout={layout}\r\n              handleLayout={handleLayout}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <UploadMediaModal\r\n          showUploadMediaModal={showUploadMediaModal}\r\n          setUploadMediaModal={setUploadMediaModal}\r\n          callAllMediaApi={mutate}\r\n        />\r\n        {showPreview && (\r\n          <PreviewComposition\r\n            setShowPreview={setShowPreview}\r\n            content={content}\r\n            contentnew={makeArray2(content, 2)}\r\n            referenceUrl={referenceUrl}\r\n            referenceUrlArray={makeArrayReference(referenceUrl)}\r\n            layout={layout}\r\n          />\r\n        )}\r\n        {namePopUp && (\r\n          <SaveCompositionName\r\n            setModalState={setOpenNamePopUp}\r\n            saveComposition={saveComposition}\r\n            name={name}\r\n            setName={setName}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CommonComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\QuickPlayModal.jsx",["707","708","709","710"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport searchIcon from \"../../img/search.png\";\r\nimport listIcon from \"../../img/list-icon.png\";\r\nimport pic1 from \"./../../images/profile/small/pic1.jpg\";\r\nimport downArrow from \"../../img/down-arrow.png\";\r\n\r\nconst QuickPlayModal = ({ showQuickPlayModal, setQuickPlayModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal quick-modal custom-modal-medium\"\r\n      show={showQuickPlayModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">\r\n          Choose Composition to assign as Quickplay\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setQuickPlayModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"search-textfield quickplay-search d-flex flex-wrap align-items-center\">\r\n          <div className=\"form-group mb-0\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-default \"\r\n              placeholder=\"Search...\"\r\n            />\r\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\r\n          </div>\r\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\r\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\r\n          </Button>\r\n        </div>\r\n        <div className=\"mb-3 quick-modal-table\">\r\n          <div className=\"w-100 table-responsive\">\r\n            <div id=\"example_wrapper\">\r\n              <table id=\"example\" className=\"display w-100  table custom-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Composition</th>\r\n                    <th>Date Added</th>\r\n                    <th>Duration</th>\r\n                    <th>Associated Schedule</th>\r\n                    <th>Tags</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <img\r\n                          className=\"rounded mr-2\"\r\n                          width=\"35\"\r\n                          src={pic1}\r\n                          alt=\"\"\r\n                        />\r\n                        <span className=\"td-content\">\r\n                          <strong>My_image_name</strong>\r\n                          <span>Added by Gauri Batra</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <span className=\"td-content\">\r\n                          <strong>3 Apr,2023</strong>\r\n                          <span>05 :30 PM</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>10 Sec</td>\r\n                    <td>0</td>\r\n                    <td style={{ width: \"180px\" }}>\r\n                      <span className=\"tag-container\">\r\n                        <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                          My Phone\r\n                        </span>\r\n                      </span>\r\n\r\n                      <span className=\"down-arrow\">\r\n                        <img\r\n                          className=\"down-arrow-img img-fluid\"\r\n                          src={downArrow}\r\n                          alt=\"arrow\"\r\n                        />\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <img\r\n                          className=\"rounded mr-2\"\r\n                          width=\"35\"\r\n                          src={pic1}\r\n                          alt=\"\"\r\n                        />\r\n                        <span className=\"td-content\">\r\n                          <strong>My_image_name</strong>\r\n                          <span>Added by Gauri Batra</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <span className=\"d-flex align-items-center\">\r\n                        <span className=\"td-content\">\r\n                          <strong>3 Apr,2023</strong>\r\n                          <span>05 :30 PM</span>\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                    <td>10 Sec</td>\r\n                    <td>0</td>\r\n                    <td style={{ width: \"180px\" }}>\r\n                      <span className=\"tag-container\">\r\n                        <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                          My Phone\r\n                        </span>\r\n                      </span>\r\n\r\n                      <span className=\"down-arrow\">\r\n                        <img\r\n                          className=\"down-arrow-img img-fluid\"\r\n                          src={downArrow}\r\n                          alt=\"arrow\"\r\n                        />\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              variant=\"outline-light\"\r\n              onClick={() => setQuickPlayModal(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() => setQuickPlayModal(false)}\r\n            >\r\n              Assign\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default QuickPlayModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\WindowsModal.jsx",["711","712","713","714"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport chrisImg from \"../../img/chris-img.png\";\r\n\r\nconst WindowsModal = ({ showWindowsModal, setWindowsModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\r\n      show={showWindowsModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">\r\n        Christan’s Window’s\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setWindowsModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n<div className=\"chris-imgbox\">\r\n<img className=\"chris-img img-fluid\" src={chrisImg} alt=\"chris-icon\" />\r\n\r\n</div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WindowsModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UpdateModal.jsx",["715","716"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport searchIcon from \"../../img/search-location.png\";\r\n\r\nconst UpdateModal = ({ showUpdateModal, setUpdateModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\r\n      show={showUpdateModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">\r\n        Update Screen\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setUpdateModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n      <Row>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <label className=\"update-textfield-label\">Screen Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Christan’s Windows\"\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <label className=\"update-textfield-label\">Complete Address</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"House No. 38-A Tribune colony, Ambala Cantt, Haryana\"\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group location-field\">\r\n              <label className=\"update-textfield-label\">Google Location</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Haryana\"\r\n              />\r\n              <div className=\"search-location\">\r\n              <img className=\"search-loc-icon\" src={searchIcon} alt=\"search-icon\" />\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={12} md={12} sm={12} xs={12} className=\"pl-0 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn w-100\"\r\n              onClick={() => setUpdateModal(false)}\r\n            >\r\n             Update Screen\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UpdateModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddNewTagModal.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Header.js",["717","718","719"],"import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\n/// Image\r\nimport profile from \"../../../images/profile/pic1.jpg\";\r\nimport avatar from \"../../../images/avatar/1.jpg\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport LogoutPage from './Logout';\r\n\r\nconst Header = ({ onNote }) => {\r\n  const onFullScreen = () => {\r\n    var elem = document.documentElement;\r\n    if (elem.requestFullscreen) {\r\n      elem.requestFullscreen();\r\n    } else if (elem.webkitRequestFullscreen) {\r\n      elem.webkitRequestFullscreen();\r\n    } else if (elem.msRequestFullscreen) {\r\n      elem.msRequestFullscreen();\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"header header-custom\" style={{ zIndex: \"11\" }}>\r\n      <div className=\"header-content\">\r\n        <nav className=\"navbar navbar-expand\">\r\n          <div className=\"collapse navbar-collapse justify-content-between\">\r\n            <div className=\"header-left\">\r\n\r\n            </div>\r\n            <ul className=\"navbar-nav header-right\">\r\n\r\n              <Dropdown as=\"li\" className=\"nav-item dropdown header-profile\">\r\n                <Dropdown.Toggle\r\n                  variant=\"\"\r\n                  as=\"a\"\r\n                  className=\"i-false c-pointer nav-link\"\r\n                  to=\"\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                >\r\n                  <div className=\"header-info\">\r\n                    <span>\r\n                      Hello, <strong>Samuel</strong>\r\n                    </span>\r\n                  </div>\r\n                  <img src={profile} width={20} alt=\"\" />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu\r\n                  align=\"right\"\r\n                  className=\"dropdown-menu dropdown-menu-right\"\r\n                >\r\n                  <Link to=\"/app-profile\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-user1\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-primary\"\r\n                      width={18}\r\n                      height={18}\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\r\n                      <circle cx={12} cy={7} r={4} />\r\n                    </svg>\r\n                    <span className=\"ml-2\">Profile </span>\r\n                  </Link>\r\n                  <Link to=\"/email-inbox\" className=\"dropdown-item ai-icon\">\r\n                    <svg\r\n                      id=\"icon-inbox\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"text-success\"\r\n                      width={18}\r\n                      height={18}\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\" />\r\n                      <polyline points=\"22,6 12,13 2,6\" />\r\n                    </svg>\r\n                    <span className=\"ml-2\">Inbox </span>\r\n                  </Link>\r\n                  <LogoutPage />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\ChatBox.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\NavHader.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\FilterModal.jsx",["720","721","722","723"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst FilterModal = ({ showFilterModal, setFilterModal }) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={showFilterModal}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">Filter</Modal.Title>\r\n        <span className=\"clear-filter-link\">Clear Filter</span>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setFilterModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"filter-row mb-3\">\r\n          <h6>Show</h6>\r\n          <div className=\"d-flex flex-wrap\">\r\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"Landscape\"\r\n                required\r\n              />\r\n              <label className=\"custom-control-label\" htmlFor=\"Landscape\">\r\n                Landscape\r\n              </label>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"Landscape1\"\r\n                required\r\n              />\r\n              <label className=\"custom-control-label\" htmlFor=\"Landscape1\">\r\n                Landscape\r\n              </label>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input\"\r\n                id=\"Landscape2\"\r\n                required\r\n              />\r\n              <label className=\"custom-control-label\" htmlFor=\"Landscape2\">\r\n                Landscape\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"filter-row mb-3\">\r\n          <h6>Tags</h6>\r\n          <div className=\"d-flex flex-wrap\">\r\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\r\n              Test Devices\r\n            </Badge>\r\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\r\n              Test Devices\r\n            </Badge>\r\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\r\n              Test Devices\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n        <div className=\"filter-row mb-3\">\r\n          <h6>Groups</h6>\r\n          <div className=\"d-flex flex-wrap\">\r\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\r\n              Test Devices\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button\r\n          variant=\"\"\r\n          type=\"button\"\r\n          className=\"btn btn-primary btn-block primary-btn\"\r\n          onClick={() => setFilterModal(false)}\r\n        >\r\n          Apply\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default FilterModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\BulletinBoardAppModal.jsx",["724","725","726","727"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AirQualityAppModal.jsx",["728","729","730","731","732"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\nimport Switch from \"react-switch\";\r\nconst AirQualityAppModal = ({ setShowUrlApp, show }) => {\r\n  const options = [\r\n    { value: \"us\", label: \"us\" },\r\n    { value: \"india\", label: \"India\" },\r\n  ];\r\n  const options1 = [\r\n    { value: \"Light Mode\", label: \"Light Mode\" },\r\n    { value: \"Dark Mode\", label: \"Dark Mode\" },\r\n  ];\r\n\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={show}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n        <Modal.Title className=\"mr-auto app-modal-heading\">\r\n          Air Quality App\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form\r\n          // onSubmit={handleSubmit}\r\n          className=\"row\"\r\n        >\r\n          <div className=\"form-group col-6 mb-0  url-app-form\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"App Name\"\r\n              required\r\n            />\r\n            <label className=\"mt-3\">Location</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"Location\"\r\n              required\r\n            />\r\n\r\n            <label className=\"mt-3\">AQI-IN/US</label>\r\n\r\n            <Select\r\n              defaultValue={selectedOption}\r\n              // onChange={setSelectedOption}\r\n              placeholder=\"us\"\r\n              options={options}\r\n              className=\"app-option\"\r\n            />\r\n\r\n            <label className=\"mt-3\">Theme</label>\r\n\r\n            <Select\r\n              defaultValue={selectedOption}\r\n              // onChange={setSelectedOption}\r\n              placeholder=\"Light Mode\"\r\n              options={options1}\r\n              className=\"app-option\"\r\n            />\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 air-quality-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"border-0 mb-2\">\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              //   onClick={() => setNewTagModal(false)}\r\n            >\r\n              Create App\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AirQualityAppModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\YoutubeAppModal.jsx",["733","734","735","736","737","738","739","740"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\StocksAppModal.jsx",["741","742","743","744","745","746","747"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\QrCodeModal.jsx",["748","749","750","751","752","753","754","755","756","757"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\WeatherAppModal.jsx",["758","759","760","761","762","763","764","765","766","767","768","769"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { usePlacesWidget } from \"react-google-autocomplete\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport Form from \"react-bootstrap/Form\";\r\nconst WeatherAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const options = [{ value: \"Classic\", label: \"Classic\" }];\r\n  const options1 = [{ value: \"Celsius\", label: \"Celsius\" }];\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [selectedTheme, setSelectedTheme] = useState({ value: \"Classic\", label: \"Classic\" });\r\n  const [selectedTemp, setSelectedTemp] = useState({ value: \"Celsius\", label: \"Celsius\" })\r\n  const [isForcast, setIsForcast] = useState(false);\r\n  const [isCorner, setIsCorner] = useState(false);\r\n  const [isAnimated, setIsAnimated] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n  const [mediaId, setMediaId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n        console.log(jsonString)\r\n        setName(mediaData.title);\r\n        setSelectedTheme({value:jsonString.theme,label:jsonString.theme});\r\n        setSelectedTemp({value:jsonString.temp,label:jsonString.temp})\r\n        setMediaId(mediaData._id);\r\n        setLocation(jsonString.location)\r\n        setIsForcast(jsonString.isForcast)\r\n        setIsAnimated(jsonString.isAnimated)\r\n        setIsCorner(jsonString.isCorner)\r\n    }\r\n  },[mediaData])\r\n  \r\n\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n    }\r\n    else if(location == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"Location is required\");\r\n    }\r\n\r\n    if(err){\r\n      return false;\r\n    }else{\r\n      console.log(\"Hello\", err)\r\n      const dataString = {\r\n        theme:selectedTheme.value,\r\n        temp:selectedTemp.value,\r\n        url:name,\r\n        isForcast,\r\n        isAnimated,\r\n        isCorner,\r\n        location,\r\n      }\r\n  \r\n      if(actionType && actionType == 'edit'){\r\n        await updateApps({\r\n          name,\r\n          appId:mediaId,\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowUrlApp(false)\r\n      }else{\r\n        await addApps({\r\n          name,\r\n          type:'weather-apps',\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowUrlApp(false)\r\n        setShowUrlRedirectApp(true)\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  // const [addressError, setAddressError] = useState(\"\");\r\n  // const { ref: bootstrapRef } = usePlacesWidget({\r\n  //     apiKey : \"AIzaSyA_JO9H6JEScutFurdvFw1t-v31GIf2Q2o\",\r\n  //     onPlaceSelected: (place) => {handleLocation(place)},\r\n  //     options: {\r\n  //         types: [\"(regions)\"],\r\n  //         componentRestrictions: { country: [\"IN\", 'AE'] },\r\n  //     },\r\n  // });\r\n\r\n  // const handleLocation = (place) => {\r\n  //   let location = JSON.parse(JSON.stringify(place?.geometry?.location));\r\n  //   console.log(\"location\",location )\r\n  //   const adres = {\r\n  //       address : place.formatted_address,\r\n  //       latitude : location.lat,\r\n  //       longitude : location.lng\r\n  //   }\r\n  //   //handleUpdate({...values,['address'] : adres})\r\n  //   //setAdd(adres);\r\n  // }\r\n  return (\r\n    <>\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={show}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n        <Modal.Title className=\"mr-auto app-modal-heading\">\r\n          Weather App\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form\r\n          // onSubmit={handleSubmit}\r\n          className=\"row\"\r\n        >\r\n          <div className=\"form-group col-6 mb-0  url-app-form\">\r\n            <label>Name</label>\r\n            <input\r\n                  type=\"text\"\r\n                  className=\"  form-control \"\r\n                  placeholder=\"App Name\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  value={name}\r\n                  onChange={(e) => {setName(e.target.value)}}\r\n                  required\r\n                />\r\n            <label className=\"mt-3\">Location</label>\r\n            <input\r\n                  type=\"text\"\r\n                  className=\"  form-control \"\r\n                  placeholder=\"App Name\"\r\n                  name=\"location\"\r\n                  id=\"location\"\r\n                  value={location}\r\n                  onChange={(e) => {setLocation(e.target.value)}}\r\n                  required\r\n                />\r\n\r\n            {/* <Form.Group controlId=\"formBasicEmail\" className=\"\">\r\n                <label className=\"text-label\" >Address</label>\r\n                \r\n                <Form.Control \r\n                    type=\"text\" \r\n                    ref={bootstrapRef} \r\n                    onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault(); }}\r\n                    autoComplete=\"off\" \r\n                    //value={values.address.address} \r\n                />\r\n            </Form.Group> */}\r\n\r\n            <label className=\"mt-3\">Theme</label>\r\n\r\n            <Select\r\n              value={selectedTheme}\r\n              onChange={setSelectedTheme}\r\n              options={options}\r\n              className=\"app-option\"\r\n            />\r\n            <label className=\"mt-3\">Temperature Unit</label>\r\n\r\n            <Select\r\n              defaultValue={selectedTemp}\r\n              onChange={setSelectedTemp}\r\n              options={options1}\r\n              className=\"app-option\"\r\n            />\r\n            <div className=\"col-6\">\r\n            <label className=\"mt-3 mr-3\">Forcast</label>\r\n            <input type=\"checkbox\" className=\"   \" required checked={isForcast} onChange={(e) => setIsForcast(e.target.checked)} />\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <label className=\"mt-3 mr-3\">Animation</label>\r\n            <input type=\"checkbox\" className=\"   \" required checked={isAnimated} onChange={(e) => setIsAnimated(e.target.checked)} />\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <label className=\"mt-3 mr-3\">Corner</label>\r\n            <input type=\"checkbox\" className=\"   \" required checked={isCorner} onChange={(e) => setIsCorner(e.target.checked)} />\r\n          </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 weather-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"border-0 mb-2\">\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={(e) => handleCreateApp(e)}\r\n            >\r\n              {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    <Modal\r\n    className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n    show={showRedirectApp}\r\n    size=\"xl\"\r\n    centered\r\n  >\r\n    <Modal.Header className=\"border-0\">\r\n\r\n      <Button\r\n        variant=\"\"\r\n        className=\"close\"\r\n        onClick={() => setShowUrlRedirectApp(false)}\r\n      >\r\n        <img\r\n          className=\"cancel-icon\"\r\n          src={cancelIcon}\r\n          alt=\"cancel-icon\"\r\n          height=\"25px\"\r\n          width=\"25px\"\r\n        />\r\n      </Button>\r\n    </Modal.Header>\r\n    <Modal.Body>\r\n      <div className=\"row\">\r\n        <div className=\"col-6 \">\r\n          <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n            <div className=\"text-center\">\r\n              <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n              <h4>https://www.</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-6 \">\r\n          <div className=\"d-flex justify-content-center align-items-center\">\r\n            <div className=\"text-center\">\r\n              <p>Weather App created successfully</p>\r\n              <p>Weather App is saved in <u>Media</u></p>\r\n              <Link to={'/layout'}>Create Composition</Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal.Body>\r\n    </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherAppModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\TextAppModal.jsx",["770","771","772","773","774","775","776","777","778"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\ClockApp.jsx",["779","780","781","782","783","784","785","786","787","788","789"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport Switch from \"react-switch\";\r\nconst ClockApp = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const options = [\r\n    { value: \"lefAnalogue - 12 hourt\", label: \"Analogue - 12 hour\" },\r\n    { value: \"Digital - 12 hour\", label: \"Digital - 12 hour\" },\r\n    { value: \"Digital - 24hour\", label: \"Digital - 24hour\" },\r\n  ];\r\n  const [name, setName] = useState(null);\r\n  const [clockType, setClockType] = useState('regular');\r\n  const [timeFormat, setTimeFormat] = useState({value: \"Analogue - 12 hour\", label: \"Analogue - 12 hour\"})\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [deviceTime, setDeviceTime] = useState(false);\r\n  const [hiddenLocation, setHiddenLocation] = useState(false);\r\n  const [hideDate, setHideDate] = useState(false);\r\n  const [roundCorner, setRoundeCorner] = useState(false);\r\n  const [timeZone, setTimeZone] = useState(\"\");  \r\n\r\n  const handleChange = (e) => {\r\n    console.log(e.target);\r\n    //setDeviceTime(e.target)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n        console.log(jsonString)\r\n        setName(mediaData.title);\r\n        setClockType(jsonString.clockType);\r\n        setTimeFormat({value:jsonString.timeFormat, label:jsonString.timeFormat})\r\n        setDeviceTime(jsonString.deviceTime);\r\n        setHiddenLocation(jsonString.hiddenLocation);\r\n        setRoundeCorner(jsonString.roundCorner);\r\n        setHideDate(jsonString.hideDate);\r\n        setTimeZone(jsonString.timeZone)\r\n        setMediaId(mediaData._id);\r\n    }\r\n  },[mediaData])\r\n  \r\n\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n    }else if(timeZone == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"TimeZone is required\");\r\n    }\r\n\r\n    if(err){\r\n      return false;\r\n    }else{\r\n      console.log(\"Hello\", err)\r\n      const dataString = {\r\n        url:name,\r\n        timeZone,\r\n        hideDate,hiddenLocation,deviceTime,\r\n        timeFormat:timeFormat.value,\r\n        roundCorner,\r\n        clockType\r\n      }\r\n  \r\n      if(actionType && actionType == 'edit'){\r\n        await updateApps({\r\n          name,\r\n          appId:mediaId,\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowUrlApp(false)\r\n      }else{\r\n        await addApps({\r\n          name,\r\n          type:'clock-apps',\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowUrlApp(false)\r\n        setShowUrlRedirectApp(true)\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <>\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={show}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n        <Modal.Title className=\"mr-auto app-modal-heading\">\r\n          Clock App\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form\r\n          // onSubmit={handleSubmit}\r\n          className=\"row\"\r\n        >\r\n          <div className=\"form-group col-6 mb-0  url-app-form\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"App Name\"\r\n              required\r\n              name=\"name\"\r\n              id=\"name\"\r\n              onChange={(e) => setName(e.target.value)}\r\n              value={name}\r\n            />\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-6\">\r\n                <label className=\"mt-3 mr-3\">Regular Clock</label>\r\n                <input type=\"radio\" value=\"regular\" checked={clockType && clockType == 'regular'} onChange={(e) => setClockType('regular')} required />\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <label className=\"mt-3 mr-3\">World Clock</label>\r\n                <input type=\"radio\" value=\"world\" checked={clockType && clockType == 'world'} onChange={(e) => setClockType('world')} required />\r\n              </div>\r\n            </div>\r\n\r\n            <label className=\"mt-3\">Time Format</label>\r\n\r\n            <Select\r\n              value={timeFormat}\r\n              onChange={setTimeFormat}\r\n              placeholder=\"Select one from the list\"\r\n              options={options}\r\n              className=\"app-option\"\r\n            />\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                <label className=\"mb-0 mr-3\">Get device timezone</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={setDeviceTime}\r\n                  checked={deviceTime}\r\n                  name=\"deviceTime\"\r\n                  id=\"deviceTime\"\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"col-6  d-flex align-items-center justify-content-between\">\r\n                <label className=\"mb-0 mr-3\">Hidden location</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={setHiddenLocation}\r\n                  checked={hiddenLocation}\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row mt-4\">\r\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\r\n                <label className=\"mb-0 mr-3\">Hide date</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={setHideDate}\r\n                  checked={hideDate}\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"col-6  d-flex align-items-center  justify-content-between\">\r\n                <label className=\"mb-0 mr-3\">Rounded Corners</label>\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={setRoundeCorner}\r\n                  checked={roundCorner}\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <label className=\"mt-3\">Timezone</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"Timezone\"\r\n              required\r\n              name=\"timeZone\"\r\n              id=\"timeZone\"\r\n              value={timeZone}\r\n              onChange={(e) => setTimeZone(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 clock-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"border-0 mb-2\">\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={(e) => handleCreateApp(e)}\r\n            >\r\n              {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n      <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={showRedirectApp}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlRedirectApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                <h4>https://www.</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"text-center\">\r\n                <p>Clock App created successfully</p>\r\n                <p>Clock App is saved in <u>Media</u></p>\r\n                <Link to={'/layout'}>Create Composition</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      </Modal>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default ClockApp;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UrlAppModal.jsx",["790","791","792","793","794","795","796"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { addApps, updateApps } from \"../../utils/api\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState, useEffect } from \"react\";\r\nconst UrlAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\r\n  const options = [\r\n    { value: \"disable\", label: \"disable\" },\r\n    { value: \"enable\", label: \"enable\" },\r\n  ];\r\n  const [selectedOption, setSelectedOption] = useState({value: \"disable\", label: \"disable\"});\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [name, setName] = useState(\"\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const [urlLink, setUrlLink] = useState(\"\"); \r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n      setName(mediaData.title);\r\n      setUrlLink(jsonString.url);\r\n      setMediaId(mediaData._id);\r\n      setSelectedOption({value:jsonString.cache,label:jsonString.cache})\r\n    }\r\n  },[mediaData])\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n    }\r\n    if(urlLink == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"URL Link is required\");\r\n    }\r\n    if(err){\r\n      return false;\r\n    }\r\n    const dataString = {\r\n      url:urlLink,\r\n      cache:selectedOption.value\r\n    }\r\n    \r\n    if(actionType && actionType == 'edit'){\r\n      await updateApps({\r\n        name,\r\n        //type:'url-apps',\r\n        appId:mediaId,\r\n        data:JSON.stringify(dataString)\r\n      });\r\n      setShowUrlApp(false)\r\n    }else{\r\n      await addApps({\r\n        name,\r\n        type:'url-apps',\r\n        data:JSON.stringify(dataString)\r\n      });\r\n      setShowUrlApp(false)\r\n      setShowUrlRedirectApp(true)\r\n    }\r\n    \r\n    //console.log(name, urlLink, selectedOption)\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            URL App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowUrlApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== '' ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n              <label className=\"mt-3\">URL</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"https://example.com\"\r\n                required\r\n                onChange={(e) => {setUrlLink(e.target.value)}}\r\n                value={urlLink}\r\n              />\r\n              <label className=\"mt-3\">Cache</label>\r\n              <Select\r\n                defaultValue={selectedOption}\r\n                onChange={setSelectedOption}\r\n                options={options}\r\n                //   style={{\r\n                //     lineHeight: \"40px\",\r\n                //     color: \"#7e7e7e\",\r\n                //     paddingLeft: \" 15px\",\r\n                //     padding: \"10px\",\r\n                //   }}\r\n                className=\"app-option\"\r\n              />\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                  <h1>https://www.</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleCreateApp(e)}\r\n              >\r\n                {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n                \r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={showRedirectApp}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlRedirectApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                <h4>https://www.</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"text-center\">\r\n                <p>URL App created successfully</p>\r\n                <p>URL App is saved in <u>Media</u></p>\r\n                <Link to={'/layout'}>Create Composition</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UrlAppModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\RssFeedAppModal.jsx",["797","798","799","800"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\nconst RssFeedAppModal = ({ setShowUrlApp, show }) => {\r\n  const options = [\r\n    { value: \"White Background\", label: \"white-background\" },\r\n    { value: \"Color Background\", label: \"color-background\" },\r\n  ];\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={show}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n        <Modal.Title className=\"mr-auto app-modal-heading\">\r\n          RSS Feed\r\n        </Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form\r\n          // onSubmit={handleSubmit}\r\n          className=\"row\"\r\n        >\r\n          <div className=\"form-group col-6 mb-0  url-app-form\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"App Name\"\r\n              required\r\n            />\r\n            <label className=\"mt-3\">RSS Feed URL</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"https://example.com\"\r\n              required\r\n            />\r\n            <label className=\"mt-3\">Slide Duration (in seconds)</label>\r\n            <input\r\n              type=\"number\"\r\n              className=\"  form-control \"\r\n              placeholder=\"0\"\r\n              required\r\n            />\r\n            <label className=\"mt-3\">Theme</label>\r\n            {/* <input\r\n              type=\"text\"\r\n              className=\"  form-control \"\r\n              placeholder=\"cache\"\r\n              required\r\n            /> */}\r\n            <Select\r\n              defaultValue={selectedOption}\r\n              // onChange={setSelectedOption}\r\n              options={options}\r\n              //   style={{\r\n              //     lineHeight: \"40px\",\r\n              //     color: \"#7e7e7e\",\r\n              //     paddingLeft: \" 15px\",\r\n              //     padding: \"10px\",\r\n              //   }}\r\n              className=\"app-option\"\r\n            />\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex\">\r\n              {\" \"}\r\n              <div className=\"form-check mr-4\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"radio\"\r\n                  name=\"viewImage\"\r\n                  value=\"aspectRation\"\r\n                  id=\"aspectRation\"\r\n                  // onChange={handleOptionChange}\r\n                  // defaultChecked={viewImage === \"aspectRation\"}\r\n                />\r\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\r\n                  Landscape\r\n                </label>\r\n              </div>\r\n              <div className=\"form-check mr-4\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"radio\"\r\n                  name=\"viewImage\"\r\n                  value=\"aspectRation\"\r\n                  id=\"aspectRation\"\r\n                  // onChange={handleOptionChange}\r\n                  // defaultChecked={viewImage === \"aspectRation\"}\r\n                />\r\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\r\n                  Portrait\r\n                </label>\r\n              </div>\r\n              <div className=\"form-check\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"radio\"\r\n                  name=\"viewImage\"\r\n                  value=\"aspectRation\"\r\n                  id=\"aspectRation\"\r\n                  // onChange={handleOptionChange}\r\n                  // defaultChecked={viewImage === \"aspectRation\"}\r\n                />\r\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\r\n                  Footer\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 rss-feed-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"border-0 mb-2\">\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              //   onClick={() => setNewTagModal(false)}\r\n            >\r\n              Create App\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RssFeedAppModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\ScrollerTextAppModal.jsx",["801","802","803","804","805","806","807","808"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { updateApps, addApps } from \"../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nconst ScrollerTextAppModal = ({ setShowScrollerTextApp, show, mediaData , actionType }) => {\r\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\r\n  const [name, setName] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [selectedStyle, setSelectedStyle] = useState({ value: \"Regular\", label: \"Regular\"});\r\n  const [speed, setSpeed] = useState({ value: \"slow\", label: \"Slow\" });\r\n  const [allign, setAllign] = useState({ value: \"Right-to-Left\", label: \"Right to Left\" });\r\n  const [err, setErr] = useState(false);\r\n  const [errMessage, setErrorMessage] = useState('');\r\n  const [tColor, setTextColor] = useState(\"#000000\");\r\n  const [backColor, setBackColor] = useState(\"#000000\");\r\n  const [mediaId, setMediaId] = useState(null);\r\n  const options = [\r\n    { value: \"Regular\", label: \"Regular\" },\r\n    { value: \"italic\", label: \"italic\" },\r\n    { value: \"bold\", label: \"Bold\" },\r\n  ];\r\n  const options1 = [\r\n    { value: \"slow\", label: \"Slow\" },\r\n    { value: \"medium\", label: \"Medium\" },\r\n    { value: \"high\", label: \"High\" },\r\n  ];\r\n  const options2 = [\r\n    { value: \"Right-to-Left\", label: \"Right to Left\" },\r\n    { value: \"Left-to-Right\", label: \"Left to Right\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if(mediaData){\r\n      console.log(\"media\", mediaData, actionType)\r\n      const jsonString = JSON.parse(mediaData.appData);\r\n        console.log(jsonString)\r\n        setName(mediaData.title);\r\n        setText(jsonString.text);\r\n        setSelectedStyle({value:jsonString.style,label:jsonString.style});\r\n        setSpeed({value:jsonString.speed,label:jsonString.speed});\r\n        setAllign({value:jsonString.allign,label:jsonString.allign});\r\n        setTextColor(jsonString.textColor)\r\n        setBackColor(jsonString.backGroundColor)\r\n        setMediaId(mediaData._id);\r\n    }\r\n  },[mediaData])\r\n  \r\n\r\n  const handleCreateApp = async(e) => {\r\n    e.preventDefault();\r\n\r\n    setErr(false);\r\n    setErrorMessage(\"\");\r\n    if(name == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"App Name is required\");\r\n    }\r\n    else if(text == ''){\r\n      setErr(true);\r\n      setErrorMessage(\"Text is required\");\r\n    }\r\n\r\n    if(err){\r\n      return false;\r\n    }else{\r\n      console.log(\"Hello\", err)\r\n      const dataString = {\r\n        allign:allign.value,\r\n        speed:speed.value,\r\n        textColor:tColor,\r\n        backGroundColor:backColor,\r\n        style:selectedStyle.value,\r\n        url:name,\r\n        text\r\n      }\r\n  \r\n      if(actionType && actionType == 'edit'){\r\n        await updateApps({\r\n          name,\r\n          appId:mediaId,\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowScrollerTextApp(false)\r\n      }else{\r\n        await addApps({\r\n          name,\r\n          type:'scroller',\r\n          data:JSON.stringify(dataString)\r\n        });\r\n        setShowScrollerTextApp(false)\r\n        setShowUrlRedirectApp(true)\r\n      }\r\n      console.log(name, text, selectedStyle, speed, allign)\r\n\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"border-0\">\r\n          <Modal.Title className=\"mr-auto app-modal-heading\">\r\n            Scroller Text App\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowScrollerTextApp(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {err && errMessage !== '' ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''}\r\n          <form\r\n            // onSubmit={handleSubmit}\r\n            className=\"row\"\r\n          >\r\n            <div className=\"form-group col-6 mb-0  url-app-form\">\r\n              <label>Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"App Name\"\r\n                required\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                onChange={(e) => {setName(e.target.value)}}\r\n              />\r\n              <label className=\"mt-3\">Text</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"  form-control \"\r\n                placeholder=\"Text to be scrolled\"\r\n                required\r\n                name=\"text\"\r\n                id=\"text\"\r\n                value={text}\r\n                onChange={(e) => {setText(e.target.value)}}\r\n              />\r\n\r\n              <label className=\"mt-3\">Text Style</label>\r\n              <Select\r\n                value={selectedStyle}\r\n                onChange={setSelectedStyle}\r\n                options={options}\r\n                className=\"app-option\"\r\n              />\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Text Color</label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"Text to be scrolled\"\r\n                    value={tColor}\r\n                    name=\"textColor\"\r\n                    id=\"textColor\"\r\n                    onChange={(e) => {setTextColor(e.target.value)}}\r\n                    required\r\n                    \r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Background Color</label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"  form-control \"\r\n                    placeholder=\"Text to be scrolled\"\r\n                    value={backColor}\r\n                    name=\"backColor\"\r\n                    id=\"backColor\"\r\n                    onChange={(e) => {setBackColor(e.target.value)}}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Scroll Speed</label>\r\n\r\n                  <Select\r\n                    value={speed}\r\n                    onChange={setSpeed}\r\n                    options={options1}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6\">\r\n                  <label className=\"mt-3\">Scroll Direction</label>\r\n\r\n                  <Select\r\n                    value={allign}\r\n                    onChange={setAllign}\r\n                    options={options2}\r\n                    className=\"app-option\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-6 \">\r\n              <div className=\"d-flex justify-content-center align-items-center h-100 scroll-text-app-form-icon\">\r\n                <div className=\"text-center\">\r\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"border-0 mb-2\">\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\"\r\n                 onClick={() => setShowScrollerTextApp(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                //   onClick={() => setNewTagModal(false)}\r\n                onClick={(e) => handleCreateApp(e)}\r\n                >\r\n                  {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\r\n                </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n      show={showRedirectApp}\r\n      size=\"xl\"\r\n      centered\r\n    >\r\n      <Modal.Header className=\"border-0\">\r\n\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowUrlRedirectApp(false)}\r\n        >\r\n          <img\r\n            className=\"cancel-icon\"\r\n            src={cancelIcon}\r\n            alt=\"cancel-icon\"\r\n            height=\"25px\"\r\n            width=\"25px\"\r\n          />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\r\n              <div className=\"text-center\">\r\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\r\n                <h4>https://www.</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-6 \">\r\n            <div className=\"d-flex justify-content-center align-items-center\">\r\n              <div className=\"text-center\">\r\n                <p>Scroller App created successfully</p>\r\n                <p>Scroller App is saved in <u>Media</u></p>\r\n                <Link to={'/layout'}>Create Composition</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScrollerTextAppModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\compositionPlayer.jsx",["809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842"],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport WebVideoPlayer from \"./WebVideoPlayer\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\nimport ReactPlayer from \"react-player\";\r\nimport Iframe from \"react-iframe\";\r\nimport { fontSize } from \"@material-ui/system\";\r\nimport moment from \"moment\";\r\nimport Moment from 'react-moment';\r\nimport Clock from \"../Clock\";\r\nimport Zone1 from './Zone1';\r\nimport Zone2 from './Zone2';\r\nimport Zone3 from './Zone3'\r\nimport { getWeather } from \"../../../utils/api\";\r\nconst CompositionPlayer = ({ contents, content, referenceUrl }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [current1Index, setCurrent1Index] = useState(0);\r\n  const [current2Index, setCurrent2Index] = useState(0);\r\n  const timeout1Ref = useRef(\"\");\r\n  const timeoutRef = useRef(\"\");\r\n\r\n  const monthName = ['Jan', 'Feb', 'March', 'Apr', 'May', 'June', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n  const dayName = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n\r\n  const handleScrollerApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let speed = 5;\r\n    let allignment = 'left';\r\n    if(prp.speed && prp.speed == 'medium'){\r\n      speed = 12;\r\n    }\r\n    else if(prp.spped && prp.speed == 'hight'){\r\n      speed = 20;\r\n    }\r\n    if(prp.allign == 'Right-to-Left'){\r\n      allignment = 'right'\r\n    }\r\n    let txt = '';\r\n    if(prp.style == 'italic'){\r\n      txt =  <i><marquee direction={allignment} scrollAmount={speed} style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></i>\r\n    }else if(prp.style == 'bold'){\r\n      txt =  <b><marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></b>\r\n    }else{\r\n      txt = <marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee>\r\n    }\r\n    return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor}}>{txt}</div>\r\n  }\r\n\r\n  const handleTextApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let txt = \"\";\r\n    if(prp.style == 'Italic'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><i>{prp.content}</i></div>\r\n    }else if(prp.style == 'Bold'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><b>{prp.content}</b></div>\r\n    }else{\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}>{prp.content}</div>\r\n    }\r\n  }\r\n\r\n  const handleClockApps = (data) => {\r\n      const cdate = new Date();\r\n      const prp = JSON.parse(data);\r\n      let tF = '';\r\n      \r\n    console.log(\"timeFormat\",prp.timeFormat)\r\n      if(prp.timeFormat == 'lefAnalogue - 12 hourt'){ \r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"50px\", color:'white', textAlign:'center'}} ><div style={{position:'relative'}}><Clock /></div>{prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}</div>\r\n\r\n      }else{\r\n        if(prp.timeFormat == 'Digital - 12 hour'){\r\n          tF = \"hh:mm A\";\r\n        }else if(prp.timeFormat == 'Digital - 24 hour'){\r\n          tF = \"HH:MM A\";\r\n        }\r\n\r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"100px\", color:'white', textAlign:'center'}} >\r\n            <Moment format={tF} date={new Date()} />\r\n            {!prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}\r\n            \r\n            </div>\r\n      }\r\n    \r\n    // const prp = JSON.parse(data);\r\n    // let txt = \"\";\r\n    // if(prp.style == 'Italic'){\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><i>{prp.content}</i></div>\r\n    // }else if(prp.style == 'Bold'){\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><b>{prp.content}</b></div>\r\n    // }else{\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}>{prp.content}</div>\r\n    // }\r\n  }\r\n\r\n  const handleWeatherApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"50px\", color:'white', textAlign:'center'}} >Weather Apps</div>\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (contents && contents.zones.length == 1) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration =\r\n          contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n    } else if (contents && contents.zones.length == 2) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration =\r\n          contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contents.zones[1].content[current1Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[1].content[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contents.zones[1].content.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    } else if (contents && contents.zones.length == 3) {\r\n      if (contents.zones[0].content[currentIndex]) {\r\n        const timeoutDuration =\r\n          contents.zones[0].content[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contents.zones[0].content.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contents.zones[1].content[current1Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[1].content[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contents.zones[1].content.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n      if (contents.zones[2].content[current2Index]) {\r\n        const timeout1Duration =\r\n          contents.zones[2].content[current2Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current2Index === contents.zones[2].content.length - 1) {\r\n            setCurrent2Index(0);\r\n          } else {\r\n            setCurrent2Index((current2Index) => current2Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    }\r\n\r\n    return () => clearTimeout(timeoutRef.current);\r\n  }, [currentIndex, current1Index]);\r\n  const viewImage = content[currentIndex]?.fitToScreen\r\n    ? \"fitScreen\"\r\n    : content[currentIndex]?.crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {contents && contents.zones.length == 1 ? (\r\n          <Zone1 contents={contents} currentIndex={currentIndex} current1Index={current1Index}  current2Index={current2Index} viewImage={viewImage}/>\r\n      ) : contents.zones.length == 2 ? (\r\n          <Zone3 contents={contents} currentIndex={currentIndex} current1Index={current1Index}  current2Index={current2Index} viewImage={viewImage}/>\r\n      ) : contents.zones.length == 3 ? (\r\n          <Zone3 contents={contents} currentIndex={currentIndex} current1Index={current1Index}  current2Index={current2Index} viewImage={viewImage}/>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompositionPlayer;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\WebVideoPlayer.jsx",["843","844"],"import React, { useEffect, useRef } from 'react';\r\nimport videojs from 'video.js';\r\n\r\nimport 'video.js/dist/video-js.css';\r\nconst WebVideoPlayer = (props) => {\r\n  console.log(props, \"WebVideoPlayer.jsx props\")\r\n  const videoRef = useRef(null);\r\n  const playerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    videoRef.current?.load();\r\n    // playerRef.current = videojs(videoRef.current, {\r\n    //   autoplay: true,\r\n    //   controls: false,\r\n    //   muted:true,\r\n    //   loop:true,\r\n    //   src: props.src\r\n    // });\r\n    // console.log(\"test\",playerRef.current, videoRef.current)\r\n    return () => {\r\n      videoRef.current?.load();\r\n      if (playerRef.current) {\r\n        playerRef.current.dispose();\r\n        playerRef.current = null;\r\n      }\r\n    };\r\n  }, [props.src]);\r\n\r\n  useEffect(() => {\r\n    if (playerRef.current) {\r\n      playerRef.current.src({ src: props.src });\r\n    }\r\n  }, [props.src]);\r\n\r\n  // useEffect(() => {\r\n  //   if (playerRef.current && playerRef.current.tech()) {\r\n  //     playerRef.current.tech().src({ src: props.src });\r\n  //     playerRef.current.load();\r\n  //   }\r\n  // }, [props.src]);\r\n\r\n\r\n\r\n\r\n  // const videoRef = useRef(null);\r\n  // const playerRef = useRef(null);\r\n\r\n  // useEffect(() => {\r\n  //   // Create the Video.js player instance\r\n  //   playerRef.current = videojs(videoRef.current, {\r\n  //     autoplay: true,\r\n  //     controls: false,\r\n  //     loop: true,\r\n  //     muted: true,\r\n  //     sources: [{\r\n  //       src: props.src,\r\n        \r\n  //     }],\r\n  //   });\r\n\r\n  //   // Cleanup when component unmounts\r\n  //   return () => {\r\n  //     if (playerRef.current) {\r\n  //       playerRef.current.dispose();\r\n  //       playerRef.current = null;\r\n  //     }\r\n  //   };\r\n  // }, []);\r\n\r\n  // const videoRef = useRef(null);\r\n  // useEffect(() => {\r\n  //   const video = videoRef.current;\r\n\r\n  //   const handleEnded = () => {\r\n  //     video.currentTime = 0; // Restart the video from the beginning\r\n  //     video.play(); // Start playing the video again\r\n  //   };\r\n\r\n  //   video.addEventListener('ended', handleEnded);\r\n\r\n  //   return () => {\r\n  //     video.removeEventListener('ended', handleEnded);\r\n  //   };\r\n  // }, []);\r\n  return (\r\n  //<> <video ref={videoRef} className=\"video-js\" /></>\r\n  // <> <video ref={videoRef}   className=\"video-js\" </video></>\r\n\r\n    <video ref={videoRef} className=\"video-js\" autoPlay muted loop>\r\n      <source src={props.src} type=\"video/mp4\" />\r\n    </video>\r\n  );\r\n};\r\n\r\nexport default WebVideoPlayer;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddDeviceProfile.jsx",["845","846","847","848","849","850","851"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport {\r\n  BASE_URL,\r\n  addDeviceProfile,\r\n  updateDeviceProfile,\r\n} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddMedia from \"../modals/AddMedia\";\r\nimport DragMove from \"./DragMove\";\r\nimport Switch from \"react-switch\";\r\nimport upload from \"../../img/uplaod.svg\";\r\n\r\nconst AddDeviceProfile = ({\r\n  open,\r\n  setShowProfileModel,\r\n  setIsRefresh,\r\n  profileData,\r\n  setProfileData,\r\n  type,\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [openMedia, setOpenMedia] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [selectedMedia, setSelectedMedia] = useState(null);\r\n  const [height, setHeight] = useState(0);\r\n  const [width, setWidth] = useState(0);\r\n  const [healthIndicator, setHealthIndicator] = useState(false);\r\n  const [viewPort, setViewPort] = useState(\"portrait\");\r\n  useEffect(() => {\r\n    if (profileData) {\r\n      setSelectedMedia({\r\n        title: profileData.logo.title,\r\n        type: profileData.logo.type,\r\n      });\r\n      setWidth(profileData.logo.dimensions.width);\r\n      setHeight(profileData.logo.dimensions.height);\r\n      setViewPort(profileData.logo.orientation);\r\n      setTranslate({\r\n        x: profileData.logo.coordinates.x,\r\n        y: profileData.logo.coordinates.y,\r\n      });\r\n      setHealthIndicator(profileData.screenHealthIndicator);\r\n      setName(profileData.name);\r\n      console.log(\"profileData\", profileData);\r\n    }\r\n  }, [profileData]);\r\n\r\n  const [translate, setTranslate] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const handleChangeDate = (nextChecked) => {\r\n    console.log(nextChecked, \"yyyy\");\r\n    setHealthIndicator(nextChecked);\r\n  };\r\n  const handleDragMove = (e) => {\r\n    setTranslate({\r\n      x: translate.x + e.movementX,\r\n      y: translate.y + e.movementY,\r\n    });\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let err = \"\";\r\n    if (name === \"\") {\r\n      err = \"Name is Required\";\r\n    }\r\n    if (err !== \"\") {\r\n      setError(err);\r\n      return false;\r\n    } else {\r\n      setError(\"\");\r\n    }\r\n\r\n    if (type && type == \"edit\") {\r\n      const payLoad = {\r\n        name,\r\n        screenHealthIndicator: healthIndicator,\r\n        orientation: viewPort,\r\n        width,\r\n        height,\r\n        x: translate.x,\r\n        y: translate.y,\r\n        title: selectedMedia ? selectedMedia.title : \"\",\r\n        type: selectedMedia ? selectedMedia.type : \"\",\r\n        profileId: profileData._id,\r\n      };\r\n      await updateDeviceProfile(payLoad)\r\n        .then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Device Profile has been Updated successfully !!!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n          setIsRefresh(true);\r\n          setShowProfileModel(false);\r\n        })\r\n        .catch(function (error) {\r\n          setError(error.response.data.message);\r\n        });\r\n    } else {\r\n      const payLoad = {\r\n        name,\r\n        screenHealthIndicator: healthIndicator,\r\n        orientation: viewPort,\r\n        width,\r\n        height,\r\n        x: translate.x,\r\n        y: translate.y,\r\n        title: selectedMedia ? selectedMedia.title : \"\",\r\n        type: selectedMedia ? selectedMedia.type : \"\",\r\n      };\r\n      await addDeviceProfile(payLoad)\r\n        .then((response) => {\r\n          //setError(null);\r\n          toast.success(\"Device Profile has been added successfully !!!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n          });\r\n          setIsRefresh(true);\r\n          setShowProfileModel(false);\r\n        })\r\n        .catch(function (error) {\r\n          setError(error.response.data.message);\r\n        });\r\n    }\r\n  };\r\n  const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n      return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AddMedia\r\n        setOpenMedia={setOpenMedia}\r\n        openMedia={openMedia}\r\n        selectedImage={selectedImage}\r\n        setSelectedImage={setSelectedImage}\r\n        setSelectedMedia={setSelectedMedia}\r\n        setHeight={setHeight}\r\n        setWidth={setWidth}\r\n      />\r\n      <Modal className=\"\" show={open} size=\"xl\">\r\n        <Modal.Header>\r\n          <Modal.Title>\r\n            {type && type == \"edit\" ? \"Update \" : \"Add \"} Profile\r\n          </Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowProfileModel(false)}\r\n          >\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            {error && error !== \"\" && (\r\n              <h5 className=\"alert alert-danger\">{error}</h5>\r\n            )}\r\n            <Col lg={12} md={12} sm={12} xs={12}>\r\n              <label className=\"mt-3\">Enter Name</label>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  className=\"form-control input-default form-field\"\r\n                  placeholder=\"Enter Name\"\r\n                  onChange={(e) => {\r\n                    setName(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group pt-2\">\r\n                <Switch\r\n                  onColor=\"#B3005E\"\r\n                  onChange={handleChangeDate}\r\n                  checked={healthIndicator}\r\n                  className=\"react-switch\"\r\n                  required={true}\r\n                />\r\n              </div>\r\n              <div className=\"form-group d-flex pt-2\">\r\n                {/* <button\r\n                  onClick={(e) => {\r\n                    setOpenMedia(true);\r\n                  }}\r\n                  className=\"btn btn-primary  primary-btn btn\"\r\n                >\r\n                  Add Image\r\n                </button> */}\r\n                <div className=\"mr-4 add-device-profile-img\">\r\n                  {selectedMedia && (\r\n                    <span className=\"td-content d-flex name-td-content mb-3 \">\r\n                      <span\r\n                        className={`name-img mr-2  ${\r\n                          selectedMedia?.type === \"video\" && \"videotableName\"\r\n                        }`}\r\n                      >\r\n                        {selectedMedia?.type === \"image\" && (\r\n                          <div\r\n                            onClick={() => {\r\n                              //showPreview(selectedMedia.title, selectedMedia.type);\r\n                            }}\r\n                            className=\"media-list-img-zoom\"\r\n                          >\r\n                            <span className=\"media-list-img-zoom-plus\">+</span>\r\n                            <img\r\n                              className=\"media-img img-fluid\"\r\n                              src={`${BASE_URL}${selectedMedia?.title}`}\r\n                              alt=\"media-img\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                        {selectedMedia?.type === \"video\" && (\r\n                          <button\r\n                            onClick={() => {\r\n                              //showPreview(media.title, media.type);\r\n                            }}\r\n                          >\r\n                            {videoMetaDuration(selectedMedia)}\r\n                          </button>\r\n                        )}\r\n                      </span>\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <img\r\n                  onClick={(e) => {\r\n                    setOpenMedia(true);\r\n                  }}\r\n                  src={upload}\r\n                  alt=\"icon\"\r\n                  height=\"35px\"\r\n                  width=\"35px\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              <div>\r\n                {selectedMedia && (\r\n                  <div>\r\n                    <div className=\"add-device-potrait \">\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setViewPort(\"portrait\");\r\n                        }}\r\n                        className={`${viewPort == \"portrait\" ? \" active\" : \"\"}`}\r\n                      >\r\n                        Potrait\r\n                      </div>\r\n                      <div\r\n                        onClick={(e) => {\r\n                          setViewPort(\"landscape\");\r\n                        }}\r\n                        className={`${\r\n                          viewPort == \"landscape\" ? \" active\" : \"\"\r\n                        }`}\r\n                      >\r\n                        Landscape\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">X</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={translate.x}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setTranslate({\r\n                              ...translate,\r\n                              [\"x\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Y</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={translate.y}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setTranslate({\r\n                              ...translate,\r\n                              [\"y\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Width</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={width}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setWidth(e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-controle\">\r\n                      <label className=\"mt-3\">Height</label>\r\n                      <div className=\"form-group\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"name\"\r\n                          value={height}\r\n                          className=\"form-control input-default form-field\"\r\n                          placeholder=\"Enter Name\"\r\n                          onChange={(e) => {\r\n                            setHeight(e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <header className=\"App-header\">\r\n                        <DragMove onDragMove={handleDragMove}>\r\n                          <div\r\n                            style={{\r\n                              transform: `translateX(${translate.x}px) translateY(${translate.y}px)`,\r\n                            }}\r\n                            className=\"w-100\"\r\n                          >\r\n                            <img\r\n                              style={{ width:`${width}px`, height:`${height}px`, maxWidth: \"100%\" }}\r\n                              src={`${BASE_URL}${selectedMedia?.title}`}\r\n                              className={`App-logo  ${width}`}\r\n                              alt=\"logo\"\r\n                            />\r\n                          </div>\r\n                        </DragMove>\r\n                      </header>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => setShowProfileModel(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={(e) => handleSubmit(e)}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddDeviceProfile;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\profile.jsx",["852","853","854","855","856"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown, Card, Button } from \"react-bootstrap\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { addDeviceProfile, deleteDeviceProfile } from \"../../../utils/api\";\r\nimport { humanReadableFormattedDateString } from \"../../../utils/UtilsService\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\r\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\r\nimport Datatable from \"react-data-table-component\";\r\n\r\nconst Profile = ({ allDeviceProfile, setIsRefresh, isRefresh, loading }) => {\r\n  const [showProfileModel, setShowProfileModel] = useState(false);\r\n  const [profileData, setProfileData] = useState(null);\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [selected, setSelected] = useState(null);\r\n  const [selectedScreen, setSelectedScreen] = useState([]);\r\n\r\n  const handleEditiUser = (e, item) => {\r\n    e.preventDefault();\r\n    setShowProfileModel(true);\r\n    setProfileData(item);\r\n    console.log(\"Update Profile\");\r\n  };\r\n\r\n  const handleAssignScreen = (e, id, item) => {\r\n    e.preventDefault();\r\n    setShowPublishPopUp(true);\r\n    setSelected(id);\r\n    setSelectedScreen(item.screens);\r\n    console.log(\"Assign Screen\");\r\n  };\r\n\r\n  const handleDelete = async (e, id) => {\r\n    e.preventDefault();\r\n    await deleteDeviceProfile(id);\r\n    toast.success(\"Profile has been deleted successfully !!!\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n    });\r\n    setIsRefresh(!isRefresh);\r\n  };\r\n\r\n  const renderAction = (value) => {\r\n    return (\r\n      <Dropdown className=\"dropdown-toggle profile-dropdown\">\r\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n          <span className=\"table-menu-icon\">\r\n            <img\r\n              className=\"menu-img img-fluid\"\r\n              src={menuIcon}\r\n              alt=\"menu-icon\"\r\n            />\r\n          </span>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleEditiUser(e, value);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={assignIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Edit</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleAssignScreen(e, value._id, value);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Assigned Screen</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n          <Dropdown.Item\r\n            onClick={(e) => {\r\n              handleDelete(e, value._id);\r\n            }}\r\n            className=\"dropdown-list-item\"\r\n          >\r\n            <div className=\"d-flex\">\r\n              <div className=\"dropdown-list-icon\">\r\n                <img\r\n                  className=\"dropdown-list-img img-fluid\"\r\n                  src={takeScreenshotIcon}\r\n                  alt=\"menu-icon\"\r\n                />\r\n              </div>\r\n              <div className=\"dropdown-menu-list\">\r\n                <span className=\"menu-heading\">Delete</span>\r\n              </div>\r\n            </div>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Name\",\r\n      selector: (row) => row?.name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Created\",\r\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Updated\",\r\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \" \",\r\n      selector: (row) => renderAction(row),\r\n      sortable: false,\r\n    },\r\n  ];\r\n  // const rows = [];\r\n  // if(allDeviceProfile){\r\n  //   allDeviceProfile.forEach((item) => {\r\n  //       rows.push({\r\n  //             id:item._id,\r\n  //             name:item.name,\r\n  //             created: humanReadableFormattedDateString(item.createdAt),\r\n  //             updated: humanReadableFormattedDateString(item.createdAt),\r\n  //             assignedScreen:item.screens.length,\r\n  //             action:item\r\n  //         });\r\n  //     });\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <AddDeviceProfile\r\n        open={showProfileModel}\r\n        setShowProfileModel={setShowProfileModel}\r\n        setIsRefresh={setIsRefresh}\r\n        profileData={profileData}\r\n        setProfileData={setProfileData}\r\n        type=\"edit\"\r\n      />\r\n      <SelectScreenModal\r\n        showPublishPopUp={showPublishPopUp}\r\n        setShowPublishPopUp={setShowPublishPopUp}\r\n        selected={selected}\r\n        setIsRefresh={setIsRefresh}\r\n        selectedScreen={selectedScreen}\r\n        setSelectedScreen={setSelectedScreen}\r\n      />\r\n      <Datatable\r\n        className=\"profile\"\r\n        columns={columns}\r\n        data={allDeviceProfile}\r\n        pagination\r\n        sorting\r\n      />\r\n      {/* <Table responsive className=\"custom-table screen-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Created ON</th>\r\n            <th>Update On</th>\r\n            <th>Assigned Screens</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {allDeviceProfile !== \"\" &&\r\n            allDeviceProfile.map((item) => {\r\n              return (\r\n                <tr id={item._id}>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>{item.name}</strong>\r\n                    </span>\r\n                  </td>\r\n                  <td>{humanReadableFormattedDateString(item.createdAt)}</td>\r\n                  <td>{humanReadableFormattedDateString(item.updatedAt)}</td>\r\n                  <td>{item.screens.length}</td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        \r\n                        <Dropdown.Item \r\n                         onClick={(e) => {handleEditiUser(e, item)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={assignIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Edit</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item \r\n                           onClick={(e)=>{handleAssignScreen(e, item._id, item)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Assigned Screen</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item \r\n                           onClick={(e)=>{handleDelete(e, item._id)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\Logout.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\UploadMediaFileModal.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\saveCompositionName.jsx",["857","858"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst SaveCompositionName = ({\r\n  setModalState,\r\n  saveComposition,\r\n  name,\r\n  setName,\r\n}) => {\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Save Composition</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setModalState(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"add-screen-paragraph\">\r\n          <p>Give your composition a name.</p>\r\n        </div>\r\n\r\n        <Row>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                value={name}\r\n                onChange={(event) => {\r\n                  setName(event.target.value);\r\n                }}\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              variant=\"outline-light\"\r\n              onClick={() => setModalState(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() =>{\r\n                if(name.length){\r\n                  saveComposition()\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SaveCompositionName;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Alerts.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Chat.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\layouts\\viewDetails.jsx",["859"],"import { Button, Modal, Row, Col, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\n\r\nimport Rectangle from \"../../../img/Rectangle.png\";\r\n\r\nimport \"../../components/Table.css\";\r\nimport layoutSelected from \"../../../img/layout-select-img.png\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\nimport { Link } from \"react-router-dom\";\r\nconst ViewDetails = ({ setViewDetailsModal, composition }) => {\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Composition Details</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setViewDetailsModal(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <div>\r\n            <div className=\" d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              <img className=\"\" src={Rectangle} alt=\"upload-img\" />\r\n            </div>\r\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              Duration : {composition.duration} sec\r\n            </div>\r\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\r\n              {composition.layout.zones.map((zone) => {\r\n                return (\r\n                  <span variant=\"\" type=\"button\" className=\" zoneName\">\r\n                    {zone.name}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n            <hr className=\"new1\" />\r\n            <Table responsive className=\"custom-table mt-3\">\r\n              <tbody>\r\n              {composition.zones[0].content.map((content, index) => {\r\n                return (\r\n                    <tr>\r\n                    <td>{index + 1}.</td>\r\n                    <td>\r\n                    <span className=\"td-content d-flex name-td-content\">\r\n                      <span className={`name-img mr-2  ${content.type === \"video\" && \"videotableName\"}`}>\r\n                      {content.type === \"image\" && <img\r\n                          className=\"media-img img-fluid\"\r\n                          src={`${BASE_URL}${content.url}`}\r\n                          alt=\"media-img\"\r\n                        />}\r\n                         {content.type === \"video\" && content?.duration.toFixed(0)/60}\r\n                      </span>\r\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                        <strong>{content.url.split(\"/\")[content.url.split(\"/\").length -1]}</strong>\r\n                        {/* <span>{content.createdBy}</span> */}\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n\r\n                  <td>\r\n                    <span className=\"my-phone-tag  ml-1\">{(content?.duration).toFixed(0)} Sec</span>\r\n                  </td>\r\n                </tr>\r\n                )\r\n              })}\r\n\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button\r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => {\r\n                  setViewDetailsModal(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Link to={`/composition/edit?id=${composition._id}`}>\r\n            <Button\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n              >\r\n                Edit Details\r\n              </Button>\r\n            </Link>\r\n              \r\n            </Col>\r\n          </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewDetails;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\previewComposition.jsx",["860","861","862","863","864","865","866"],"import { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\r\nimport { BASE_URL } from \"../../utils/api\";\r\nimport { isBlobUrl } from \"../../utils/UtilsService\";\r\nconst PreviewComposition = ({\r\n  setShowPreview,\r\n  content,\r\n  contentnew,\r\n  layout,\r\n  referenceUrl,\r\n  referenceUrlArray,\r\n}) => {\r\n  console.log(layout, \"layout\");\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [current1Index, setCurrent1Index] = useState(0);\r\n  const [current2Index, setCurrent2Index] = useState(0);\r\n  const timeoutRef = useRef(\"\");\r\n  const timeout1Ref = useRef(\"\");\r\n  const divRef = useRef(null);\r\n  useEffect(() => {\r\n    if (layout && layout.zones.length == 1) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n    } else if (layout && layout.zones.length == 2) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone2[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contentnew.Zone2.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    } else if (layout && layout.zones.length == 3) {\r\n      if (contentnew.Zone1[currentIndex]) {\r\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\r\n        timeoutRef.current = setTimeout(() => {\r\n          if (currentIndex === contentnew.Zone1.length - 1) {\r\n            setCurrentIndex(0);\r\n          } else {\r\n            setCurrentIndex((currentIndex) => currentIndex + 1);\r\n          }\r\n        }, timeoutDuration);\r\n      }\r\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone2[current1Index].duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current1Index === contentnew.Zone2.length - 1) {\r\n            setCurrent1Index(0);\r\n          } else {\r\n            setCurrent1Index((current1Index) => current1Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n      if (contentnew.Zone3 && contentnew.Zone3[current2Index]) {\r\n        const timeout1Duration =\r\n          contentnew.Zone3[current2Index]?.duration * 1000;\r\n        timeout1Ref.current = setTimeout(() => {\r\n          if (current2Index === contentnew.Zone3.length - 1) {\r\n            setCurrent2Index(0);\r\n          } else {\r\n            setCurrent2Index((current2Index) => current2Index + 1);\r\n          }\r\n        }, timeout1Duration);\r\n      }\r\n    }\r\n\r\n    return () => clearTimeout(timeoutRef.current);\r\n  }, [currentIndex, current1Index]);\r\n\r\n  const onFullScreen = () => {\r\n    const element = document.getElementsByClassName(\r\n      \"modal-priview-composition\"\r\n    )[0];\r\n    // if (element.classList.contains(\"fullscreen-mode\")) {\r\n    //   element.classList.remove(\"fullscreen-mode\");\r\n    // }\r\n\r\n    if (element) {\r\n      // divRef.current.requestFullscreen();\r\n      if (element.requestFullscreen) {\r\n        element.requestFullscreen();\r\n      } else if (element.webkitRequestFullscreen) {\r\n        element.webkitRequestFullscreen();\r\n      } else if (element.msRequestFullscreen) {\r\n        element.msRequestFullscreen();\r\n      }\r\n      element.classList.add(\"fullscreen-mode\");\r\n    }\r\n  };\r\n\r\n  const viewImage = content[currentIndex].fitToScreen\r\n    ? \"fitScreen\"\r\n    : content[currentIndex].crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n\r\n  // const url = isBlobUrl(referenceUrl[currentIndex])\r\n  //   ? referenceUrl[currentIndex]\r\n  //   : `${BASE_URL}${referenceUrl[currentIndex]}`;\r\n\r\n  const url =\r\n    referenceUrlArray.Zone1 && referenceUrlArray.Zone1[currentIndex]\r\n      ? isBlobUrl(referenceUrlArray.Zone1[currentIndex])\r\n        ? referenceUrlArray.Zone1[currentIndex]\r\n        : `${BASE_URL}${referenceUrlArray.Zone1[currentIndex]}`\r\n      : \"\";\r\n\r\n  const url1 =\r\n    referenceUrlArray.Zone2 && referenceUrlArray.Zone2[current1Index]\r\n      ? isBlobUrl(referenceUrlArray.Zone2[current1Index])\r\n        ? referenceUrlArray.Zone2[current1Index]\r\n        : `${BASE_URL}${referenceUrlArray.Zone2[current1Index]}`\r\n      : \"\";\r\n\r\n  const url2 =\r\n    referenceUrlArray.Zone3 && referenceUrlArray.Zone3[current2Index]\r\n      ? isBlobUrl(referenceUrlArray.Zone3[current2Index])\r\n        ? referenceUrlArray.Zone3[current2Index]\r\n        : `${BASE_URL}${referenceUrlArray.Zone3[current2Index]}`\r\n      : \"\";\r\n\r\n  return (\r\n    <Modal\r\n      className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview ${layout.screenType}-view`}\r\n      show={true}\r\n      size=\"xl\"\r\n    >\r\n      <Modal.Header style={{ paddingBottom: \"0px\" }}>\r\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\r\n\r\n        <Button variant=\"\" className=\"close \" onClick={() => onFullScreen()}>\r\n          <i class=\"fa fa-expand fullscreenbtn\"></i>\r\n        </Button>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowPreview(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body ref={divRef} style={{ padding: \"15px\" }}>\r\n        {layout && layout.zones.length == 1 ? (\r\n          <>\r\n            {content[currentIndex] &&\r\n              content[currentIndex].type === \"image\" && (\r\n                <div\r\n                  className=\"basic-list-group image-preview-container media-content modal-priview-composition\"\r\n                  style={{ height: \"560px\" }}\r\n                >\r\n                  <img\r\n                    className=\"webplayer-preview-img\"\r\n                    style={{\r\n                      objectFit: `${\r\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                      }`,\r\n                    }}\r\n                    src={url}\r\n                    alt=\"media-img\"\r\n                  />\r\n                </div>\r\n              )}\r\n            {content[currentIndex] &&\r\n              content[currentIndex].type === \"video\" && (\r\n                <div\r\n                  className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                  }`}\r\n                >\r\n                  <WebVideoPlayer src={url}></WebVideoPlayer>\r\n                </div>\r\n              )}\r\n          </>\r\n        ) : layout.zones.length == 2 ? (\r\n          <div className=\"modal-priview-composition\" style={{ height: \"80vh\" }}>\r\n            <div className=\"top-div\">\r\n              {contentnew.Zone1[currentIndex] &&\r\n                contentnew.Zone1[currentIndex].type === \"image\" && (\r\n                  <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\r\n                      src={url}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone1[currentIndex] &&\r\n                contentnew.Zone1[currentIndex].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\r\n                      src={url}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n            <div className=\"bottom-div\">\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone2[current1Index] &&\r\n                contentnew.Zone2[current1Index].type === \"image\" && (\r\n                  <div\r\n                    className=\"basic-list-group image-preview-container media-content\"\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\r\n                      src={url1}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone2 &&\r\n                contentnew.Zone2[current1Index] &&\r\n                contentnew.Zone2[current1Index].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    style={{ height: \"100%\" }}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\r\n                      src={url1}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        ) : layout.zones.length == 3 ? (\r\n          <div\r\n            className=\"modal-priview-composition\"\r\n            style={{ height: \"560px\" }}\r\n          >\r\n            <div className=\"third-compoition-container\">\r\n              <div className=\"third-composition-top-div\">\r\n                {contentnew.Zone1[currentIndex] &&\r\n                  contentnew.Zone1[currentIndex].type === \"image\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                      <img\r\n                        className=\"webplayer-preview-img\"\r\n                        style={{\r\n                          objectFit: `${\r\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                          }`,\r\n                        }}\r\n                        // src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\r\n                        src={url}\r\n                        alt=\"media-img\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                {contentnew.Zone1[currentIndex] &&\r\n                  contentnew.Zone1[currentIndex].type === \"video\" && (\r\n                    <div\r\n                      className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                      }`}\r\n                    >\r\n                      <WebVideoPlayer\r\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\r\n                        src={url}\r\n                      ></WebVideoPlayer>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n              <div className=\"third-composition-second-div\">\r\n                {contentnew.Zone2[current1Index] &&\r\n                  contentnew.Zone2[current1Index].type === \"image\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                      <img\r\n                        className=\"webplayer-preview-img\"\r\n                        style={{\r\n                          objectFit: `${\r\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                          }`,\r\n                        }}\r\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\r\n                        src={url1}\r\n                        alt=\"media-img\"\r\n                      />\r\n                    </div>\r\n                  )}\r\n                {contentnew.Zone2[current1Index] &&\r\n                  contentnew.Zone2[current1Index].type === \"video\" && (\r\n                    <div\r\n                      className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                      }`}\r\n                    >\r\n                      <WebVideoPlayer\r\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\r\n                        src={url1}\r\n                      ></WebVideoPlayer>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"third-composition-third-div\">\r\n              {contentnew.Zone3[current2Index] &&\r\n                contentnew.Zone3[current2Index].type === \"image\" && (\r\n                  <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                      className=\"webplayer-preview-img\"\r\n                      style={{\r\n                        objectFit: `${\r\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                      }}\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone3[current2Index].url}`}\r\n                      src={url2}\r\n                      alt=\"media-img\"\r\n                    />\r\n                  </div>\r\n                )}\r\n              {contentnew.Zone3[current2Index] &&\r\n                contentnew.Zone3[current2Index].type === \"video\" && (\r\n                  <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                  >\r\n                    <WebVideoPlayer\r\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone3[current2Index].url}`}\r\n                      src={url}\r\n                    ></WebVideoPlayer>\r\n                  </div>\r\n                )}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default PreviewComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\Notes.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\CompositionTable.jsx",["867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\layout\\Composition\\ZoneInfoTable.jsx",["886","887","888","889","890","891","892","893","894","895"],"import React, { useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nimport editBtnImg from \"../../../../img/edit-btn.png\";\r\nimport deleteBtnImg from \"../../../../img/delete-btn.png\";\r\nimport { BASE_URL } from \"../../../../utils/api\";\r\nimport EditSelectedComposition from \"../../../modals/editSelectedComposition\";\r\n\r\nconst ZoneInfoTable = ({\r\n  content,\r\n  setContent,\r\n  setReferenceUrl,\r\n  layout,\r\n  handleLayout,\r\n}) => {\r\n  console.log(\"Content\", content)\r\n  const [editSelected, setEditSelected] = useState(null);\r\n  const [selectedZone, setSelectedZone] = useState(\"Zone1\");\r\n  const [activeClass, setActiveClass] = useState(false);\r\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\r\n\r\n  const handleChange = (event, index) => {\r\n    const newValue = event.target.value.replace(/[^\\d]/g, \"\");\r\n    setContent((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === index) {\r\n          val.duration = newValue;\r\n        }\r\n        return val;\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n  };\r\n  const makeZoneColor = (zones) => {\r\n    const data = {};\r\n    zones.forEach((item, index) => {\r\n      data[item.name] = index == 0 ? true : false;\r\n    });\r\n    return data;\r\n  };\r\n  const [zoneColor, setZoneColor] = useState(makeZoneColor(layout.zones));\r\n\r\n  const handleZoneButton = (zone1) => {\r\n    setZoneColor({ ...zoneColor, [selectedZone]: false, [zone1]: true });\r\n    setSelectedZone(zone1);\r\n    handleLayout(zone1);\r\n  };\r\n\r\n  const Duration = (composition, index) => {\r\n    return (\r\n      <div className=\"tag-container mediaDUrationTag\">\r\n        {\" \"}\r\n        <input\r\n          onChange={(event) => {\r\n            handleChange(event, index);\r\n          }}\r\n          value={Number(composition.duration).toFixed(0)}\r\n          disabled={composition.type === \"video\"}\r\n        />\r\n        <span>sec</span>\r\n      </div>\r\n    );\r\n  };\r\n  const TotalDuration = () => {\r\n    let total = 0;\r\n    content.forEach((composition) => {\r\n      total += Number(composition.duration);\r\n    });\r\n    return total.toFixed(0);\r\n  };\r\n\r\n  const removeComposition = (index) => {\r\n    setContent((prev) => {\r\n      const updateMedia = prev.filter((val, key) => key !== index);\r\n      return [...updateMedia];\r\n    });\r\n\r\n    setReferenceUrl((prev) => {\r\n      const updateUrl = prev.filter((val, key) => key !== index);\r\n      return [...updateUrl];\r\n    });\r\n  };\r\n\r\n  const editComposition = (index) => {\r\n    setEditSelected(index);\r\n  };\r\n\r\n  const updateViewType = (data, viewImage, ImgUrl) => {\r\n    setContent((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === editSelected) {\r\n          val.fitToScreen = viewImage === \"fitScreen\";\r\n          val.maintainAspectRatio = viewImage === \"aspectRation\";\r\n          val.crop = viewImage === \"crop\" ? true : false;\r\n        }\r\n        return val;\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n\r\n    setReferenceUrl((prev) => {\r\n      const updateMedia = prev.map((val, key) => {\r\n        if (key === editSelected) {\r\n          return ImgUrl+\"**\"+selectedZone;\r\n        } else {\r\n          return val;\r\n        }\r\n      });\r\n      return [...updateMedia];\r\n    });\r\n  };\r\n\r\n  const handleButtonClick = (index) => {\r\n    setSelectedButtonIndex(index);\r\n    // Perform any other logic specific to the clicked button\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table\r\n        responsive\r\n        className=\"custom-table screen-table layout-table h-100\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            <th colSpan={4}>\r\n              <span className=\"d-flex flex-wrap\">\r\n                {layout && (layout.title === 'Single Zone Potrait' || layout.title === 'Two Zone Potrait') ?\r\n                    <span\r\n                      className={`yellow-box-portrait ${layout.title}`}\r\n                      style={{\r\n                        backgroundColor:\r\n                          layout &&\r\n                          (layout.zones.length == 2\r\n                            ? \"#fff\"\r\n                            : \"#ffc12b\"),\r\n                      }}\r\n                    >\r\n                      {layout && layout.zones.length == 2 ? (\r\n                        <>\r\n                          <div\r\n                            className=\"zone-layout2\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                          <div\r\n                            className=\"zone-layout22\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </span> : \r\n                    <span\r\n                      className={`yellow-box ${layout.title}`}\r\n                      style={{\r\n                        backgroundColor:\r\n                          layout &&\r\n                          (layout.zones.length == 2 || layout.zones.length == 3\r\n                            ? \"#fff\"\r\n                            : \"#ffc12b\"),\r\n                      }}\r\n                    >\r\n                      {layout && layout.zones.length == 2 ? (\r\n                        <>\r\n                          <div\r\n                            className=\"zone-layout2\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                          <div\r\n                            className=\"zone-layout22\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                      {layout && layout.zones.length == 3 ? (\r\n                        <>\r\n                          <div\r\n                            className=\"zone-layout31\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                          <div\r\n                            className=\"zone-layout32\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                          <div\r\n                            className=\"zone-layout33\"\r\n                            style={{\r\n                              backgroundColor: zoneColor[\"Zone3\"] ? \"#ffc12b\" : \"\",\r\n                            }}\r\n                          ></div>\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </span>\r\n                    }\r\n                \r\n                {layout &&\r\n                  layout.zones.map((item, i) => {\r\n                    return (\r\n                      <button\r\n                        key={i}\r\n                        onClick={() => {\r\n                          handleZoneButton(item.name);\r\n                          handleButtonClick(i);\r\n                          // setActiveClass(true);\r\n                        }}\r\n                        // className=\"zone\"\r\n                        // className={activeClass ? \"zone zone-active \" : \"zone\"}\r\n                        className={\r\n                          selectedButtonIndex === i\r\n                            ? \"zone zone-active \"\r\n                            : \"zone\"\r\n                        }\r\n                      >\r\n                        {item.name}\r\n                      </button>\r\n                    );\r\n                  })}\r\n                <span className=\"duration\">\r\n                  Duration : {TotalDuration()} sec\r\n                </span>\r\n              </span>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {content.map((composition, index) => {\r\n            return composition.zone == selectedZone ? (\r\n              <tr key={composition.id}>\r\n                <td>{index + 1}.</td>\r\n                <td>\r\n                  <span className=\"td-content d-flex name-td-content\">\r\n                    <span\r\n                      className={`name-img mr-2  ${\r\n                        composition.type === \"video\" && \"videotableName\"\r\n                      }`}\r\n                    >\r\n                      {composition.type === \"image\" && (\r\n                        <img\r\n                          className=\"media-img img-fluid\"\r\n                          src={`${BASE_URL}${composition.url}`}\r\n                          alt=\"media-img\"\r\n                        />\r\n                      )}\r\n                      {composition.type === \"video\" &&\r\n                        composition.duration.toFixed(0) / 60}\r\n                    </span>\r\n                    <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                      <strong>\r\n                        {\r\n                          composition.url.split(\"/\")[\r\n                            composition.url.split(\"/\").length - 1\r\n                          ]\r\n                        }\r\n                      </strong>\r\n                      <span>{composition.createdBy}</span>\r\n                    </span>\r\n                  </span>\r\n                </td>\r\n                <td style={{ width: \"180px\" }}>\r\n                  {Duration(composition, index)}\r\n                </td>\r\n                <td>\r\n                  <span className=\"layout-edit-btn mr-2 \">\r\n                    <img\r\n                      className=\"edit-icon cursorPointer\"\r\n                      src={editBtnImg}\r\n                      alt=\"search\"\r\n                      onClick={() => {\r\n                        // if(composition.type === \"image\"){\r\n                        editComposition(index);\r\n                        // }\r\n                      }}\r\n                    />\r\n                  </span>\r\n                  <span\r\n                    className=\"layout-edit-btn\"\r\n                    onClick={() => {\r\n                      removeComposition(index);\r\n                    }}\r\n                  >\r\n                    <img\r\n                      className=\"edit-icon cursorPointer\"\r\n                      src={deleteBtnImg}\r\n                      alt=\"search\"\r\n                    />\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              <></>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n\r\n      {editSelected !== null && (\r\n        <EditSelectedComposition\r\n          composition={content[editSelected]}\r\n          setEditSelected={setEditSelected}\r\n          updateViewType={updateViewType}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ZoneInfoTable;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\duplicateComposition.jsx",["896","897"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport { useState } from \"react\";\r\n\r\nconst DuplicateComposition = ({\r\n  setDuplicateModal,\r\n  createComposition,\r\n}) => {\r\n  const [name, setName] = useState(\"\");\r\n  return (\r\n    \r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={true}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>Duplicate</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setDuplicateModal(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"add-screen-paragraph\">\r\n          <p>The Composition will be copied with all it's proporties. Just change the contents and play.</p>\r\n        </div>\r\n\r\n        <Row>\r\n        <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\" style={{color: \"#1A1A1A\", fontWeight:\"700\"}}>\r\n            New Composition Name\r\n            </div>\r\n          </Col>\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n              <input\r\n                value={name}\r\n                onChange={(event) => {\r\n                  setName(event.target.value);\r\n                }}\r\n                type=\"text\"\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name for new copy\"\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button\r\n              className=\"cancel-btn w-100\"\r\n              variant=\"outline-light\"\r\n              onClick={() => setDuplicateModal(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={() =>{\r\n                if(name.length){\r\n                  createComposition(name)\r\n                }\r\n              }}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DuplicateComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DragMove.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddMedia.jsx",["898"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {getAllMedia, BASE_URL } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport downArrow from \"../../img/down-arrow.png\";\r\nimport '../components/Table.css';\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({openMedia, setOpenMedia, selectedImage, setSelectedImage, setSelectedMedia, setHeight, setWidth}) => {\r\n  const [allMedia, setAllMedia] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [sMedia, setSMedia] = useState(null);\r\n  // use effect\r\n  useEffect(() => {\r\n    getAllMediaList();\r\n  }, []);\r\n\r\n  const getAllMediaList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllMedia();\r\n    console.log(\"list\",list)\r\n    setLoading(false);\r\n    setAllMedia(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event, media) => {\r\n    setSelectedImage(event.target.name);\r\n    setSMedia(media);\r\n\r\n  };\r\n\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(sMedia)\r\n    setSelectedMedia(sMedia)\r\n    const prp = JSON.parse(sMedia.properties)\r\n    setOpenMedia(false);\r\n    setHeight(prp.height);\r\n    setWidth(prp.width);\r\n  };\r\n\r\n    const parseMeta = (media) => {\r\n        const meta = JSON.parse(media.properties);\r\n        return (\r\n        <span className=\"td-content\">\r\n            {media?.type === \"image\" && (\r\n            <strong>\r\n                {meta.height} x {meta.width}\r\n            </strong>\r\n            )}\r\n            {media?.type === \"video\" && meta?.length && (\r\n            <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\r\n            )}\r\n            {meta?.size && <span>{meta.size} MB</span>}\r\n        </span>\r\n        );\r\n    };\r\n\r\n    const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n        return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n    };\r\n\r\n  return (\r\n      <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large`}\r\n        show={openMedia}\r\n        size=\"lg\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Add Media</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setOpenMedia(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        disabled\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Type</th>\r\n                  <th>Uploaded Date</th>\r\n                  <th>Properties</th>\r\n                  <th>Tags</th>\r\n                </tr>\r\n              </thead>\r\n              {loading  ? (\r\n            <TableLoader colSpan={5}/>\r\n          ) : (\r\n              <tbody>\r\n                {allMedia  && allMedia.length > 0 && \r\n                  allMedia.map((media) => {\r\n                    return (media.type === 'image' ?\r\n                    <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={media._id}\r\n                              name={media._id}\r\n                              checked={selectedImage === media._id}\r\n                              onChange={(e) => {handleCheckboxChange(e, media)}}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={media._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                         <span className=\"td-content d-flex name-td-content\">\r\n                            <span\r\n                                className={`name-img mr-2  ${\r\n                                media?.type === \"video\" && \"videotableName\"\r\n                                }`}\r\n                            >\r\n                                {media?.type === \"image\" && (\r\n                                <div\r\n                                    onClick={() => {\r\n                                        //showPreview(media.title, media.type);\r\n                                    }}\r\n                                    className=\"media-list-img-zoom\"\r\n                                >\r\n                                    <span className=\"media-list-img-zoom-plus\">+</span>\r\n                                    <img\r\n                                    className=\"media-img img-fluid\"\r\n                                    src={`${BASE_URL}${media?.title}`}\r\n                                    alt=\"media-img\"\r\n                                    />\r\n                                </div>\r\n                                )}\r\n                                {media?.type === \"video\" && (\r\n                                <button\r\n                                    onClick={() => {\r\n                                        //showPreview(media.title, media.type);\r\n                                    }}\r\n                                >\r\n                                    {videoMetaDuration(media)}\r\n                                </button>\r\n                                )}\r\n                            </span>\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                                <strong>\r\n                                {\r\n                                    media.title.split(\"/\")[\r\n                                    media.title.split(\"/\").length - 1\r\n                                    ]\r\n                                }\r\n                                </strong>\r\n                                <span>{media.createdBy.name}</span>\r\n                            </span>\r\n                        </span>\r\n                        </td>\r\n                        <td>\r\n                            {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\r\n                        </td>\r\n                        <td>\r\n                            <span className=\"td-content\">\r\n                            <strong>\r\n                                {humanReadableFormattedDateString(media.createdAt)}\r\n                            </strong>\r\n                            <span>{getDatetimeIn12Hours(media.createdAt)}</span>\r\n                            </span>\r\n                        </td>\r\n                        <td>{parseMeta(media)}</td>\r\n                        <td>\r\n                            {media.tags.map((tag) => {\r\n                            return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1\">\r\n                                {tag}\r\n                                </span>\r\n                            );\r\n                            })}\r\n                            <span\r\n                            className=\"down-arrow\"\r\n                            onClick={() => {\r\n                                //setSelectedMedia(media);\r\n                                //setNewTagModal(true);\r\n                            }}\r\n                            >\r\n                            <img\r\n                                className=\"down-arrow-img img-fluid\"\r\n                                src={downArrow}\r\n                                alt=\"arrow\"\r\n                            />\r\n                            </span>\r\n                        </td>\r\n                      </tr>\r\n                    : ''\r\n                      \r\n                    )\r\n                  })}\r\n              </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\"\r\n                    onClick={(e) => setOpenMedia(false)}\r\n                 variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={selectedImage === null}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\SelectScreenModal.jsx",["899","900","901","902"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAllScreens, assignScreenProfile } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport '../components/Table.css';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SelectScreenModal = ({ setShowPublishPopUp, showPublishPopUp, selected, setIsRefresh,selectedScreen, setSelectedScreen}) => {\r\n  const [allScreens, setAllScreens] = useState(\"\");\r\n  const [name, setName] = useState(\"\")\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState(selectedScreen);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    if(selectedScreen){\r\n        setCheckedValues(selectedScreen);\r\n        const newCheckedItems = {};\r\n        selectedScreen.forEach((item) => {\r\n            newCheckedItems[item] = true;\r\n        });\r\n        setCheckedItems(newCheckedItems);\r\n    }\r\n    callAllScreenApi();\r\n  }, [selectedScreen]);\r\n\r\n  const callAllScreenApi = async () => {\r\n    setLoading(true);\r\n    const list = await getAllScreens();\r\n    setLoading(false);\r\n    setAllScreens(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    // const newA = checkedValues;\r\n    // checkedValues.filter((i) => {\r\n    //     return i==event.target.name\r\n    // })\r\n    const newCheckedItems = {\r\n      ...checkedItems,\r\n      [event.target.name]: event.target.checked,\r\n    };\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    allScreens.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    await assignScreenProfile({\r\n        profileId:selected,\r\n        screens: checkedValues,\r\n    })\r\n    .then((response) => {\r\n        //setError(null);\r\n        toast.success(\"Screen has been assigned to Profile successfully !!!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n        });\r\n        setIsRefresh(true);\r\n        setShowPublishPopUp(false);\r\n    })\r\n    .catch(function (error) {\r\n        //setError(error.response.data.message);\r\n    });\r\n  };\r\n  return (\r\n<>\r\n    \r\n    <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n            published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={showPublishPopUp}\r\n        size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>{\"Assign Screen\"}</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowPublishPopUp(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n\r\n      {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\r\n      {!published && (\r\n        <Modal.Body>\r\n          <div className=\"mb-3 mr-3\">\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      id=\"quickplayname\"\r\n                      onChange={(e) => {setName(e.target.value)}}\r\n                      required=\"true\"\r\n                      placeholder=\"Name...\"\r\n                    />\r\n                  </div>\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"width50\">\r\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id=\"checkbox1_exam_all\"\r\n                      onChange={handleSelectAllChange}\r\n                      required=\"\"\r\n                    />\r\n                    <label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor=\"checkbox1_exam_all\"\r\n                    ></label>\r\n                  </div>\r\n                </th>\r\n                <th>Screen</th>\r\n                <th>Last Seen</th>\r\n                <th>Default Composition</th>\r\n                <th>Current Schedule</th>\r\n              </tr>\r\n            </thead>\r\n            {loading  ? (\r\n          <TableLoader colSpan={5}/>\r\n        ) : (\r\n            <tbody>\r\n              {allScreens !== \"\" &&\r\n                allScreens.map((screen) => {\r\n                  return (\r\n                    <tr>\r\n                      <td>\r\n                        <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-control-input\"\r\n                            id={screen._id}\r\n                            name={screen._id}\r\n                            checked={checkedItems[screen._id]}\r\n                            onChange={handleCheckboxChange}\r\n                          />\r\n                          <label\r\n                            className=\"custom-control-label\"\r\n                            htmlFor={screen._id}\r\n                          ></label>\r\n                        </div>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>{screen.name}</strong>\r\n                          <span>{screen.screenLocation}</span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"d-flex align-items-center\">\r\n                          <span className=\"status status-green\"></span>\r\n                          <span className=\"td-content\">\r\n                            <strong>{screen.name}</strong>\r\n                            <span>{screen.screenLocation}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>Default Compo. </td>\r\n                      <td>No Schedule</td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n            )}\r\n          </Table>\r\n        </Modal.Body>\r\n      )}\r\n\r\n      <Modal.Footer>\r\n        {!published && (\r\n          <Row className=\"w-100 m-0\">\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n              <Button\r\n                disabled={checkedValues.length == 0}\r\n                variant=\"\"\r\n                type=\"button\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Publish\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n      \r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectScreenModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\chatBox\\MsgBox.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\fileUploadWithPreview.jsx",["903","904","905"],"import React, { useState } from \"react\";\r\nimport uploadImg from \"../../../img/cloud-computing-icon.png\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nfunction FileUploadWithPreview({\r\n  setShowError,\r\n  setFile,\r\n  setFileMeta,\r\n  setPreviewList,\r\n  previewList,\r\n  isLoading,\r\n}) {\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const handleFileChange = (event) => {\r\n    const selectedFile = event.target.files[0];\r\n    console.log(event);\r\n    if (!selectedFile) {\r\n      //setFile(null);\r\n      //setPreview(null);\r\n      return;\r\n    }\r\n    setShowError(null);\r\n    setFileList((fileList) => [...fileList, selectedFile]);\r\n    setFile((file) => [...file, selectedFile]);\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(selectedFile);\r\n\r\n    reader.onload = function (e) {\r\n      const newP = {\r\n        file: e.target.result,\r\n        isLoading: false,\r\n      };\r\n      setPreviewList((previewList) => [...previewList, newP]);\r\n    };\r\n\r\n    console.log(\"selectedFile\", previewList);\r\n  };\r\n  function handleLoadedMetadata(event) {\r\n    console.log(\"event\", event);\r\n    const fMeta = {\r\n      height: event.target.height,\r\n      width: event.target.width,\r\n      length: event.target.duration,\r\n      fileLoading: false,\r\n    };\r\n    setFileMeta((fileMeta) => [...fileMeta, fMeta]);\r\n  }\r\n\r\n  const handleDelete = (e, item) => {\r\n    e.preventDefault();\r\n    const newPreview = previewList;\r\n    const newFileList = fileList;\r\n    delete newPreview[item];\r\n    delete newFileList[item];\r\n    setPreviewList(newPreview);\r\n    setFile(newFileList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\" d-flex flex-column\">\r\n        {previewList &&\r\n          previewList.length > 0 &&\r\n          previewList.map((item, index) => {\r\n            return (\r\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                {item?.file?.includes(\"image\") ? (\r\n                  <img\r\n                    onLoad={handleLoadedMetadata}\r\n                    src={item.file}\r\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\r\n                    alt=\"File Preview\"\r\n                  />\r\n                ) : item?.file?.includes(\"video\") ? (\r\n                  <video\r\n                    onLoadedMetadata={handleLoadedMetadata}\r\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\r\n                    src={item.file}\r\n                    controls\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n                <img\r\n                  onClick={(e) => handleDelete(e, index)}\r\n                  src={deleteIcon}\r\n                  style={{ width: \"30px\", height: \"30px\" }}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        <div className=\"text-center\">{isLoading && <CircularProgress />}</div>\r\n      </div>\r\n      {/* {previewList.length === 0 && ( */}\r\n      <div\r\n        className=\"upload-file-container relative d-flex align-items-center justify-content-center flex-column\"\r\n        style={{ position: \"relative\" }}\r\n      >\r\n        {previewList.length === 0 && (\r\n          <div className=\" d-flex align-items-center justify-content-center flex-column\">\r\n            <div className=\"upload-flie-img\">\r\n              <img className=\"upload-file\" src={uploadImg} alt=\"upload-img\" />\r\n            </div>\r\n            <h6>Click here to upload files</h6>\r\n          </div>\r\n        )}\r\n\r\n        {previewList.length > 0 && (\r\n          <button\r\n            className={`btn btn-primary btn-block primary-btn add-file-media`}\r\n          >\r\n            + Add More\r\n          </button>\r\n        )}\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*,video/*\"\r\n          className=\"upload-file-textfield\"\r\n          onChange={handleFileChange}\r\n        />\r\n      </div>\r\n      {/* )} */}\r\n      {/* \r\n      {previewList.length > 0 && (\r\n        <div>\r\n          <button>+ Add More</button>\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*,video/*\"\r\n            className=\"upload-file-textfield\"\r\n            onChange={handleFileChange}\r\n          />\r\n        </div>\r\n      )} */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FileUploadWithPreview;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\editSelectedComposition.jsx",["906","907","908","909","910"],"import { useCallback, useState } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\r\nimport { BASE_URL } from \"../../utils/api\";\r\nimport ImageCroper from \"../components/cropImage\";\r\nimport getCroppedImg from \"../components/cropImage/cropImage\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nconst EditSelectedComposition = ({\r\n  composition,\r\n  setEditSelected,\r\n  updateViewType,\r\n}) => {\r\n  const getDefault = composition.fitToScreen\r\n    ? \"fitScreen\"\r\n    : composition.crop\r\n    ? \"crop\"\r\n    : \"aspectRation\";\r\n  const [viewImage, setViewImage] = useState(getDefault);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [zoom, setZoom] = useState(\r\n    composition.crop ? composition.crop.zoom : 1\r\n  );\r\n\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(\r\n    composition.crop ? composition.crop : null\r\n  );\r\n  const handleUpload = async () => {\r\n    const data = {\r\n      ...croppedAreaPixels,\r\n      zoom: zoom,\r\n    };\r\n    let ImgUrl = \"\";\r\n    if (viewImage === \"crop\") {\r\n      const getData = await getCroppedImg(\r\n        `${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`,\r\n        croppedAreaPixels\r\n      );\r\n      ImgUrl = getData;\r\n    } else {\r\n      ImgUrl = composition.url;\r\n    }\r\n\r\n    updateViewType(data, viewImage, ImgUrl);\r\n    setEditSelected(null);\r\n  };\r\n\r\n  const handleOptionChange = (e) => {\r\n    setViewImage(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview\"\r\n      show={true}\r\n      size=\"xl\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setEditSelected(null)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div className=\"custom-container\">\r\n          <div className=\"form-check\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"viewImage\"\r\n              value=\"fitScreen\"\r\n              id=\"fitScreen\"\r\n              onChange={handleOptionChange}\r\n              defaultChecked={viewImage === \"fitScreen\"}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"fitScreen\">\r\n              Fit to Screen\r\n            </label>\r\n          </div>\r\n          <div className=\"form-check\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"viewImage\"\r\n              value=\"aspectRation\"\r\n              id=\"aspectRation\"\r\n              onChange={handleOptionChange}\r\n              defaultChecked={viewImage === \"aspectRation\"}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"aspectRation\">\r\n              Maintain Aspect Ratio\r\n            </label>\r\n          </div>\r\n          {composition.type !== \"video\" && (\r\n            <div className=\"form-check\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"radio\"\r\n                name=\"viewImage\"\r\n                value=\"crop\"\r\n                id=\"crop\"\r\n                onChange={handleOptionChange}\r\n                defaultChecked={viewImage === \"crop\"}\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"crop\">\r\n                Crop\r\n              </label>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {composition && composition.type === \"image\" && (\r\n          <>\r\n            <div\r\n              className=\"basic-list-group image-preview-container media-content image-preview-editable\"\r\n              style={{\r\n                border: \"1px solid\",\r\n                marginTop: viewImage == \"crop\" ? \"0%\" : \"4%\",\r\n                height: viewImage == \"crop\" ? \"560px\" : \"560px\",\r\n              }}\r\n            >\r\n              {viewImage === \"crop\" && (\r\n                <ImageCroper\r\n                  imgSrc={`${composition.url}`}\r\n                  zoom={zoom}\r\n                  setZoom={setZoom}\r\n                  croppedAreaPixels={croppedAreaPixels}\r\n                  setCroppedAreaPixels={setCroppedAreaPixels}\r\n                />\r\n              )}\r\n              {viewImage !== \"crop\" && (\r\n                <img\r\n                  className=\"webplayer-preview-img\"\r\n                  style={{\r\n                    objectFit: `${\r\n                      viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                    }`,\r\n                  }}\r\n                  src={`${BASE_URL}${composition.url}`}\r\n                  alt=\"media-img\"\r\n                />\r\n              )}\r\n            </div>{\" \"}\r\n            {viewImage === \"crop\" && (\r\n              <div className=\"controls\">\r\n                <input\r\n                  type=\"range\"\r\n                  value={zoom}\r\n                  min={1}\r\n                  max={3}\r\n                  step={0.1}\r\n                  aria-labelledby=\"Zoom\"\r\n                  onChange={(e) => {\r\n                    setZoom(e.target.value);\r\n                  }}\r\n                  className=\"zoom-range\"\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n        {composition && composition.type === \"video\" && (\r\n          <div\r\n            className={`basic-list-group image-preview-container media-content image-preview-editable ${\r\n              viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n            }`}\r\n            style={{ border: \"1px solid\", marginTop: \"15px\" }}\r\n          >\r\n            <VideoThumbnail\r\n              videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`}\r\n              thumbnailHandler={(thumbnail) => console.log(thumbnail)}\r\n              width={1280}\r\n              height={720}\r\n            />\r\n          </div>\r\n        )}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <div className=\"loader-button-container\">\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            disabled={isLoading}\r\n            className={`btn btn-primary btn-block primary-btn`}\r\n            onClick={() => handleUpload()}\r\n          >\r\n            {isLoading ? <div className=\"loader\"></div> : \"Apply\"}\r\n          </Button>\r\n        </div>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditSelectedComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\group.jsx",["911","912","913","914","915","916","917"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { deleteGroups, updateGroups } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddUserModal from '../../modals/AddUserModal';\r\n\r\nconst Group = ({groups, setIsRefresh, isRefresh }) => {\r\n    const [showAddUserModel, setShowAddUserModel] = useState(false);\r\n    const [user, setUser] = useState(null);\r\n\r\n    const deleteuserRecord = async (e, id) => {\r\n        e.preventDefault();\r\n        await deleteGroups(id);\r\n        toast.success(\"Group has been deleted successfully !!!\", {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            theme: \"light\",\r\n        });\r\n        setIsRefresh(!isRefresh);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <AddUserModal open={showAddUserModel} setShowAddUserModel={setShowAddUserModel} setIsRefresh={setIsRefresh} user={user} setUser={setUser} type={'edit'}/>\r\n        <Table responsive className=\"custom-table screen-table\">\r\n            <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Description</th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {groups && groups.groups !== \"\" &&\r\n                groups.groups.map((item) => {\r\n                return (\r\n                    <tr id={item._id}>\r\n                    <td>\r\n                        <span className=\"td-content\">\r\n                        <strong>{item.name}</strong>\r\n                        </span>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"d-flex align-items-center\">\r\n                        <span className=\"td-content\">\r\n                            <strong>{item.description}</strong>\r\n                        </span>\r\n                        </span>\r\n                    </td>\r\n                    <td>{item.createdAt}</td>\r\n                    <td>\r\n                        <Dropdown className=\"dropdown-toggle-menu\">\r\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                            <span className=\"table-menu-icon\">\r\n                            <img\r\n                                className=\"menu-img img-fluid\"\r\n                                src={menuIcon}\r\n                                alt=\"menu-icon\"\r\n                            />\r\n                            </span>\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item \r\n                            onClick={(e)=>{deleteuserRecord(e, item._id)}}\r\n                            className=\"dropdown-list-item\">\r\n                            <div className=\"d-flex\">\r\n                                <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                    className=\"dropdown-list-img img-fluid\"\r\n                                    src={takeScreenshotIcon}\r\n                                    alt=\"menu-icon\"\r\n                                />\r\n                                </div>\r\n                                <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">Delete Group</span>\r\n                                </div>\r\n                            </div>\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </td>\r\n                    </tr>\r\n                );\r\n                })}\r\n            </tbody>\r\n        </Table>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Group;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\roles.jsx",["918","919","920","921","922","923","924","925","926"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Table,\r\n  Dropdown,\r\n  Button,\r\n  Modal,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n} from \"react-bootstrap\";\r\nimport { updateRoles } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Editor } from \"draft-js\";\r\n\r\nconst Roles = ({ roles, setIsRefresh, isRefresh }) => {\r\n  const [rolesData, setRolesData] = useState(roles.roles);\r\n  const [rolesType, setRolesType] = useState(\"OPERATOR\");\r\n  const [makeRefresh, setMakeRefresh] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setMakeRefresh(false);\r\n    if (roles) {\r\n      setRolesData(roles.roles);\r\n    }\r\n  }, [makeRefresh, rolesData]);\r\n\r\n  const handleChange = async (e, set, section, type, val) => {\r\n    rolesData[set][section][type] = val;\r\n    await setRolesData(rolesData);\r\n    setMakeRefresh(true);\r\n  };\r\n\r\n  const handleRoles = async (e) => {\r\n    e.preventDefault();\r\n    console.log(rolesData);\r\n    await updateRoles(rolesData)\r\n      .then((response) => {\r\n        //setError(null);\r\n        toast.success(\"Roles has been updated successfully !\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        });\r\n        setIsRefresh(true);\r\n      })\r\n      .catch(function (error) {\r\n        //setError(error.response.data.message)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex mb-4\">\r\n        <button\r\n          className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn \"\r\n          onClick={(e) => {\r\n            handleRoles(e);\r\n          }}\r\n        >\r\n          Update\r\n        </button>\r\n      </div>\r\n      <Row className=\"w-100\" style={{ marginTop: \"10px\" }}>\r\n        <Col lg={3} md={3} sm={3} xs={3} className=\"pl-0 pr-2 card\">\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"OPERATOR\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"OPERATOR\");\r\n              }}\r\n            >\r\n              Operator\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"MANAGER\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"MANAGER\");\r\n              }}\r\n            >\r\n              Manager\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className={`btn btn-sm w-100 text-left ${\r\n                rolesType === \"EDITOR\" ? \"btn-success role-btn-bg\" : \"\"\r\n              }`}\r\n              onClick={(e) => {\r\n                setRolesType(\"EDITOR\");\r\n              }}\r\n            >\r\n              Editor\r\n            </button>\r\n          </div>\r\n        </Col>\r\n        <Col lg={9} md={9} sm={9} xs={9} className=\"pl-2 pr-0\">\r\n          <Table responsive className=\"custom-table screen-table roles-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Permission</th>\r\n                <th>View</th>\r\n                <th>Add</th>\r\n                <th>edit</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            {rolesType && rolesType == \"OPERATOR\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.OPERATOR.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.OPERATOR.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.OPERATOR.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-OPERATOR-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-OPERATOR-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"OPERATOR\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.OPERATOR.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.OPERATOR.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            {rolesType && rolesType == \"MANAGER\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.MANAGER.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.MANAGER.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.MANAGER.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-MANAGER-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-MANAGER-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"MANAGER\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.MANAGER.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.MANAGER.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n            {rolesType && rolesType == \"EDITOR\" && (\r\n              <tbody>\r\n                <tr>\r\n                  <td>APPS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.APPS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.APPS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.APPS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-apps-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-apps-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"APPS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.APPS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.APPS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>ASSETS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.ASSETS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.ASSETS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.ASSETS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-ASSETS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-ASSETS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"ASSETS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.ASSETS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.ASSETS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>COMPOSITION</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.COMPOSITION.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.COMPOSITION.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.COMPOSITION.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-COMPOSITION-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-COMPOSITION-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"COMPOSITION\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.COMPOSITION.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.COMPOSITION.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>QUICKPLAY</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.QUICKPLAY.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.QUICKPLAY.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.QUICKPLAY.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-QUICKPLAY-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-QUICKPLAY-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"QUICKPLAY\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.QUICKPLAY.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.QUICKPLAY.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>REPORTS</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.REPORTS.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.REPORTS.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.REPORTS.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-REPORTS-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-REPORTS-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"REPORTS\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.REPORTS.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.REPORTS.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCHEDULE</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.SCHEDULE.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.SCHEDULE.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.SCHEDULE.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCHEDULE-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCHEDULE-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCHEDULE\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.SCHEDULE.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCHEDULE.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>SCREEN</td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-view`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-view`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"view\",\r\n                          !rolesData.EDITOR.SCREEN.view\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.view}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-add`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-add`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"add\",\r\n                          !rolesData.EDITOR.SCREEN.add\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.add}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-edit`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-edit`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"edit\",\r\n                          !rolesData.EDITOR.SCREEN.edit\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.edit}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className={`day-checkbox`}\r\n                      name={`checkbox-EDITOR-SCREEN-delete`}\r\n                      type=\"checkbox\"\r\n                      id={`checkbox-EDITOR-SCREEN-delete`}\r\n                      onChange={(e) =>\r\n                        handleChange(\r\n                          e,\r\n                          \"EDITOR\",\r\n                          \"SCREEN\",\r\n                          \"delete\",\r\n                          !rolesData.EDITOR.SCREEN.delete\r\n                        )\r\n                      }\r\n                      checked={rolesData.EDITOR.SCREEN.delete}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            )}\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Roles;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddGroup.jsx",["927","928","929","930","931","932","933","934"],"import React, {useState, useEffect} from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport Select from \"react-select\";\r\nimport {addGroups, updateGroups} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddGroup = ({ open, setShowGroupModel , setIsRefresh, group, type}) => {\r\n    console.log(\"group\",group)\r\n    const [name, setName] = useState(group ? group.name : \"\");\r\n    const [description, setDescription] = useState(group ? group.description : \"\");\r\n    const [error, setError] = useState('');\r\n    useEffect(() => {\r\n        if(group){   \r\n            setName(group.name);\r\n            setDescription(group.descripiton);\r\n        }\r\n    },[group])\r\n    const options = [\r\n        { value: \"MANAGER\", label: \"Manager\" },\r\n        { value: \"EDITOR\", label: \"Editor\" },\r\n      ];\r\n    const handleSubmit = async(e, type) => {\r\n        e.preventDefault();\r\n        let err = '';\r\n        if(name == ''){\r\n            err = 'Name is required';\r\n        }\r\n        else if(description == ''){\r\n            err = 'Description is required';\r\n        }\r\n        if(err){\r\n            setError(err);\r\n            return false;\r\n        }\r\n        console.log(\"error\",err)\r\n        \r\n        if(err == ''){\r\n            if(!type){\r\n                const postData = {\r\n                    name,description\r\n                }\r\n                await addGroups(postData)\r\n                  .then(response => {\r\n                    setError(null);\r\n                    setShowGroupModel(false);\r\n                    toast.success(\"Group has been added successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }else{\r\n                console.log(\"Update\");\r\n                const postData = {\r\n                    name,groupId:group._id,description\r\n                }\r\n                await updateGroups(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    setShowGroupModel(false);\r\n                    toast.success(\"User has been updated successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }\r\n            console.log(\"Submit\",name, description);\r\n            \r\n            \r\n        }\r\n        \r\n    }\r\n    return (\r\n        <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n        show={open}\r\n        size=\"md\"\r\n        >\r\n        <Modal.Header>\r\n            <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}Group</Modal.Title>\r\n            <Button\r\n                variant=\"\"\r\n                className=\"close\"\r\n                onClick={() => setShowGroupModel(false)}\r\n            >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n            </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Row>\r\n                {error && <h5 class=\"alert alert-danger text-center\">{error}</h5>}\r\n                <Col lg={12} md={12} sm={12} xs={12}>\r\n                    <label className=\"mt-3\">Enter Name</label>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}\r\n                            className=\"form-control input-default form-field\"\r\n                            placeholder=\"Enter Name\"\r\n                            onChange={(e) => {setName(e.target.value)}}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n                <Col lg={12} md={12} sm={12} xs={12}>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"mt-3\">Enter Description</label>\r\n                        <textarea\r\n                            name=\"description\"\r\n                            value={description}\r\n                            className=\"form-control input-default form-field\"\r\n                            placeholder=\"Enter Description\"\r\n                            onChange={(e) => {setDescription(e.target.value)}}>\r\n                        </textarea>\r\n                    </div>\r\n                </Col>\r\n            \r\n            </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Row className=\"w-100 m-0\">\r\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                    <Button \r\n                        className=\"cancel-btn w-100\"\r\n                        variant=\"outline-light\"\r\n                        onClick={() => setShowGroupModel(false)}\r\n                    >\r\n                    Cancel\r\n                    </Button>\r\n                </Col>\r\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                    <Button\r\n                    variant=\"\"\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary btn-block primary-btn\"\r\n                    onClick={(e) => handleSubmit(e, type)}\r\n                    >\r\n                    Add Group\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddGroup;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddUserModal.jsx",["935","936","937","938","939","940","941"],"import React, {useState, useEffect} from \"react\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\r\nimport Select from \"react-select\";\r\nimport {addUsers, updateUsers} from \"../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst AddUser = ({ open, setShowAddUserModel , setIsRefresh, user, type}) => {\r\n    console.log(\"user\",user)\r\n    const [name, setName] = useState(user ? user.name : \"\");\r\n    const [email, setEmail] = useState(user ? user.email : \"\");\r\n    const [password, setPassword] = useState(user ? user.password : \"\");\r\n    const [role, setRole] = useState(user ? {value:user.role.toUpperCase(),label:user.role} : \"\");\r\n    const [error, setError] = useState('');\r\n    useEffect(() => {\r\n        if(user){   \r\n            setName(user.name);\r\n            setEmail(user.email);\r\n            setPassword(user.password);\r\n            setRole({value:user.role.toUpperCase(),label:user.role});\r\n        }\r\n    },[user])\r\n    const options = [\r\n        { value: \"MANAGER\", label: \"Manager\" },\r\n        { value: \"EDITOR\", label: \"Editor\" },\r\n        { value: \"OPERATOR\", label: \"Operator\" },\r\n      ];\r\n    const handleSubmit = async(e, type) => {\r\n        e.preventDefault();\r\n        let err = '';\r\n        if(name == ''){\r\n            err = 'Name is required';\r\n        }\r\n        else if(password == '' && type == null){\r\n            err = 'password is required';\r\n        }\r\n        else if(email == ''){\r\n            err = 'Email is required';\r\n        }\r\n        else if(role == null){\r\n            err = 'Role is required';\r\n        } \r\n        if(err){\r\n            setError(err);\r\n            return false;\r\n        }\r\n        console.log(\"error\",err)\r\n        \r\n        if(err == ''){\r\n            if(!type){\r\n                const postData = {\r\n                    name, email, password, role:role.value\r\n                }\r\n                await addUsers(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    setShowAddUserModel(false);\r\n                    toast.success(\"User has been added successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }else{\r\n                console.log(\"Update\");\r\n                const postData = {\r\n                    name,role:role.value,userId:user._id\r\n                }\r\n                await updateUsers(postData)\r\n                  .then(response => {\r\n                    console.log(response);\r\n                    setError(null);\r\n                    setShowAddUserModel(false);\r\n                    toast.success(\"User has been updated successfully !!!\", {\r\n                        position: \"top-right\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        theme: \"light\",\r\n                      });\r\n                      setIsRefresh(true)\r\n                  }).catch(function (error) {\r\n                    setError(error.response.data.message)\r\n                  });\r\n            }\r\n            console.log(\"Submit\",name, email, password,role);\r\n            \r\n            \r\n        }\r\n        \r\n    }\r\n  return (\r\n    <Modal\r\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\r\n      show={open}\r\n      size=\"md\"\r\n    >\r\n      <Modal.Header>\r\n        <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}User</Modal.Title>\r\n        <Button\r\n          variant=\"\"\r\n          className=\"close\"\r\n          onClick={() => setShowAddUserModel(false)}\r\n        >\r\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n        </Button>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Row>\r\n            {error && <h5 class=\"alert alert-danger text-center\">{error}</h5>}\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n          <label className=\"mt-3\">Enter Name</label>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Name\"\r\n                onChange={(e) => {setName(e.target.value)}}\r\n              />\r\n            </div>\r\n          </Col>\r\n\r\n          {!type && <><Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Enter Email</label>\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Email\"\r\n                onChange={(e) => {setEmail(e.target.value)}}\r\n              />\r\n            </div>\r\n          </Col><Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Enter Password</label>\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={password}\r\n                className=\"form-control input-default form-field\"\r\n                placeholder=\"Enter Password\"\r\n                onChange={(e) => {setPassword(e.target.value)}}\r\n                autoComplete={false}\r\n              />\r\n            </div>\r\n          </Col></>}\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-3\">Select Role</label>\r\n              <Select\r\n              value={role}\r\n              onChange={setRole}\r\n              placeholder=\"Select Role\"\r\n              options={options}\r\n              className=\"app-option\"\r\n            />\r\n            </div>\r\n          </Col>\r\n          \r\n        </Row>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Row className=\"w-100 m-0\">\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n            <Button \r\n                className=\"cancel-btn w-100\"\r\n                variant=\"outline-light\"\r\n                onClick={() => setShowAddUserModel(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Col>\r\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n            <Button\r\n              variant=\"\"\r\n              type=\"button\"\r\n              className=\"btn btn-primary btn-block primary-btn\"\r\n              onClick={(e) => handleSubmit(e, type)}\r\n            >\r\n              {type && type === 'edit' ? 'Update User' : 'Add User'}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddUser;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\defaultComposition.jsx",["942"],"import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nimport emptyMediaImg from \"../../../images/card/1.png\";\r\nimport { BASE_URL, getAllComposition, vendorProfile } from \"../../../utils/api\";\r\nimport DefaultCompositionModal from \"../../modals/DefaultCompositionModal\";\r\n\r\nconst DefaultComposition = () => {\r\n  const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\r\n  const [defaultCompositionShow, setDefaultCompositionShow] = useState(false);\r\n  const [compositionList, setCompositionList] = useState();\r\n  const [showDefaultComposition, setShowDefaultComposition] = useState(\"\");\r\n  console.log(showDefaultComposition, \"lloooooo\");\r\n  async function getComPosition() {\r\n    await getAllComposition().then((res) => {\r\n      console.log(res, \"res push screen, DefaultComposition\");\r\n      setCompositionList(res);\r\n    });\r\n  }\r\n  async function getVendorProfile() {\r\n    await vendorProfile().then((res) => {\r\n      console.log(res, \"res push screen, vendorProfile\");\r\n      setShowDefaultComposition(res.data.data.defaultComposition);\r\n    });\r\n  }\r\n  const content = showDefaultComposition?.media?.zones[0].content[0];\r\n  useEffect(() => {\r\n    getComPosition();\r\n    getVendorProfile();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"row settings-default\">\r\n        <Col xl=\"6\">\r\n          <div className=\"default-composition-preview\">\r\n            <div className=\"thumbnail\">\r\n              {content?.type === \"image\" && (\r\n                <img\r\n                  className=\" imgContent\"\r\n                  src={`${BASE_URL}${content.url}`}\r\n                  alt=\"media-img\"\r\n                />\r\n              )}\r\n              {content?.type !== \"image\" && content?.type !== \"video\" && (\r\n                <img\r\n                  className=\"imgContent\"\r\n                  src={defaultMediaUrl}\r\n                  alt=\"Card cap\"\r\n                />\r\n              )}\r\n              {content?.type === \"video\" && (\r\n                <VideoThumbnail\r\n                  videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${content.url}`}\r\n                  thumbnailHandler={(thumbnail) =>\r\n                    console.log(thumbnail, \"pppppp\")\r\n                  }\r\n                  width={426}\r\n                  height={240}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col xl=\"6\">\r\n          <div className=\"mb-4\">\r\n            <h4 className=\"card-title card-intro-title\">\r\n              Organisation default composition\r\n            </h4>\r\n            <p>\r\n              The composition will be applied to all newly added displays in the\r\n              organization\r\n            </p>\r\n            <p className=\"font-weight-bold\">\r\n              Default Composition: {showDefaultComposition?.media?.name}\r\n              <span\r\n                className=\"btn-icon-right text-info\"\r\n                onClick={() => {\r\n                  setDefaultCompositionShow(true);\r\n                }}\r\n              >\r\n                <i className=\"fa fa-pencil\" />\r\n              </span>\r\n            </p>\r\n            {showDefaultComposition?.duration && (\r\n              <p className=\"font-weight-bold\">\r\n                Duration: {showDefaultComposition?.duration} seconds\r\n              </p>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </div>\r\n      <DefaultCompositionModal\r\n        close={() => setDefaultCompositionShow(false)}\r\n        show={defaultCompositionShow}\r\n        compositionList={compositionList}\r\n        getVendorProfile={() => getVendorProfile()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultComposition;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\settings\\User.jsx",["943","944","945","946","947","948","949"],"import React, { useState, useEffect } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport assignIcon from \"../../../img/assign-icon.png\";\r\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\r\nimport { deleteUsers, updateUsers } from \"../../../utils/api\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddUserModal from '../../modals/AddUserModal';\r\n\r\nconst User = ({ users, setIsRefresh, isRefresh }) => {\r\n//   const [showNewTagModal, setNewTagModal] = useState(false);\r\n//   const [selectedScreen, setSelectedScreen] = useState(\"\");\r\n//   const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\nconst [showAddUserModel, setShowAddUserModel] = useState(false);\r\nconst [user, setUser] = useState(null);\r\n\r\nconst deleteuserRecord = async (e, id) => {\r\n  e.preventDefault();\r\n  await deleteUsers(id);\r\n  toast.success(\"User has been deleted successfully !!!\", {\r\n    position: \"top-right\",\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: \"light\",\r\n  });\r\n  setIsRefresh(!isRefresh);\r\n}\r\n\r\nconst handleEditiUser = (e, item) => {\r\n  e.preventDefault();\r\n  setShowAddUserModel(true);\r\n  setUser(item)\r\n  console.log(\"Add User\")\r\n}\r\n\r\n  return (\r\n    <>\r\n    <AddUserModal open={showAddUserModel} setShowAddUserModel={setShowAddUserModel} setIsRefresh={setIsRefresh} user={user} setUser={setUser} type={'edit'}/>\r\n      <Table responsive className=\"custom-table screen-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Email</th>\r\n            <th>Created Date</th>\r\n            <th>Role</th>\r\n            <th>status</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users !== \"\" &&\r\n            users.map((item) => {\r\n              return (\r\n                <tr id={item._id}>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>{item.name}</strong>\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span className=\"d-flex align-items-center\">\r\n                      <span className=\"status status-green\"></span>\r\n                      <span className=\"td-content\">\r\n                        <strong>{item.email}</strong>\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n                  <td>{item.createdAt}</td>\r\n                  <td>{item.role}</td>\r\n                  <td>{item.isVerified == true ? 'Active' : \"Deactive\"}</td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        {/* <Dropdown.Item \r\n                          // onClick={() => {\r\n                          //   setShowPublishPopUp(true);\r\n                          //   setSelectedScreen(screen._id)\r\n                          // }}\r\n                          className=\"dropdown-list-item\"\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={defaultComparisonIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Disable User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item> */}\r\n                        <Dropdown.Item \r\n                          onClick={(e) => {handleEditiUser(e, item)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={assignIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Edit User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                        {/* <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Change Password</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item> */}\r\n                        <Dropdown.Item \r\n                           onClick={(e)=>{deleteuserRecord(e, item._id)}}\r\n                           className=\"dropdown-list-item\">\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={takeScreenshotIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete User</span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\listScreens.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\AddScreenModal.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\media\\listMedia.jsx",["950","951","952","953","954","955","956","957","958","959","960"],"import React, { useState } from \"react\";\r\nimport { Table, Dropdown } from \"react-bootstrap\";\r\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\r\nimport downArrow from \"../../../img/down-arrow.png\";\r\nimport menuIcon from \"../../../img/menu-icon.png\";\r\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\r\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\r\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport deleteIcon from \"../../../img/delete-icon.png\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../../utils/UtilsService\";\r\nimport cancelIcon from \"../../../img/cancel-icon.png\";\r\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\r\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\r\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\r\n\r\nconst ListMedia = ({ allMedia, callAllMediaApi }) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [selectedMedia, setSelectedMedia] = useState(\"\");\r\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\r\n  const [preview, setPreview] = useState(false);\r\n  const [imgUrl, setImgUrl] = useState(null);\r\n  const [imgType, setImgType] = useState(null);\r\n\r\n  // use effect\r\n\r\n  const handleDelete = async () => {\r\n    setDeleteModal(false);\r\n    await deleteMedia(selectedMedia._id);\r\n    callAllMediaApi();\r\n  };\r\n\r\n  const handlePublishcOpen = (media) => {\r\n    setShowPublishPopUp(media);\r\n  };\r\n\r\n  const showPreview = (img, type) => {\r\n    setImgType(type);\r\n    setImgUrl(img);\r\n    setPreview(true);\r\n  };\r\n\r\n  const parseMeta = (media) => {\r\n    let meta = {};\r\n    //const meta = JSON.parse(media.properties);\r\n    if(media.type == 'image' || media.type == 'video'){\r\n      meta = JSON.parse(media.properties);\r\n    }else{\r\n      const jsonData = JSON.parse(media.appData);\r\n      meta = {\r\n        length:10,\r\n        height:10,\r\n        duration:0,\r\n        size:0\r\n      };\r\n    }\r\n    return (\r\n      <span className=\"td-content\">\r\n        {media?.type === \"image\" && (\r\n          <strong>\r\n            {meta.height} x {meta.width}\r\n          </strong>\r\n        )}\r\n        {media?.type === \"video\" && meta?.length && (\r\n          <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\r\n        )}\r\n        {meta?.size && <span>{meta.size} MB</span>}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const videoMetaDuration = (media) => {\r\n    const properties = JSON.parse(media?.properties);\r\n    if (properties && properties.length) {\r\n      return (properties.length.toFixed(0) / 60).toFixed(0);\r\n    }\r\n    return null;\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 custom-modal quick-modal custom-modal-medium\"\r\n        show={preview}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title className=\"mr-auto\">Image Preview</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setPreview(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"flex-wrap align-items-center\">\r\n            {imgType && imgType === \"image\" && (\r\n              <img\r\n                src={`${BASE_URL}${imgUrl}`}\r\n                style={{ width: \"100%\", height: \"500px\", objectFit: \"fill\" }}\r\n              />\r\n            )}\r\n            {imgType && imgType === \"video\" && (\r\n              <video\r\n                className=\"video-js\"\r\n                autoPlay\r\n                muted\r\n                loop\r\n                style={{ width: \"100%\", height: \"500px\" }}\r\n              >\r\n                <source src={`${BASE_URL}${imgUrl}`} type=\"video/mp4\" />\r\n              </video>\r\n            )}\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n      {allMedia && allMedia.length !== 0 ? (\r\n        <Table responsive className=\"custom-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Type</th>\r\n              <th>Uploaded Date</th>\r\n              <th>Properties</th>\r\n              <th>Tags</th>\r\n              <th>More</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {allMedia.map((media) => {\r\n              return (\r\n                <tr key={media._id}>\r\n                  <td>\r\n                    <span className=\"td-content d-flex name-td-content\">\r\n                      <span\r\n                        className={`name-img mr-2  ${\r\n                          media?.type === \"video\" && \"videotableName\"\r\n                        }`}\r\n                      >\r\n                        {media?.type === \"image\" && (\r\n                          <div\r\n                            onClick={() => {\r\n                              showPreview(media.title, media.type);\r\n                            }}\r\n                            className=\"media-list-img-zoom\"\r\n                          >\r\n                            <span className=\"media-list-img-zoom-plus\">+</span>\r\n                            <img\r\n                              className=\"media-img img-fluid\"\r\n                              src={`${BASE_URL}${media?.title}`}\r\n                              alt=\"media-img\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                        {media?.type === \"video\" && (\r\n                          <button\r\n                            onClick={() => {\r\n                              showPreview(media.title, media.type);\r\n                            }}\r\n                          >\r\n                            {videoMetaDuration(media)}\r\n                          </button>\r\n                        )}\r\n                      </span>\r\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                        <strong>\r\n                          {\r\n                            media.title.split(\"/\")[\r\n                              media.title.split(\"/\").length - 1\r\n                            ]\r\n                          }\r\n                        </strong>\r\n                        <span>{media.createdBy.name}</span>\r\n                      </span>\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\r\n                  </td>\r\n                  <td>\r\n                    <span className=\"td-content\">\r\n                      <strong>\r\n                        {humanReadableFormattedDateString(media.createdAt)}\r\n                      </strong>\r\n                      <span>{getDatetimeIn12Hours(media.createdAt)}</span>\r\n                    </span>\r\n                  </td>\r\n                  <td>{parseMeta(media)}</td>\r\n                  <td>\r\n                    {media.tags.map((tag) => {\r\n                      return (\r\n                        <span className=\"my-phone-tag text-truncate ml-1\">\r\n                          {tag}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                    <span\r\n                      className=\"down-arrow\"\r\n                      onClick={() => {\r\n                        setSelectedMedia(media);\r\n                        setNewTagModal(true);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"down-arrow-img img-fluid\"\r\n                        src={downArrow}\r\n                        alt=\"arrow\"\r\n                      />\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <Dropdown className=\"dropdown-toggle-menu\">\r\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\r\n                        <span className=\"table-menu-icon\">\r\n                          <img\r\n                            className=\"menu-img img-fluid\"\r\n                            src={menuIcon}\r\n                            alt=\"menu-icon\"\r\n                          />\r\n                        </span>\r\n                      </Dropdown.Toggle>\r\n                      <Dropdown.Menu>\r\n                        { media && media.type == 'image' || media.type == 'video' ?\r\n                          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\r\n                            <div\r\n                              className=\"d-flex\"\r\n                              onClick={() => {\r\n                                handlePublishcOpen(media);\r\n                              }}\r\n                            >\r\n                              <div className=\"dropdown-list-icon\">\r\n                                <img\r\n                                  className=\"dropdown-list-img img-fluid\"\r\n                                  src={defaultComparisonIcon}\r\n                                  alt=\"menu-icon\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"dropdown-menu-list\">\r\n                                <span className=\"menu-heading\">\r\n                                  Publish on Screen\r\n                                </span>\r\n                                <span className=\"menu-description\">\r\n                                  Get to know more about screen info\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </Dropdown.Item>\r\n                         :\r\n                         <></>}\r\n                        \r\n                        <Dropdown.Item\r\n                          href=\"#\"\r\n                          className=\"dropdown-list-item\"\r\n                          onClick={() => {\r\n                            setSelectedMedia(media);\r\n                            setDeleteModal(true);\r\n                          }}\r\n                        >\r\n                          <div className=\"d-flex\">\r\n                            <div className=\"dropdown-list-icon\">\r\n                              <img\r\n                                className=\"dropdown-list-img img-fluid\"\r\n                                src={deleteIcon}\r\n                                alt=\"menu-icon\"\r\n                              />\r\n                            </div>\r\n                            <div className=\"dropdown-menu-list\">\r\n                              <span className=\"menu-heading\">Delete</span>\r\n                              <span className=\"menu-description\">\r\n                                Get to know more about screen info\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <div className=\"empty-media text-center\">\r\n          <div class=\"empty-media-img mx-auto\">\r\n            <img\r\n              className=\"media-img img-fluid\"\r\n              src={emptyMediaImg}\r\n              alt=\"media-img\"\r\n            />\r\n          </div>\r\n          <h3>Add Media</h3>\r\n          <p>\r\n            Upload your favourite images and videos from the local storage\r\n            <br /> of your device\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          selected={selectedMedia}\r\n          setNewTagModal={setNewTagModal}\r\n        />\r\n      )}\r\n      {showPublishPopUp && (\r\n        <PublishMediaModal\r\n          selected={showPublishPopUp}\r\n          setShowPublishPopUp={setShowPublishPopUp}\r\n          type=\"media\"\r\n        />\r\n      )}\r\n      {deleteModal && (\r\n        <DeleteConfirmation\r\n          setDeleteModal={setDeleteModal}\r\n          callbackFunction={handleDelete}\r\n          text=\"Are you sure you want to delete?\"\r\n          yes={\"Yes Deactivate\"}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default ListMedia;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\generateReportModal.jsx",["961","962","963","964","965","966","967","968","969","970"],"import { Button, Modal } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\n\r\nimport Select from \"react-select\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nconst GenerateReportModal = ({\r\n  close,\r\n  show,\r\n  reportType,\r\n  type,\r\n  setFilter,\r\n  filter,\r\n}) => {\r\n  const history = useHistory();\r\n  const monthOptions = [\r\n    { value: \"01\", label: \"January\" },\r\n    { value: \"02\", label: \"February\" },\r\n    { value: \"03\", label: \"March\" },\r\n    { value: \"04\", label: \"April\" },\r\n    { value: \"05\", label: \"May\" },\r\n    { value: \"06\", label: \"June\" },\r\n    { value: \"07\", label: \"July\" },\r\n    { value: \"08\", label: \"August\" },\r\n    { value: \"09\", label: \"September\" },\r\n    { value: \"10\", label: \"October\" },\r\n    { value: \"11\", label: \"November\" },\r\n    { value: \"12\", label: \"December\" },\r\n  ];\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n  const [selectedYear, setSelectedYear] = useState(null);\r\n  const [filterType, setFilterType] = useState(\"daily\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n\r\n  const yearOptions = [];\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  for (let i = currentYear - 5; i <= currentYear; i++) {\r\n    yearOptions.push({ value: String(i), label: String(i) });\r\n  }\r\n\r\n  // Output the year options\r\n\r\n  const colourStyles = {\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n      // const color = chroma(data.color);\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isFocused ? \"#ed9bc7\" : null,\r\n        color: \"#333333\",\r\n      };\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCurrentDate();\r\n  }, []);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    let sDate = startDate;\r\n    let eDate = endDate;\r\n    if (filterType == \"monthly\") {\r\n      sDate = `${selectedYear.value}-${selectedMonth.value}-01`;\r\n      eDate = `${selectedYear.value}-${selectedMonth.value}-31`;\r\n    }\r\n    setFilter({\r\n      startDate: sDate,\r\n      endDate: eDate,\r\n      filterType,\r\n      selectedMonth,\r\n      selectedYear,\r\n    });\r\n    close();\r\n  };\r\n\r\n  const getCurrentDate = () => {\r\n    let cDate = moment();\r\n    setSelectedMonth({\r\n      value: cDate.format(\"MM\"),\r\n      label: cDate.format(\"MMMM\"),\r\n    });\r\n    setSelectedYear({\r\n      value: cDate.format(\"YYYY\"),\r\n      label: cDate.format(\"YYYY\"),\r\n    });\r\n    setStartDate(cDate.format(\"YYYY-MM-DD\"));\r\n    setEndDate(cDate.format(\"YYYY-MM-DD\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <Modal.Title className=\"mr-auto\">Report</Modal.Title>\r\n\r\n            <p>How would you like to generate your report?</p>\r\n          </div>\r\n\r\n          <Button variant=\"\" className=\"close\" onClick={() => close(false)}>\r\n            <img\r\n              className=\"cancel-icon\"\r\n              src={cancelIcon}\r\n              alt=\"cancel-icon\"\r\n              height=\"25px\"\r\n              width=\"25px\"\r\n            />\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ paddingBottom: \"15px\" }}>\r\n          <form onSubmit={handleSubmit} className=\"row\">\r\n            <div className=\"form-group col-12 mb-0  url-app-form border-0\">\r\n              <div>\r\n                <div className=\"d-flex align-items-center mb-2\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    //className=\"form-control \"\r\n                    checked={filterType == \"daily\"}\r\n                    onChange={(e) => setFilterType(\"daily\")}\r\n                  />\r\n                  <label className=\"mb-0 ml-3\">Daily</label>\r\n                </div>\r\n\r\n                <input\r\n                  type=\"date\"\r\n                  className=\"  form-control \"\r\n                  defaultValue={startDate}\r\n                  placeholder=\"App Name\"\r\n                  onChange={(e) => setStartDate(e.target.value)}\r\n                  required={filterType == \"daily\"}\r\n                  readOnly={filterType !== \"daily\"}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <>\r\n                  <div className=\"d-flex align-items-center mb-2 mt-3\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      //className=\"form-control \"\r\n                      checked={filterType == \"monthly\"}\r\n                      onChange={(e) => setFilterType(\"monthly\")}\r\n                    />\r\n                    <label className=\"mb-0 ml-3\">Monthly</label>\r\n                  </div>\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                      <Select\r\n                        value={selectedMonth}\r\n                        onChange={setSelectedMonth}\r\n                        options={monthOptions}\r\n                        styles={colourStyles}\r\n                        placeholder=\"month\"\r\n                        className=\"app-option\"\r\n                        isDisabled={filterType !== \"monthly\"}\r\n                        required={filterType == \"monthly\"}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                      <Select\r\n                        value={selectedYear}\r\n                        onChange={setSelectedYear}\r\n                        options={yearOptions}\r\n                        styles={colourStyles}\r\n                        placeholder=\"year\"\r\n                        className=\"app-option\"\r\n                        isDisabled={filterType !== \"monthly\"}\r\n                        required={filterType == \"monthly\"}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              </div>\r\n              <div>\r\n                <div className=\"d-flex align-items-center mb-2 mt-3\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    //className=\"form-control \"\r\n                    checked={filterType == \"custom\"}\r\n                    onChange={(e) => setFilterType(\"custom\")}\r\n                  />\r\n                  <label className=\"mb-0 ml-3\">Custom</label>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-6\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"  form-control \"\r\n                      onChange={(e) => setStartDate(e.target.value)}\r\n                      readOnly={filterType !== \"custom\"}\r\n                      defaultValue={startDate}\r\n                      required={filterType == \"custom\"}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-6\">\r\n                    <input\r\n                      type=\"date\"\r\n                      className=\"form-control \"\r\n                      onChange={(e) => setEndDate(e.target.value)}\r\n                      readOnly={filterType !== \"custom\"}\r\n                      required={filterType == \"custom\"}\r\n                      defaultValue={endDate}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"w-100 mt-3\">\r\n              <Button\r\n                variant=\"\"\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block primary-btn\"\r\n                //   onClick={() => setNewTagModal(false)}\r\n              >\r\n                Continue\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GenerateReportModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\layouts\\nav\\SideBar.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\cropImage.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\cropImage\\index.jsx",["971","972","973"],"import React, { useState, useCallback } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Cropper from 'react-easy-crop'\r\n\r\nimport getCroppedImg from \"./cropImage\";\r\nimport { BASE_URL } from \"../../../utils/api\";\r\n\r\nconst ImageCroper = ({\r\n  imgSrc,\r\n  zoom,\r\n  setZoom,\r\n  setCroppedAreaPixels,\r\n  croppedAreaPixels,\r\n}) => {\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  return (\r\n    <Cropper\r\n      image={`${BASE_URL}${imgSrc}`}\r\n      crop={crop}\r\n      zoom={zoom}\r\n      aspect={16 / 9}\r\n      onCropChange={setCrop}\r\n      onCropComplete={onCropComplete}\r\n      onZoomChange={setZoom}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImageCroper;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\screen\\tagInputField.jsx",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\CompolistionListModel.jsx",["974","975","976","977","978"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {setDefaultComposition, getAllComposition } from \"../../utils/api\";\r\nimport TableLoader from \"../components/TableLoader\";\r\nimport '../components/Table.css';\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\r\n\r\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\r\n  const [compositionList, setAllComposition] = useState(\"\");\r\n  const [name, setName] = useState(\"\")\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [checkedValues, setCheckedValues] = useState(null);\r\n  const [published, setPublished] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // use effect\r\n  useEffect(() => {\r\n    getAllCompositionList();\r\n  }, []);\r\n\r\n  const getAllCompositionList = async () => {\r\n    setLoading(true);\r\n    const list = await getAllComposition();\r\n    setLoading(false);\r\n    setAllComposition(list);\r\n  };\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    console.log(event.target)\r\n    // const newCheckedItems = {\r\n    //   ...checkedItems,\r\n    //   [event.target.name]: event.target.checked,\r\n    // };\r\n    // const selectedScreens = [];\r\n    // for (const key in newCheckedItems) {\r\n    //   if (newCheckedItems[key] === true) {\r\n    //     selectedScreens.push(key);\r\n    //   }\r\n    // }\r\n    setCheckedValues(event.target.name);\r\n    //setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSelectAllChange = (event) => {\r\n    const newCheckedItems = {};\r\n    compositionList.forEach((item) => {\r\n      newCheckedItems[item._id] = event.target.checked;\r\n    });\r\n    const selectedScreens = [];\r\n    for (const key in newCheckedItems) {\r\n      if (newCheckedItems[key] === true) {\r\n        selectedScreens.push(key);\r\n      }\r\n    }\r\n    setCheckedValues(selectedScreens);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const screens = [];\r\n    screens[0] = selected;\r\n    await setDefaultComposition({\r\n        screens,\r\n        compositionId: checkedValues\r\n      });\r\n\r\n    setPublished(true);\r\n    setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n      <>\r\n      <Modal\r\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\r\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\r\n        }`}\r\n        show={true}\r\n        size=\"md\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>{type===\"media\" ? \"Publish Media\" : \"Assign Quickplay\"}</Modal.Title>\r\n          <Button\r\n            variant=\"\"\r\n            className=\"close\"\r\n            onClick={() => setShowPublishPopUp(false)}\r\n          >\r\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\r\n          </Button>\r\n        </Modal.Header>\r\n\r\n        {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\r\n        {!published && (\r\n          <Modal.Body>\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"width50\">\r\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"custom-control-input\"\r\n                        id=\"checkbox1_exam_all\"\r\n                        disabled\r\n                      // onChange={handleSelectAllChange}\r\n                        required=\"\"\r\n                      />\r\n                      <label\r\n                        className=\"custom-control-label\"\r\n                        htmlFor=\"checkbox1_exam_all\"\r\n                      ></label>\r\n                    </div>\r\n                  </th>\r\n                  <th>Name</th>\r\n                  <th>Date Added</th>\r\n                  <th>Duration</th>\r\n                  <th>Associated Schedule</th>\r\n                </tr>\r\n              </thead>\r\n              {loading  ? (\r\n            <TableLoader colSpan={5}/>\r\n          ) : (\r\n              <tbody>\r\n                {compositionList !== \"\" &&\r\n                  compositionList.map((composition) => {\r\n                    return (\r\n                      <tr>\r\n                        <td>\r\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\r\n                            <input\r\n                              type=\"checkbox\"\r\n                              className=\"custom-control-input\"\r\n                              id={composition._id}\r\n                              name={composition._id}\r\n                              checked={checkedValues === composition._id}\r\n                              onChange={handleCheckboxChange}\r\n                            />\r\n                            <label\r\n                              className=\"custom-control-label\"\r\n                              htmlFor={composition._id}\r\n                            ></label>\r\n                          </div>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"td-content d-flex name-td-content\">\r\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                              <strong>{composition.name}</strong>\r\n                              <span>{composition.createdBy}</span>\r\n                            </span>\r\n                          </span>\r\n                        </td>\r\n\r\n                        <td>\r\n                          <span className=\"td-content\">\r\n                            <strong>\r\n                              {humanReadableFormattedDateString(\r\n                                composition.createdAt\r\n                              )}\r\n                            </strong>\r\n                            <span>{getDatetimeIn12Hours(composition.createdAt)}</span>\r\n                          </span>\r\n                        </td>\r\n                        <td> {composition.duration} Sec</td>\r\n                        <td>No Schedule</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n              )}\r\n            </Table>\r\n          </Modal.Body>\r\n        )}\r\n\r\n        <Modal.Footer>\r\n          {!published && (\r\n            <Row className=\"w-100 m-0\">\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\r\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\r\n                  Cancel\r\n                </Button>\r\n              </Col>\r\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\r\n                <Button\r\n                  disabled={checkedValues === null}\r\n                  variant=\"\"\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary btn-block primary-btn\"\r\n                  onClick={handleSubmit}\r\n                >\r\n                  Publish\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PublishMediaModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\modals\\DefaultCompositionModal.jsx",["979","980","981","982","983","984"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\r\nimport cancelIcon from \"../../img/cancel-icon.png\";\r\nimport icon from \"../../img/link-alt 1.svg\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport downArrow from \"../../img/down-arrow.png\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport { useState } from \"react\";\r\nimport { assignDefaultComposition, BASE_URL } from \"../../utils/api\";\r\nimport {\r\n  getDatetimeIn12Hours,\r\n  humanReadableFormattedDateString,\r\n} from \"../../utils/UtilsService\";\r\nimport AddNewTagModal from \"./AddNewTagModal\";\r\nconst DefaultCompositionModal = ({\r\n  close,\r\n  show,\r\n  compositionList,\r\n  getVendorProfile,\r\n}) => {\r\n  const [showNewTagModal, setNewTagModal] = useState(false);\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [compositionId, setCompositionId] = useState(\"\");\r\n  const [duration, setDuration] = useState(\"\");\r\n\r\n  const handleSubmit = async () => {\r\n    console.log(compositionId, duration, \"iiiiiii\");\r\n    await assignDefaultComposition({\r\n      compositionId: compositionId,\r\n\r\n      duration: duration,\r\n    }).then((res) => {\r\n      console.log(res, \"assignDefaultComposition\");\r\n      if (res.data.statusCode === 200) {\r\n        getVendorProfile();\r\n        close();\r\n      }\r\n    });\r\n\r\n    // setShowPublishPopUp(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Modal\r\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\r\n        show={show}\r\n        size=\"xl\"\r\n      >\r\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <Button variant=\"\" className=\"\" onClick={() => close(false)}>\r\n              <img\r\n                className=\"cancel-icon\"\r\n                src={cancelIcon}\r\n                alt=\"cancel-icon\"\r\n                height=\"25px\"\r\n                width=\"25px\"\r\n              />\r\n            </Button>\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"\"\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-block primary-btn\"\r\n            style={{ width: \"fit-content\" }}\r\n            //   onClick={() => setNewTagModal(false)}\r\n            disabled={compositionId.length === 0}\r\n            onClick={handleSubmit}\r\n          >\r\n            Assign\r\n          </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Table\r\n            responsive\r\n            className=\"custom-table screen-table\"\r\n            style={{ marginBottom: \"36px\" }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Composition</th>\r\n                <th>Date Added</th>\r\n                <th>Duration</th>\r\n                <th>Associated Schedule</th>\r\n                <th>Tags</th>\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {compositionList &&\r\n                compositionList.map((composition) => {\r\n                  const content = composition.zones[0].content[0];\r\n                  return (\r\n                    <tr\r\n                      key={composition._id}\r\n                      id={composition._id}\r\n                      onClick={() => {\r\n                        setCompositionId(composition._id);\r\n                        setDuration(composition.duration);\r\n                      }}\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                        background:\r\n                          composition._id === compositionId ? \"#f5f5f5\" : \"\",\r\n                      }}\r\n                    >\r\n                      <td>\r\n                        <span className=\"td-content d-flex name-td-content\">\r\n                          <span\r\n                            className={`name-img mr-2  ${\r\n                              content.type === \"video\" && \"videotableName\"\r\n                            }`}\r\n                          >\r\n                            {content.type === \"image\" && (\r\n                              <img\r\n                                className=\"media-img img-fluid\"\r\n                                src={`${BASE_URL}${content.url}`}\r\n                                alt=\"media-img\"\r\n                              />\r\n                            )}\r\n                            {content.type === \"video\" &&\r\n                              content.duration.toFixed(0) / 60}\r\n                          </span>\r\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\r\n                            <strong>{composition.name}</strong>\r\n                            <span>{composition.createdBy}</span>\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span className=\"td-content\">\r\n                          <strong>\r\n                            {humanReadableFormattedDateString(\r\n                              composition.createdAt\r\n                            )}\r\n                          </strong>\r\n                          <span>\r\n                            {getDatetimeIn12Hours(composition.createdAt)}\r\n                          </span>\r\n                        </span>\r\n                      </td>\r\n                      <td> {composition.duration} Sec</td>\r\n                      <td>No Schedule</td>\r\n                      <td style={{ width: \"180px\" }}>\r\n                        <span className=\"tag-container\">\r\n                          {composition.tags &&\r\n                            composition.tags.map((tag) => {\r\n                              return (\r\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\r\n                                  {tag}\r\n                                </span>\r\n                              );\r\n                            })}\r\n                        </span>\r\n\r\n                        <span\r\n                          className=\"down-arrow\"\r\n                          onClick={() => {\r\n                            setSelected(composition);\r\n                            setNewTagModal(true);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"down-arrow-img img-fluid\"\r\n                            src={downArrow}\r\n                            alt=\"arrow\"\r\n                          />\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </Table>\r\n        </Modal.Body>\r\n      </Modal>\r\n      {showNewTagModal && (\r\n        <AddNewTagModal\r\n          setNewTagModal={setNewTagModal}\r\n          allScreens={compositionList}\r\n          selected={selected}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DefaultCompositionModal;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\utils\\fetchClient.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\Clock.js",[],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone1.jsx",["985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002"],"C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone3.jsx",["1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018"],"import React from \"react\";\r\n\r\nimport WebVideoPlayer from \"./WebVideoPlayer\";\r\nimport ReactPlayer from \"react-player\";\r\nimport Iframe from \"react-iframe\";\r\nimport moment from \"moment\";\r\nimport Moment from 'react-moment';\r\nimport Clock from \"../Clock\";\r\nconst Zone2 = ({ contents, currentIndex, current1Index, current2Index, viewImage}) => {\r\n\r\n\r\n  const monthName = ['Jan', 'Feb', 'March', 'Apr', 'May', 'June', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n  const dayName = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n\r\n  const handleScrollerApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let speed = 5;\r\n    let allignment = 'left';\r\n    if(prp.speed && prp.speed == 'medium'){\r\n      speed = 12;\r\n    }\r\n    else if(prp.spped && prp.speed == 'hight'){\r\n      speed = 20;\r\n    }\r\n    if(prp.allign == 'Right-to-Left'){\r\n      allignment = 'right'\r\n    }\r\n    let txt = '';\r\n    if(prp.style == 'italic'){\r\n      txt =  <i><marquee direction={allignment} scrollAmount={speed} style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></i>\r\n    }else if(prp.style == 'bold'){\r\n      txt =  <b><marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></b>\r\n    }else{\r\n      txt = <marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee>\r\n    }\r\n    return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor}}>{txt}</div>\r\n  }\r\n\r\n  const handleTextApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let txt = \"\";\r\n    if(prp.style == 'Italic'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><i>{prp.content}</i></div>\r\n    }else if(prp.style == 'Bold'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><b>{prp.content}</b></div>\r\n    }else{\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}>{prp.content}</div>\r\n    }\r\n  }\r\n\r\n  const handleClockApps = (data) => {\r\n      const cdate = new Date();\r\n      console.log(\"sdsd\",data)\r\n      const prp = JSON.parse(data);\r\n      let tF = '';\r\n      \r\n    console.log(\"timeFormat\",prp.timeFormat)\r\n      if(prp.timeFormat == 'lefAnalogue - 12 hourt'){ \r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"50px\", color:'white', textAlign:'center'}} ><div style={{position:'relative'}}><Clock /></div>{prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}</div>\r\n\r\n      }else{\r\n        if(prp.timeFormat == 'Digital - 12 hour'){\r\n          tF = \"hh:mm A\";\r\n        }else if(prp.timeFormat == 'Digital - 24 hour'){\r\n          tF = \"HH:MM A\";\r\n        }\r\n\r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"100px\", color:'white', textAlign:'center'}} >\r\n            <Moment format={tF} date={new Date()} />\r\n            {!prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}\r\n            \r\n            </div>\r\n      }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {contents && contents.zones.length == 3 ? (\r\n        <div\r\n            style={{ height: \"100vh\" }}\r\n        >\r\n            <div className=\"third-compoition-container\">\r\n            <div\r\n                className=\"third-composition-top-div\"\r\n            >\r\n                {contents.zones[0] &&\r\n                    contents.zones[0].content[currentIndex] &&\r\n                    contents.zones[0].content[currentIndex].type === \"image\" && (\r\n                        <div className=\"basic-list-group image-preview-container media-content\">\r\n                        <img\r\n                            className=\"webplayer-preview-img\"\r\n                            style={{\r\n                            objectFit: `${\r\n                                viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                            }`,\r\n                            }}\r\n                            src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\r\n                            alt=\"media-img\"\r\n                        />\r\n                        </div>\r\n                )}\r\n                {contents.zones[0] &&\r\n                    contents.zones[0].content[currentIndex] &&\r\n                    contents.zones[0].content[currentIndex].type === \"video\" && (\r\n                        <div\r\n                        className={`basic-list-group video-container media-content ${viewImage} ${\r\n                            viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                        }`}\r\n                        >\r\n                        <WebVideoPlayer\r\n                            src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\r\n                        ></WebVideoPlayer>\r\n                        </div>\r\n                )}\r\n                {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"url-apps\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <Iframe\r\n                        url={`${contents.zones[0].content[currentIndex].url}`}\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        // id=\"\"\r\n                        // className=\"\"\r\n                        display=\"block\"\r\n                        position=\"relative\"\r\n                    />\r\n                    </div>\r\n                )}\r\n                {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type ===\r\n                    \"youtube-apps\" && (\r\n                    <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    >\r\n                    <ReactPlayer\r\n                        url={`${contents.zones[0].content[currentIndex].url}`}\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                    />\r\n                    </div>\r\n                )}\r\n                {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"scroller\" && \r\n                <>{handleScrollerApps(contents.zones[0].content[currentIndex].data)}</>\r\n                }\r\n                {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"text-apps\" && (\r\n                    <>{handleTextApps(contents.zones[0].content[currentIndex].data)}</>\r\n                )}\r\n                {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"clock-apps\" && (\r\n                    <>{handleClockApps(contents.zones[0].content[currentIndex].data)}</>\r\n                )}\r\n            </div>\r\n            <div\r\n                // style={{ width: \"50%\", height: \"70%\", display: \"inline-block\" }}\r\n                className=\"third-composition-second-div\"\r\n            >\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"image\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                        className=\"webplayer-preview-img\"\r\n                        style={{\r\n                        objectFit: `${\r\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                        }}\r\n                        src={`http://144.126.143.140:5000/${contents.zones[1].content[current1Index].url}`}\r\n                        alt=\"media-img\"\r\n                    />\r\n                    </div>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"video\" && (\r\n                    <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    >\r\n                    <WebVideoPlayer\r\n                        src={`http://144.126.143.140:5000/${contents.zones[1].content[current1Index].url}`}\r\n                    ></WebVideoPlayer>\r\n                    </div>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type ===\r\n                    \"url-apps\" && (\r\n                    <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <Iframe\r\n                        url={`${contents.zones[1].content[current1Index].url}`}\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        // id=\"\"\r\n                        // className=\"\"\r\n                        display=\"block\"\r\n                        position=\"relative\"\r\n                    />\r\n                    </div>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type ===\r\n                    \"youtube-apps\" && (\r\n                    <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                    >\r\n                    <ReactPlayer\r\n                        url={`${contents.zones[1].content[current1Index].url}`}\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                    />\r\n                    </div>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"scroller\" && (\r\n                    <>{handleScrollerApps(contents.zones[1].content[currentIndex].data)}</>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"text-apps\" && (\r\n                    <>{handleTextApps(contents.zones[1].content[currentIndex].data)}</>\r\n                )}\r\n                {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"clock-apps\" && (\r\n                    <>{handleClockApps(contents.zones[1].content[currentIndex].data)}</>\r\n                )}\r\n            </div>\r\n            </div>\r\n\r\n            <div\r\n            // style={{ width: \"100%\", height: \"30%\", minHeight: \"18%\" }}\r\n            className=\"third-composition-third-div\"\r\n            >\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"image\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                    className=\"webplayer-preview-img\"\r\n                    style={{\r\n                        objectFit: `${\r\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                    }}\r\n                    src={`http://144.126.143.140:5000/${contents.zones[2].content[current2Index].url}`}\r\n                    alt=\"media-img\"\r\n                    />\r\n                </div>\r\n                )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"video\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <WebVideoPlayer\r\n                    src={`http://144.126.143.140:5000/${contents.zones[2].content[current2Index].url}`}\r\n                    ></WebVideoPlayer>\r\n                </div>\r\n                )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"url-apps\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <Iframe\r\n                    url={`${contents.zones[2].content[current2Index].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    // id=\"\"\r\n                    // className=\"\"\r\n                    display=\"block\"\r\n                    position=\"relative\"\r\n                    />\r\n                </div>\r\n                )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type ===\r\n                \"youtube-apps\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <ReactPlayer\r\n                    url={`${contents.zones[2].content[current2Index].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"scroller\" && (\r\n                <>{handleScrollerApps(contents.zones[2].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"text-apps\" && (\r\n                <>{handleTextApps(contents.zones[2].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[2] &&\r\n                contents.zones[2].content[current2Index] &&\r\n                contents.zones[2].content[current2Index].type === \"clock-apps\" && (\r\n                <>{handleClockApps(contents.zones[2].content[currentIndex].data)}</>\r\n            )}\r\n            </div>\r\n        </div>\r\n      ) :\r\n        <></>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Zone2;\r\n","C:\\xampp\\htdocs\\treny_front\\trendy-content-display-frontend\\src\\jsx\\components\\web-player\\Zone2.jsx",["1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034"],"import React from \"react\";\r\n\r\nimport WebVideoPlayer from \"./WebVideoPlayer\";\r\nimport ReactPlayer from \"react-player\";\r\nimport Iframe from \"react-iframe\";\r\nimport moment from \"moment\";\r\nimport Moment from 'react-moment';\r\nimport Clock from \"../Clock\";\r\nconst Zone2 = ({ contents, currentIndex, current1Index, current2Index, viewImage}) => {\r\n\r\n\r\n  const monthName = ['Jan', 'Feb', 'March', 'Apr', 'May', 'June', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n  const dayName = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n\r\n  const handleScrollerApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let speed = 5;\r\n    let allignment = 'left';\r\n    if(prp.speed && prp.speed == 'medium'){\r\n      speed = 12;\r\n    }\r\n    else if(prp.spped && prp.speed == 'hight'){\r\n      speed = 20;\r\n    }\r\n    if(prp.allign == 'Right-to-Left'){\r\n      allignment = 'right'\r\n    }\r\n    let txt = '';\r\n    if(prp.style == 'italic'){\r\n      txt =  <i><marquee direction={allignment} scrollAmount={speed} style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></i>\r\n    }else if(prp.style == 'bold'){\r\n      txt =  <b><marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee></b>\r\n    }else{\r\n      txt = <marquee direction={allignment} scrollAmount={speed}  style={{color:prp.textColor,fontSize:\"50px\"}}>{prp.url}</marquee>\r\n    }\r\n    return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor}}>{txt}</div>\r\n  }\r\n\r\n  const handleTextApps = (data) => {\r\n    const prp = JSON.parse(data);\r\n    let txt = \"\";\r\n    if(prp.style == 'Italic'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><i>{prp.content}</i></div>\r\n    }else if(prp.style == 'Bold'){\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><b>{prp.content}</b></div>\r\n    }else{\r\n      return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}>{prp.content}</div>\r\n    }\r\n  }\r\n\r\n  const handleClockApps = (data) => {\r\n      const cdate = new Date();\r\n      const prp = JSON.parse(data);\r\n      let tF = '';\r\n      \r\n    console.log(\"timeFormat\",prp.timeFormat)\r\n      if(prp.timeFormat == 'lefAnalogue - 12 hourt'){ \r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"50px\", color:'white', textAlign:'center'}} ><div style={{position:'relative'}}><Clock /></div>{prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}</div>\r\n\r\n      }else{\r\n        if(prp.timeFormat == 'Digital - 12 hour'){\r\n          tF = \"hh:mm A\";\r\n        }else if(prp.timeFormat == 'Digital - 24 hour'){\r\n          tF = \"HH:MM A\";\r\n        }\r\n\r\n        return <div className=\"basic-list-group image-preview-container media-content\" style={{fontSize:\"100px\", color:'white', textAlign:'center'}} >\r\n            <Moment format={tF} date={new Date()} />\r\n            {!prp.hideDate ?<p style={{fontSize:\"20px\"}}>{`${cdate.getDate()} ${monthName[cdate.getDay()] } ${dayName[cdate.getDay()] } Indian Standard Time` }</p> : ''}\r\n            \r\n            </div>\r\n      }\r\n    \r\n    // const prp = JSON.parse(data);\r\n    // let txt = \"\";\r\n    // if(prp.style == 'Italic'){\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><i>{prp.content}</i></div>\r\n    // }else if(prp.style == 'Bold'){\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}><b>{prp.content}</b></div>\r\n    // }else{\r\n    //   return <div className=\"basic-list-group image-preview-container media-content\" style={{backgroundColor:prp.backGroundColor,color:prp.textColor, fontWeight:prp.weight, textAlign:prp.allign}}>{prp.content}</div>\r\n    // }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      {contents && contents.zones.length == 2 ? (\r\n        <div\r\n            style={{ height: \"100vh\" }}\r\n        >\r\n            <div className=\"top-div\">\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"image\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                    className=\"webplayer-preview-img\"\r\n                    style={{\r\n                        objectFit: `${\r\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                    }}\r\n                    src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\r\n                    alt=\"media-img\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"video\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <WebVideoPlayer\r\n                    src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\r\n                    ></WebVideoPlayer>\r\n                </div>\r\n            )}\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"url-apps\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <Iframe\r\n                    url={`${contents.zones[0].content[currentIndex].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    // id=\"\"\r\n                    // className=\"\"\r\n                    display=\"block\"\r\n                    position=\"relative\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type ===\r\n                \"youtube-apps\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <ReactPlayer\r\n                    url={`${contents.zones[0].content[currentIndex].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"scroller\" && (\r\n                <>{handleScrollerApps(contents.zones[0].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[0] &&\r\n                contents.zones[0].content[currentIndex] &&\r\n                contents.zones[0].content[currentIndex].type === \"text-apps\" && (\r\n                <>{handleTextApps(contents.zones[0].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[0] &&\r\n            contents.zones[0].content[currentIndex] &&\r\n            contents.zones[0].content[currentIndex].type === \"clock-apps\" && (\r\n                <>{handleClockApps(contents.zones[0].content[currentIndex].data)}</>\r\n            )}\r\n            </div>\r\n            <div className=\"bottom-div\">\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"image\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <img\r\n                    className=\"webplayer-preview-img\"\r\n                    style={{\r\n                        objectFit: `${\r\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\r\n                        }`,\r\n                    }}\r\n                    src={`http://144.126.143.140:5000/${contents.zones[1].content[currentIndex].url}`}\r\n                    alt=\"media-img\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"video\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <WebVideoPlayer\r\n                    src={`http://144.126.143.140:5000/${contents.zones[1].content[currentIndex].url}`}\r\n                    ></WebVideoPlayer>\r\n                </div>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"url-apps\" && (\r\n                <div className=\"basic-list-group image-preview-container media-content\">\r\n                    <Iframe\r\n                    url={`${contents.zones[1].content[currentIndex].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    // id=\"\"\r\n                    // className=\"\"\r\n                    display=\"block\"\r\n                    position=\"relative\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type ===\r\n                \"youtube-apps\" && (\r\n                <div\r\n                    className={`basic-list-group video-container media-content ${viewImage} ${\r\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\r\n                    }`}\r\n                >\r\n                    <ReactPlayer\r\n                    url={`${contents.zones[1].content[currentIndex].url}`}\r\n                    width=\"100%\"\r\n                    height=\"100%\"\r\n                    />\r\n                </div>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"scroller\" && (\r\n                <>{handleScrollerApps(contents.zones[1].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"text-apps\" && (\r\n                <>{handleTextApps(contents.zones[1].content[currentIndex].data)}</>\r\n            )}\r\n            {contents.zones[1] &&\r\n                contents.zones[1].content[current1Index] &&\r\n                contents.zones[1].content[current1Index].type === \"clock-apps\" && (\r\n                <>{handleClockApps(contents.zones[1].content[currentIndex].data)}</>\r\n            )}\r\n            </div>\r\n        </div>\r\n      ) :\r\n        <></>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Zone2;\r\n",{"ruleId":"1035","replacedBy":"1036"},{"ruleId":"1037","replacedBy":"1038"},{"ruleId":"1039","severity":1,"message":"1040","line":1,"column":37,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":45},{"ruleId":"1039","severity":1,"message":"1043","line":2,"column":10,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":12},{"ruleId":"1039","severity":1,"message":"1044","line":16,"column":8,"nodeType":"1041","messageId":"1042","endLine":16,"endColumn":16},{"ruleId":"1045","severity":1,"message":"1046","line":38,"column":8,"nodeType":"1047","endLine":38,"endColumn":33,"suggestions":"1048"},{"ruleId":"1039","severity":1,"message":"1049","line":6,"column":10,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":13},{"ruleId":"1039","severity":1,"message":"1050","line":6,"column":15,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1051","line":6,"column":20,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":24},{"ruleId":"1039","severity":1,"message":"1052","line":30,"column":8,"nodeType":"1041","messageId":"1042","endLine":30,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1053","line":42,"column":8,"nodeType":"1041","messageId":"1042","endLine":42,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1054","line":1,"column":17,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":26},{"ruleId":"1039","severity":1,"message":"1040","line":1,"column":28,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1055","line":115,"column":9,"nodeType":"1041","messageId":"1042","endLine":115,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":170,"column":14,"nodeType":"1058","messageId":"1059","endLine":170,"endColumn":16},{"ruleId":"1056","severity":1,"message":"1057","line":204,"column":14,"nodeType":"1058","messageId":"1059","endLine":204,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1060","line":602,"column":23,"nodeType":"1041","messageId":"1042","endLine":602,"endColumn":30},{"ruleId":"1039","severity":1,"message":"1061","line":1,"column":28,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":34},{"ruleId":"1039","severity":1,"message":"1062","line":11,"column":3,"nodeType":"1041","messageId":"1042","endLine":11,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1063","line":20,"column":17,"nodeType":"1041","messageId":"1042","endLine":20,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1064","line":25,"column":10,"nodeType":"1041","messageId":"1042","endLine":25,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1065","line":27,"column":7,"nodeType":"1041","messageId":"1042","endLine":27,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1066","line":36,"column":10,"nodeType":"1041","messageId":"1042","endLine":36,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1067","line":39,"column":15,"nodeType":"1041","messageId":"1042","endLine":39,"endColumn":27},{"ruleId":"1039","severity":1,"message":"1068","line":42,"column":33,"nodeType":"1041","messageId":"1042","endLine":42,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1069","line":101,"column":11,"nodeType":"1041","messageId":"1042","endLine":101,"endColumn":13},{"ruleId":"1056","severity":1,"message":"1057","line":104,"column":22,"nodeType":"1058","messageId":"1059","endLine":104,"endColumn":24},{"ruleId":"1070","severity":1,"message":"1071","line":105,"column":27,"nodeType":"1072","messageId":"1073","endLine":105,"endColumn":73,"fix":"1074"},{"ruleId":"1075","severity":1,"message":"1076","line":227,"column":13,"nodeType":"1077","endLine":227,"endColumn":75},{"ruleId":"1039","severity":1,"message":"1061","line":1,"column":28,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":34},{"ruleId":"1039","severity":1,"message":"1062","line":11,"column":3,"nodeType":"1041","messageId":"1042","endLine":11,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1078","line":13,"column":3,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1063","line":21,"column":17,"nodeType":"1041","messageId":"1042","endLine":21,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1064","line":26,"column":10,"nodeType":"1041","messageId":"1042","endLine":26,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1065","line":28,"column":7,"nodeType":"1041","messageId":"1042","endLine":28,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1066","line":37,"column":10,"nodeType":"1041","messageId":"1042","endLine":37,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1079","line":37,"column":20,"nodeType":"1041","messageId":"1042","endLine":37,"endColumn":31},{"ruleId":"1039","severity":1,"message":"1068","line":43,"column":33,"nodeType":"1041","messageId":"1042","endLine":43,"endColumn":39},{"ruleId":"1045","severity":1,"message":"1080","line":117,"column":6,"nodeType":"1047","endLine":117,"endColumn":13,"suggestions":"1081"},{"ruleId":"1039","severity":1,"message":"1069","line":121,"column":11,"nodeType":"1041","messageId":"1042","endLine":121,"endColumn":13},{"ruleId":"1056","severity":1,"message":"1082","line":122,"column":55,"nodeType":"1058","messageId":"1059","endLine":122,"endColumn":57},{"ruleId":"1056","severity":1,"message":"1057","line":126,"column":22,"nodeType":"1058","messageId":"1059","endLine":126,"endColumn":24},{"ruleId":"1070","severity":1,"message":"1071","line":130,"column":13,"nodeType":"1072","messageId":"1073","endLine":130,"endColumn":59,"fix":"1083"},{"ruleId":"1070","severity":1,"message":"1084","line":131,"column":13,"nodeType":"1072","messageId":"1073","endLine":131,"endColumn":77,"fix":"1085"},{"ruleId":"1070","severity":1,"message":"1086","line":132,"column":13,"nodeType":"1072","messageId":"1073","endLine":132,"endColumn":75,"fix":"1087"},{"ruleId":"1070","severity":1,"message":"1071","line":136,"column":13,"nodeType":"1072","messageId":"1073","endLine":136,"endColumn":59,"fix":"1088"},{"ruleId":"1056","severity":1,"message":"1082","line":169,"column":55,"nodeType":"1058","messageId":"1059","endLine":169,"endColumn":57},{"ruleId":"1056","severity":1,"message":"1082","line":249,"column":39,"nodeType":"1058","messageId":"1059","endLine":249,"endColumn":41},{"ruleId":"1075","severity":1,"message":"1076","line":274,"column":13,"nodeType":"1077","endLine":274,"endColumn":75},{"ruleId":"1039","severity":1,"message":"1089","line":630,"column":9,"nodeType":"1041","messageId":"1042","endLine":630,"endColumn":29},{"ruleId":"1039","severity":1,"message":"1090","line":16,"column":8,"nodeType":"1041","messageId":"1042","endLine":16,"endColumn":10},{"ruleId":"1039","severity":1,"message":"1091","line":24,"column":10,"nodeType":"1041","messageId":"1042","endLine":24,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1092","line":24,"column":22,"nodeType":"1041","messageId":"1042","endLine":24,"endColumn":35},{"ruleId":"1039","severity":1,"message":"1093","line":25,"column":10,"nodeType":"1041","messageId":"1042","endLine":25,"endColumn":29},{"ruleId":"1045","severity":1,"message":"1094","line":60,"column":6,"nodeType":"1047","endLine":60,"endColumn":10,"suggestions":"1095"},{"ruleId":"1056","severity":1,"message":"1057","line":128,"column":18,"nodeType":"1058","messageId":"1059","endLine":128,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":283,"column":38,"nodeType":"1058","messageId":"1059","endLine":283,"endColumn":40},{"ruleId":"1056","severity":1,"message":"1057","line":334,"column":44,"nodeType":"1058","messageId":"1059","endLine":334,"endColumn":46},{"ruleId":"1075","severity":1,"message":"1076","line":449,"column":21,"nodeType":"1077","endLine":454,"endColumn":23},{"ruleId":"1075","severity":1,"message":"1076","line":457,"column":21,"nodeType":"1077","endLine":462,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1063","line":17,"column":17,"nodeType":"1041","messageId":"1042","endLine":17,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1096","line":20,"column":8,"nodeType":"1041","messageId":"1042","endLine":20,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1097","line":21,"column":8,"nodeType":"1041","messageId":"1042","endLine":21,"endColumn":29},{"ruleId":"1039","severity":1,"message":"1098","line":23,"column":8,"nodeType":"1041","messageId":"1042","endLine":23,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1099","line":24,"column":8,"nodeType":"1041","messageId":"1042","endLine":24,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1100","line":38,"column":11,"nodeType":"1041","messageId":"1042","endLine":38,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1069","line":39,"column":13,"nodeType":"1041","messageId":"1042","endLine":39,"endColumn":15},{"ruleId":"1039","severity":1,"message":"1101","line":57,"column":11,"nodeType":"1041","messageId":"1042","endLine":57,"endColumn":29},{"ruleId":"1102","severity":1,"message":"1103","line":58,"column":9,"nodeType":"1104","messageId":"1105","endLine":58,"endColumn":15},{"ruleId":"1102","severity":1,"message":"1103","line":61,"column":9,"nodeType":"1104","messageId":"1105","endLine":61,"endColumn":15},{"ruleId":"1102","severity":1,"message":"1103","line":64,"column":9,"nodeType":"1104","messageId":"1105","endLine":64,"endColumn":15},{"ruleId":"1102","severity":1,"message":"1103","line":67,"column":9,"nodeType":"1104","messageId":"1105","endLine":67,"endColumn":15},{"ruleId":"1039","severity":1,"message":"1106","line":2,"column":8,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":13},{"ruleId":"1039","severity":1,"message":"1107","line":62,"column":9,"nodeType":"1041","messageId":"1042","endLine":62,"endColumn":17},{"ruleId":"1056","severity":1,"message":"1057","line":304,"column":18,"nodeType":"1058","messageId":"1059","endLine":304,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":307,"column":18,"nodeType":"1058","messageId":"1059","endLine":307,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":310,"column":18,"nodeType":"1058","messageId":"1059","endLine":310,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1061","line":2,"column":28,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":34},{"ruleId":"1039","severity":1,"message":"1065","line":10,"column":7,"nodeType":"1041","messageId":"1042","endLine":10,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1108","line":19,"column":17,"nodeType":"1041","messageId":"1042","endLine":19,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1109","line":99,"column":11,"nodeType":"1041","messageId":"1042","endLine":99,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1110","line":116,"column":9,"nodeType":"1041","messageId":"1042","endLine":116,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1111","line":124,"column":20,"nodeType":"1041","messageId":"1042","endLine":124,"endColumn":28},{"ruleId":"1075","severity":1,"message":"1076","line":171,"column":17,"nodeType":"1077","endLine":171,"endColumn":43},{"ruleId":"1039","severity":1,"message":"1061","line":1,"column":28,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":34},{"ruleId":"1039","severity":1,"message":"1065","line":9,"column":7,"nodeType":"1041","messageId":"1042","endLine":9,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1108","line":18,"column":17,"nodeType":"1041","messageId":"1042","endLine":18,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1109","line":100,"column":11,"nodeType":"1041","messageId":"1042","endLine":100,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1111","line":126,"column":20,"nodeType":"1041","messageId":"1042","endLine":126,"endColumn":28},{"ruleId":"1075","severity":1,"message":"1076","line":188,"column":17,"nodeType":"1077","endLine":188,"endColumn":43},{"ruleId":"1039","severity":1,"message":"1063","line":153,"column":18,"nodeType":"1041","messageId":"1042","endLine":153,"endColumn":26},{"ruleId":"1039","severity":1,"message":"1112","line":157,"column":10,"nodeType":"1041","messageId":"1042","endLine":157,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1113","line":164,"column":10,"nodeType":"1041","messageId":"1042","endLine":164,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1114","line":164,"column":21,"nodeType":"1041","messageId":"1042","endLine":164,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1115","line":604,"column":13,"nodeType":"1041","messageId":"1042","endLine":604,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1116","line":741,"column":13,"nodeType":"1041","messageId":"1042","endLine":741,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1117","line":758,"column":11,"nodeType":"1041","messageId":"1042","endLine":758,"endColumn":24},{"ruleId":"1039","severity":1,"message":"1118","line":784,"column":15,"nodeType":"1041","messageId":"1042","endLine":784,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1100","line":10,"column":9,"nodeType":"1041","messageId":"1042","endLine":10,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1119","line":12,"column":18,"nodeType":"1041","messageId":"1042","endLine":12,"endColumn":27},{"ruleId":"1039","severity":1,"message":"1120","line":13,"column":10,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1121","line":22,"column":11,"nodeType":"1041","messageId":"1042","endLine":22,"endColumn":19},{"ruleId":"1122","severity":1,"message":"1123","line":28,"column":40,"nodeType":"1124","messageId":"1125","endLine":30,"endColumn":10},{"ruleId":"1045","severity":1,"message":"1094","line":41,"column":6,"nodeType":"1047","endLine":41,"endColumn":10,"suggestions":"1126"},{"ruleId":"1039","severity":1,"message":"1127","line":43,"column":10,"nodeType":"1041","messageId":"1042","endLine":43,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1128","line":50,"column":11,"nodeType":"1041","messageId":"1042","endLine":50,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1129","line":74,"column":9,"nodeType":"1041","messageId":"1042","endLine":74,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1112","line":3,"column":10,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1130","line":5,"column":10,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1131","line":5,"column":18,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":83,"column":33,"nodeType":"1058","messageId":"1059","endLine":83,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":84,"column":33,"nodeType":"1058","messageId":"1059","endLine":84,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":85,"column":33,"nodeType":"1058","messageId":"1059","endLine":85,"endColumn":35},{"ruleId":"1045","severity":1,"message":"1132","line":41,"column":6,"nodeType":"1047","endLine":41,"endColumn":8,"suggestions":"1133"},{"ruleId":"1039","severity":1,"message":"1134","line":2,"column":8,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":14},{"ruleId":"1045","severity":1,"message":"1135","line":27,"column":6,"nodeType":"1047","endLine":27,"endColumn":10,"suggestions":"1136"},{"ruleId":"1056","severity":1,"message":"1057","line":36,"column":71,"nodeType":"1058","messageId":"1059","endLine":36,"endColumn":73},{"ruleId":"1056","severity":1,"message":"1057","line":49,"column":34,"nodeType":"1058","messageId":"1059","endLine":49,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":52,"column":34,"nodeType":"1058","messageId":"1059","endLine":52,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":55,"column":34,"nodeType":"1058","messageId":"1059","endLine":55,"endColumn":36},{"ruleId":"1045","severity":1,"message":"1137","line":58,"column":6,"nodeType":"1047","endLine":58,"endColumn":18,"suggestions":"1138"},{"ruleId":"1056","severity":1,"message":"1057","line":204,"column":37,"nodeType":"1058","messageId":"1059","endLine":204,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":209,"column":37,"nodeType":"1058","messageId":"1059","endLine":209,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":214,"column":37,"nodeType":"1058","messageId":"1059","endLine":214,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1139","line":4,"column":10,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":15},{"ruleId":"1039","severity":1,"message":"1140","line":17,"column":8,"nodeType":"1041","messageId":"1042","endLine":17,"endColumn":12},{"ruleId":"1056","severity":1,"message":"1057","line":51,"column":21,"nodeType":"1058","messageId":"1059","endLine":51,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":54,"column":21,"nodeType":"1058","messageId":"1059","endLine":54,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":57,"column":21,"nodeType":"1058","messageId":"1059","endLine":57,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":60,"column":21,"nodeType":"1058","messageId":"1059","endLine":60,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":63,"column":21,"nodeType":"1058","messageId":"1059","endLine":63,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":66,"column":21,"nodeType":"1058","messageId":"1059","endLine":66,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":69,"column":21,"nodeType":"1058","messageId":"1059","endLine":69,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":72,"column":21,"nodeType":"1058","messageId":"1059","endLine":72,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":75,"column":21,"nodeType":"1058","messageId":"1059","endLine":75,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":78,"column":21,"nodeType":"1058","messageId":"1059","endLine":78,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":81,"column":21,"nodeType":"1058","messageId":"1059","endLine":81,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1141","line":89,"column":10,"nodeType":"1041","messageId":"1042","endLine":89,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1142","line":89,"column":24,"nodeType":"1041","messageId":"1042","endLine":89,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1143","line":90,"column":16,"nodeType":"1041","messageId":"1042","endLine":90,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1144","line":102,"column":11,"nodeType":"1041","messageId":"1042","endLine":102,"endColumn":16},{"ruleId":"1075","severity":1,"message":"1076","line":193,"column":25,"nodeType":"1077","endLine":193,"endColumn":63},{"ruleId":"1039","severity":1,"message":"1145","line":5,"column":3,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1050","line":8,"column":10,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":13},{"ruleId":"1039","severity":1,"message":"1134","line":12,"column":8,"nodeType":"1041","messageId":"1042","endLine":12,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1146","line":18,"column":10,"nodeType":"1041","messageId":"1042","endLine":18,"endColumn":20},{"ruleId":"1045","severity":1,"message":"1147","line":242,"column":6,"nodeType":"1047","endLine":242,"endColumn":19,"suggestions":"1148"},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1150","line":4,"column":39,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":51},{"ruleId":"1039","severity":1,"message":"1040","line":1,"column":17,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1130","line":2,"column":10,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1131","line":2,"column":18,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1063","line":2,"column":25,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1151","line":4,"column":5,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":37},{"ruleId":"1039","severity":1,"message":"1040","line":1,"column":17,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1130","line":2,"column":10,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1131","line":2,"column":18,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1063","line":2,"column":25,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1040","line":1,"column":17,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1131","line":2,"column":10,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":15},{"ruleId":"1039","severity":1,"message":"1097","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":29},{"ruleId":"1070","severity":1,"message":"1152","line":36,"column":37,"nodeType":"1072","messageId":"1073","endLine":36,"endColumn":56,"fix":"1153"},{"ruleId":"1056","severity":1,"message":"1057","line":60,"column":19,"nodeType":"1058","messageId":"1059","endLine":60,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":64,"column":19,"nodeType":"1058","messageId":"1059","endLine":64,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":68,"column":19,"nodeType":"1058","messageId":"1059","endLine":68,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":98,"column":21,"nodeType":"1058","messageId":"1059","endLine":98,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":98,"column":46,"nodeType":"1058","messageId":"1059","endLine":98,"endColumn":48},{"ruleId":"1039","severity":1,"message":"1154","line":110,"column":13,"nodeType":"1041","messageId":"1042","endLine":110,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1082","line":120,"column":25,"nodeType":"1058","messageId":"1059","endLine":120,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1082","line":120,"column":49,"nodeType":"1058","messageId":"1059","endLine":120,"endColumn":51},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1063","line":1,"column":42,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":50},{"ruleId":"1039","severity":1,"message":"1155","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1064","line":4,"column":10,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1049","line":1,"column":25,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1050","line":1,"column":30,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1063","line":1,"column":42,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":50},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1063","line":1,"column":42,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":50},{"ruleId":"1039","severity":1,"message":"1156","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":24},{"ruleId":"1039","severity":1,"message":"1157","line":9,"column":8,"nodeType":"1041","messageId":"1042","endLine":9,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1158","line":14,"column":9,"nodeType":"1041","messageId":"1042","endLine":14,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1049","line":1,"column":25,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1050","line":1,"column":30,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1155","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1064","line":4,"column":10,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1064","line":5,"column":10,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":14},{"ruleId":"1056","severity":1,"message":"1057","line":128,"column":33,"nodeType":"1058","messageId":"1059","endLine":128,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1076","line":214,"column":17,"nodeType":"1077","endLine":214,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1064","line":5,"column":10,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1159","line":8,"column":8,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1160","line":19,"column":26,"nodeType":"1041","messageId":"1042","endLine":19,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":89,"column":17,"nodeType":"1077","endLine":89,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1161","line":15,"column":10,"nodeType":"1041","messageId":"1042","endLine":15,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":34,"column":13,"nodeType":"1058","messageId":"1059","endLine":34,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":38,"column":16,"nodeType":"1058","messageId":"1059","endLine":38,"endColumn":18},{"ruleId":"1056","severity":1,"message":"1057","line":50,"column":33,"nodeType":"1058","messageId":"1059","endLine":50,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1076","line":132,"column":19,"nodeType":"1077","endLine":132,"endColumn":81},{"ruleId":"1056","severity":1,"message":"1057","line":152,"column":43,"nodeType":"1058","messageId":"1059","endLine":152,"endColumn":45},{"ruleId":"1075","severity":1,"message":"1076","line":185,"column":19,"nodeType":"1077","endLine":185,"endColumn":81},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1161","line":29,"column":10,"nodeType":"1041","messageId":"1042","endLine":29,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":51,"column":13,"nodeType":"1058","messageId":"1059","endLine":51,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":62,"column":33,"nodeType":"1058","messageId":"1059","endLine":62,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1076","line":193,"column":17,"nodeType":"1077","endLine":193,"endColumn":79},{"ruleId":"1056","severity":1,"message":"1057","line":213,"column":40,"nodeType":"1058","messageId":"1059","endLine":213,"endColumn":42},{"ruleId":"1075","severity":1,"message":"1076","line":246,"column":17,"nodeType":"1077","endLine":246,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1161","line":15,"column":10,"nodeType":"1041","messageId":"1042","endLine":15,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":35,"column":13,"nodeType":"1058","messageId":"1059","endLine":35,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":39,"column":21,"nodeType":"1058","messageId":"1059","endLine":39,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":43,"column":22,"nodeType":"1058","messageId":"1059","endLine":43,"endColumn":24},{"ruleId":"1056","severity":1,"message":"1057","line":47,"column":21,"nodeType":"1058","messageId":"1059","endLine":47,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":61,"column":33,"nodeType":"1058","messageId":"1059","endLine":61,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1076","line":160,"column":17,"nodeType":"1077","endLine":160,"endColumn":79},{"ruleId":"1056","severity":1,"message":"1057","line":180,"column":41,"nodeType":"1058","messageId":"1059","endLine":180,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":213,"column":17,"nodeType":"1077","endLine":213,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1162","line":4,"column":10,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":25},{"ruleId":"1039","severity":1,"message":"1140","line":9,"column":8,"nodeType":"1041","messageId":"1042","endLine":9,"endColumn":12},{"ruleId":"1039","severity":1,"message":"1163","line":13,"column":10,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":24},{"ruleId":"1039","severity":1,"message":"1160","line":13,"column":26,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":43},{"ruleId":"1039","severity":1,"message":"1161","line":24,"column":10,"nodeType":"1041","messageId":"1042","endLine":24,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":48,"column":13,"nodeType":"1058","messageId":"1059","endLine":48,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":52,"column":22,"nodeType":"1058","messageId":"1059","endLine":52,"endColumn":24},{"ruleId":"1056","severity":1,"message":"1057","line":71,"column":35,"nodeType":"1058","messageId":"1059","endLine":71,"endColumn":37},{"ruleId":"1075","severity":1,"message":"1076","line":212,"column":17,"nodeType":"1077","endLine":212,"endColumn":79},{"ruleId":"1056","severity":1,"message":"1057","line":233,"column":41,"nodeType":"1058","messageId":"1059","endLine":233,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":266,"column":15,"nodeType":"1077","endLine":266,"endColumn":77},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1161","line":47,"column":10,"nodeType":"1041","messageId":"1042","endLine":47,"endColumn":20},{"ruleId":"1045","severity":1,"message":"1164","line":69,"column":5,"nodeType":"1047","endLine":69,"endColumn":16,"suggestions":"1165"},{"ruleId":"1056","severity":1,"message":"1057","line":77,"column":13,"nodeType":"1058","messageId":"1059","endLine":77,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":81,"column":21,"nodeType":"1058","messageId":"1059","endLine":81,"endColumn":23},{"ruleId":"1056","severity":1,"message":"1057","line":103,"column":35,"nodeType":"1058","messageId":"1059","endLine":103,"endColumn":37},{"ruleId":"1075","severity":1,"message":"1076","line":267,"column":21,"nodeType":"1077","endLine":267,"endColumn":83},{"ruleId":"1056","severity":1,"message":"1057","line":287,"column":41,"nodeType":"1058","messageId":"1059","endLine":287,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":320,"column":15,"nodeType":"1077","endLine":320,"endColumn":77},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1161","line":20,"column":10,"nodeType":"1041","messageId":"1042","endLine":20,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1166","line":29,"column":9,"nodeType":"1041","messageId":"1042","endLine":29,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":56,"column":13,"nodeType":"1058","messageId":"1059","endLine":56,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":59,"column":23,"nodeType":"1058","messageId":"1059","endLine":59,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":77,"column":35,"nodeType":"1058","messageId":"1059","endLine":77,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1057","line":144,"column":85,"nodeType":"1058","messageId":"1059","endLine":144,"endColumn":87},{"ruleId":"1056","severity":1,"message":"1057","line":148,"column":83,"nodeType":"1058","messageId":"1059","endLine":148,"endColumn":85},{"ruleId":"1075","severity":1,"message":"1076","line":224,"column":17,"nodeType":"1077","endLine":224,"endColumn":79},{"ruleId":"1056","severity":1,"message":"1057","line":244,"column":41,"nodeType":"1058","messageId":"1059","endLine":244,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":277,"column":17,"nodeType":"1077","endLine":277,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1056","severity":1,"message":"1057","line":36,"column":13,"nodeType":"1058","messageId":"1059","endLine":36,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":40,"column":16,"nodeType":"1058","messageId":"1059","endLine":40,"endColumn":18},{"ruleId":"1056","severity":1,"message":"1057","line":52,"column":33,"nodeType":"1058","messageId":"1059","endLine":52,"endColumn":35},{"ruleId":"1075","severity":1,"message":"1076","line":140,"column":19,"nodeType":"1077","endLine":140,"endColumn":81},{"ruleId":"1056","severity":1,"message":"1057","line":161,"column":43,"nodeType":"1058","messageId":"1059","endLine":161,"endColumn":45},{"ruleId":"1075","severity":1,"message":"1076","line":195,"column":17,"nodeType":"1077","endLine":195,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1064","line":5,"column":10,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1160","line":13,"column":26,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":43},{"ruleId":"1075","severity":1,"message":"1076","line":134,"column":17,"nodeType":"1077","endLine":134,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1045","severity":1,"message":"1164","line":49,"column":5,"nodeType":"1047","endLine":49,"endColumn":16,"suggestions":"1167"},{"ruleId":"1056","severity":1,"message":"1057","line":57,"column":13,"nodeType":"1058","messageId":"1059","endLine":57,"endColumn":15},{"ruleId":"1056","severity":1,"message":"1057","line":61,"column":18,"nodeType":"1058","messageId":"1059","endLine":61,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":35,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":37},{"ruleId":"1075","severity":1,"message":"1076","line":222,"column":19,"nodeType":"1077","endLine":222,"endColumn":81},{"ruleId":"1056","severity":1,"message":"1057","line":245,"column":45,"nodeType":"1058","messageId":"1059","endLine":245,"endColumn":47},{"ruleId":"1075","severity":1,"message":"1076","line":278,"column":17,"nodeType":"1077","endLine":278,"endColumn":79},{"ruleId":"1039","severity":1,"message":"1168","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1169","line":4,"column":10,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1170","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1171","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1172","line":7,"column":10,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1173","line":8,"column":8,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1174","line":12,"column":8,"nodeType":"1041","messageId":"1042","endLine":12,"endColumn":13},{"ruleId":"1039","severity":1,"message":"1175","line":14,"column":10,"nodeType":"1041","messageId":"1042","endLine":14,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1176","line":25,"column":9,"nodeType":"1041","messageId":"1042","endLine":25,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":29,"column":31,"nodeType":"1058","messageId":"1059","endLine":29,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":32,"column":36,"nodeType":"1058","messageId":"1059","endLine":32,"endColumn":38},{"ruleId":"1056","severity":1,"message":"1057","line":35,"column":19,"nodeType":"1058","messageId":"1059","endLine":35,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":39,"column":18,"nodeType":"1058","messageId":"1059","endLine":39,"endColumn":20},{"ruleId":"1177","severity":1,"message":"1178","line":40,"column":17,"nodeType":"1077","endLine":40,"endColumn":116},{"ruleId":"1056","severity":1,"message":"1057","line":41,"column":24,"nodeType":"1058","messageId":"1059","endLine":41,"endColumn":26},{"ruleId":"1177","severity":1,"message":"1178","line":42,"column":17,"nodeType":"1077","endLine":42,"endColumn":117},{"ruleId":"1177","severity":1,"message":"1178","line":44,"column":13,"nodeType":"1077","endLine":44,"endColumn":113},{"ruleId":"1039","severity":1,"message":"1179","line":49,"column":9,"nodeType":"1041","messageId":"1042","endLine":49,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1180","line":51,"column":9,"nodeType":"1041","messageId":"1042","endLine":51,"endColumn":12},{"ruleId":"1056","severity":1,"message":"1057","line":52,"column":18,"nodeType":"1058","messageId":"1059","endLine":52,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":54,"column":24,"nodeType":"1058","messageId":"1059","endLine":54,"endColumn":26},{"ruleId":"1039","severity":1,"message":"1181","line":61,"column":9,"nodeType":"1041","messageId":"1042","endLine":61,"endColumn":24},{"ruleId":"1056","severity":1,"message":"1057","line":67,"column":25,"nodeType":"1058","messageId":"1059","endLine":67,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":71,"column":27,"nodeType":"1058","messageId":"1059","endLine":71,"endColumn":29},{"ruleId":"1056","severity":1,"message":"1057","line":73,"column":33,"nodeType":"1058","messageId":"1059","endLine":73,"endColumn":35},{"ruleId":"1039","severity":1,"message":"1182","line":95,"column":9,"nodeType":"1041","messageId":"1042","endLine":95,"endColumn":26},{"ruleId":"1039","severity":1,"message":"1183","line":96,"column":11,"nodeType":"1041","messageId":"1042","endLine":96,"endColumn":14},{"ruleId":"1056","severity":1,"message":"1057","line":101,"column":43,"nodeType":"1058","messageId":"1059","endLine":101,"endColumn":45},{"ruleId":"1056","severity":1,"message":"1057","line":113,"column":50,"nodeType":"1058","messageId":"1059","endLine":113,"endColumn":52},{"ruleId":"1056","severity":1,"message":"1057","line":136,"column":50,"nodeType":"1058","messageId":"1059","endLine":136,"endColumn":52},{"ruleId":"1045","severity":1,"message":"1184","line":173,"column":6,"nodeType":"1047","endLine":173,"endColumn":35,"suggestions":"1185"},{"ruleId":"1056","severity":1,"message":"1057","line":183,"column":42,"nodeType":"1058","messageId":"1059","endLine":183,"endColumn":44},{"ruleId":"1056","severity":1,"message":"1057","line":185,"column":33,"nodeType":"1058","messageId":"1059","endLine":185,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":187,"column":33,"nodeType":"1058","messageId":"1059","endLine":187,"endColumn":35},{"ruleId":"1039","severity":1,"message":"1186","line":2,"column":8,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":15},{"ruleId":"1045","severity":1,"message":"1187","line":21,"column":16,"nodeType":"1041","endLine":21,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1149","line":2,"column":35,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":40},{"ruleId":"1056","severity":1,"message":"1057","line":78,"column":22,"nodeType":"1058","messageId":"1059","endLine":78,"endColumn":24},{"ruleId":"1056","severity":1,"message":"1057","line":165,"column":27,"nodeType":"1058","messageId":"1059","endLine":165,"endColumn":29},{"ruleId":"1056","severity":1,"message":"1057","line":273,"column":48,"nodeType":"1058","messageId":"1059","endLine":273,"endColumn":50},{"ruleId":"1056","severity":1,"message":"1057","line":282,"column":36,"nodeType":"1058","messageId":"1059","endLine":282,"endColumn":38},{"ruleId":"1070","severity":1,"message":"1188","line":300,"column":31,"nodeType":"1072","messageId":"1073","endLine":300,"endColumn":52,"fix":"1189"},{"ruleId":"1070","severity":1,"message":"1190","line":318,"column":31,"nodeType":"1072","messageId":"1073","endLine":318,"endColumn":52,"fix":"1191"},{"ruleId":"1039","severity":1,"message":"1054","line":1,"column":27,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1131","line":2,"column":10,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":15},{"ruleId":"1039","severity":1,"message":"1051","line":2,"column":27,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":31},{"ruleId":"1039","severity":1,"message":"1130","line":2,"column":33,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1192","line":6,"column":10,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":26},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1155","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1193","line":7,"column":8,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":22},{"ruleId":"1056","severity":1,"message":"1057","line":23,"column":39,"nodeType":"1058","messageId":"1059","endLine":23,"endColumn":41},{"ruleId":"1056","severity":1,"message":"1057","line":34,"column":46,"nodeType":"1058","messageId":"1059","endLine":34,"endColumn":48},{"ruleId":"1056","severity":1,"message":"1057","line":56,"column":46,"nodeType":"1058","messageId":"1059","endLine":56,"endColumn":48},{"ruleId":"1045","severity":1,"message":"1194","line":92,"column":6,"nodeType":"1047","endLine":92,"endColumn":35,"suggestions":"1195"},{"ruleId":"1056","severity":1,"message":"1057","line":167,"column":40,"nodeType":"1058","messageId":"1059","endLine":167,"endColumn":42},{"ruleId":"1056","severity":1,"message":"1057","line":198,"column":33,"nodeType":"1058","messageId":"1059","endLine":198,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":271,"column":33,"nodeType":"1058","messageId":"1059","endLine":271,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":36,"column":19,"nodeType":"1058","messageId":"1059","endLine":36,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":38,"column":26,"nodeType":"1058","messageId":"1059","endLine":38,"endColumn":28},{"ruleId":"1056","severity":1,"message":"1057","line":41,"column":23,"nodeType":"1058","messageId":"1059","endLine":41,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":44,"column":23,"nodeType":"1058","messageId":"1059","endLine":44,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":47,"column":23,"nodeType":"1058","messageId":"1059","endLine":47,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":50,"column":23,"nodeType":"1058","messageId":"1059","endLine":50,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":53,"column":23,"nodeType":"1058","messageId":"1059","endLine":53,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":56,"column":23,"nodeType":"1058","messageId":"1059","endLine":56,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":169,"column":35,"nodeType":"1058","messageId":"1059","endLine":169,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1057","line":170,"column":34,"nodeType":"1058","messageId":"1059","endLine":170,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":171,"column":34,"nodeType":"1058","messageId":"1059","endLine":171,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":172,"column":34,"nodeType":"1058","messageId":"1059","endLine":172,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":173,"column":34,"nodeType":"1058","messageId":"1059","endLine":173,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":174,"column":34,"nodeType":"1058","messageId":"1059","endLine":174,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":175,"column":34,"nodeType":"1058","messageId":"1059","endLine":175,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":176,"column":34,"nodeType":"1058","messageId":"1059","endLine":176,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":177,"column":34,"nodeType":"1058","messageId":"1059","endLine":177,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":178,"column":34,"nodeType":"1058","messageId":"1059","endLine":178,"endColumn":36},{"ruleId":"1056","severity":1,"message":"1057","line":179,"column":34,"nodeType":"1058","messageId":"1059","endLine":179,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1196","line":19,"column":10,"nodeType":"1041","messageId":"1042","endLine":19,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1197","line":19,"column":23,"nodeType":"1041","messageId":"1042","endLine":19,"endColumn":37},{"ruleId":"1056","severity":1,"message":"1057","line":37,"column":31,"nodeType":"1058","messageId":"1059","endLine":37,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":134,"column":48,"nodeType":"1058","messageId":"1059","endLine":134,"endColumn":50},{"ruleId":"1056","severity":1,"message":"1057","line":139,"column":54,"nodeType":"1058","messageId":"1059","endLine":139,"endColumn":56},{"ruleId":"1056","severity":1,"message":"1057","line":163,"column":48,"nodeType":"1058","messageId":"1059","endLine":163,"endColumn":50},{"ruleId":"1056","severity":1,"message":"1057","line":163,"column":76,"nodeType":"1058","messageId":"1059","endLine":163,"endColumn":78},{"ruleId":"1056","severity":1,"message":"1057","line":168,"column":54,"nodeType":"1058","messageId":"1059","endLine":168,"endColumn":56},{"ruleId":"1056","severity":1,"message":"1057","line":186,"column":54,"nodeType":"1058","messageId":"1059","endLine":186,"endColumn":56},{"ruleId":"1056","severity":1,"message":"1057","line":244,"column":37,"nodeType":"1058","messageId":"1059","endLine":244,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1155","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1198","line":11,"column":10,"nodeType":"1041","messageId":"1042","endLine":11,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1114","line":14,"column":21,"nodeType":"1041","messageId":"1042","endLine":14,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":213,"column":48,"nodeType":"1058","messageId":"1059","endLine":213,"endColumn":50},{"ruleId":"1039","severity":1,"message":"1199","line":13,"column":10,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":17},{"ruleId":"1039","severity":1,"message":"1200","line":13,"column":19,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":29},{"ruleId":"1075","severity":1,"message":"1076","line":87,"column":17,"nodeType":"1077","endLine":91,"endColumn":19},{"ruleId":"1039","severity":1,"message":"1201","line":1,"column":10,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1168","line":4,"column":8,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1202","line":20,"column":21,"nodeType":"1041","messageId":"1042","endLine":20,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":121,"column":38,"nodeType":"1058","messageId":"1059","endLine":121,"endColumn":40},{"ruleId":"1056","severity":1,"message":"1057","line":122,"column":35,"nodeType":"1058","messageId":"1059","endLine":122,"endColumn":37},{"ruleId":"1039","severity":1,"message":"1054","line":1,"column":27,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1203","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1204","line":4,"column":8,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":17},{"ruleId":"1039","severity":1,"message":"1205","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1097","line":7,"column":8,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":29},{"ruleId":"1039","severity":1,"message":"1206","line":8,"column":8,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":18},{"ruleId":"1039","severity":1,"message":"1207","line":10,"column":24,"nodeType":"1041","messageId":"1042","endLine":10,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1063","line":4,"column":3,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":11},{"ruleId":"1039","severity":1,"message":"1130","line":5,"column":3,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":9},{"ruleId":"1039","severity":1,"message":"1208","line":6,"column":3,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":8},{"ruleId":"1039","severity":1,"message":"1149","line":9,"column":3,"nodeType":"1041","messageId":"1042","endLine":9,"endColumn":8},{"ruleId":"1039","severity":1,"message":"1209","line":13,"column":10,"nodeType":"1041","messageId":"1042","endLine":13,"endColumn":16},{"ruleId":"1045","severity":1,"message":"1210","line":25,"column":6,"nodeType":"1047","endLine":25,"endColumn":30,"suggestions":"1211"},{"ruleId":"1056","severity":1,"message":"1057","line":119,"column":37,"nodeType":"1058","messageId":"1059","endLine":119,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":648,"column":37,"nodeType":"1058","messageId":"1059","endLine":648,"endColumn":39},{"ruleId":"1056","severity":1,"message":"1057","line":1177,"column":37,"nodeType":"1058","messageId":"1059","endLine":1177,"endColumn":39},{"ruleId":"1039","severity":1,"message":"1149","line":2,"column":35,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1155","line":4,"column":8,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":20},{"ruleId":"1039","severity":1,"message":"1212","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1213","line":20,"column":11,"nodeType":"1041","messageId":"1042","endLine":20,"endColumn":18},{"ruleId":"1056","severity":1,"message":"1057","line":27,"column":17,"nodeType":"1058","messageId":"1059","endLine":27,"endColumn":19},{"ruleId":"1056","severity":1,"message":"1057","line":30,"column":29,"nodeType":"1058","messageId":"1059","endLine":30,"endColumn":31},{"ruleId":"1056","severity":1,"message":"1057","line":39,"column":16,"nodeType":"1058","messageId":"1059","endLine":39,"endColumn":18},{"ruleId":"1056","severity":1,"message":"1057","line":100,"column":39,"nodeType":"1058","messageId":"1059","endLine":100,"endColumn":41},{"ruleId":"1039","severity":1,"message":"1149","line":2,"column":35,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1155","line":4,"column":8,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":32,"column":17,"nodeType":"1058","messageId":"1059","endLine":32,"endColumn":19},{"ruleId":"1056","severity":1,"message":"1057","line":35,"column":26,"nodeType":"1058","messageId":"1059","endLine":35,"endColumn":28},{"ruleId":"1056","severity":1,"message":"1057","line":38,"column":23,"nodeType":"1058","messageId":"1059","endLine":38,"endColumn":25},{"ruleId":"1056","severity":1,"message":"1057","line":50,"column":16,"nodeType":"1058","messageId":"1059","endLine":50,"endColumn":18},{"ruleId":"1056","severity":1,"message":"1057","line":112,"column":35,"nodeType":"1058","messageId":"1059","endLine":112,"endColumn":37},{"ruleId":"1039","severity":1,"message":"1214","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":21},{"ruleId":"1039","severity":1,"message":"1054","line":1,"column":27,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":36},{"ruleId":"1039","severity":1,"message":"1203","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1204","line":4,"column":8,"nodeType":"1041","messageId":"1042","endLine":4,"endColumn":17},{"ruleId":"1039","severity":1,"message":"1205","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1097","line":7,"column":8,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":29},{"ruleId":"1039","severity":1,"message":"1215","line":10,"column":23,"nodeType":"1041","messageId":"1042","endLine":10,"endColumn":34},{"ruleId":"1056","severity":1,"message":"1057","line":78,"column":40,"nodeType":"1058","messageId":"1059","endLine":78,"endColumn":42},{"ruleId":"1039","severity":1,"message":"1049","line":8,"column":25,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1050","line":8,"column":30,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1149","line":8,"column":35,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":40},{"ruleId":"1056","severity":1,"message":"1057","line":49,"column":19,"nodeType":"1058","messageId":"1059","endLine":49,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":49,"column":44,"nodeType":"1058","messageId":"1059","endLine":49,"endColumn":46},{"ruleId":"1039","severity":1,"message":"1216","line":52,"column":13,"nodeType":"1041","messageId":"1042","endLine":52,"endColumn":21},{"ruleId":"1075","severity":1,"message":"1076","line":102,"column":15,"nodeType":"1077","endLine":105,"endColumn":17},{"ruleId":"1217","severity":1,"message":"1218","line":227,"column":33,"nodeType":"1219","messageId":"1220","endLine":227,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":227,"column":47,"nodeType":"1058","messageId":"1059","endLine":227,"endColumn":49},{"ruleId":"1217","severity":1,"message":"1218","line":227,"column":58,"nodeType":"1219","messageId":"1220","endLine":227,"endColumn":60},{"ruleId":"1056","severity":1,"message":"1057","line":227,"column":72,"nodeType":"1058","messageId":"1059","endLine":227,"endColumn":74},{"ruleId":"1039","severity":1,"message":"1100","line":17,"column":9,"nodeType":"1041","messageId":"1042","endLine":17,"endColumn":16},{"ruleId":"1056","severity":1,"message":"1057","line":65,"column":20,"nodeType":"1058","messageId":"1059","endLine":65,"endColumn":22},{"ruleId":"1056","severity":1,"message":"1057","line":125,"column":41,"nodeType":"1058","messageId":"1059","endLine":125,"endColumn":43},{"ruleId":"1056","severity":1,"message":"1057","line":137,"column":40,"nodeType":"1058","messageId":"1059","endLine":137,"endColumn":42},{"ruleId":"1056","severity":1,"message":"1057","line":148,"column":43,"nodeType":"1058","messageId":"1059","endLine":148,"endColumn":45},{"ruleId":"1056","severity":1,"message":"1057","line":164,"column":46,"nodeType":"1058","messageId":"1059","endLine":164,"endColumn":48},{"ruleId":"1056","severity":1,"message":"1057","line":176,"column":46,"nodeType":"1058","messageId":"1059","endLine":176,"endColumn":48},{"ruleId":"1056","severity":1,"message":"1057","line":187,"column":41,"nodeType":"1058","messageId":"1059","endLine":187,"endColumn":43},{"ruleId":"1056","severity":1,"message":"1057","line":200,"column":44,"nodeType":"1058","messageId":"1059","endLine":200,"endColumn":46},{"ruleId":"1056","severity":1,"message":"1057","line":209,"column":44,"nodeType":"1058","messageId":"1059","endLine":209,"endColumn":46},{"ruleId":"1039","severity":1,"message":"1221","line":2,"column":8,"nodeType":"1041","messageId":"1042","endLine":2,"endColumn":16},{"ruleId":"1039","severity":1,"message":"1222","line":5,"column":8,"nodeType":"1041","messageId":"1042","endLine":5,"endColumn":21},{"ruleId":"1045","severity":1,"message":"1223","line":19,"column":6,"nodeType":"1047","endLine":19,"endColumn":8,"suggestions":"1224"},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1198","line":15,"column":10,"nodeType":"1041","messageId":"1042","endLine":15,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1225","line":15,"column":16,"nodeType":"1041","messageId":"1042","endLine":15,"endColumn":23},{"ruleId":"1039","severity":1,"message":"1226","line":16,"column":10,"nodeType":"1041","messageId":"1042","endLine":16,"endColumn":22},{"ruleId":"1039","severity":1,"message":"1227","line":48,"column":9,"nodeType":"1041","messageId":"1042","endLine":48,"endColumn":30},{"ruleId":"1039","severity":1,"message":"1049","line":1,"column":25,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":28},{"ruleId":"1039","severity":1,"message":"1050","line":1,"column":30,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":33},{"ruleId":"1039","severity":1,"message":"1149","line":1,"column":35,"nodeType":"1041","messageId":"1042","endLine":1,"endColumn":40},{"ruleId":"1039","severity":1,"message":"1228","line":3,"column":8,"nodeType":"1041","messageId":"1042","endLine":3,"endColumn":12},{"ruleId":"1039","severity":1,"message":"1064","line":7,"column":10,"nodeType":"1041","messageId":"1042","endLine":7,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1212","line":8,"column":8,"nodeType":"1041","messageId":"1042","endLine":8,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1173","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":14},{"ruleId":"1039","severity":1,"message":"1175","line":9,"column":10,"nodeType":"1041","messageId":"1042","endLine":9,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":20,"column":31,"nodeType":"1058","messageId":"1059","endLine":20,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":23,"column":36,"nodeType":"1058","messageId":"1059","endLine":23,"endColumn":38},{"ruleId":"1056","severity":1,"message":"1057","line":26,"column":19,"nodeType":"1058","messageId":"1059","endLine":26,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":30,"column":18,"nodeType":"1058","messageId":"1059","endLine":30,"endColumn":20},{"ruleId":"1177","severity":1,"message":"1178","line":31,"column":17,"nodeType":"1077","endLine":31,"endColumn":116},{"ruleId":"1056","severity":1,"message":"1057","line":32,"column":24,"nodeType":"1058","messageId":"1059","endLine":32,"endColumn":26},{"ruleId":"1177","severity":1,"message":"1178","line":33,"column":17,"nodeType":"1077","endLine":33,"endColumn":117},{"ruleId":"1177","severity":1,"message":"1178","line":35,"column":13,"nodeType":"1077","endLine":35,"endColumn":113},{"ruleId":"1039","severity":1,"message":"1180","line":42,"column":9,"nodeType":"1041","messageId":"1042","endLine":42,"endColumn":12},{"ruleId":"1056","severity":1,"message":"1057","line":43,"column":18,"nodeType":"1058","messageId":"1059","endLine":43,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":45,"column":24,"nodeType":"1058","messageId":"1059","endLine":45,"endColumn":26},{"ruleId":"1056","severity":1,"message":"1057","line":58,"column":25,"nodeType":"1058","messageId":"1059","endLine":58,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":62,"column":27,"nodeType":"1058","messageId":"1059","endLine":62,"endColumn":29},{"ruleId":"1056","severity":1,"message":"1057","line":64,"column":33,"nodeType":"1058","messageId":"1059","endLine":64,"endColumn":35},{"ruleId":"1039","severity":1,"message":"1183","line":87,"column":11,"nodeType":"1041","messageId":"1042","endLine":87,"endColumn":14},{"ruleId":"1056","severity":1,"message":"1057","line":100,"column":42,"nodeType":"1058","messageId":"1059","endLine":100,"endColumn":44},{"ruleId":"1039","severity":1,"message":"1173","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":14},{"ruleId":"1056","severity":1,"message":"1057","line":19,"column":31,"nodeType":"1058","messageId":"1059","endLine":19,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":22,"column":36,"nodeType":"1058","messageId":"1059","endLine":22,"endColumn":38},{"ruleId":"1056","severity":1,"message":"1057","line":25,"column":19,"nodeType":"1058","messageId":"1059","endLine":25,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":29,"column":18,"nodeType":"1058","messageId":"1059","endLine":29,"endColumn":20},{"ruleId":"1177","severity":1,"message":"1178","line":30,"column":17,"nodeType":"1077","endLine":30,"endColumn":116},{"ruleId":"1056","severity":1,"message":"1057","line":31,"column":24,"nodeType":"1058","messageId":"1059","endLine":31,"endColumn":26},{"ruleId":"1177","severity":1,"message":"1178","line":32,"column":17,"nodeType":"1077","endLine":32,"endColumn":117},{"ruleId":"1177","severity":1,"message":"1178","line":34,"column":13,"nodeType":"1077","endLine":34,"endColumn":113},{"ruleId":"1039","severity":1,"message":"1180","line":41,"column":9,"nodeType":"1041","messageId":"1042","endLine":41,"endColumn":12},{"ruleId":"1056","severity":1,"message":"1057","line":42,"column":18,"nodeType":"1058","messageId":"1059","endLine":42,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":44,"column":24,"nodeType":"1058","messageId":"1059","endLine":44,"endColumn":26},{"ruleId":"1056","severity":1,"message":"1057","line":58,"column":25,"nodeType":"1058","messageId":"1059","endLine":58,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":62,"column":27,"nodeType":"1058","messageId":"1059","endLine":62,"endColumn":29},{"ruleId":"1056","severity":1,"message":"1057","line":64,"column":33,"nodeType":"1058","messageId":"1059","endLine":64,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":80,"column":42,"nodeType":"1058","messageId":"1059","endLine":80,"endColumn":44},{"ruleId":"1039","severity":1,"message":"1173","line":6,"column":8,"nodeType":"1041","messageId":"1042","endLine":6,"endColumn":14},{"ruleId":"1056","severity":1,"message":"1057","line":19,"column":31,"nodeType":"1058","messageId":"1059","endLine":19,"endColumn":33},{"ruleId":"1056","severity":1,"message":"1057","line":22,"column":36,"nodeType":"1058","messageId":"1059","endLine":22,"endColumn":38},{"ruleId":"1056","severity":1,"message":"1057","line":25,"column":19,"nodeType":"1058","messageId":"1059","endLine":25,"endColumn":21},{"ruleId":"1056","severity":1,"message":"1057","line":29,"column":18,"nodeType":"1058","messageId":"1059","endLine":29,"endColumn":20},{"ruleId":"1177","severity":1,"message":"1178","line":30,"column":17,"nodeType":"1077","endLine":30,"endColumn":116},{"ruleId":"1056","severity":1,"message":"1057","line":31,"column":24,"nodeType":"1058","messageId":"1059","endLine":31,"endColumn":26},{"ruleId":"1177","severity":1,"message":"1178","line":32,"column":17,"nodeType":"1077","endLine":32,"endColumn":117},{"ruleId":"1177","severity":1,"message":"1178","line":34,"column":13,"nodeType":"1077","endLine":34,"endColumn":113},{"ruleId":"1039","severity":1,"message":"1180","line":41,"column":9,"nodeType":"1041","messageId":"1042","endLine":41,"endColumn":12},{"ruleId":"1056","severity":1,"message":"1057","line":42,"column":18,"nodeType":"1058","messageId":"1059","endLine":42,"endColumn":20},{"ruleId":"1056","severity":1,"message":"1057","line":44,"column":24,"nodeType":"1058","messageId":"1059","endLine":44,"endColumn":26},{"ruleId":"1056","severity":1,"message":"1057","line":57,"column":25,"nodeType":"1058","messageId":"1059","endLine":57,"endColumn":27},{"ruleId":"1056","severity":1,"message":"1057","line":61,"column":27,"nodeType":"1058","messageId":"1059","endLine":61,"endColumn":29},{"ruleId":"1056","severity":1,"message":"1057","line":63,"column":33,"nodeType":"1058","messageId":"1059","endLine":63,"endColumn":35},{"ruleId":"1056","severity":1,"message":"1057","line":89,"column":42,"nodeType":"1058","messageId":"1059","endLine":89,"endColumn":44},"no-native-reassign",["1229"],"no-negated-in-lhs",["1230"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'io' is defined but never used.","'Error404' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'path'. Either include it or remove the dependency array.","ArrayExpression",["1231"],"'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'testDaySchudele' is defined but never used.","'reportsList' is defined but never used.","'useEffect' is defined but never used.","'handleEditSchedule' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'maxTime' is assigned a value but never used.","'useRef' is defined but never used.","'getAllMedia' is defined but never used.","'Dropdown' is defined but never used.","'Link' is defined but never used.","'MyCustomPlugin' is assigned a value but never used.","'sequence' is assigned a value but never used.","'schedulename' is assigned a value but never used.","'mutate' is assigned a value but never used.","'id' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"timing\"] found.","Property","unnecessarilyComputedProperty",{"range":"1232","text":"1233"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'getAllDaySequence' is defined but never used.","'setSequence' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callSingleDaySequence'. Either include it or remove the dependency array.",["1234"],"Expected '!==' and instead saw '!='.",{"range":"1235","text":"1233"},"Unnecessarily computed property ['startTime'] found.",{"range":"1236","text":"1237"},"Unnecessarily computed property ['endTime'] found.",{"range":"1238","text":"1239"},{"range":"1240","text":"1233"},"'handleWeekCellChange' is assigned a value but never used.","'da' is defined but never used.","'activeCard' is assigned a value but never used.","'setActiveCard' is assigned a value but never used.","'selectedButtonIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAllDaySequence'. Either include it or remove the dependency array.",["1241"],"'menuIcon' is defined but never used.","'defaultComparisonIcon' is defined but never used.","'nameAvatar' is defined but never used.","'deleteIcon' is defined but never used.","'history' is assigned a value but never used.","'handlePublishcOpen' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'axios' is defined but never used.","'response' is assigned a value but never used.","'setState' is assigned a value but never used.","'newEvent' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'timeText' is assigned a value but never used.","'useParams' is defined but never used.","'published' is assigned a value but never used.","'setPublished' is assigned a value but never used.","'hasEvent' is assigned a value but never used.","'event' is assigned a value but never used.","'desiredFormat' is assigned a value but never used.","'eventToRemove' is assigned a value but never used.","'setEvents' is assigned a value but never used.","'daySequence' is assigned a value but never used.","'seqArray' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs",["1242"],"'currentMonth' is assigned a value but never used.","'checkboxKey' is assigned a value but never used.","'disablePrp' is assigned a value but never used.","'Button' is defined but never used.","'Table' is defined but never used.","React Hook useEffect has a missing dependency: 'callAllScreenApi'. Either include it or remove the dependency array.",["1243"],"'useSWR' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1244"],"React Hook useEffect has a missing dependency: 'reportSlug'. Either include it or remove the dependency array.",["1245"],"'roles' is defined but never used.","'Form' is defined but never used.","'addressError' is assigned a value but never used.","'setAddressError' is assigned a value but never used.","'bootstrapRef' is assigned a value but never used.","'adres' is assigned a value but never used.","'getCompositionById' is defined but never used.","'isVerified' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleAddClass'. Either include it or remove the dependency array. If 'handleAddClass' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1246"],"'Badge' is defined but never used.","'setQuickplay' is defined but never used.","'humanReadableFormattedDateString' is defined but never used.","Unnecessarily computed property [\"zone\"] found.",{"range":"1247","text":"1248"},"'dt' is assigned a value but never used.","'tagCloseIcon' is defined but never used.","'PerfectScrollbar' is defined but never used.","'avatar' is defined but never used.","'onFullScreen' is assigned a value but never used.","'Switch' is defined but never used.","'setSelectedOption' is assigned a value but never used.","'errMessage' is assigned a value but never used.","'usePlacesWidget' is defined but never used.","'selectedOption' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'actionType'. Either include it or remove the dependency array.",["1249"],"'handleChange' is assigned a value but never used.",["1250"],"'WebVideoPlayer' is defined but never used.","'BASE_URL' is defined but never used.","'ReactPlayer' is defined but never used.","'Iframe' is defined but never used.","'fontSize' is defined but never used.","'moment' is defined but never used.","'Zone2' is defined but never used.","'getWeather' is defined but never used.","'handleScrollerApps' is assigned a value but never used.","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","'handleTextApps' is assigned a value but never used.","'txt' is assigned a value but never used.","'handleClockApps' is assigned a value but never used.","'handleWeatherApps' is assigned a value but never used.","'prp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contents' and 'current2Index'. Either include them or remove the dependency array.",["1251"],"'videojs' is defined but never used.","The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Unnecessarily computed property [\"x\"] found.",{"range":"1252","text":"1253"},"Unnecessarily computed property [\"y\"] found.",{"range":"1254","text":"1255"},"'addDeviceProfile' is defined but never used.","'layoutSelected' is defined but never used.","React Hook useEffect has missing dependencies: 'contentnew.Zone1', 'contentnew.Zone2', 'contentnew.Zone3', 'current2Index', and 'layout'. Either include them or remove the dependency array.",["1256"],"'activeClass' is assigned a value but never used.","'setActiveClass' is assigned a value but never used.","'name' is assigned a value but never used.","'preview' is assigned a value but never used.","'setPreview' is assigned a value but never used.","'useCallback' is defined but never used.","'setIsLoading' is assigned a value but never used.","'AddNewTagModal' is defined but never used.","'downArrow' is defined but never used.","'veiwDetailIcon' is defined but never used.","'assignIcon' is defined but never used.","'updateGroups' is defined but never used.","'Modal' is defined but never used.","'Editor' is defined but never used.","React Hook useEffect has a missing dependency: 'roles'. Either include it or remove the dependency array.",["1257"],"'Select' is defined but never used.","'options' is assigned a value but never used.","'emptyMediaImg' is defined but never used.","'updateUsers' is defined but never used.","'jsonData' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'ReactDOM' is defined but never used.","'getCroppedImg' is defined but never used.","React Hook useCallback has a missing dependency: 'setCroppedAreaPixels'. Either include it or remove the dependency array. If 'setCroppedAreaPixels' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1258"],"'setName' is assigned a value but never used.","'checkedItems' is assigned a value but never used.","'handleSelectAllChange' is assigned a value but never used.","'icon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1259","fix":"1260"},[3387,3397],"\"timing\"",{"desc":"1261","fix":"1262"},[4467,4477],[4528,4541],"'startTime'",[4607,4618],"'endTime'",[4742,4752],{"desc":"1263","fix":"1264"},{"desc":"1263","fix":"1265"},{"desc":"1266","fix":"1267"},{"desc":"1268","fix":"1269"},{"desc":"1270","fix":"1271"},{"desc":"1272","fix":"1273"},[1458,1466],"\"zone\"",{"desc":"1274","fix":"1275"},{"desc":"1274","fix":"1276"},{"desc":"1277","fix":"1278"},[10227,10232],"\"x\"",[11013,11018],"\"y\"",{"desc":"1279","fix":"1280"},{"desc":"1281","fix":"1282"},{"desc":"1283","fix":"1284"},"Update the dependencies array to be: [dispatch, path, props.history]",{"range":"1285","text":"1286"},"Update the dependencies array to be: [callSingleDaySequence, schId]",{"range":"1287","text":"1288"},"Update the dependencies array to be: [callAllDaySequence, id]",{"range":"1289","text":"1290"},{"range":"1291","text":"1290"},"Update the dependencies array to be: [callAllScreenApi]",{"range":"1292","text":"1293"},"Update the dependencies array to be: [getData, id]",{"range":"1294","text":"1295"},"Update the dependencies array to be: [reportData, reportSlug]",{"range":"1296","text":"1297"},"Update the dependencies array to be: [composition, handleAddClass]",{"range":"1298","text":"1299"},"Update the dependencies array to be: [actionType, mediaData]",{"range":"1300","text":"1301"},{"range":"1302","text":"1301"},"Update the dependencies array to be: [currentIndex, current1Index, contents, current2Index]",{"range":"1303","text":"1304"},"Update the dependencies array to be: [currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",{"range":"1305","text":"1306"},"Update the dependencies array to be: [makeRefresh, roles, rolesData]",{"range":"1307","text":"1308"},"Update the dependencies array to be: [setCroppedAreaPixels]",{"range":"1309","text":"1310"},[1436,1461],"[dispatch, path, props.history]",[3888,3895],"[callSingleDaySequence, schId]",[2306,2310],"[callAllDaySequence, id]",[1623,1627],[1543,1545],"[callAllScreenApi]",[936,940],"[getData, id]",[2015,2027],"[reportData, reportSlug]",[8101,8114],"[composition, handleAddClass]",[2936,2947],"[actionType, mediaData]",[2164,2175],[8160,8189],"[currentIndex, current1Index, contents, current2Index]",[3591,3620],"[currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",[639,663],"[makeRefresh, roles, rolesData]",[517,519],"[setCroppedAreaPixels]"]
=======
[{"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/index.js":"1","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/reportWebVitals.js":"2","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/App.js":"3","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/store.js":"4","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/context/ThemeContext.js":"5","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/services/AuthService.js":"6","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/selectors/AuthSelectors.js":"7","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Error404.js":"8","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Login.js":"9","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Registration.js":"10","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/ForgotPassword.js":"11","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/PostsReducer.js":"12","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/AuthReducer.js":"13","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/Reducers.js":"14","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Layout.jsx":"15","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/index.jsx":"16","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/PushScreen.jsx":"17","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/actions/AuthActions.js":"18","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/actions/PostTypes.js":"19","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/index.jsx":"20","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/TestDay.js":"21","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/DaySchedule.js":"22","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/TestDaySchudele.js":"23","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/DesignMonthSchedule.js":"24","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SecondMonth.js":"25","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SequenceEdit.js":"26","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/api.js":"27","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/ScrollToTop.js":"28","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/Footer.js":"29","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/UtilsService.js":"30","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/details.jsx":"31","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SelectComparison.jsx":"32","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/CopyTestDay.jsx":"33","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/ChooseLayout.jsx":"34","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/viewSchedule.jsx":"35","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/MonthSchedule.jsx":"36","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/CopyMonthSchedule.jsx":"37","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/reportsList.jsx":"38","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/TableLoader.jsx":"39","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CreateComposition.jsx":"40","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/EditComposition.jsx":"41","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/listComposition.jsx":"42","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/index.js":"43","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/fetchClient.js":"44","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/index.jsx":"45","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/index.jsx":"46","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/integrations/index.jsx":"47","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/index.jsx":"48","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/index.jsx":"49","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/PublishMediaModal.jsx":"50","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/main.jsx":"51","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Audit.jsx":"52","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Media.jsx":"53","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CompositionActions.jsx":"54","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/ChatBox.js":"55","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/Header.js":"56","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/NavHader.js":"57","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/SideBar.js":"58","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/FilterModal.jsx":"59","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/listScreens.jsx":"60","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddScreenModal.jsx":"61","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddDeviceProfile.jsx":"62","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/roles.jsx":"63","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/profile.jsx":"64","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddUserModal.jsx":"65","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddGroup.jsx":"66","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/group.jsx":"67","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/User.jsx":"68","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/defaultComposition.jsx":"69","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/compositionPlayer.jsx":"70","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/layouts/viewDetails.jsx":"71","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Chat.js":"72","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Notes.js":"73","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/duplicateComposition.jsx":"74","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/Logout.js":"75","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Alerts.js":"76","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/CompolistionListModel.jsx":"77","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/SelectScreenModal.jsx":"78","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddNewTagModal.jsx":"79","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DefaultCompositionModal.jsx":"80","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/WebVideoPlayer.jsx":"81","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DragMove.jsx":"82","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddMedia.jsx":"83","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/tagInputField.jsx":"84","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/MsgBox.js":"85","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Uptime.jsx":"86","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/generateReportModal.jsx":"87","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/BulletinBoardAppModal.jsx":"88","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AirQualityAppModal.jsx":"89","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/ClockApp.jsx":"90","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/QrCodeModal.jsx":"91","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/StocksAppModal.jsx":"92","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/YoutubeAppModal.jsx":"93","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/TextAppModal.jsx":"94","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/WeatherAppModal.jsx":"95","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/ScrollerTextAppModal.jsx":"96","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/RssFeedAppModal.jsx":"97","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UrlAppModal.jsx":"98","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UploadMediaFileModal.jsx":"99","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/listMedia.jsx":"100","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/Common.jsx":"101","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DeleteConfirmation.jsx":"102","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/fileUploadWithPreview.jsx":"103","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UpdateModal.jsx":"104","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/WindowsModal.jsx":"105","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/QuickPlayModal.jsx":"106","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CompositionTable.jsx":"107","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/ZoneInfoTable.jsx":"108","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/saveCompositionName.jsx":"109","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/previewComposition.jsx":"110","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/editSelectedComposition.jsx":"111","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/cropImage/cropImage.jsx":"112","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/cropImage/index.jsx":"113"},{"size":1355,"mtime":1691127935344,"results":"114","hashOfConfig":"115"},{"size":362,"mtime":1691127935392,"results":"116","hashOfConfig":"115"},{"size":3356,"mtime":1691127934635,"results":"117","hashOfConfig":"115"},{"size":753,"mtime":1691127935454,"results":"118","hashOfConfig":"115"},{"size":1856,"mtime":1691127934635,"results":"119","hashOfConfig":"115"},{"size":2418,"mtime":1691127935450,"results":"120","hashOfConfig":"115"},{"size":118,"mtime":1691127935453,"results":"121","hashOfConfig":"115"},{"size":1004,"mtime":1691127935383,"results":"122","hashOfConfig":"115"},{"size":7249,"mtime":1691127935385,"results":"123","hashOfConfig":"115"},{"size":5716,"mtime":1691127935385,"results":"124","hashOfConfig":"115"},{"size":2040,"mtime":1691127935384,"results":"125","hashOfConfig":"115"},{"size":1666,"mtime":1691127935452,"results":"126","hashOfConfig":"115"},{"size":1799,"mtime":1691127935452,"results":"127","hashOfConfig":"115"},{"size":1006,"mtime":1691127935452,"results":"128","hashOfConfig":"115"},{"size":2214,"mtime":1691127935351,"results":"129","hashOfConfig":"115"},{"size":4722,"mtime":1691127935366,"results":"130","hashOfConfig":"115"},{"size":32874,"mtime":1691141979936,"results":"131","hashOfConfig":"115"},{"size":2565,"mtime":1691127935451,"results":"132","hashOfConfig":"115"},{"size":503,"mtime":1691127935451,"results":"133","hashOfConfig":"115"},{"size":2722,"mtime":1691127935364,"results":"134","hashOfConfig":"115"},{"size":12892,"mtime":1691127935357,"results":"135","hashOfConfig":"115"},{"size":9328,"mtime":1691127935354,"results":"136","hashOfConfig":"115"},{"size":5400,"mtime":1691127935358,"results":"137","hashOfConfig":"115"},{"size":15987,"mtime":1691127935354,"results":"138","hashOfConfig":"115"},{"size":26197,"mtime":1691127935356,"results":"139","hashOfConfig":"115"},{"size":14692,"mtime":1691127935357,"results":"140","hashOfConfig":"115"},{"size":10781,"mtime":1691587145622,"results":"141","hashOfConfig":"115"},{"size":245,"mtime":1691127935367,"results":"142","hashOfConfig":"115"},{"size":412,"mtime":1691127935367,"results":"143","hashOfConfig":"115"},{"size":3706,"mtime":1691127935454,"results":"144","hashOfConfig":"115"},{"size":15246,"mtime":1691127935360,"results":"145","hashOfConfig":"115"},{"size":11618,"mtime":1691127935357,"results":"146","hashOfConfig":"115"},{"size":6538,"mtime":1691127935354,"results":"147","hashOfConfig":"115"},{"size":4488,"mtime":1691127935349,"results":"148","hashOfConfig":"115"},{"size":6239,"mtime":1691127935358,"results":"149","hashOfConfig":"115"},{"size":5817,"mtime":1691127935355,"results":"150","hashOfConfig":"115"},{"size":44423,"mtime":1691127935353,"results":"151","hashOfConfig":"115"},{"size":3169,"mtime":1691127935360,"results":"152","hashOfConfig":"115"},{"size":312,"mtime":1691127935345,"results":"153","hashOfConfig":"115"},{"size":592,"mtime":1691127935350,"results":"154","hashOfConfig":"115"},{"size":1062,"mtime":1691127935350,"results":"155","hashOfConfig":"115"},{"size":4919,"mtime":1691127935351,"results":"156","hashOfConfig":"115"},{"size":955,"mtime":1691127935369,"results":"157","hashOfConfig":"115"},{"size":779,"mtime":1691581180058,"results":"158","hashOfConfig":"115"},{"size":2324,"mtime":1691127935360,"results":"159","hashOfConfig":"115"},{"size":4068,"mtime":1691127935352,"results":"160","hashOfConfig":"115"},{"size":31797,"mtime":1691146943546,"results":"161","hashOfConfig":"115"},{"size":7241,"mtime":1691141979937,"results":"162","hashOfConfig":"115"},{"size":6690,"mtime":1691496333485,"results":"163","hashOfConfig":"115"},{"size":7541,"mtime":1691142008945,"results":"164","hashOfConfig":"115"},{"size":8119,"mtime":1691323755414,"results":"165","hashOfConfig":"115"},{"size":1649,"mtime":1691496333484,"results":"166","hashOfConfig":"115"},{"size":1467,"mtime":1691127935359,"results":"167","hashOfConfig":"115"},{"size":7025,"mtime":1691127935349,"results":"168","hashOfConfig":"115"},{"size":2258,"mtime":1691127935366,"results":"169","hashOfConfig":"115"},{"size":3673,"mtime":1691127935368,"results":"170","hashOfConfig":"115"},{"size":835,"mtime":1691127935368,"results":"171","hashOfConfig":"115"},{"size":6114,"mtime":1691142413013,"results":"172","hashOfConfig":"115"},{"size":3313,"mtime":1691127935374,"results":"173","hashOfConfig":"115"},{"size":8921,"mtime":1691127935361,"results":"174","hashOfConfig":"115"},{"size":10001,"mtime":1691127935371,"results":"175","hashOfConfig":"115"},{"size":13998,"mtime":1691496333488,"results":"176","hashOfConfig":"115"},{"size":63463,"mtime":1691496333486,"results":"177","hashOfConfig":"115"},{"size":9880,"mtime":1691500765947,"results":"178","hashOfConfig":"115"},{"size":7224,"mtime":1691496333490,"results":"179","hashOfConfig":"115"},{"size":6205,"mtime":1691127935370,"results":"180","hashOfConfig":"115"},{"size":4176,"mtime":1691127935362,"results":"181","hashOfConfig":"115"},{"size":6956,"mtime":1691127935362,"results":"182","hashOfConfig":"115"},{"size":3638,"mtime":1691588508232,"results":"183","hashOfConfig":"115"},{"size":21507,"mtime":1691644968809,"results":"184","hashOfConfig":"115"},{"size":4141,"mtime":1691127935381,"results":"185","hashOfConfig":"115"},{"size":12605,"mtime":1691127935346,"results":"186","hashOfConfig":"115"},{"size":5797,"mtime":1691127935347,"results":"187","hashOfConfig":"115"},{"size":2542,"mtime":1691127935380,"results":"188","hashOfConfig":"115"},{"size":1215,"mtime":1691127935368,"results":"189","hashOfConfig":"115"},{"size":5763,"mtime":1691127935346,"results":"190","hashOfConfig":"115"},{"size":7121,"mtime":1691127935373,"results":"191","hashOfConfig":"115"},{"size":7673,"mtime":1691127935376,"results":"192","hashOfConfig":"115"},{"size":2382,"mtime":1691127935371,"results":"193","hashOfConfig":"115"},{"size":6618,"mtime":1691127935373,"results":"194","hashOfConfig":"115"},{"size":2410,"mtime":1691127935364,"results":"195","hashOfConfig":"115"},{"size":887,"mtime":1691127935374,"results":"196","hashOfConfig":"115"},{"size":9502,"mtime":1691127935370,"results":"197","hashOfConfig":"115"},{"size":1695,"mtime":1691127935361,"results":"198","hashOfConfig":"115"},{"size":12668,"mtime":1691127935347,"results":"199","hashOfConfig":"115"},{"size":2238,"mtime":1691127935359,"results":"200","hashOfConfig":"115"},{"size":7617,"mtime":1691141979943,"results":"201","hashOfConfig":"115"},{"size":4524,"mtime":1691127935372,"results":"202","hashOfConfig":"115"},{"size":3515,"mtime":1691127935372,"results":"203","hashOfConfig":"115"},{"size":6039,"mtime":1691127935372,"results":"204","hashOfConfig":"115"},{"size":4063,"mtime":1691127935375,"results":"205","hashOfConfig":"115"},{"size":5583,"mtime":1691127935377,"results":"206","hashOfConfig":"115"},{"size":6554,"mtime":1691142413015,"results":"207","hashOfConfig":"115"},{"size":6770,"mtime":1691127935377,"results":"208","hashOfConfig":"115"},{"size":3305,"mtime":1691127935379,"results":"209","hashOfConfig":"115"},{"size":5730,"mtime":1691127935376,"results":"210","hashOfConfig":"115"},{"size":5408,"mtime":1691127935376,"results":"211","hashOfConfig":"115"},{"size":6752,"mtime":1691142413014,"results":"212","hashOfConfig":"115"},{"size":3718,"mtime":1691127935378,"results":"213","hashOfConfig":"115"},{"size":11861,"mtime":1691323755412,"results":"214","hashOfConfig":"115"},{"size":8598,"mtime":1691142413010,"results":"215","hashOfConfig":"115"},{"size":773,"mtime":1691127935373,"results":"216","hashOfConfig":"115"},{"size":4255,"mtime":1691127935352,"results":"217","hashOfConfig":"115"},{"size":2670,"mtime":1691127935377,"results":"218","hashOfConfig":"115"},{"size":973,"mtime":1691127935379,"results":"219","hashOfConfig":"115"},{"size":6287,"mtime":1691127935375,"results":"220","hashOfConfig":"115"},{"size":4782,"mtime":1691142413011,"results":"221","hashOfConfig":"115"},{"size":10849,"mtime":1691127935351,"results":"222","hashOfConfig":"115"},{"size":2188,"mtime":1691127935381,"results":"223","hashOfConfig":"115"},{"size":15141,"mtime":1691127935381,"results":"224","hashOfConfig":"115"},{"size":6376,"mtime":1691127935380,"results":"225","hashOfConfig":"115"},{"size":2567,"mtime":1691127935348,"results":"226","hashOfConfig":"115"},{"size":764,"mtime":1691127935348,"results":"227","hashOfConfig":"115"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},"mjyqd6",{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"230"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"230"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"230"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"230"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"230"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"276","usedDeprecatedRules":"230"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"230"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"230"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"230"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":4,"source":"290","usedDeprecatedRules":"230"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"230"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"230"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"230"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"230"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"230"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"230"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"230"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"230"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"230"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"230"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"230"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"230"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"230"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"230"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"230"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"230"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"230"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"230"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"230"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"383","usedDeprecatedRules":"230"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"230"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"230"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"230"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"230"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"230"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"230"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"230"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"230"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"230"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"230"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"230"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"230"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"230"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"230"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"230"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"230"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"230"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"230"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"230"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"230"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"230"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"230"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"230"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"230"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"230"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"230"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"230"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"491","usedDeprecatedRules":"230"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"230"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"230"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"230"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"230"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"230"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"230"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"230"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"230"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"230"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"230"},"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/index.js",[],["526","527"],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/reportWebVitals.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/App.js",["528","529","530","531"],"import { lazy, Suspense, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n/// Components\nimport Index from './jsx/index';\nimport { connect, useDispatch } from 'react-redux';\nimport { Route, Switch, withRouter } from 'react-router-dom';\n// action\nimport { checkAutoLogin } from './services/AuthService';\nimport { isAuthenticated } from './store/selectors/AuthSelectors';\n/// Style\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\nimport \"./css/style.css\";\nimport Webplayer from './jsx/components/web-player';\nimport Layout from './jsx/components/layout/Layout';\nimport PushScreen from './jsx/components/push/PushScreen';\nimport Error404 from './jsx/pages/Error404';\n// import { socket } from './utils/socket';\n\n\nconst SignUp = lazy(() => import('./jsx/pages/Registration'));\nconst ForgotPassword = lazy(() => import('./jsx/pages/ForgotPassword'));\nconst Login = lazy(() => {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(import('./jsx/pages/Login')), 500);\n    });\n});\nfunction App(props) {\n    let path = window.location.pathname\n    path = path.split('/')\n    path = path[path.length - 1]\n    // const [isConnected, setIsConnected] = useState(socket.connected);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (path !== 'web-player') {\n            checkAutoLogin(dispatch, props.history);\n        }\n\n    }, [dispatch, props.history]);\n    let routes = (\n        <Switch>\n            <Route path='/login' component={Login} />\n            <Route path='/page-register' component={SignUp} />\n            <Route path='/page-forgot-password' component={ForgotPassword} />\n            <Route path='/layout' component={Layout} />\n            <Route path='/push' component={PushScreen} />\n\n\n        </Switch>\n    );\n    if (path === 'web-player') {\n        return (\n            <Switch>\n                <Route path='/web-player' component={Webplayer} />\n            </Switch>\n        )\n    }\n    else if (props.isAuthenticated) {\n        return (\n            <>\n                <Suspense fallback={\n                    <div id=\"preloader\">\n                        <div className=\"sk-three-bounce\">\n                            <div className=\"sk-child sk-bounce1\"></div>\n                            <div className=\"sk-child sk-bounce2\"></div>\n                            <div className=\"sk-child sk-bounce3\"></div>\n                        </div>\n                    </div>\n                }\n                >\n                    <Index />\n                </Suspense>\n            </>\n        );\n\n    } else {\n        return (\n            <div className=\"vh-100\">\n                <Suspense fallback={\n                    <div id=\"preloader\">\n                        <div className=\"sk-three-bounce\">\n                            <div className=\"sk-child sk-bounce1\"></div>\n                            <div className=\"sk-child sk-bounce2\"></div>\n                            <div className=\"sk-child sk-bounce3\"></div>\n                        </div>\n                    </div>\n                }\n                >\n                    {routes}\n                </Suspense>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: isAuthenticated(state),\n    };\n};\n\nexport default withRouter(connect(mapStateToProps)(App)); \n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/store.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/context/ThemeContext.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/services/AuthService.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/selectors/AuthSelectors.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Error404.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Login.js",["532","533","534"],"import React, { useState } from 'react'\nimport { connect, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { loadingToggleAction,loginAction,\n} from '../../store/actions/AuthActions';\nimport { Row, Col, Card,  Tab, Nav, Button } from 'react-bootstrap'\n//\nimport logo from '../../img/logo.png'\nimport eyeOff from '../../img/eye-off.svg'\nimport googleIcon from '../../img/google-icon.png'\n\nfunction Login (props) {\n    const [email, setEmail] = useState('demo@example.com');\n    let errorsObj = { email: '', password: '' };\n    const [errors, setErrors] = useState(errorsObj);\n    const [password, setPassword] = useState('123456');\n    const dispatch = useDispatch();\n\n    function onLogin(e) {\n        e.preventDefault();\n        let error = false;\n        const errorObj = { ...errorsObj };\n        if (email === '') {\n            errorObj.email = 'Email is Required';\n            error = true;\n        }\n        if (password === '') {\n            errorObj.password = 'Password is Required';\n            error = true;\n        }\n        setErrors(errorObj);\n        if (error) {\n\t\t\treturn ;\n\t\t}\n\t\tdispatch(loadingToggleAction(true));\t\n        dispatch(loginAction(email, password, props.history));\n    }\n\n\n\tconst tabData = [\n\t\t{\n\t\t  name: 'Sign in',\n\t\t  content:\t<div>\n\t\t  <div className=\"mb-4\">\n\t\t\t  <h3 className=\"mb-1 font-w600\">Welcome Back</h3>\n\t\t\t  <p className=\"welcome-content-paragraph\">Log in with your data that you entered during your registration</p>\n\t\t  </div>\n\t\t  {props.errorMessage && (\n\t\t\t  <div className='bg-red-300 text-red-900 border border-red-900 p-1 my-2'>\n\t\t\t\t  {props.errorMessage}\n\t\t\t  </div>\n\t\t  )}\n\t\t  {props.successMessage && (\n\t\t\t  <div className='bg-green-300 text-green-900 border border-green-900 p-1 my-2'>\n\t\t\t\t  {props.successMessage}\n\t\t\t  </div>\n\t\t  )}\n\t\t  <form onSubmit={onLogin}>\n\t\t\t  <div className=\"form-group\">\n\t\t\t\t  <input type=\"email\" className=\"form-control\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n\t\t\t\t  {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>}\n\t\t\t  </div>\n\t\t\t  <div className=\"form-group password-textfield\">\n\t\t\t\t  <input type=\"password\" className=\"form-control\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n\t\t\t  <span className='eye-off'><img src={eyeOff} alt=\"\" className=\"eye-off\"/> </span>\n\t\t\t\t  {errors.password && <div className=\"text-danger fs-12\">{errors.password}</div>}\n\t\t\t  </div>\n\t\t\t  <div className='recover-password d-flex justify-content-end'>\n\t\t\t\t  <Link  className='revover-password'  to=\"./page-register\">Recover Password ?</Link>\n\t\t\t  </div>\n\t\t\t  <div className=\"text-center\">\n\t\t\t\t  <button type=\"submit\" className=\"btn btn-primary btn-block btn-pink\">Sign In</button>\n\t\t\t  </div>\n\t\t  </form>\n\t\t  <div className=\"new-account add-new-account  text-center mt-2\">\n\t\t\t  <p className=\"mb-0\">Don't have an account?{\" \"}\n\t\t\t\t  <Link className=\"signup-link\" to=\"./page-register\">Sign up</Link>\n\t\t\t  </p>\n\t\t  </div>\n\n\t\t  <Button className='btn-google-signin' variant='outline-primary'>\n\t\t  <img src={googleIcon} alt=\"\" className=\"logo-icon mr-2\"/> <span>Sign in with Google</span>\n\t\t  </Button>\n\t\t  </div>\n\n\t\t},\n\t\t{\n\t\t  name: 'Register',\n\t\t  content:<div>\n\t\t  <div className=\"mb-4\">\n\t\t\t  <h3 className=\"mb-1 font-w600\">Let’s get Started</h3>\n\t\t\t  <p className=\"welcome-content-paragraph\">Enter your basic information to create new account on Trendyy</p>\n\t\t  </div>\n\t\t  {props.errorMessage && (\n\t\t\t  <div className='bg-red-300 text-red-900 border border-red-900 p-1 my-2'>\n\t\t\t\t  {props.errorMessage}\n\t\t\t  </div>\n\t\t  )}\n\t\t  {props.successMessage && (\n\t\t\t  <div className='bg-green-300 text-green-900 border border-green-900 p-1 my-2'>\n\t\t\t\t  {props.successMessage}\n\t\t\t  </div>\n\t\t  )}\n\t\t  <form onSubmit={onLogin}>\n\t\t  <div className=\"form-group\">\n\t\t\t\t  <input type=\"text\" className=\"form-control\" placeholder='Enter Name' value='Enter Name'/>\n\t\t\t\t  {/* {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>} */}\n\t\t\t  </div>\n\t\t\t  <div className=\"form-group\">\n\t\t\t\t  <input type=\"email\" className=\"form-control\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n\t\t\t\t  {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>}\n\t\t\t  </div>\n\t\t\t  <div className=\"form-group\">\n\t\t\t\t  <input type=\"phone\" className=\"form-control\" placeholder='Phone Number' value='Phone Number'/>\n\t\t\t\t  {/* {errors.email && <div className=\"text-danger fs-12\">{errors.email}</div>} */}\n\t\t\t  </div>\n\t\t\t  <div className=\"form-group password-textfield\">\n\t\t\t\t  <input type=\"password\" className=\"form-control\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n\t\t\t  <span className='eye-off'><img src={eyeOff} alt=\"\" className=\"eye-off\"/> </span>\n\t\t\t\t  {errors.password && <div className=\"text-danger fs-12\">{errors.password}</div>}\n\t\t\t  </div>\n\t\t\t  <div className=\"text-center\">\n\t\t\t\t  <button type=\"submit\" className=\"btn btn-primary btn-block btn-pink\">Register</button>\n\t\t\t  </div>\n\t\t  </form>\n\t\t  <div className=\"new-account add-new-account  text-center mt-2\">\n\t\t\t  <p className=\"mb-0\">Already have an account?{\" \"}\n\t\t\t\t  <Link className=\"signup-link\" to=\"./page-register\">Sign in</Link>\n\t\t\t  </p>\n\t\t  </div>\n\t\t  </div>\n\t\t},\n\n\t\n\t  ]\n  return (\n  \n\t\t<div className=\"login-form-bx auth-page\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-lg-8 col-md-7 d-flex box-skew1 relative login-leftpanel\">\n\t\t\t\t\t\t<div className=\"inner-content align-self-center\">\n\t\t\t\t\t\t\t<Link to=\"/dashboard\" className=\"login-logo\">\n\t\t\t\t\t\t\t\t<img src={logo} alt=\"\" className=\"logo-icon mr-2\"/>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<h2 className=\"m-b10 text-white\">Sign In to <br/> Trendy Website</h2>\n\t\t\t\t\t\t\t<p className=\"m-b40 text-white\">Boost your engagement & productivity, streamline processes, and make faster communications.</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='login-center-img'>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-4 col-md-5 box-skew d-flex pl-0 pr-0 login-rightpanel\">\n\t\t\t\t\t\t<div className=\"authincation-content\">\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t<Tab.Container defaultActiveKey={tabData[0].name.toLowerCase()}>\n                <Nav as='ul' className='nav-pills light'>\n\t\t\t\t{tabData.map((data, i) => (\n                      <Nav.Item as='li' key={i}>\n                        <Nav.Link eventKey={data.name.toLowerCase()}>\n                          <i className={`la la-${data.icon} mr-2`} />\n                          {data.name}\n                        </Nav.Link>\n                      </Nav.Item>\n                    ))}\n                </Nav>\n                <Tab.Content className='auth-tab-content'>\n\t\t\t\t{tabData.map((data, i) => (\n                        <Tab.Pane eventKey={data.name.toLowerCase()} key={i}>\n\t\t\t\t\t\t\t<div>{data.content}</div>\n\t\t\t\t\t\t\n                         \n                        </Tab.Pane> \n                      )\n                  )}\n                </Tab.Content>\n              </Tab.Container>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        errorMessage: state.auth.errorMessage,\n        successMessage: state.auth.successMessage,\n        showLoading: state.auth.showLoading,\n    };\n};\nexport default connect(mapStateToProps)(Login);","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/Registration.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/pages/ForgotPassword.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/PostsReducer.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/AuthReducer.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/reducers/Reducers.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Layout.jsx",["535","536"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport searchIcon from \"../../../img/search.png\";\nimport listIcon from \"../../../img/list-icon.png\";\nimport emptyMediaImg from \"../../../img/layout-img.png\";\nimport { Link } from \"react-router-dom\";\nimport useSWR from 'swr'\nimport { getAllComposition } from \"../../../utils/api\";\nimport ListComposition from \"./Composition/listComposition\";\nconst Layout = () => {\n  const { data: allComposition, mutate } = useSWR('/vendor/layouts/compositions', getAllComposition);\n \n  return (\n    <div>\n      <div className=\"custom-content-heading d-flex flex-wrap\">\n        <h1>Layouts</h1>\n      </div>\n      <div className=\"form-head d-flex mb-3 align-items-start\">\n        <Link\n          to={{\n            pathname: `/chooselayout`,\n          }}\n          className=\"mr-2 add-composition-btn\"\n        >\n          Add Composition <span className=\"btn-icon-right\">\n            <div class=\"glyph-icon flaticon-381-add-1\"></div>\n          </span>\n        </Link>\n        <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\n          <div className=\"form-group mb-0\">\n            <input\n              type=\"text\"\n              className=\"form-control input-default \"\n              placeholder=\"Search...\"\n            />\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\n          </div>\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\n          </Button>\n        </div>\n      </div>\n      {!allComposition &&   <div className=\"empty-media text-center\">\n        <div class=\"empty-media-img layout-empty-img mx-auto\">\n          <img\n            className=\"media-img img-fluid\"\n            src={emptyMediaImg}\n            alt=\"media-img\"\n          />\n        </div>\n        <h3>Add Composition</h3>\n        <p>\n          Add Media files to composition, Lorem ipsum dolor is a dummy <br />{\" \"}\n          text. Dummy text.\n        </p>\n      </div>}\n    \n      {allComposition && <ListComposition allComposition={allComposition}  mutate={mutate}/>}\n      \n    </div>\n  );\n};\n\nexport default Layout;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/index.jsx",["537","538"],"import React, { useState } from \"react\";\n/// React router dom\nimport { Switch, Route } from \"react-router-dom\";\n/// Css\nimport \"./index.css\";\nimport \"./chart.css\";\nimport \"./step.css\";\nimport \"./custom.css\";\n\n/// Layout\nimport Nav from \"./layouts/nav\";\nimport Footer from \"./layouts/Footer\";\n\n/// Dashboard\nimport Screen from \"./components/screen\";\n\n//Scroll To Top\nimport ScrollToTop from \"./layouts/ScrollToTop\";\nimport Media from \"./components/media\";\nimport Settings from \"./components/settings\";\n// import Webplayer from './components/web-player'\nimport ScreenDetails from \"./components/screen/details\";\nimport Layout from \"./components/layout/Layout\";\nimport ChooseLayout from \"./components/layout/ChooseLayout\";\nimport CreateComposition from \"./components/layout/Composition/CreateComposition\";\nimport Push from \"./components/push/PushScreen\";\nimport SelectComparison from \"./components/push/SelectComparison\";\nimport EditComposition from \"./components/layout/Composition/EditComposition\";\nimport DaySchedule from \"./components/push/DaySchedule\";\nimport testDaySchudele from \"./components/push/TestDaySchudele\";\nimport TestDaySchudele from \"./components/push/TestDaySchudele\";\nimport TestDay from \"./components/push/TestDay\";\nimport CopyTestDay from \"./components/push/CopyTestDay\";\nimport MonthSchedule from \"./components/push/MonthSchedule\";\nimport CopyMonthSchedule from \"./components/push/CopyMonthSchedule\";\nimport SecondMonth from \"./components/push/SecondMonth\";\nimport DesignMonthSchedule from \"./components/push/DesignMonthSchedule\";\nimport ViewSchedule from \"./components/push/viewSchedule\";\nimport Integrations from \"./components/integrations\";\nimport Reports from \"./components/reports\";\nimport SequenceTime from \"./components/push/SequenceEdit\";\nimport reportsList from \"./components/reports/reportsList\";\nimport ReportsList from \"./components/reports/reportsList\";\n\nconst Markup = () => {\n  let path = window.location.pathname;\n  path = path.split(\"/\");\n  path = path[path.length - 1];\n  let pagePath = path.split(\"-\").includes(\"page\");\n  const [activeEvent, setActiveEvent] = useState(!path);\n\n  const routes = [\n    /// Dashboard\n    { url: \"\", component: Screen },\n    { url: \"display\", component: Screen },\n    { url: \"assets\", component: Media },\n    { url: \"settings\", component: Settings },\n    { url: \"layout\", component: Layout },\n    { url: \"chooselayout\", component: ChooseLayout },\n    { url: \"createComposition\", component: CreateComposition },\n    { url: \"composition/edit\", component: EditComposition },\n    { url: \"push\", component: Push },\n    { url: \"SelectComparison\", component: SelectComparison },\n    // {url: \"web-player\", component: Webplayer},\n    { url: \"display/:id\", component: ScreenDetails },\n    { url: \"dayschedule/:id\", component: DaySchedule },\n    { url: \"test\", component: TestDaySchudele },\n    { url: \"testday/:id\", component: TestDay },\n    { url: \"copytestday\", component: CopyTestDay },\n    { url: \"monthschedule\", component: MonthSchedule },\n    { url: \"copymonthschedule\", component: CopyMonthSchedule },\n    { url: \"secondmonth\", component: SecondMonth },\n    { url: \"design-month-schedule/:id\", component: DesignMonthSchedule },\n    { url: \"push/view/:id\", component: ViewSchedule },\n    { url: \"integrations\", component: Integrations },\n    { url: \"push/sequence/:schId/:seqId\", component: SequenceTime },\n\n    { url: \"reports\", component: Reports },\n    { url: \"reports-list\", component: ReportsList },\n  ];\n  console.log(path);\n  return (\n    <>\n      <div\n        id={`${!pagePath ? \"main-wrapper\" : \"\"}`}\n        className={`${!pagePath ? \"show\" : \"mh100vh\"}`}\n      >\n        {!pagePath && path !== \"web-player\" && (\n          <Nav\n            onClick={() => setActiveEvent(!activeEvent)}\n            activeEvent={activeEvent}\n            onClick2={() => setActiveEvent(false)}\n            onClick3={() => setActiveEvent(true)}\n          />\n        )}\n        <div\n          className={` ${!path && activeEvent ? \"rightside-event\" : \"\"} ${\n            !pagePath ? \"content-body content-body-custom\" : \"\"\n          } ${path === \"web-player\" ? \"web-player-body\" : \"\"}`}\n        >\n          <div\n            className={`${!pagePath ? \"container-fluid\" : \"\"}`}\n            style={{ minHeight: window.screen.height - 60 }}\n          >\n            <Switch>\n              {routes.map((data, i) => (\n                <Route\n                  key={i}\n                  exact\n                  path={`/${data.url}`}\n                  component={data.component}\n                />\n              ))}\n            </Switch>\n          </div>\n        </div>\n        {!pagePath && <Footer />}\n      </div>\n      <ScrollToTop />\n    </>\n  );\n};\n\nexport default Markup;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/PushScreen.jsx",["539","540","541","542"],"import React, { useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport scheduleIcon from \"../../../img/schedule-icon.png\";\nimport quickPlayIcon from \"../../../img/quickplay-icon.png\";\nimport defaultComparisonIcon from \"../../../img/comparison-icon.png\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\nimport {\n  deleteSchedule,\n  getAllSchedule,\n  getQuickPlay,\n  deleteQuickPlay,\n  getDefaultComposition,\n  getAllScreens,\n  getAllComposition,\n  setDefaultComposition,\n} from \"../../../utils/api\";\nimport { useEffect } from \"react\";\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../../utils/UtilsService\";\nimport moment from \"moment\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport deleteIcon from \"../../../img/delete-icon.png\";\nimport edit from \"../../../img/edit-composition.png\";\nimport { useHistory } from \"react-router-dom\";\nimport TableLoader from \"../../components/TableLoader\";\n\nconst PushScreen = () => {\n  const history = useHistory();\n  const [scheduleData, setScheduleData] = useState([]);\n  const [quickPlayData, setQuickPlayData] = useState([]);\n  const [defaultData, setDefaultData] = useState([]);\n  const [showPublishBtn, setShowPublishBtn] = useState(false);\n  const [publishType, setPublishType] = useState(\"schedule\");\n  const [loading, setLoading] = useState(false);\n  const [showDefaultScreen, setShowDefaultScreen] = useState(false);\n  const [showDefaultComp, setShowDefaultComp] = useState(false);\n  const [checkedItems, setCheckedItems] = useState({});\n  const [checkedValues, setCheckedValues] = useState([]);\n  const [checkedValuesComp, setCheckedValuesComp] = useState(null);\n  const [allComposition, setAllComposition] = useState([]);\n  const [allScreens, setAllScreens] = useState(\"\");\n\n  const callAllScreenApi = async () => {\n    const list = await getAllScreens();\n    setAllScreens(list);\n  };\n\n  const getAllCompositionList = async () => {\n    setLoading(true);\n    const list = await getAllComposition();\n    console.log(\"lsit\", list);\n    setAllComposition(list);\n    setLoading(false);\n  };\n\n  async function getSchedule() {\n    setLoading(true);\n    await getAllSchedule().then((res) => {\n      console.log(res, \"res push screen\");\n      setScheduleData(res.data.data);\n      setLoading(false);\n    });\n  }\n  async function getQuickplay() {\n    setLoading(true);\n    await getQuickPlay().then((res) => {\n      console.log(res, \"res Quickplay\");\n      setQuickPlayData(res.data.data);\n      setLoading(false);\n    });\n  }\n  async function getDefault() {\n    setLoading(true);\n    await getDefaultComposition().then((res) => {\n      console.log(res.data, \"res Default\");\n      setDefaultData(res.data.data);\n      setLoading(false);\n    });\n  }\n  useEffect(() => {\n    getSchedule();\n    callAllScreenApi();\n    getAllCompositionList();\n    if (publishType && publishType === \"schedule\") {\n      getSchedule();\n    }\n    if (publishType && publishType === \"quickplay\") {\n      getQuickplay();\n    }\n    if (publishType && publishType === \"defaultComposition\") {\n      getDefault();\n    }\n  }, [publishType]);\n\n  function handleDeleteSchedule(id) {\n    deleteSchedule(id).then((res) => {\n      if (res.data.statusCode === 200) {\n        getSchedule();\n      }\n    });\n  }\n\n  const handleDeleteQuickPlay = (e, id) => {\n    e.preventDefault();\n    deleteQuickPlay(id).then((res) => {\n      if (res.data.statusCode === 200) {\n        getQuickplay();\n      }\n    });\n  };\n\n  const handleEditSchedule = (e, id) => {\n    e.preventDefault();\n    history.push(`/design-month-schedule/${id}`);\n  };\n\n  const handleDefaultScreen = (e) => {\n    e.preventDefault();\n    setShowDefaultScreen(true);\n  };\n\n  function convertTimestampTo12HourFormat(timestamp) {\n    if (!timestamp) {\n      return \"Invalid timestamp\";\n    }\n    if (timestamp === \"time not find\") {\n      return \"Invalid timestamp\";\n    }\n\n    const timeParts = timestamp.split(\"T\")[1].split(\".\")[0].split(\":\");\n    let hours = 0;\n    const minutes = timeParts[1];\n\n    if (timeParts.length >= 1) {\n      hours = parseInt(timeParts[0]);\n\n      let amPm;\n      if (hours >= 12) {\n        amPm = \"PM\";\n        if (hours > 12) {\n          hours -= 12;\n        }\n      } else {\n        amPm = \"AM\";\n        if (hours === 0) {\n          hours = 12;\n        }\n      }\n\n      const convertedTime = `${hours}:${minutes} ${amPm}`;\n      return convertedTime;\n    } else {\n      return \"Invalid timestamp format\";\n    }\n  }\n\n  function findEndTime(value) {\n    if (!value || value === undefined) {\n      return \"time not find\";\n    }\n    if (value !== undefined) {\n      return value?.timings[value.timings.length - 1]?.endTime;\n    }\n  }\n\n  const handleCheckboxChange = (event, type) => {\n    if (type == \"screen\") {\n      const newCheckedItems = {\n        ...checkedItems,\n        [event.target.name]: event.target.checked,\n      };\n      const selectedScreens = [];\n      for (const key in newCheckedItems) {\n        if (newCheckedItems[key] === true) {\n          selectedScreens.push(key);\n        }\n      }\n      setCheckedValues(selectedScreens);\n      setCheckedItems(newCheckedItems);\n    } else {\n      setCheckedValuesComp(event.target.name);\n    }\n  };\n\n  const handleSelectAllChange = (event) => {\n    const newCheckedItems = {};\n    allScreens.forEach((item) => {\n      newCheckedItems[item._id] = event.target.checked;\n    });\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleProceed = (e, type) => {\n    if (type == \"screen\") {\n      e.preventDefault();\n      setShowDefaultComp(true);\n      setShowDefaultScreen(false);\n    }\n  };\n\n  const handleProceedComp = async (e, type) => {\n    e.preventDefault();\n    console.log(checkedValues, checkedItems, checkedValuesComp);\n    await setDefaultComposition({\n      screens: checkedValues,\n      compositionId: checkedValuesComp,\n    });\n    setShowDefaultComp(false);\n    setShowDefaultScreen(false);\n    setShowPublishBtn(!showPublishBtn);\n    setCheckedItems([]);\n    setCheckedValues([]);\n    setCheckedValuesComp(null);\n    setPublishType(\"defaultComposition\");\n  };\n\n  const handlePublish = (e) => {\n    e.preventDefault();\n    if (showPublishBtn === true) {\n      setShowDefaultComp(false);\n      setShowDefaultScreen(false);\n      setCheckedItems([]);\n      setCheckedValues([]);\n      setCheckedValuesComp(null);\n      setPublishType(\"schedule\");\n    }\n    setShowPublishBtn(!showPublishBtn);\n  };\n\n  // const handleSubmit = async () => {\n  //  await publishMedia({\n  //     id: selected._id,\n  //     screenIds: checkedValues,\n  //     duration: 600,\n  //     type:type\n  //   });\n  //   await setQuickplay({\n  //     name,\n  //     compositionId: selected._id,\n  //     screens: checkedValues,\n  //     duration: 600\n  //   });\n  //   setPublished(true);\n  //   // setShowPublishPopUp(false);\n  // };\n  return (\n    <>\n      <div className=\"custom-content-heading d-flex flex-wrap flex-row align-items-center justify-content-between\">\n        <div>\n          <h1 className=\"mb-1\">Push</h1>\n          <p className=\"three-layout-paragrapgh\">\n            How would you like to publish your content?\n          </p>\n        </div>\n        {scheduleData.length !== 0 && (\n          <Button\n            className=\"\"\n            variant=\"info add-screen-btn\"\n            type=\"button\"\n            onClick={(e) => handlePublish(e)}\n          >\n            Publish\n          </Button>\n        )}\n      </div>\n\n      <div className=\"layout-row push-row mb-4\">\n        {showPublishBtn && !showDefaultScreen && !showDefaultComp ? (\n          <Row>\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\n              <Link\n                to={{\n                  pathname: `/SelectComparison`,\n                }}\n              >\n                <div className=\"push-column text-center\">\n                  <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                    <img\n                      className=\"layout-select-img\"\n                      src={scheduleIcon}\n                      alt=\"menu-icon\"\n                    />\n                  </div>\n                  <h6>Schedule</h6>\n                  <p>\n                    Scheduled content gets displayed only for time you choose\n                  </p>\n                </div>\n              </Link>\n            </Col>\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\n              <div className=\"push-column text-center\">\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                  <img\n                    className=\"layout-select-img\"\n                    src={quickPlayIcon}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <h6>Quickplay</h6>\n                <p>\n                  Quickplay let's you display content instantly. Can be used\n                  Emergency cases\n                </p>\n              </div>\n            </Col>\n            <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\n              <div className=\"push-column text-center\">\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                  <img\n                    className=\"layout-select-img\"\n                    src={defaultComparisonIcon}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <h6>Default Composition</h6>\n                <p>\n                  Default content keeps on playing irrespective of the time when\n                  there is no active\n                </p>\n                <button\n                  onClick={(e) => {\n                    handleDefaultScreen(e);\n                  }}\n                >\n                  Add Content\n                </button>\n              </div>\n            </Col>\n          </Row>\n        ) : (\n          <></>\n        )}\n        {!showPublishBtn && (\n          <div className=\"d-flex mb-2 mt-3\">\n            <Button\n              className={\n                publishType === \"schedule\"\n                  ? \"mr-3 activeType\"\n                  : \"mr-3 push-screen-btn\"\n              }\n              variant=\"info \"\n              type=\"button\"\n              onClick={(e) => {\n                setPublishType(\"schedule\");\n              }}\n            >\n              Schedule\n            </Button>\n\n            <Button\n              className={\n                publishType === \"quickplay\"\n                  ? \"mr-3 activeType\"\n                  : \"mr-3 push-screen-btn\"\n              }\n              variant=\"info \"\n              type=\"button\"\n              onClick={(e) => {\n                setPublishType(\"quickplay\");\n              }}\n            >\n              Quickplay\n            </Button>\n            <Button\n              className={\n                publishType === \"defaultComposition\"\n                  ? \"mr-3 activeType\"\n                  : \"mr-3 push-screen-btn\"\n              }\n              variant=\"info \"\n              type=\"button\"\n              onClick={(e) => {\n                setPublishType(\"defaultComposition\");\n              }}\n            >\n              Default Composition\n            </Button>\n          </div>\n        )}\n      </div>\n      {!showPublishBtn && publishType && publishType === \"quickplay\" && (\n        <Table responsive className=\"custom-table screen-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Date Added</th>\n              <th>Screens Assigned</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>more</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {quickPlayData &&\n              quickPlayData.map((composition) => {\n                return (\n                  <tr key={composition._id}>\n                    <td>{composition.name}</td>\n                    <td>\n                      <span className=\"td-content\">\n                        <strong>\n                          {humanReadableFormattedDateString(\n                            composition.createdAt\n                          )}\n                        </strong>\n                        <span>\n                          {getDatetimeIn12Hours(composition.createdAt)}\n                        </span>\n                      </span>\n                    </td>\n                    <td> {composition.screens?.length}</td>\n\n                    <td>\n                      <span className=\"td-content\">\n                        <strong>\n                          {humanReadableFormattedDateString(\n                            composition.createdAt\n                          )}\n                        </strong>\n                        <span>\n                          {getDatetimeIn12Hours(composition.createdAt)}\n                        </span>\n                      </span>\n                    </td>\n\n                    <td>\n                      <span className=\"td-content\">\n                        <strong>\n                          {humanReadableFormattedDateString(\n                            composition.createdAt\n                          )}\n                        </strong>\n                        <span>\n                          {moment(composition.createdAt)\n                            .add(10, \"minutes\")\n                            .format(\"hh:mm A\")}\n                        </span>\n                      </span>\n                    </td>\n                    <td>\n                      <Dropdown className=\"dropdown-toggle-menu\">\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                          <span className=\"table-menu-icon\">\n                            <img\n                              className=\"menu-img img-fluid\"\n                              src={menuIcon}\n                              alt=\"menu-icon\"\n                            />\n                          </span>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            href=\"#\"\n                            className=\"dropdown-list-item\"\n                            onClick={(e) => {\n                              handleDeleteQuickPlay(e, composition._id);\n                            }}\n                          >\n                            <div className=\"d-flex\">\n                              <div className=\"dropdown-list-icon\">\n                                <img\n                                  className=\"dropdown-list-img img-fluid\"\n                                  src={deleteIcon}\n                                  alt=\"menu-icon\"\n                                />\n                              </div>\n                              <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">Delete</span>\n                                <span className=\"menu-description\">\n                                  Get to know more about screen info\n                                </span>\n                              </div>\n                            </div>\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      )}\n      {!showPublishBtn &&\n        publishType &&\n        publishType === \"defaultComposition\" && (\n          <>\n            <Table responsive className=\"custom-table screen-table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Date Added</th>\n                  <th>Screens Assigned</th>\n                  <th>Start Date</th>\n                  <th>End Date</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {defaultData &&\n                  defaultData.map((composition) => {\n                    return (\n                      <tr key={composition._id}>\n                        <td>{composition._id}</td>\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>\n                              {humanReadableFormattedDateString(\n                                composition.createdAt\n                              )}\n                            </strong>\n                            <span>\n                              {getDatetimeIn12Hours(composition.createdAt)}\n                            </span>\n                          </span>\n                        </td>\n                        <td> {composition.screens?.length}</td>\n\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>\n                              {humanReadableFormattedDateString(\n                                composition.createdAt\n                              )}\n                            </strong>\n                            <span>\n                              {getDatetimeIn12Hours(composition.createdAt)}\n                            </span>\n                          </span>\n                        </td>\n\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>\n                              {humanReadableFormattedDateString(\n                                composition.createdAt\n                              )}\n                            </strong>\n                            <span>\n                              {moment(composition.createdAt)\n                                .add(10, \"minutes\")\n                                .format(\"hh:mm A\")}\n                            </span>\n                          </span>\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </Table>\n          </>\n        )}\n      {!showPublishBtn && publishType && publishType === \"schedule\" && (\n        <Table responsive className=\"custom-table screen-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Date Added</th>\n              <th>Screens Assigned</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>more</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {scheduleData &&\n              scheduleData.map((composition) => {\n                const maxDates = composition.sequence.reduce((max, obj) => {\n                  const parseDts = obj.dates.map((dt) => new Date(dt));\n                  const objMax =\n                    obj.dates.length > 0 ? Math.max(...parseDts) : null;\n                  return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\n                }, null);\n                const formatedDt = moment(new Date(maxDates)).format(\n                  \"YYYY-MM-DD\"\n                );\n\n                const minDates = composition.sequence.reduce((min, obj) => {\n                  const parseDt = obj.dates.map((dt) => new Date(dt));\n                  const objMin =\n                    parseDt.length > 0 ? Math.min(...parseDt) : null;\n                  return objMin ? (min ? Math.min(min, objMin) : objMin) : min;\n                }, null);\n\n                const formatedDtMin = moment(new Date(minDates)).format(\n                  \"YYYY-MM-DD\"\n                );\n\n                const maxTime = composition.sequence.reduce((max, obj) => {\n                  const parseDts = obj.dates.map((dt) => new Date(dt));\n                  const objMax =\n                    obj.dates.length > 0 ? Math.max(...parseDts) : null;\n                  return objMax ? (max ? Math.max(max, objMax) : objMax) : max;\n                }, null);\n                const endTime = findEndTime(\n                  composition?.sequence[composition?.sequence.length - 1]\n                );\n\n                return (\n                  <tr key={composition._id}>\n                    <td>{composition.name}</td>\n                    <td>\n                      <span className=\"td-content\">\n                        <strong>\n                          {humanReadableFormattedDateString(\n                            composition.createdAt\n                          )}\n                        </strong>\n                        <span>\n                          {getDatetimeIn12Hours(composition.createdAt)}\n                        </span>\n                      </span>\n                    </td>\n                    <td> {composition.screens?.length}</td>\n\n                    <td>\n                      <div>\n                        <span className=\"td-content\">\n                          <strong> {formatedDtMin}</strong>\n                          <span>\n                            {convertTimestampTo12HourFormat(\n                              composition?.sequence[0]?.timings[0]?.startTime\n                            )}\n                          </span>\n                        </span>\n                      </div>\n                    </td>\n\n                    <td>\n                      <spam className=\"td-content\">\n                        <strong>{formatedDt}</strong>\n\n                        <span>{convertTimestampTo12HourFormat(endTime)}</span>\n                      </spam>\n                    </td>\n                    <td>\n                      <Dropdown className=\"dropdown-toggle-menu\">\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                          <span className=\"table-menu-icon\">\n                            <img\n                              className=\"menu-img img-fluid\"\n                              src={menuIcon}\n                              alt=\"menu-icon\"\n                            />\n                          </span>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                          <Dropdown.Item\n                            href={`/design-month-schedule/${composition._id}`}\n                            className=\"dropdown-list-item\"\n                          >\n                            <div className=\"d-flex\">\n                              <div className=\"dropdown-list-icon\">\n                                <img\n                                  className=\"dropdown-list-img img-fluid\"\n                                  src={edit}\n                                  alt=\"menu-icon\"\n                                />\n                              </div>\n                              <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">Edit</span>\n                                <span className=\"menu-description\">\n                                  Get to know more about screen info\n                                </span>\n                              </div>\n                            </div>\n                          </Dropdown.Item>\n                          <Dropdown.Item\n                            href=\"#\"\n                            className=\"dropdown-list-item\"\n                            onClick={() => {\n                              handleDeleteSchedule(composition._id);\n                              console.log(\"oooo\");\n                            }}\n                          >\n                            <div className=\"d-flex\">\n                              <div className=\"dropdown-list-icon\">\n                                <img\n                                  className=\"dropdown-list-img img-fluid\"\n                                  src={deleteIcon}\n                                  alt=\"menu-icon\"\n                                />\n                              </div>\n                              <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">Delete</span>\n                                <span className=\"menu-description\">\n                                  Get to know more about screen info\n                                </span>\n                              </div>\n                            </div>\n                          </Dropdown.Item>\n                          <Dropdown.Item\n                            href=\"#\"\n                            className=\"dropdown-list-item\"\n                            onClick={() => {\n                              history.push(`/push/view/${composition._id}`);\n                            }}\n                          >\n                            <div className=\"d-flex\">\n                              <div className=\"dropdown-list-icon\">\n                                <img\n                                  className=\"dropdown-list-img img-fluid\"\n                                  src={deleteIcon}\n                                  alt=\"menu-icon\"\n                                />\n                              </div>\n                              <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">\n                                  View Schedule\n                                </span>\n                                <span className=\"menu-description\">\n                                  Get to know more about screen info\n                                </span>\n                              </div>\n                            </div>\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      )}\n      {showPublishBtn &&\n        checkedValues &&\n        checkedValues.length > 0 &&\n        checkedValuesComp == null && (\n          <button\n            className=\"btn btn-sm btn-primary\"\n            onClick={(e) => {\n              handleProceed(e, \"screen\");\n            }}\n          >\n            Proceed\n          </button>\n        )}\n      {showDefaultScreen && (\n        <>\n          <h4>Plesae Select Screen</h4>\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"width50\">\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id=\"checkbox1_exam_all\"\n                      onChange={handleSelectAllChange}\n                      required=\"\"\n                    />\n                    <label\n                      className=\"custom-control-label\"\n                      htmlFor=\"checkbox1_exam_all\"\n                    ></label>\n                  </div>\n                </th>\n                <th>Screen</th>\n                <th>Last Seen</th>\n                <th>Default Composition</th>\n                <th>Current Schedule</th>\n              </tr>\n            </thead>\n            {loading ? (\n              <TableLoader colSpan={5} />\n            ) : (\n              <tbody>\n                {allScreens !== \"\" &&\n                  allScreens.map((screen) => {\n                    return (\n                      <tr>\n                        <td>\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id={screen._id}\n                              name={screen._id}\n                              checked={checkedItems[screen._id]}\n                              onChange={(e) => {\n                                handleCheckboxChange(e, \"screen\");\n                              }}\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor={screen._id}\n                            ></label>\n                          </div>\n                        </td>\n\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>{screen.name}</strong>\n                            <span>{screen.screenLocation}</span>\n                          </span>\n                        </td>\n                        <td>\n                          <span className=\"d-flex align-items-center\">\n                            <span className=\"status status-green\"></span>\n                            <span className=\"td-content\">\n                              <strong>{screen.name}</strong>\n                              <span>{screen.screenLocation}</span>\n                            </span>\n                          </span>\n                        </td>\n                        <td>Default Compo. </td>\n                        <td>No Schedule</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            )}\n          </Table>\n        </>\n      )}\n      {showPublishBtn && checkedValuesComp != null && (\n        <button\n          className=\"btn btn-sm btn-primary\"\n          onClick={(e) => {\n            handleProceedComp(e, \"composition\");\n          }}\n        >\n          Submit\n        </button>\n      )}\n      {checkedValues && checkedValues.length > 0 && showDefaultComp && (\n        <>\n          <h4>Please select composition</h4>\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"width50\">\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id=\"checkbox1_exam_all\"\n                      disabled\n                      // onChange={handleSelectAllChange}\n                      required=\"\"\n                    />\n                    <label\n                      className=\"custom-control-label\"\n                      htmlFor=\"checkbox1_exam_all\"\n                    ></label>\n                  </div>\n                </th>\n                <th>Name</th>\n                <th>Date Added</th>\n                <th>Duration</th>\n                <th>Associated Schedule</th>\n              </tr>\n            </thead>\n            {loading ? (\n              <TableLoader colSpan={5} />\n            ) : (\n              <tbody>\n                {allComposition !== \"\" &&\n                  allComposition.map((composition) => {\n                    return (\n                      <tr>\n                        <td>\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id={composition._id}\n                              name={composition._id}\n                              checked={checkedValuesComp === composition._id}\n                              onChange={(e) => {\n                                handleCheckboxChange(e, \"composition\");\n                              }}\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor={composition._id}\n                            ></label>\n                          </div>\n                        </td>\n                        <td>\n                          <span className=\"td-content d-flex name-td-content\">\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\n                              <strong>{composition.name}</strong>\n                              <span>{composition.createdBy}</span>\n                            </span>\n                          </span>\n                        </td>\n\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>\n                              {humanReadableFormattedDateString(\n                                composition.createdAt\n                              )}\n                            </strong>\n                            <span>\n                              {getDatetimeIn12Hours(composition.createdAt)}\n                            </span>\n                          </span>\n                        </td>\n                        <td> {composition.duration} Sec</td>\n                        <td>No Composition</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            )}\n          </Table>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PushScreen;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/actions/AuthActions.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/store/actions/PostTypes.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/index.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/TestDay.js",["543","544","545","546","547","548","549","550","551","552","553","554"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { createPlugin } from \"@fullcalendar/core\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport { toast } from \"react-toastify\";\nimport {\n  BASE_URL,\n  getAllComposition,\n  getAllMedia,\n  saveSequence,\n  getAllDaySequence,\n} from \"../../../utils/api\";\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../../utils/UtilsService\";\nimport useSWR from \"swr\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst MyCustomPlugin = createPlugin({\n  ...timeGridPlugin,\n  ...interactionPlugin,\n  // other plugin options\n});\n\nexport default function TestDay() {\n  const [events, setEvents] = useState([]);\n  const [def, setDef] = useState([]);\n  const [sequence, setSequence] = useState([]);\n  const [renderTime, setRenderTime] = useState(\"\");\n  const history = useHistory();\n  const { id, schedulename } = useParams();\n  const [sqName, setSqName] = useState(\"\");\n\n  const { data: allComposition, mutate } = useSWR(\n    \"/vendor/layouts/compositions\",\n    getAllComposition\n  );\n\n  const callSingleDaySequence = async (id) => {\n    const list = await getAllDaySequence(id);\n    setSequence(list.sequence);\n    //const listTimings = [];\n    if (list && list.sequence && list.sequence[0] && list.sequence[0].timings) {\n      const listTimings = list.sequence[0].timings.map((item) => {\n        const sT = item.startTime.split(\"T\")[1].split(\":\");\n        const eT = item.endTime.split(\"T\")[1].split(\":\");\n        return {\n          id: item.composition._id,\n          timing: sT[0] + \":\" + sT[1] + \" - \" + eT[0] + \":\" + eT[1],\n          //defId: eventInfo.event._def.defId,\n        };\n      });\n      setEvents(listTimings);\n    }\n  };\n\n  useEffect(() => {\n    callSingleDaySequence(id);\n  }, [id]);\n\n  let timeFormet = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false,\n  };\n  // load external events\n  useEffect(() => {\n    let draggableEl = document.getElementById(\"external-events\");\n    new Draggable(draggableEl, {\n      itemSelector: \".fc-event\",\n      eventData: function (eventEl) {\n        let id = eventEl.dataset.id;\n        let sourceId = eventEl.getAttribute(\"sourceId\");\n        let publicId = eventEl.getAttribute(\"publicId\");\n        let title = eventEl.getAttribute(\"title\");\n        let color = \"#FFE494\";\n        let custom = eventEl.dataset.custom;\n\n        return {\n          id: id,\n          sourceId,\n          publicId,\n          title: title,\n          color: color,\n          custom: custom,\n          create: true,\n        };\n      },\n    });\n  }, [events]);\n  function eventFunction(info) {\n    //const newArray = events;\n    const id = info.el.fcSeg.eventRange.def.sourceId;\n    const defId = info.event._def.defId;\n    let newArr = events.map((item, i) => {\n      if (item.defId == defId) {\n        return { ...item, [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1] };\n      } else {\n        return item;\n      }\n    });\n    setEvents(newArr);\n  }\n  // handle event receive\n  const handleEventReceive = (eventInfo) => {\n    const id = eventInfo.event._def.sourceId;\n    const [startTime, endTime] = renderTime.split(\" - \");\n    const formattedStartTime = startTime.padStart(5, \"0\");\n    const formattedEndTime =\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\n\n    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\n\n    const newEvent = {\n      id: id,\n      timing: timeRange,\n      defId: eventInfo.event._def.defId,\n    };\n    setEvents((events) => [...events, newEvent]);\n    setDef({ ...def, [eventInfo.event._def.defId]: true });\n  };\n  const handleEventClick = (info) => {\n    console.log(info, \"sssss\");\n    const defId = info.event._def.defId;\n    setEvents((current) => current.filter((event) => event.defId !== defId));\n    info.event.remove();\n  };\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const scheduleId = id;\n    const timings = events.map((item) => {\n      return {\n        composition: item.id,\n        startTime:\n          new Date().toISOString().slice(0, 10) +\n          \"T\" +\n          item.timing.split(\" - \")[0] +\n          \":00Z\",\n        endTime:\n          new Date().toISOString().slice(0, 10) +\n          \"T\" +\n          item.timing.split(\" - \")[1] +\n          \":00Z\",\n      };\n    });\n    if (!sqName) {\n      toast.error(\"Please enter sequence name\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n      });\n\n      return false;\n    }\n    if (!id) {\n      toast.error(\"something went wrong\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n      });\n\n      return false;\n    }\n    const payload = {\n      scheduleId: scheduleId,\n      name: sqName,\n      timings,\n    };\n\n    await saveSequence(payload).then((res) => {\n      console.log(res, \"res save schedule\");\n      if (res.data.statusCode === 200) {\n        history.push(`/design-month-schedule/${id}`);\n      }\n    });\n  }\n\n  function renderEventContent(eventInfo) {\n    console.log(\"eventInfo\", eventInfo);\n    const { event } = eventInfo;\n    const { title } = event;\n    const checkTime = eventInfo.timeText.split(\" - \");\n    if (!checkTime[1]) {\n      const secondTime =\n        parseInt(checkTime[0].split(\":\")[0]) +\n        1 +\n        \":\" +\n        checkTime[0].split(\":\")[1];\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\n    }\n    if (!def[eventInfo.event._def.defId]) {\n      setRenderTime(eventInfo.timeText);\n    }\n    return (\n      <>\n        <div className={`fullcalendar-main-container`}>\n          <img\n            src={event.extendedProps.custom}\n            className=\"day-schedule-fullcalendar-img\"\n            alt=\"Event\"\n          />\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\n\n          <div\n            className=\"fullcalendar-delete-btn\"\n            onClick={() => handleEventClick(eventInfo)}\n          >\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\n          </div>\n        </div>\n      </>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <input\n            type=\"text\"\n            className=\" schedule-name-input-feild form-control input-default \"\n            placeholder=\"Schedule Name\"\n            value={sqName}\n            onChange={(e) => setSqName(e.target.value)}\n            required\n          />\n          {renderTime && (\n            <div className=\"d-flex justify-content-end\">\n              <Button\n                className=\"mr-2\"\n                type=\"submit\"\n                variant=\"info add-screen-btn\"\n                // onClick={(e) => handleSubmit(e)}\n              >\n                Save Sequence\n              </Button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      <div>\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\n          <Table\n            responsive\n            className=\"custom-table screen-table\"\n            style={{ height: \"100%\" }}\n            id=\"external-events\"\n          >\n            <thead>\n              <tr>\n                <th>Composition</th>\n                <th>Date Added</th>\n                <th>Duration</th>\n                <th>Associated Schedule</th>\n                <th>Tags</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {allComposition &&\n                allComposition.map((composition) => {\n                  const content = composition.zones[0].content[0];\n                  return (\n                    <tr\n                      key={composition._id}\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\n                      title={composition.name}\n                      sourceId={composition._id}\n                      // data-color={\"yellow\"}\n                      data-custom={`${BASE_URL}${content.url}`}\n                      style={{\n                        backgroundColor: \"#fff\",\n                        // borderColor: \"blue\",\n                        cursor: \"pointer\",\n                      }}\n                      // id={composition._id}\n                    >\n                      <td>\n                        <span className=\"td-content d-flex name-td-content\">\n                          <span\n                            className={`name-img mr-2  ${\n                              content.type === \"video\" && \"videotableName\"\n                            }`}\n                          >\n                            {content.type === \"image\" && (\n                              <img\n                                className=\"media-img img-fluid\"\n                                src={`${BASE_URL}${content.url}`}\n                                alt=\"media-img\"\n                              />\n                            )}\n                            {content.type === \"video\" &&\n                              content.duration.toFixed(0) / 60}\n                          </span>\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\n                            <strong>{composition.name}</strong>\n                            <span>{composition.createdBy}</span>\n                          </span>\n                        </span>\n                      </td>\n                      <td>\n                        <span className=\"td-content\">\n                          <strong>\n                            {humanReadableFormattedDateString(\n                              composition.createdAt\n                            )}\n                          </strong>\n                          <span>\n                            {getDatetimeIn12Hours(composition.createdAt)}\n                          </span>\n                        </span>\n                      </td>\n                      <td> {composition.duration} Sec</td>\n                      <td>No Schedule</td>\n                      <td style={{ width: \"180px\" }}>\n                        <span className=\"tag-container\">\n                          {composition.tags &&\n                            composition.tags.map((tag) => {\n                              return (\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\n                                  {tag}\n                                </span>\n                              );\n                            })}\n                        </span>\n\n                        <span\n                          className=\"down-arrow\"\n                          // onClick={() => {\n                          //     setSelected(composition);\n                          //     setNewTagModal(true);\n                          // }}\n                        >\n                          <img\n                            className=\"down-arrow-img img-fluid\"\n                            src={downArrow}\n                            alt=\"arrow\"\n                          />\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </Table>\n        </div>\n\n        <div style={{ float: \"left\", width: \"50%\" }}>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={false}\n            initialView=\"timeGridDay\"\n            slotDuration=\"00:10:00\"\n            slotLabelInterval={{ hours: 1 }}\n            allDaySlot={false}\n            eventTimeFormat={timeFormet}\n            editable={true}\n            selectable={false}\n            selectMirror={true}\n            dayMaxEvents={false}\n            droppable={true}\n            eventReceive={handleEventReceive}\n            eventAdd={(arg) => {\n              console.log(\"add\", arg);\n            }}\n            slotEventOverlap={false}\n            eventOverlap={false}\n            eventContent={renderEventContent}\n            contentHeight=\"700px\"\n            events={events}\n            eventResize={eventFunction}\n          ></FullCalendar>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/DaySchedule.js",["555","556","557","558","559","560","561","562"],"// import React from 'react'\n// import { useParams, useHistory } from \"react-router-dom\";\n\n// export default function DaySchedule() {\n//     const history = useHistory();\n//     const { id } = useParams();\n//     console.log(id, \"DaySchedule page id\")\n//     return (\n//         <div>DaySchedule</div>\n//     )\n// }\n\n\n\n\nimport React, { useState } from \"react\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\nimport nameAvatar from \"../../../img/assets-avatar-img.png\";\nimport deleteIcon from \"../../../img/delete-icon.png\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getAllMedia } from \"../../../utils/api\";\nimport useSWR from 'swr'\n\nimport {\n    getDatetimeIn12Hours,\n    humanReadableFormattedDateString,\n} from \"../../../utils/UtilsService\";\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\n\nconst DaySchedule = () => {\n    const history = useHistory();\n    const { id } = useParams();\n    const { data: allMedia, mutate } = useSWR('/vendor/display/media', getAllMedia);\n    console.log(allMedia, \"day schedule\")\n\n    const [showNewTagModal, setNewTagModal] = useState(false);\n    const [deleteModal, setDeleteModal] = useState(false);\n    const [selectedMedia, setSelectedMedia] = useState(\"\");\n    const [showPublishPopUp, setShowPublishPopUp] = useState(false);\n\n    // use effect\n\n\n    const handleDelete = async () => {\n        setDeleteModal(false)\n        await deleteMedia(selectedMedia._id)\n        mutate()\n    };\n\n    const handlePublishcOpen = (media) => {\n        setShowPublishPopUp(media);\n    }\n    // const parseMeta = (media) => {\n    //     const meta = JSON.parse(media.properties)\n    //     return (\n    //         <span className=\"td-content\">\n    //             {media?.type === \"image\" && <strong>{meta.height} x  {meta.width}</strong>}\n    //             {media?.type === \"video\" && <strong>{meta.length.toFixed(0) / 60} Sec</strong>}\n    //             <span>{meta.size} MB</span>\n    //         </span>\n    //     )\n    // }\n\n    const parseMeta = (media) => {\n        const meta = JSON.parse(media.properties);\n        return (\n            <span className=\"td-content\">\n                {media?.type === \"image\" && <strong>{meta?.height} x {meta?.width}</strong>}\n                {media?.type === \"video\" && meta?.length && (\n                    <strong>{(meta.length / 60).toFixed(0)} Sec</strong>\n                )}\n                {meta?.size && <span>{meta.size} MB</span>}\n            </span>\n        );\n    };\n\n\n    const videoMetaDuration = (media) => {\n        const properties = JSON.parse(media?.properties);\n        if (properties && properties.length) {\n            return (properties.length.toFixed(0) / 60).toFixed(0);\n        }\n        return null;\n    };\n    return (\n        <>\n            <div className=\" d-flex\">\n\n\n                <div className=\"col-7\">\n\n\n                    {allMedia && allMedia.length !== 0 ? (\n                        <Table responsive className=\"custom-table\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Type</th>\n                                    <th>Uploaded Date</th>\n                                    <th>Properties</th>\n                                    <th>Tags</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {allMedia.map((media) => {\n                                    return (\n                                        <tr key={media._id}>\n                                            <td>\n                                                <span className=\"td-content d-flex name-td-content\">\n                                                    <span className={`name-img mr-2  ${media.type === \"video\" && \"videotableName\"}`}>\n                                                        {media.type === \"image\" && <img\n                                                            className=\"media-img img-fluid\"\n                                                            src={`${BASE_URL}${media.title}`}\n                                                            alt=\"media-img\"\n                                                        />}\n                                                        {media.type === \"video\" && videoMetaDuration(media)}\n                                                    </span>\n                                                    <span className=\"name-content d-flex flex-column flex-grow-1\">\n                                                        <strong>{media.title.split(\"/\")[media.title.split(\"/\").length - 1]}</strong>\n                                                        <span>{media.createdBy.name}</span>\n                                                    </span>\n                                                </span>\n                                            </td>\n                                            <td>{media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}</td>\n                                            <td>\n                                                <span className=\"td-content\">\n                                                    <strong>\n                                                        {humanReadableFormattedDateString(media.createdAt)}\n                                                    </strong>\n                                                    <span>{getDatetimeIn12Hours(media.createdAt)}</span>\n                                                </span>\n                                            </td>\n                                            <td>\n                                                {parseMeta(media)}\n                                            </td>\n                                            <td>\n                                                {media.tags.map((tag) => {\n                                                    return <span className=\"my-phone-tag text-truncate ml-1\">{tag}</span>;\n                                                })}\n                                                <span\n                                                    className=\"down-arrow\"\n                                                    onClick={() => {\n                                                        setSelectedMedia(media)\n                                                        setNewTagModal(true);\n                                                    }}\n                                                >\n                                                    <img\n                                                        className=\"down-arrow-img img-fluid\"\n                                                        src={downArrow}\n                                                        alt=\"arrow\"\n                                                    />\n                                                </span>\n                                            </td>\n\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </Table>\n                    ) : (\n                        <div className=\"empty-media text-center\">\n                            <div class=\"empty-media-img mx-auto\">\n                                <img\n                                    className=\"media-img img-fluid\"\n                                    src={emptyMediaImg}\n                                    alt=\"media-img\"\n                                />\n                            </div>\n                            <h3>Add Media</h3>\n                            <p>\n                                Upload your favourite images and videos from the local storage\n                                <br /> of your device\n                            </p>\n                        </div>\n                    )}\n\n                    {showNewTagModal && (\n                        <AddNewTagModal\n                            selected={selectedMedia}\n                            setNewTagModal={setNewTagModal}\n\n                        />\n                    )}\n                    {showPublishPopUp && (\n                        <PublishMediaModal\n                            selected={showPublishPopUp}\n                            setShowPublishPopUp={setShowPublishPopUp}\n                            type=\"media\"\n                        />\n                    )}\n                    {deleteModal && <DeleteConfirmation setDeleteModal={setDeleteModal} callbackFunction={handleDelete} text=\"Are you sure you want to delete?\" yes={\"Yes Deactivate\"} />}\n                </div>\n                <div className=\"col-6\">\n                    <h4>jjjj</h4>\n                </div>\n            </div>\n        </>\n    );\n};\nexport default DaySchedule;\n\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/TestDaySchudele.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/DesignMonthSchedule.js",["563","564","565","566","567","568","569","570","571","572"],"import React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport {\n  deleteSequence,\n  getAllDaySequence,\n  pushAddDates,\n} from \"../../../utils/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport edit from \"../../../img/edit-composition.png\";\nimport deleteIcon from \"../../../img/delete-icon.png\";\nimport da from \"date-fns/locale/da/index.js\";\nimport { toast } from \"react-toastify\";\nexport default function DesignMonthSchedule() {\n  const history = useHistory();\n  const { id } = useParams();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [daySequence, setDaySequence] = useState([]);\n  const [activeCard, setActiveCard] = useState(false);\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\n  const [isEventSelected, setIsEventSelected] = useState(false);\n  const [currentMonth, setCurrentMonth] = useState(0);\n\n  var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  const handleEventClick = (event) => {\n    //setEvents([]);\n    setSelectedEvent(event);\n    setSelectedDate(null); // Reset selected date\n    //setSelectedCheckboxes([]);\n    setIsEventSelected(true);\n  };\n\n  const callAllDaySequence = async (id) => {\n    const list = await getAllDaySequence(id);\n    setDaySequence(list.sequence);\n    console.log(\"list.sequence\", list.sequence);\n    list.sequence.forEach((item) => {\n      if (item.dates && item.dates.length > 0) {\n        console.log(\"isLoading:true\");\n        const datesList = [];\n        item.dates.forEach((item2) => {\n          datesList.push(item2.split(\"T\")[0] + \"*****\" + item._id);\n        });\n        //console.log(\"selectedEvent\",selectedEvent)\n        handlCustomeWeek(datesList, item, true);\n      }\n    });\n    console.log(\"isLoading:false\");\n  };\n  useEffect(() => {\n    callAllDaySequence(id);\n  }, [id]);\n\n  useEffect(() => {}, [selectedCheckboxes, selectedEvent]);\n\n  function handleDateCellChange(dateInfo, isWk, isCustom = false, ev = {}) {\n    if (!isCustom) {\n      const checkboxKey = dateInfo + \"*****\" + selectedEvent._id;\n      const dt = new Date(dateInfo);\n      const isChecked = selectedCheckboxes[checkboxKey];\n      if (isWk) {\n        if (!isChecked) {\n          // Unselecting the checkbox\n          setSelectedCheckboxes((prevSelectedCheckboxes) => {\n            const updatedCheckboxes = { ...prevSelectedCheckboxes };\n            delete updatedCheckboxes[checkboxKey];\n            return updatedCheckboxes;\n          });\n          setEvents((current) =>\n            current.filter((event) => event.start !== dateInfo)\n          );\n        } else {\n          // Selecting the checkbox\n          setSelectedCheckboxes({ ...selectedCheckboxes, [checkboxKey]: true });\n          const existingEvent = events.find(\n            (event) => event.start === dateInfo\n          );\n\n          if (!existingEvent) {\n            const event = {\n              id: selectedEvent._id,\n              title: selectedEvent.name,\n              start: dateInfo,\n            };\n            setEvents((prevEvents) => [...prevEvents, event]);\n          }\n        }\n      } else {\n        if (isChecked) {\n          setSelectedCheckboxes((prevSelectedCheckboxes) => {\n            const updatedCheckboxes = { ...prevSelectedCheckboxes };\n            delete updatedCheckboxes[checkboxKey];\n            updatedCheckboxes[days[dt.getDay()]] = false;\n            return updatedCheckboxes;\n          });\n          //setSelectedCheckboxes({...selectedCheckboxes,[days[dt.getDay()]] : false})\n\n          const filteredEvents = events.filter(\n            (event) => event.start !== dateInfo\n          );\n          setEvents(filteredEvents);\n        } else {\n          const dayList = getSundays(days[dt.getDay()], dt.getDay());\n          let ct = false;\n\n          dayList.forEach((item) => {\n            if (\n              selectedCheckboxes[item.format(\"YYYY-MM-DD\")] &&\n              selectedCheckboxes[item.format(\"YYYY-MM-DD\")] !== undefined\n            ) {\n              ct = true;\n            } else {\n              ct = false;\n            }\n          });\n          setSelectedCheckboxes({\n            ...selectedCheckboxes,\n            [checkboxKey]: true,\n            [days[dt.getDay()]]:\n              ct == true ? true : selectedCheckboxes[dt.getDay()],\n          });\n          const existingEvent = events.find(\n            (event) => event.start === dateInfo\n          );\n\n          if (!existingEvent) {\n            const event = {\n              id: selectedEvent._id,\n              title: selectedEvent.name,\n              start: dateInfo,\n            };\n            setEvents((prevEvents) => [...prevEvents, event]);\n          }\n        }\n      }\n    } else {\n      const checkboxKey = dateInfo;\n      setSelectedCheckboxes({ ...selectedCheckboxes, [checkboxKey]: true });\n      const existingEvent = events.find(\n        (event) => event.start === dateInfo.split(\"*****\")[0]\n      );\n      if (!existingEvent) {\n        const event = {\n          id: ev._id,\n          title: ev.name,\n          start: dateInfo.split(\"*****\")[0],\n        };\n        setEvents((prevEvents) => [...prevEvents, event]);\n      }\n    }\n  }\n\n  const handlCustomeWeek = async (dayList, ev, iswk = true) => {\n    const newArray = selectedCheckboxes;\n    dayList.forEach((item) => {\n      const checkboxKey = item;\n      if (\n        moment(item.split(\"*****\")[0]).format(\"YYYY-MM-DD\") >=\n        moment(new Date()).format(\"YYYY-MM-DD\")\n      ) {\n        newArray[checkboxKey] = true;\n        handleDateCellChange(item, true, true, ev);\n      }\n    });\n    setSelectedCheckboxes(newArray);\n    handleEventClick(ev);\n  };\n\n  const handleWeek = async (e, day, dayInfo, iswk = true) => {\n    const dayList = getSundays(days[day], day);\n    const newArray = selectedCheckboxes;\n    if (e.target.checked) {\n      dayList.forEach((item) => {\n        const checkboxKey =\n          item.format(\"YYYY-MM-DD\") + \"*****\" + selectedEvent._id;\n        if (\n          moment(item._d).format(\"YYYY-MM-DD\") >=\n          moment(new Date()).format(\"YYYY-MM-DD\")\n        ) {\n          newArray[checkboxKey] = true;\n          handleDateCellChange(item.format(\"YYYY-MM-DD\"), iswk);\n          newArray[days[day]] = true;\n        }\n      });\n    } else {\n      dayList.forEach((item) => {\n        const checkboxKey =\n          item.format(\"YYYY-MM-DD\") + \"*****\" + selectedEvent._id;\n        if (newArray[checkboxKey] !== undefined) {\n          delete newArray[checkboxKey];\n        }\n        handleDateCellChange(item.format(\"YYYY-MM-DD\"), iswk);\n        newArray[days[day]] = false;\n      });\n    }\n    setSelectedCheckboxes(newArray);\n  };\n\n  const getSundays = (dayName, dayId) => {\n    const result = [];\n    var startDate = new Date();\n    const cMonth = currentMonth;\n    const cYear = startDate.getFullYear();\n    var endDate = new Date(cYear, cMonth, 31);\n    var day = dayId;\n    for (var i = 0; i <= 7; i++) {\n      if (startDate.toString().indexOf(dayName) !== -1) {\n        break;\n      }\n      startDate = new Date(cYear, cMonth, i);\n    }\n    startDate = moment(startDate);\n    endDate = moment(endDate);\n    result.push(startDate);\n    var current = startDate.clone();\n    while (current.day(7 + day).isBefore(endDate)) {\n      result.push(current.clone());\n    }\n    return result;\n  };\n\n  const renderDayHeader = (dayInfo) => {\n    const { date } = dayInfo;\n    const checkboxKey = dayInfo.date.toISOString();\n    //const isChecked = selectedCheckboxes[checkboxKey];\n\n    if (isEventSelected) {\n      return (\n        <div className=\"month-schedule-header-checkbox\">\n          <input\n            className={`day-checkbox checkbox-day-${dayInfo.date.getDay()} month--${currentMonth}`}\n            name={`checkbox-${checkboxKey}`}\n            type=\"checkbox\"\n            id={`checkbox-${checkboxKey}`}\n            checked={selectedCheckboxes[days[dayInfo.date.getDay()]]}\n            onChange={(e) => {\n              handleWeek(e, dayInfo.date.getDay(), dayInfo);\n            }}\n          />\n          {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\n        </div>\n      );\n    } else {\n      return (\n        <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\n      );\n    }\n  };\n\n  const renderDateCell = (dateInfo) => {\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\n    const isEventSelected = selectedEvent;\n    if (isEventSelected) {\n      const checkboxKey = dateInfo.date.toISOString();\n      const checkDate = checkboxKey.split(\"T\")[0];\n      const lastDate = moment(checkDate, \"YYYY-MM-DD\")\n        .add(\"days\", 1)\n        .format(\"YYYY-MM-DD\");\n      let disablePrp = false;\n      if (moment(checkDate, \"YYYY-MM-DD\").add(\"days\", 2) < moment()) {\n        disablePrp = true;\n      }\n      let checker = false;\n      daySequence.forEach((i) => {\n        if (selectedCheckboxes[lastDate + \"*****\" + i._id] !== undefined) {\n          checker = true;\n        }\n      });\n\n      return (\n        <div className=\"month-schedule-checkbox\">\n          <input\n            name={`checkbox-${lastDate}`}\n            className={`${disablePrp == true ? \"disabled-checkbox\" : \"\"}`}\n            type=\"checkbox\"\n            //disabled={disablePrp}\n            checked={isSelected || selectedCheckboxes[lastDate] || checker}\n            onChange={() => handleDateCellChange(lastDate, false)}\n          />\n          {dateInfo.dayNumberText}\n        </div>\n      );\n    }\n    return dateInfo.dayNumberText;\n  };\n\n  const makePublishData = (data) => {\n    const result = [];\n    daySequence.forEach((item) => {\n      const newA = [];\n      data.forEach((items, i) => {\n        const spl = items.split(\"*****\");\n        const dt = spl[0];\n        const sq = spl[1];\n        if (sq === item._id) {\n          newA.push(dt);\n        }\n      });\n      if (newA.length > 0) {\n        result.push({\n          sequenceId: item._id,\n          dates: newA,\n        });\n      }\n    });\n    return result;\n  };\n\n  const handlePublish = async (e) => {\n    e.preventDefault();\n\n    //console.log(\"selectedCheckboxes\",selectedCheckboxes);\n\n    const dates = Object.keys(selectedCheckboxes).filter(\n      (i) =>\n        i !== \"Sun\" &&\n        i !== \"Mon\" &&\n        i !== \"Tue\" &&\n        i !== \"Wed\" &&\n        i !== \"Thu\" &&\n        i !== \"Fri\" &&\n        i !== \"Sat\"\n    );\n    const publishData = makePublishData(dates);\n    if (!publishData || publishData.length == 0) {\n      toast.error(\"Please select at least one date\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n      });\n\n      return false;\n    }\n    const payload = {\n      scheduleId: id,\n      scheduleArray: publishData,\n    };\n    await pushAddDates(payload).then((res) => {\n      if (res.data.statusCode === 200) {\n        history.push(`/push`);\n      }\n    });\n  };\n\n  const getCurrentMonth = (arg) => {\n    const startDate = arg.view.activeStart;\n    if (arg.view.type === \"dayGridMonth\") {\n      setCurrentMonth(startDate.getMonth() + 1);\n      return;\n    }\n    if (arg.view.type === \"dayGridDay\") {\n      startDate.setDate(startDate.getDate() + 8);\n      setCurrentMonth(startDate.getMonth() + 1);\n      return;\n    }\n  };\n\n  const handleDeleteSequesce = async (sequenceId, id) => {\n    await deleteSequence(sequenceId, id).then((res) => {\n      if (res.data.statusCode === 200) {\n        callAllDaySequence(id);\n      }\n    });\n  };\n\n  const handleButtonClick = (index) => {\n    setSelectedButtonIndex(index);\n    // Perform any other logic specific to the clicked button\n  };\n\n  const handleEditSequesce = (e, seqId, schId) => {\n    e.preventDefault();\n    history.push(`/push/sequence/${schId}/${seqId}`);\n  };\n  return (\n    <>\n      <div className=\"fullcalendar-box\">\n        <div className=\"d-flex justify-content-end\">\n          <Button\n            className=\"mr-2\"\n            onClick={(e) => {\n              handlePublish(e);\n            }}\n            variant=\"info add-screen-btn\"\n          >\n            Publish\n          </Button>\n        </div>\n\n        <div className=\"event-list\">\n          <div className=\"d-flex align-items-center justify-content-between pb-4\">\n            <h3 className=\"p-0\">Day Sequence</h3>\n            <Link to={`/testday/${id}`} className=\"mr-2\">\n              <Button variant=\"info add-screen-btn\">Create New</Button>\n            </Link>\n          </div>\n\n          {daySequence.map((event, i) => {\n            return (\n              <div\n                key={i}\n                className=\"month-schedule-list mt-4\"\n                onClick={() => {\n                  handleButtonClick(i);\n                  handleEventClick(event);\n                  // setActiveCard(true);\n                }}\n              >\n                <div\n                  className=\"d-flex align-items-center px-2 py-4 justify-content-between\"\n                  style={{\n                    boxShadow:\n                      selectedEvent &&\n                      selectedEvent._id &&\n                      selectedEvent._id === event._id\n                        ? \"rgba(0, 0, 0, 0.5) 0px 4px 12px\"\n                        : \"\",\n                  }}\n                  // className={\n                  //   selectedButtonIndex === i\n                  //     ? \"zone zone-active \"\n                  //     : \"zone\"\n                  // }\n                >\n                  <span>\n                    {event.name?.length > 6\n                      ? event.name.slice(0, 6) + \"...\"\n                      : event.name}\n                  </span>\n\n                  <span className=\"total-composition\">\n                    Contains {event.timings.length} compositions\n                  </span>\n                  <span onClick={(e) => handleEditSequesce(e, event._id, id)}>\n                    <img\n                      src={edit}\n                      className=\"dropdown-list-img img-fluid\"\n                      height=\"25px\"\n                      width=\"25px\"\n                    />\n                  </span>\n                  <span onClick={() => handleDeleteSequesce(event._id, id)}>\n                    <img\n                      src={deleteIcon}\n                      className=\"dropdown-list-img img-fluid\"\n                      height=\"30px\"\n                      width=\"30px\"\n                    />\n                  </span>\n                  <span className=\"add-btn\">Add to Calendar </span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"calendar\" style={{ float: \"left\", width: \"55%\" }}>\n          <FullCalendar\n            className=\"month-schedule\"\n            weekends={true}\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            selectable={true}\n            events={events}\n            dayHeaderContent={renderDayHeader}\n            dayCellContent={renderDateCell}\n            //validRange={{\"start\":moment().format('YYYY-MM-DD'),'end':null}}\n            datesSet={(arg) => getCurrentMonth(arg)}\n            eventContent={(info) => (\n              <div className=\"month-schedule-event\">\n                <div>\n                  {info.event.title.length > 5\n                    ? info.event.title.slice(0, 5) + \"...\"\n                    : info.event.title}\n                </div>\n              </div>\n            )}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SecondMonth.js",["573"],"import React, { useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\n// export default function SecondMonth() {\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [events, setEvents] = useState([]);\n//   console.log(events, \"events ssssssss\");\n//   const externalEvent = [\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\n//   ];\n\n//   const [selectedEvent, setSelectedEvent] = useState(null);\n//   console.log(selectedEvent, \"lllllllloooooo\");\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\n\n//   function handleDateCellChange(dateInfo) {\n//     // dateInfo.event = selectedEvent;\n//     console.log(dateInfo, \"handleDateCellChange top console\");\n//     const checkboxKey = dateInfo.date.toISOString();\n\n//     // console.log(selectedDateValuea, \"selectedDateValuea id\")\n//     const selectedDateValue = dateInfo.date.valueOf();\n//     console.log(dateInfo.event.id, \"dateInfo -> dateInfo.kkk\");\n\n//     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     if (isChecked) {\n//       // Unselecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//         delete updatedCheckboxes[checkboxKey];\n//         return updatedCheckboxes;\n//       });\n\n//       const filteredEvents = events.filter(\n//         (event) => event.start.valueOf() !== selectedDateValue\n//       );\n\n//       console.log(filteredEvents, \"iiiiiii\");\n\n//       setSelectedEvent(null);\n//       setSelectedDate(null);\n//       setEvents(filteredEvents);\n//     } else {\n//       // Selecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//         ...prevSelectedCheckboxes,\n//         [checkboxKey]: true,\n//       }));\n\n//       const event = {\n//         id: selectedEvent.id,\n//         title: selectedEvent.title,\n//         start: dateInfo.date,\n//       };\n//       setEvents((prevEvents) => [...prevEvents, event]);\n//     }\n//   }\n\n//   function handleDateCellChange(dateInfo) {\n//     const checkboxKey = dateInfo.date.toISOString();\n//     const selectedDateValue = dateInfo.date.valueOf();\n//     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     if (isChecked) {\n//       // Unselecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//         delete updatedCheckboxes[checkboxKey];\n//         return updatedCheckboxes;\n//       });\n\n//       const filteredEvents = events.filter(\n//         (event) => event.start.valueOf() !== selectedDateValue\n//       );\n\n//       setSelectedEvent(null);\n//       setSelectedDate(null);\n//       setEvents(filteredEvents);\n//     } else {\n//       // Selecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//         ...prevSelectedCheckboxes,\n//         [checkboxKey]: true,\n//       }));\n\n//       const event = {\n//         id: selectedEvent.id,\n//         title: selectedEvent.title,\n//         start: dateInfo.date,\n//       };\n//       setEvents((prevEvents) => [...prevEvents, event]);\n//     }\n//   }\n\n//   const renderDateCell = (dateInfo) => {\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\n//     const isEventSelected = selectedEvent;\n\n//     if (isEventSelected) {\n//       const checkboxKey = dateInfo.date.toISOString();\n//       return (\n//         <div>\n//           <input\n//             name={`checkbox-${checkboxKey}`}\n//             type=\"checkbox\"\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\n//             onChange={() => handleDateCellChange(dateInfo)}\n//           />\n//           {dateInfo.dayNumberText}\n//         </div>\n//       );\n//     }\n\n//     return dateInfo.dayNumberText;\n//   };\n//   const handleEventClick = (event) => {\n//     setSelectedEvent(event);\n//     setSelectedDate(null); // Reset selected date\n//   };\n\n//   return (\n//     <div className=\"containe\">\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n//         <h2>Event List</h2>\n//         <ul>\n//           {externalEvent.map((event, i) => (\n//             <li\n//               key={i}\n//               onClick={() => handleEventClick(event)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 fontWeight:\n//                   selectedEvent && selectedEvent.id === event.id\n//                     ? \"bold\"\n//                     : \"normal\",\n//               }}\n//             >\n//               {event.title}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n//         <FullCalendar\n//           plugins={[dayGridPlugin, interactionPlugin]}\n//           initialView=\"dayGridMonth\"\n//           selectable={true}\n//           events={events}\n//           dayCellContent={renderDateCell}\n//           eventContent={(info) => {\n//             return (\n//               <div>\n//                 <div>{info.event.title}</div>\n//               </div>\n//             );\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function SecondMonth() {\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [events, setEvents] = useState([]);\n//   const externalEvent = [\n//     { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\n//     { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\n//     { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\n//     { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\n//   ];\n\n//   const [selectedEvent, setSelectedEvent] = useState(null);\n//   const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\n//   const [isEventSelected, setIsEventSelected] = useState(false);\n\n//   function handleDateCellChange(dateInfo) {\n//     const checkboxKey = dateInfo.date.toISOString();\n//     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     if (isChecked) {\n//       // Unselecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//         delete updatedCheckboxes[checkboxKey];\n//         return updatedCheckboxes;\n//       });\n\n//       const filteredEvents = events.filter(\n//         (event) => event.start !== dateInfo.date.toISOString()\n//       );\n\n//       setSelectedEvent(null);\n//       setSelectedDate(null);\n//       setEvents(filteredEvents);\n//     } else {\n//       // Selecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//         ...prevSelectedCheckboxes,\n//         [checkboxKey]: true,\n//       }));\n\n//       const event = {\n//         id: selectedEvent.id,\n//         title: selectedEvent.title,\n//         start: dateInfo.date,\n//       };\n//       setEvents((prevEvents) => [...prevEvents, event]);\n//     }\n//   }\n\n//   const handleEventClick = (event) => {\n//     setSelectedEvent(event);\n//     setSelectedDate(null); // Reset selected date\n//     setSelectedCheckboxes({});\n//     setIsEventSelected(true); // Set isEventSelected to true\n//   };\n\n//   function handleDateCellChange(dateInfo) {\n//     const checkboxKey = dateInfo.date.toISOString();\n//     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     if (isChecked) {\n//       // Unselecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//         delete updatedCheckboxes[checkboxKey];\n//         return updatedCheckboxes;\n//       });\n\n//       const filteredEvents = events.filter(\n//         (event) => event.start !== dateInfo.date.toISOString()\n//       );\n\n//       setSelectedEvent(null);\n//       setSelectedDate(null);\n//       setEvents(filteredEvents);\n//     } else {\n//       // Selecting the checkbox\n//       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//         ...prevSelectedCheckboxes,\n//         [checkboxKey]: true,\n//       }));\n\n//       const event = {\n//         id: selectedEvent.id,\n//         title: selectedEvent.title,\n//         start: dateInfo.date.toISOString(),\n//       };\n//       setEvents((prevEvents) => [...prevEvents, event]);\n//     }\n//   }\n//   // ...existing code...\n\n//   //\n\n//   const handleWeekCellChange = (dayInfo) => {\n//     const { date } = dayInfo;\n//     const selectedDay = new Date(date);\n//     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\n\n//     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//       ...prevSelectedCheckboxes,\n//       [checkboxKey]: true,\n//     }));\n\n//     // Add event to the selected day (Sunday)\n//     const eventToAdd = {\n//       id: selectedEvent.id,\n//       title: selectedEvent.title,\n//       start: selectedDay.toISOString().split(\"T\")[0],\n//     };\n//     setEvents((prevEvents) => [...prevEvents, eventToAdd]);\n//   };\n\n//   const renderDayHeader = (dayInfo) => {\n//     const { date } = dayInfo;\n//     const checkboxKey = date.toISOString();\n//     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     if (isEventSelected) {\n//       return (\n//         <div>\n//           <input\n//             name={`checkbox-${checkboxKey}`}\n//             type=\"checkbox\"\n//             checked={isChecked}\n//             onChange={() => handleWeekCellChange(dayInfo)}\n//           />\n//           {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\n//         </div>\n//       );\n//     } else {\n//       return (\n//         <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\n//       );\n//     }\n//   };\n\n//   const renderDateCell = (dateInfo) => {\n//     const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n//     const isSelected = selectedDateValue === dateInfo.date.valueOf();\n//     const isEventSelected = selectedEvent;\n\n//     if (isEventSelected) {\n//       const checkboxKey = dateInfo.date.toISOString();\n//       return (\n//         <div>\n//           <input\n//             name={`checkbox-${checkboxKey}`}\n//             type=\"checkbox\"\n//             checked={isSelected || selectedCheckboxes[checkboxKey]}\n//             onChange={() => handleDateCellChange(dateInfo)}\n//           />\n//           {dateInfo.dayNumberText}\n//         </div>\n//       );\n//     }\n//     return dateInfo.dayNumberText;\n//   };\n\n//   return (\n//     <div className=\"fullcalendar-box\">\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n//         <h2>Event List</h2>\n//         <ul>\n//           {externalEvent.map((event, i) => (\n//             <li\n//               key={i}\n//               onClick={() => handleEventClick(event)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 fontWeight:\n//                   selectedEvent && selectedEvent.id === event.id\n//                     ? \"bold\"\n//                     : \"normal\",\n//               }}\n//             >\n//               {event.title}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n//         <FullCalendar\n//           plugins={[dayGridPlugin, interactionPlugin]}\n//           initialView=\"dayGridMonth\"\n//           selectable={true}\n//           events={events}\n//           dayHeaderContent={renderDayHeader}\n//           dayCellContent={renderDateCell}\n//           eventContent={(info) => (\n//             <div>\n//               <div>{info.event.title}</div>\n//             </div>\n//           )}\n//           headerToolbar={{\n//             start: \"title\",\n//             center: \"selectWeekButton\",\n//             end: \"today prev,next\",\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n// month day logic\nexport default function SecondMonth() {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [events, setEvents] = useState([]);\n  const externalEvent = [\n    { id: 1, title: \"Event 1\", start: \"2023-06-01\", end: \"2023-06-02\" },\n    { id: 2, title: \"Event 2\", start: \"2023-06-03\", end: \"2023-06-04\" },\n    { id: 3, title: \"Event 3\", start: \"2023-06-05\", end: \"2023-06-06\" },\n    { id: 4, title: \"Event 4\", start: \"2023-06-07\", end: \"2023-06-08\" },\n  ];\n\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\n  const [isEventSelected, setIsEventSelected] = useState(false);\n\n  //   function handleDateCellChange(dateInfo) {\n  //     const checkboxKey = dateInfo.date.toISOString();\n  //     const isChecked = selectedCheckboxes[checkboxKey];\n\n  //     if (isChecked) {\n  //       // Unselecting the checkbox\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n  //         delete updatedCheckboxes[checkboxKey];\n  //         return updatedCheckboxes;\n  //       });\n\n  //       const filteredEvents = events.filter(\n  //         (event) => event.start !== dateInfo.date.toISOString()\n  //       );\n\n  //       setSelectedEvent(null);\n  //       setSelectedDate(null);\n  //       setEvents(filteredEvents);\n  //     } else {\n  //       // Selecting the checkbox\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n\n  //       const event = {\n  //         id: selectedEvent.id,\n  //         title: selectedEvent.title,\n  //         start: dateInfo.date,\n  //       };\n  //       setEvents((prevEvents) => [...prevEvents, event]);\n  //     }\n  //   }\n\n  const handleEventClick = (event) => {\n    setSelectedEvent(event);\n    setSelectedDate(null); // Reset selected date\n    setSelectedCheckboxes({});\n    setIsEventSelected(true); // Set isEventSelected to true\n  };\n\n  //   function handleDateCellChange(dateInfo) {\n  //     const checkboxKey = dateInfo.date.toISOString();\n  //     const isChecked = selectedCheckboxes[checkboxKey];\n\n  //     if (isChecked) {\n  //       // Unselecting the checkbox\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n  //         delete updatedCheckboxes[checkboxKey];\n  //         return updatedCheckboxes;\n  //       });\n\n  //       const filteredEvents = events.filter(\n  //         (event) => event.start !== dateInfo.date.toISOString()\n  //       );\n\n  //       setSelectedEvent(null);\n  //       setSelectedDate(null);\n  //       setEvents(filteredEvents);\n  //     } else {\n  //       // Selecting the checkbox\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n\n  //       const event = {\n  //         id: selectedEvent.id,\n  //         title: selectedEvent.title,\n  //         start: dateInfo.date.toISOString(),\n  //       };\n  //       setEvents((prevEvents) => [...prevEvents, event]);\n  //     }\n  //   }\n\n  function handleDateCellChange(dateInfo) {\n    const checkboxKey = dateInfo.date.toISOString();\n    const isChecked = selectedCheckboxes[checkboxKey];\n\n    if (isChecked) {\n      // Unselecting the checkbox\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\n        delete updatedCheckboxes[checkboxKey];\n        return updatedCheckboxes;\n      });\n\n      const filteredEvents = events.filter(\n        (event) => event.start !== dateInfo.date.toISOString()\n      );\n\n      setSelectedEvent(null);\n      setSelectedDate(null);\n      setEvents(filteredEvents);\n    } else {\n      // Selecting the checkbox\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n        [checkboxKey]: true,\n      }));\n\n      const existingEvent = events.find(\n        (event) => event.start === dateInfo.date.toISOString()\n      );\n\n      if (!existingEvent) {\n        const event = {\n          id: selectedEvent.id,\n          title: selectedEvent.title,\n          start: dateInfo.date.toISOString(),\n        };\n        setEvents((prevEvents) => [...prevEvents, event]);\n      }\n    }\n  }\n\n  //   const handleWeekCellChange = (dayInfo) => {\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\n  //       const dates = [];\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\n  //       while (date.getMonth() === month) {\n  //         if (date.getDay() === targetDay) {\n  //           dates.push(date.getDate());\n  //         }\n  //         date.setDate(date.getDate() + 1);\n  //       }\n\n  //       return dates;\n  //     }\n\n  //     const dates = getDatesForDayOfWeek(\n  //       new Date(dayInfo.date).getFullYear(),\n  //       new Date(dayInfo.date).getMonth(),\n  //       new Date(dayInfo.date).getDay()\n  //     );\n  //     console.log(dates, \"datesssss\");\n  //     const { date } = dayInfo;\n  //     const selectedDay = new Date(date);\n  //     const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\n\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //       ...prevSelectedCheckboxes,\n  //       [checkboxKey]: true,\n  //     }));\n\n  //     // Add event to the selected day (Sunday)\n  //     // const eventToAdd = {\n  //     //   id: selectedEvent.id,\n  //     //   title: selectedEvent.title,\n  //     //   start: selectedDay.toISOString().split(\"T\")[0],\n  //     // };\n  //     // setEvents((prevEvents) => [...prevEvents, eventToAdd]);\n  //   };\n\n  //   const handleWeekCellChange = (dayInfo) => {\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\n  //       const dates = [];\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\n  //       while (date.getMonth() === month) {\n  //         if (date.getDay() === targetDay) {\n  //           dates.push(date.getDate());\n  //         }\n  //         date.setDate(date.getDate() + 1);\n  //       }\n\n  //       return dates;\n  //     }\n\n  //     const dates = getDatesForDayOfWeek(\n  //       new Date(dayInfo.date).getFullYear(),\n  //       new Date(dayInfo.date).getMonth(),\n  //       new Date(dayInfo.date).getDay()\n  //     );\n\n  //     dates.forEach((date) => {\n  //       const selectedDay = new Date(dayInfo.date);\n  //       selectedDay.setDate(date);\n  //       const checkboxKey = selectedDay.toISOString().split(\"T\")[0];\n\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n\n  //       // Add event to the selected day\n  //       const eventToAdd = {\n  //         id: selectedEvent.id,\n  //         title: selectedEvent.title,\n  //         start: selectedDay.toISOString().split(\"T\")[0],\n  //       };\n  //       setEvents((prevEvents) => [...prevEvents, eventToAdd]);\n  //     });\n  //   };\n\n  //   const handleWeekCellChange = (dayInfo) => {\n  //     function getDatesForDayOfWeek(year, month, dayOfWeek) {\n  //       const dates = [];\n  //       const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\n  //       const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\n  //       while (date.getMonth() === month) {\n  //         if (date.getDay() === targetDay) {\n  //           dates.push(new Date(date)); // Push a new Date object to the array\n  //         }\n  //         date.setDate(date.getDate() + 1);\n  //       }\n  //       return dates;\n  //     }\n\n  //     const dates = getDatesForDayOfWeek(\n  //       new Date(dayInfo.date).getFullYear(),\n  //       new Date(dayInfo.date).getMonth(),\n  //       new Date(dayInfo.date).getDay()\n  //     );\n\n  //     dates.forEach((date) => {\n  //       const checkboxKey = date.toISOString().split(\"T\")[0];\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n\n  //       // Check if the event already exists for the selected date\n  //       const existingEvent = events.find(\n  //         (event) => event.start === date.toISOString().split(\"T\")[0]\n  //       );\n\n  //       // Add event to the selected day if it doesn't already exist\n  //       if (!existingEvent) {\n  //         const eventToAdd = {\n  //           id: selectedEvent.id,\n  //           title: selectedEvent.title,\n  //           start: date.toISOString().split(\"T\")[0],\n  //         };\n  //         setEvents((prevEvents) => [...prevEvents, eventToAdd]);\n  //       }\n  //     });\n  //   };\n\n  const handleWeekCellChange = (year, month, dayOfWeek) => {\n    function getDatesForDayOfWeek(year, month, dayOfWeek) {\n      const dates = [];\n      const date = new Date(year, month, 1); // Subtract 1 from month since JavaScript months are zero-based\n      const targetDay = dayOfWeek % 7; // Normalize dayOfWeek to 0-6 range (Sunday is 0)\n      while (date.getMonth() === month) {\n        if (date.getDay() === targetDay) {\n          dates.push(new Date(date)); // Push a new Date object to the array\n        }\n        date.setDate(date.getDate() + 1);\n      }\n      return dates;\n    }\n\n    // const dates = getDatesForDayOfWeek(\n    //   new Date(dayInfo.date).getFullYear(),\n    //   new Date(dayInfo.date).getMonth(),\n    //   new Date(dayInfo.date).getDay()\n    // );\n\n    const dates = getDatesForDayOfWeek(year, month, dayOfWeek);\n\n    dates.forEach((date) => {\n      console.log(date, \"kkkkkk\");\n\n      // const checkboxKey = inputdate.replace(/\\//g, \"-\");\n      const checkboxKey = date;\n\n      console.log(checkboxKey, \"unitqkjn\");\n\n      setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n        ...prevSelectedCheckboxes,\n        [checkboxKey]: true,\n      }));\n      console.log(selectedCheckboxes, \"sgvyhjmffgbhnj\");\n\n      // Check if the event already exists for the selected date\n      const existingEvent = events.find(\n        (event) => event.start === date.toISOString().split(\"T\")[0]\n      );\n\n      if (!existingEvent) {\n        // Add event to the selected date\n        const eventToAdd = {\n          id: selectedEvent.id,\n          title: selectedEvent.title,\n          start: date.toISOString().split(\"T\")[0],\n        };\n        setEvents((prevEvents) => [...prevEvents, eventToAdd]);\n      }\n    });\n  };\n\n  function getMonthFromString(mon) {\n    return new Date(Date.parse(mon + \" 1, 2012\")).getMonth() + 1;\n  }\n\n  const renderDayHeader = (dayInfo) => {\n    console.log(dayInfo, \"renderDayHeader console\");\n    const { date } = dayInfo;\n    const checkboxKey = date.toISOString();\n    const isChecked = selectedCheckboxes[checkboxKey];\n    console.log(isChecked, \"kkkk\");\n\n    if (isEventSelected) {\n      return (\n        <div>\n          <input\n            className=\"day-checkbox\"\n            name={`checkbox-${checkboxKey}`}\n            type=\"checkbox\"\n            checked={isChecked}\n            onChange={() => {\n              const monthYrStr = document.querySelector(\"#fc-dom-2\").innerHTML;\n              const monthYrArr = monthYrStr.split(\" \");\n              console.log(\"monthYrArr #696\", monthYrArr);\n              console.log(\n                monthYrArr[1],\n                getMonthFromString(monthYrArr[0]),\n                date.getDay()\n              );\n            }}\n          />\n          {date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}\n        </div>\n      );\n    } else {\n      return (\n        <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>\n      );\n    }\n  };\n\n  const renderDateCell = (dateInfo) => {\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\n    const isEventSelected = selectedEvent;\n\n    if (isEventSelected) {\n      const checkboxKey = dateInfo.date.toISOString();\n      return (\n        <div>\n          <input\n            name={`checkbox-${checkboxKey}`}\n            type=\"checkbox\"\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\n            onChange={() => handleDateCellChange(dateInfo)}\n          />\n          {dateInfo.dayNumberText}\n        </div>\n      );\n    }\n    return dateInfo.dayNumberText;\n  };\n\n  return (\n    <div className=\"fullcalendar-box\">\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n        <h2>Event List</h2>\n        <ul>\n          {externalEvent.map((event, i) => (\n            <li\n              key={i}\n              onClick={() => handleEventClick(event)}\n              style={{\n                cursor: \"pointer\",\n                fontWeight:\n                  selectedEvent && selectedEvent.id === event.id\n                    ? \"bold\"\n                    : \"normal\",\n              }}\n            >\n              {event.title}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          selectable={true}\n          events={events}\n          dayHeaderContent={renderDayHeader}\n          dayCellContent={renderDateCell}\n          eventContent={(info) => (\n            <div>\n              <div>{info.event.title}</div>\n            </div>\n          )}\n          headerToolbar={{\n            start: \"title\",\n            center: \"selectWeekButton\",\n            end: \"today prev,next\",\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SequenceEdit.js",["574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { createPlugin } from \"@fullcalendar/core\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport { toast } from \"react-toastify\";\nimport {\n  BASE_URL,\n  getAllComposition,\n  getAllMedia,\n  updateSequence,\n  getAllDaySequence,\n  getSingleSequence,\n} from \"../../../utils/api\";\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../../utils/UtilsService\";\nimport useSWR from \"swr\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport deleteBtnImg from \"../../../img/delete-btn.png\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst MyCustomPlugin = createPlugin({\n  ...timeGridPlugin,\n  ...interactionPlugin,\n  // other plugin options\n});\n\nexport default function SequenceTime() {\n  const [events, setEvents] = useState([]);\n  const [def, setDef] = useState([]);\n  const [sequence, setSequence] = useState([]);\n  const [renderTime, setRenderTime] = useState(\"\");\n  const history = useHistory();\n  const { schId, seqId } = useParams({26:true});\n  const [sqName, setSqName] = useState(\"\");\n\n  const { data: allComposition, mutate } = useSWR(\n    \"/vendor/layouts/compositions\",\n    getAllComposition\n  );\n\n  const callSingleDaySequence = async (schId) => {\n    const seqData = await getSingleSequence(schId, seqId)\n    if (seqData && seqData.sequence && seqData.sequence[0] && seqData.sequence[0].timings) {\n      const listTimings = [];\n      let defArray = {};\n      setSqName(seqData.sequence[0].name)\n      let defId = 105;\n      seqData.sequence[0].timings.forEach((item) => {\n        defId = defId + +1;\n        defArray = {...defArray,[defId]:true}\n        const sT = item.startTime.split(\"T\")[1].split(\":\");\n        const eT = item.endTime.split(\"T\")[1].split(\":\");\n        const data = {\n          id: item.composition._id,\n          sourceId: item.composition._id,\n          publicId: item.composition._id,\n          title:item.composition.name,\n          name:item.composition.name,\n          startTime:sT[0] + \":\" + sT[1],\n          endTime:eT[0] + \":\" + eT[1],\n          timing: sT[0] + \":\" + sT[1] + \" - \" + eT[0] + \":\" + eT[1],\n          image:`${BASE_URL}${item.composition.zones[0].content[0]}`,\n          extendedProps:{\n            custom:`${BASE_URL}${item.composition.zones[0].content[0].url}`,\n            defId: defId.toString()\n          },\n          _def:{\n            defId: defId.toString()\n          },\n          defId: defId.toString()\n        }\n        //handleEventReceive(data)\n        listTimings.push(data);\n      });\n      setDef(defArray);\n      setEvents(listTimings);\n    }\n  };\n\n  let timeFormet = {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false,\n  };\n  // load external events\n  useEffect(() => {\n    callSingleDaySequence(schId);\n    let draggableEl = document.getElementById(\"external-events\");\n    new Draggable(draggableEl, {\n      itemSelector: \".fc-event\",\n      eventData: function (eventEl) {\n        let id = eventEl.dataset.id;\n        let sourceId = eventEl.getAttribute(\"sourceId\");\n        let publicId = eventEl.getAttribute(\"publicId\");\n        let title = eventEl.getAttribute(\"title\");\n        let color = \"#FFE494\";\n        let custom = eventEl.dataset.custom;\n\n        return {\n          id: id,\n          sourceId,\n          publicId,\n          title: title,\n          color: color,\n          custom: custom,\n          create: true,\n        };\n      },\n    });\n  }, [schId]);\n\n  function eventFunction(info) {\n    //const newArray = events;\n    const id = info.el.fcSeg.eventRange.def.sourceId;\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\n    //console.log(\"resize\",id,defId,def)\n    let newArr = events.map((item, i) => {\n     // console.log(item.defId,defId)\n      if (item.defId == defId) {\n        if(item.startTime && item.endTime){\n         // console.log(\"time\",info.el.innerText.split(\"\\n\\n\")[1])\n          return { ...item,\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1],\n            ['startTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[0],\n            ['endTime']:info.el.innerText.split(\"\\n\\n\")[1].split(\" - \")[1]\n          };\n        }else{\n          return { ...item,\n            [\"timing\"]: info.el.innerText.split(\"\\n\\n\")[1]\n          };\n        }\n      } else {\n        return item;\n      }\n    });\n   // console.log(\"resize\",newArr)\n    setEvents(newArr);\n  }\n  // handle event receive\n  \n  const handleEventReceive = (eventInfo) => {\n    //console.log(\"eventInfo\",eventInfo)\n    const id = eventInfo.event._def.sourceId;\n    const [startTime, endTime] = renderTime.split(\" - \");\n    const formattedStartTime = startTime.padStart(5, \"0\");\n    const formattedEndTime =\n      endTime.length === 5 ? endTime : endTime.padStart(5, \"0\");\n\n    const timeRange = `${formattedStartTime} - ${formattedEndTime}`;\n\n    const newEvent = {\n      id: id,\n      timing: timeRange,\n      defId: eventInfo.event._def.defId,\n    };\n  \n    setEvents((events) => [...events, newEvent]);\n    setDef({ ...def, [eventInfo.event._def.defId]: true });\n  };\n\n  const handleEventClick = (info) => {\n    const defId = info.event._def.extendedProps.defId != undefined ? info.event._def.extendedProps.defId : info.event._def.defId ;\n    setEvents((current) => current.filter((event) => event.defId !== defId));\n    info.event.remove();\n  };\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    const scheduleId = schId;\n    const timings = events.map((item) => {\n      return {\n        composition: item.id,\n        startTime:\n          new Date().toISOString().slice(0, 10) +\n          \"T\" +\n          item.timing.split(\" - \")[0] +\n          \":00Z\",\n        endTime:\n          new Date().toISOString().slice(0, 10) +\n          \"T\" +\n          item.timing.split(\" - \")[1] +\n          \":00Z\",\n      };\n    });\n    if (!sqName) {\n      toast.error(\"Please enter sequence name\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n      });\n\n      return false;\n    }\n    if (!schId) {\n      toast.error(\"something went wrong\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n      });\n\n      return false;\n    }\n    const payload = {\n      scheduleId: scheduleId,\n      sequenceId:seqId,\n      name: sqName,\n      timings,\n    };\n\n    //console.log(\"payload\",def,events,payload,renderTime)\n\n    await updateSequence(payload).then((res) => {\n      if (res.data.statusCode === 200) {\n        history.push(`/design-month-schedule/${schId}`);\n      }\n    });\n  }\n\n  function renderEventContent(eventInfo) {\n    console.log(\"eventInfo\",eventInfo)\n    const { event } = eventInfo;\n    const { title } = event;\n    const checkTime = eventInfo.timeText.split(\" - \");\n    if (!checkTime[1]) {\n      const secondTime =\n        parseInt(checkTime[0].split(\":\")[0]) +\n        1 +\n        \":\" +\n        checkTime[0].split(\":\")[1];\n      eventInfo.timeText = checkTime[0] + \" - \" + secondTime;\n    }\n    if(event._def.extendedProps.defId != undefined){\n      if (!def[eventInfo.event._def.extendedProps.defId]) {\n        setRenderTime(eventInfo.timeText);\n      }\n    }else{\n      if (!def[eventInfo.event._def.defId]) {\n        setRenderTime(eventInfo.timeText);\n      }\n    }\n    \n    return (\n      <>\n        <div className={`fullcalendar-main-container`}>\n          <img\n            src={event.extendedProps.custom}\n            className=\"day-schedule-fullcalendar-img\"\n            alt=\"Event\"\n          />\n          <p className=\"m-0 fullcalendar-title\">{title}</p>\n          <p className=\"fullcalendar-time\">{eventInfo.timeText}</p>\n\n          <div\n            className=\"fullcalendar-delete-btn\"\n            onClick={() => handleEventClick(eventInfo)}\n          >\n            <img className=\"edit-icon cursorPointer\" src={deleteBtnImg} />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"d-flex justify-content-between align-items-center\">\n        <input\n          type=\"text\"\n          className=\" schedule-name-input-feild form-control input-default \"\n          placeholder=\"Schedule Name\"\n          value={sqName}\n          onChange={(e) => setSqName(e.target.value)}\n          required\n        />\n        <div className=\"d-flex justify-content-end\">\n            <Button\n              className=\"mr-2\"\n              variant=\"info add-screen-btn\"\n              onClick={(e) => handleSubmit(e)}\n            >\n              Update Sequence\n            </Button>\n          </div>\n        {/* {renderTime && (\n          <div className=\"d-flex justify-content-end\">\n            <Button\n              className=\"mr-2\"\n              variant=\"info add-screen-btn\"\n              onClick={(e) => handleSubmit(e)}\n            >\n              Save Sequence\n            </Button>\n          </div>\n        )} */}\n      </div>\n\n      <div>\n        <div style={{ float: \"left\", width: \"50%\", height: \"100vh\" }}>\n          <Table\n            responsive\n            className=\"custom-table screen-table\"\n            style={{ height: \"100%\" }}\n            id=\"external-events\"\n          >\n            <thead>\n              <tr>\n                <th>Composition</th>\n                <th>Date Added</th>\n                <th>Duration</th>\n                <th>Associated Schedule</th>\n                <th>Tags</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {allComposition &&\n                allComposition.map((composition) => {\n                  const content = composition.zones[0].content[0];\n                  return (\n                    <tr\n                      key={composition._id}\n                      className=\"fc-event  fc-daygrid-event fc-daygrid-block-event \"\n                      title={composition.name}\n                      sourceId={composition._id}\n                      // data-color={\"yellow\"}\n                      data-custom={`${BASE_URL}${content.url}`}\n                      style={{\n                        backgroundColor: \"#fff\",\n                        // borderColor: \"blue\",\n                        cursor: \"pointer\",\n                      }}\n                      // id={composition._id}\n                    >\n                      <td>\n                        <span className=\"td-content d-flex name-td-content\">\n                          <span\n                            className={`name-img mr-2  ${\n                              content.type === \"video\" && \"videotableName\"\n                            }`}\n                          >\n                            {content.type === \"image\" && (\n                              <img\n                                className=\"media-img img-fluid\"\n                                src={`${BASE_URL}${content.url}`}\n                                alt=\"media-img\"\n                              />\n                            )}\n                            {content.type === \"video\" &&\n                              content.duration.toFixed(0) / 60}\n                          </span>\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\n                            <strong>{composition.name}</strong>\n                            <span>{composition.createdBy}</span>\n                          </span>\n                        </span>\n                      </td>\n                      <td>\n                        <span className=\"td-content\">\n                          <strong>\n                            {humanReadableFormattedDateString(\n                              composition.createdAt\n                            )}\n                          </strong>\n                          <span>\n                            {getDatetimeIn12Hours(composition.createdAt)}\n                          </span>\n                        </span>\n                      </td>\n                      <td> {composition.duration} Sec</td>\n                      <td>No Schedule</td>\n                      <td style={{ width: \"180px\" }}>\n                        <span className=\"tag-container\">\n                          {composition.tags &&\n                            composition.tags.map((tag) => {\n                              return (\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\n                                  {tag}\n                                </span>\n                              );\n                            })}\n                        </span>\n\n                        <span\n                          className=\"down-arrow\"\n                          // onClick={() => {\n                          //     setSelected(composition);\n                          //     setNewTagModal(true);\n                          // }}\n                        >\n                          <img\n                            className=\"down-arrow-img img-fluid\"\n                            src={downArrow}\n                            alt=\"arrow\"\n                          />\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </Table>\n        </div>\n\n        <div style={{ float: \"left\", width: \"50%\" }}>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={false}\n            initialView=\"timeGridDay\"\n            slotDuration=\"00:10:00\"\n            slotLabelInterval={{ hours: 1 }}\n            allDaySlot={false}\n            eventTimeFormat={timeFormet}\n            editable={true}\n            selectable={false}\n            selectMirror={true}\n            dayMaxEvents={false}\n            droppable={true}\n            eventReceive={handleEventReceive}\n            slotEventOverlap={false}\n            eventOverlap={false}\n            eventContent={renderEventContent}\n            contentHeight=\"700px\"\n            events={events}\n            eventResize={eventFunction}\n          ></FullCalendar>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/api.js",["594","595","596","597","598"],"import fetchClient from \"./fetchClient\";\nimport axios from \"axios\";\nexport const BASE_URL = \"http://144.126.143.140:5000\";\n\nexport function login(email, password) {\n  const role = \"vendor\";\n  const postData = {\n    email,\n    password,\n    role,\n  };\n\n  return fetchClient.post(`${BASE_URL}/vendor/auth/login`, postData);\n}\n\nexport async function getAllScreens() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/display/screen`);\n  return response.data.data;\n}\n\nexport async function getAllMedia() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/display/media`);\n  return response.data.data.media;\n}\nexport async function getAllComposition() {\n  const response = await fetchClient.get(\n    BASE_URL + `/vendor/layouts/compositions?page=0&limit=1000`\n  );\n\n  return response.data.data;\n}\n\nexport function addScreen(data) {\n  return fetchClient.post(`${BASE_URL}/vendor/display/screen`, data);\n}\n\nexport async function addScreenCode(deviceToken) {\n  const postData = {\n    deviceToken: deviceToken,\n  };\n  const response = await fetchClient.post(`${BASE_URL}/device/auth`, postData);\n  return response.data.data;\n}\n\nexport async function validateScreenCode(code) {\n  const postData = {\n    code: code,\n  };\n\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/display/deviceCode`,\n      postData\n    );\n    return response.data.statusCode === 200;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function addMedia(formData) {\n  const response = await fetchClient.post(\n    `${BASE_URL}/vendor/display/media`,\n    formData,\n    {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    }\n  );\n}\nexport async function deleteMedia(id) {\n  await fetchClient.delete(`${BASE_URL}/vendor/display/media?mediaId=${id}`);\n}\n\nexport async function publishMedia(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/display/publish`,\n      postData\n    );\n    return response.data.statusCode === 200;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function deleteScreen(id) {\n  return await fetchClient.delete(\n    `${BASE_URL}/vendor/display/screen?screenId=${id}`\n  );\n}\n\nexport async function getLayouts() {\n  const response = await fetchClient.get(`${BASE_URL}/vendor/layouts`);\n  return response.data.data;\n}\nexport async function postComposition(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/layouts/composition`,\n      postData\n    );\n    return response.data.statusCode === 200;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function putComposition(postData) {\n  try {\n    const response = await fetchClient.put(\n      `${BASE_URL}/vendor/layouts/composition`,\n      postData\n    );\n    return response.data.statusCode === 200;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function deleteCompositionById(id) {\n  await fetchClient.delete(\n    `${BASE_URL}/vendor/layouts/composition?compositionId=${id}`\n  );\n}\n\nexport async function getCompositionById(url) {\n  const response = await fetchClient.get(BASE_URL + `${url}`);\n  return response.data.data;\n}\n\nexport async function getMedia(path) {\n  const response = await fetchClient.get(\n    `${BASE_URL}/vendor/display/mediaFile?path=${path}`\n  );\n  return response.data.data;\n}\n\nexport async function uploadBlob(blob) {\n  const imageResponse = await fetchClient.get(blob, { responseType: \"blob\" });\n  const blobData = imageResponse.data;\n\n  const formData = new FormData();\n  // Extract filename and extension from the Blob URL\n  const url = new URL(blob);\n  const pathnameParts = url.pathname.split(\"/\");\n  const filenameWithExtension = pathnameParts[pathnameParts.length - 1];\n\n  // Append the Blob to the FormData object\n  formData.append(\"file\", blobData, filenameWithExtension);\n\n  const response = await fetchClient.post(\n    `${BASE_URL}/vendor/layouts/upload`,\n    formData,\n    {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    }\n  );\n  return response.data.data;\n}\n\nexport async function pushAddSchedule(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/push/schedule`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function pushAddDates(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/push/dates`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function saveSequence(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/push/sequence`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function updateSequence(postData) {\n  try {\n    const response = await fetchClient.put(\n      `${BASE_URL}/vendor/push/sequence`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\nexport async function getAllDaySequence(scheduleId) {\n  const response = await fetchClient.get(\n    BASE_URL + `/vendor/push/sequenceList?scheduleId=${scheduleId}`\n  );\n  return response.data.data;\n}\n\nexport async function getAllSchedule() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/push/schedules`);\n  return response;\n}\n\nexport async function getQuickPlay() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/push/quickplay`);\n  return response;\n}\n\nexport async function setQuickplay(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/push/quickplay`,\n      postData\n    );\n    return response.data.statusCode === 200;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function deleteSequence(sequenceId, scheduleId) {\n  const response = await fetchClient.delete(\n    `${BASE_URL}/vendor/push/sequence?scheduleId=${scheduleId}&sequenceId=${sequenceId}`\n  );\n  return response;\n}\nexport async function deleteSchedule(scheduleId) {\n  const response = await fetchClient.delete(\n    `${BASE_URL}/vendor/push/schedule?scheduleId=${scheduleId}`\n  );\n  return response;\n}\n\nexport async function deleteQuickPlay(quickPlayId) {\n  const response = await fetchClient.delete(\n    `${BASE_URL}/vendor/push/quickplay?id=${quickPlayId}`\n  );\n  return response;\n}\n\nexport async function assignDefaultComposition(postData) {\n  try {\n    const response = await fetchClient.put(\n      `${BASE_URL}/vendor/profile/defaultComposition`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function setDefaultComposition(postData) {\n  try {\n    const response = await fetchClient.post(\n      `${BASE_URL}/vendor/push/defaultComposition`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function getDefaultComposition(postData) {\n  try {\n    const response = await fetchClient.get(\n      `${BASE_URL}/vendor/push/defaultComposition`,\n      postData\n    );\n    return response;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function vendorProfile() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile`);\n  return response;\n}\n\nexport async function getReports(startDate, endDate, reportSlug) {\n  let type = \"\";\n  if (reportSlug == \"media-report\") {\n    type = \"mediaReport\";\n  }\n  if (reportSlug == \"uptime-report\") {\n    type = \"uptimeReport\";\n  }\n  if (reportSlug == \"audit-logs\") {\n    type = \"auditLogs\";\n  }\n  const response = await fetchClient.get(\n    BASE_URL +\n      `/vendor/profile/${type}?page=0&limit=1000&startDate=${startDate}&endDate=${endDate}`\n  );\n\n  return response;\n}\n\nexport async function getSingleSequence(scheduleId, seqId) {\n  const response = await fetchClient.get(\n    BASE_URL +\n      `/vendor/push/sequence?scheduleId=${scheduleId}&sequenceId=${seqId}`\n  );\n  return response.data.data;\n}\n\nexport async function getUsers() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/users`);\n  return response.data.data;\n}\n\nexport async function addUsers(postdata) {\n  const response = await fetchClient.post(\n    BASE_URL + `/vendor/profile/users`,\n    postdata\n  );\n  return response;\n}\n\nexport async function updateUsers(postdata) {\n  const response = await fetchClient.put(\n    BASE_URL + `/vendor/profile/users`,\n    postdata\n  );\n  return response.data.data;\n}\n\nexport async function deleteUsers(userId) {\n  const response = await fetchClient.delete(\n    BASE_URL + `/vendor/profile/users?userId=${userId}`\n  );\n  return response.data.data;\n}\n\nexport async function getGroups() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/groups`);\n  return response.data.data;\n}\n\nexport async function addGroups(postdata) {\n  const response = await fetchClient.post(\n    BASE_URL + `/vendor/profile/groups`,\n    postdata\n  );\n  return response;\n}\n\nexport async function updateGroups(postdata) {\n  const response = await fetchClient.put(\n    BASE_URL + `/vendor/profile/groups`,\n    postdata\n  );\n  return response.data.data;\n}\n\nexport async function deleteGroups(groupId) {\n  const response = await fetchClient.delete(\n    BASE_URL + `/vendor/profile/groups?groupId=${groupId}`\n  );\n  return response.data.data;\n}\n\nexport async function getRoles() {\n  const response = await fetchClient.get(BASE_URL + `/vendor/profile/roles`);\n  return response.data.data;\n}\n\nexport async function updateRoles(postdata) {\n  const response = await fetchClient.put(\n    BASE_URL + `/vendor/profile/roles`,\n    postdata\n  );\n  return response.data.data;\n}\n\nexport async function getDeviceProfile() {\n  const response = await fetchClient.get(\n    BASE_URL + `/vendor/profile/deviceProfile?limit=100`\n  );\n  return response.data.data;\n}\n\nexport async function addDeviceProfile(postdata) {\n  const response = await fetchClient.post(\n    BASE_URL + `/vendor/profile/deviceProfile`,\n    postdata\n  );\n  return response;\n}\n\nexport async function addApps(postdata) {\n  const response = await fetchClient.post(BASE_URL + `/vendor/apps`, postdata);\n  return response;\n}\n\nexport async function updateApps(postdata) {\n  const response = await fetchClient.put(BASE_URL + `/vendor/apps`, postdata);\n  return response;\n}\n\nexport async function updateDeviceProfile(postdata) {\n  const response = await fetchClient.put(\n    BASE_URL + `/vendor/profile/deviceProfile`,\n    postdata\n  );\n  return response.data.data;\n}\n\nexport async function deleteDeviceProfile(userId) {\n  const response = await fetchClient.delete(\n    BASE_URL + `/vendor/profile/deviceProfile?profileId=${userId}`\n  );\n  return response.data.data;\n}\n\nexport async function assignScreenProfile(postdata) {\n  const response = await fetchClient.post(\n    BASE_URL + `/vendor/profile/assign`,\n    postdata\n  );\n  return response;\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/ScrollToTop.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/Footer.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/UtilsService.js",["599","600","601","602"],"export const isValidDate = (d) => {\n    return d instanceof Date && !isNaN(d);\n}\n\nexport const formattedDateString = (d) => {\n    d = new Date(d);\n    const yyyy = d.getFullYear();\n    const mm = dateDigits(d.getMonth() + 1);\n    const dd = dateDigits(d.getDate());\n    return yyyy + \"-\" + mm + \"-\" + dd;\n};\n\nexport const humanReadableFormattedDateString = (date) => {\n    date = new Date(date);\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    let day = dateDigits(date.getDate());\n    let month = months[date.getMonth()];\n    let year = date.getFullYear();\n    return day + ' ' + month + ', ' + year;\n}\n\nexport const formattedTimeString = (d) => {\n    d = new Date(d);\n    return dateDigits(d.getHours()) + \":\" + dateDigits(d.getMinutes()) + \":00\";\n};\n\nexport const getHOrMFromLocalTimeString = (localTimeString, hOrM = 'h') => {\n    const localTimeArr = localTimeString.split(':');\n    if (localTimeArr.length > 1) {\n        if (hOrM === 'h') {\n            return +localTimeString.split(':')[0];\n        } else {\n            return +localTimeString.split(':')[1];\n        }\n    } else {\n        return 0;\n    }\n};\n\nexport const dateDigits = (v, digits = 2) => {\n    let str = \"\";\n    for (let i = digits; i > 1; i--) {\n        str += \"0\";\n    }\n\n    return (str + v).slice(-digits);\n};\n\nexport const currencyFormat = (num, toFixed = 2) => {\n    num = num ? +num : 0;\n    return '$' + num.toFixed(toFixed).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\nexport const numberThFormat = (num) => {\n    switch(num) {\n        case 1: \n            return num + 'st';\n        break;\n        case 2: \n            return num + 'nd';\n        break;\n        case 3: \n            return num + 'rd';\n        break;\n        default: \n            return num + 'th';\n        break;\n    }\n}\n\nexport const priceValue = (formattedPrice = \"$0.00\") => {\n    formattedPrice = formattedPrice ? formattedPrice + \"\" : \"$0.00\";\n    return +formattedPrice.split(\",\").join(\"\").split(\" \").join(\"\").split(\"$\").join(\"\")\n};\n\nexport const isMobile = () => {\n    return window.innerWidth < 768;\n};\n\nexport const randomStr = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n\nexport const defaultPeriods = [\n    {\n        dayOfWeek: \"SUN\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"MON\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"TUE\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"WED\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"THU\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"FRI\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    },\n    {\n        dayOfWeek: \"SAT\",\n        startLocalTime: \"7:00:00\",\n        endLocalTime: \"20:00:00\",\n        closed: false\n    }\n];\n\nexport const getDatetimeIn12Hours = (datetimeString) =>{\n    const date = new Date(datetimeString);\n    const options = { hour: 'numeric', minute: 'numeric', hour12: true };\n    return  date.toLocaleTimeString('en-US', options);\n}\nexport const isBlobUrl = (url)=> {\n    return url.startsWith('blob:');\n  }","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/details.jsx",["603"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Accordion,\n  Button,\n  ButtonGroup,\n  Card,\n  Dropdown,\n  DropdownButton,\n  Badge,\n} from \"react-bootstrap\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\nimport editIcon from \"../../../img/edit-icon.png\";\nimport powerIcon from \"../../../img/power-icon.png\";\nimport screenShotIcon from \"../../../img/screenshot-icon.png\";\nimport locationIcon from \"../../../img/location-icon.png\";\nimport accordionImg from \"../../../img/screen-accordion-img.png\";\nimport editComposition from \"../../../img/edit-composition.png\";\nimport clockIcon from \"../../../img/clock-icon.png\";\nimport tagAddIcon from \"../../../img/icon-tag-add.png\";\n\nimport { deleteScreen, getAllScreens } from \"../../../utils/api\";\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\nimport QuickPlayModal from \"../../modals/QuickPlayModal\";\nimport WindowsModal from \"../../modals/WindowsModal\";\nimport UpdateModal from \"../../modals/UpdateModal\";\n\nconst ScreenDetails = () => {\n  const history = useHistory();\n  const { id } = useParams();\n  const [screen, setScreen] = useState(\"\");\n\n  const [activeDefault, setActiveDefault] = useState(\"\");\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [showQuickPlayModal, setQuickPlayModal] = useState(false);\n  const [showWindowsModal, setWindowsModal] = useState(false);\n  const [showUpdateModal, setUpdateModal] = useState(false);\n  // use effect\n  useEffect(() => {\n    callAllScreenApi();\n  }, []);\n  const callAllScreenApi = async () => {\n    const list = await getAllScreens();\n    setScreen(\n      list.find((item) => {\n        return item._id === id;\n      })\n    );\n  };\n  console.log(screen, \"details screen \");\n  const handleDelete = async () => {\n    setDeleteModal(false);\n    await deleteScreen(id);\n    history.push(\"/display\");\n  };\n\n  const handleQuickPlay = async () => {\n    setDeleteModal(false);\n  };\n\n  const handleWindows = async () => {\n    setWindowsModal(false);\n  };\n\n  const handleUpdate = async () => {\n    setWindowsModal(false);\n  };\n  const defaultAccordion = [\n    {\n      title: \"Content\",\n      text: (\n        <div className=\"row\">\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\n              <div className=\"accordion-custom-img\">\n                <img\n                  className=\"accordion-img\"\n                  src={accordionImg}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"accordion-custom-content flex-1\">\n                <h6>Currently Playing</h6>\n                <p>Default Composition</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\n              <div className=\"accordion-custom-img\">\n                <img\n                  className=\"accordion-img\"\n                  src={accordionImg}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"accordion-custom-content flex-1\">\n                <h6>\n                  Default Composition{\" \"}\n                  <span className=\"edit-compostion\">\n                    {\" \"}\n                    <img\n                      className=\"accordion-img\"\n                      src={editComposition}\n                      alt=\"menu-icon\"\n                    />\n                  </span>\n                </h6>\n                <p>Default Composition 1</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-lg-4 col-md-4 col-sm-6 col-12\">\n            <div className=\"accordion-custom-body d-flex align-items-center w-100\">\n              <div className=\"schedule-custom-img\">\n                <img className=\"schedule-img\" src={clockIcon} alt=\"menu-icon\" />\n              </div>\n              <div className=\"accordion-custom-content active-schedule flex-1\">\n                <h6>Active Schedule</h6>\n                <h5>Schedule 1</h5>\n                <p className=\"date-schedule\">\n                  From 02 Apr, 23 ,04:00PM - To 05 Apr,23, 05:00Pm\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      ),\n      bg: \"primary\",\n    },\n    {\n      title: \"Device\",\n      text: (\n        <div className=\"device-accordion-content\">\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>Private IP</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>10.10.1.10</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>Device OS</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>Windows</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>Public IP</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>17.12.13.10</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>APK Version</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>NA</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>MAC Address</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>NA</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>SDK Version</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>NA</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>Device ID</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>509373783ASDH766</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n              <div className=\"row\">\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <h6>Javascript Version</h6>\n                  </div>\n                </div>\n                <div className=\"col-lg-6 col-md-6 col-sm-6 col-12\">\n                  <div className=\"device-content\">\n                    <p>5.3.0.0</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ),\n\n      bg: \"info\",\n    },\n    {\n      title: \"Tag\",\n      text: (\n        <div className=\"tag-accordion-content\">\n          <div className=\"tag-content-row d-flex flex-wrap align-items-center\">\n            <Badge\n              className=\"badge-common-light badge-tag mr-2\"\n              variant=\"outline-light\"\n            >\n              Test Devices\n            </Badge>\n            <Badge\n              className=\"badge-common-light badge-tag mr-2\"\n              variant=\"outline-light\"\n            >\n              Test Devices\n            </Badge>\n            <Badge\n              className=\"badge-common-light badge-tag mr-2\"\n              variant=\"outline-light\"\n            >\n              Test Devices\n            </Badge>\n            <span className=\"tag-added\">\n              {\" \"}\n              <img className=\"tag-add-icon\" src={tagAddIcon} alt=\"menu-icon\" />\n            </span>\n          </div>\n        </div>\n      ),\n\n      bg: \"success\",\n    },\n  ];\n  if (!screen) return <></>;\n  return (\n    <>\n      <div className=\"custom-content-heading d-flex flex-wrap align-items-center\">\n        <h1 className=\"mr-auto\">Screen Details</h1>\n        <Button\n          className=\"edit-screen-btn d-flex align-items-center\"\n          variant=\"outline-light\"\n          onClick={() => {\n            setUpdateModal(true);\n          }}\n        >\n          Edit Screen{\" \"}\n          <span className=\"btn-icon-right\">\n            <img className=\"edit-icon\" src={editIcon} alt=\"menu-icon\" />\n          </span>\n        </Button>\n      </div>\n      <div className=\"accordion-overflow\">\n        <div className=\"form-head d-flex mb-3 align-items-start mt-2 pr-3\">\n          <span className=\"screen-subheading\">{screen.name}</span>\n\n          <div className=\"ml-auto d-flex flex-wrap align-items-center\">\n            <a\n              className=\" btn btn-primary btn-xs\"\n              variant=\"primary\"\n              href={`/web-player?id=${screen.device.deviceToken}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Launch Web Player\n            </a>\n\n            <Button\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\n              variant=\"primary\"\n              onClick={() => {\n                setQuickPlayModal(true);\n              }}\n            >\n              <img\n                className=\"dropdown-list-img-icon img-fluid\"\n                src={powerIcon}\n                alt=\"menu-icon\"\n              />\n            </Button>\n            <Button\n              className=\"ml-2 screen-icon-btn btn btn-primary\"\n              variant=\"primary\"\n              onClick={() => {\n                setWindowsModal(true);\n              }}\n            >\n              <img\n                className=\"dropdown-list-img-icon img-fluid screenshot-icon\"\n                src={screenShotIcon}\n                alt=\"menu-icon\"\n              />\n            </Button>\n            <DropdownButton\n              as={ButtonGroup}\n              title=\"\"\n              id=\"bg-nested-dropdown\"\n              className=\"ml-2  more-icon-dropdown\"\n            >\n              <Dropdown.Item eventKey=\"1\">Reload Screen</Dropdown.Item>\n              <Dropdown.Item eventKey=\"2\">Clear Cache</Dropdown.Item>\n              <Dropdown.Item eventKey=\"3\">Clear Data</Dropdown.Item>\n              <Dropdown.Item eventKey=\"4\">Reboot display</Dropdown.Item>\n\n              <Dropdown.Item\n                eventKey=\"5\"\n                onClick={() => {\n                  setDeleteModal(true);\n                }}\n              >\n                Deactivate Screen\n              </Dropdown.Item>\n            </DropdownButton>\n          </div>\n        </div>\n\n        <div className=\"row location-row mx-0\">\n          <div className=\"col-sm-6 p-md-0\">\n            <div className=\"location-col\">\n              <h4>\n                <img\n                  className=\"locationt-icon-img\"\n                  src={locationIcon}\n                  alt=\"menu-icon\"\n                />\n                {screen.googleLocation}\n              </h4>\n              <p className=\"active-row d-flex align-items-center\">\n                <span className=\"active-status\"></span> Active Now\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row accordion-overflow-scroll\">\n          <div className=\"col-md-12 \">\n            <Accordion\n              className=\"accordion accordion-primary custom-accordion\"\n              defaultActiveKey=\"\"\n            >\n              {defaultAccordion.map((d, i) => (\n                <div className=\"accordion__item details-accordian\" key={i}>\n                  <Accordion.Toggle\n                    as={Card.Text}\n                    eventKey={`${i}`}\n                    className={`accordion__header rounded-lg ${\n                      activeDefault === i ? \"\" : \"collapsed\"\n                    }`}\n                    onClick={() =>\n                      setActiveDefault(activeDefault === i ? -1 : i)\n                    }\n                  >\n                    <span className=\"accordion__header--text\">{d.title}</span>\n                    <span className=\"accordion__header--indicator\"></span>\n                  </Accordion.Toggle>\n                  <Accordion.Collapse eventKey={`${i}`}>\n                    <div className=\"accordion__body--text\">{d.text}</div>\n                  </Accordion.Collapse>\n                </div>\n              ))}\n            </Accordion>\n          </div>\n          {deleteModal && (\n            <DeleteConfirmation\n              setDeleteModal={setDeleteModal}\n              callbackFunction={handleDelete}\n              text=\"Are you sure you want to deactivate?\"\n              yes={\"Yes Deactivate\"}\n            />\n          )}\n        </div>\n\n        <QuickPlayModal\n          showQuickPlayModal={showQuickPlayModal}\n          setQuickPlayModal={setQuickPlayModal}\n          handleQuickPlay={handleQuickPlay}\n        />\n\n        <WindowsModal\n          showWindowsModal={showWindowsModal}\n          setWindowsModal={setWindowsModal}\n          handleWindows={handleWindows}\n        />\n\n        <UpdateModal\n          showUpdateModal={showUpdateModal}\n          setUpdateModal={setUpdateModal}\n          handleUpdate={handleUpdate}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ScreenDetails;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/SelectComparison.jsx",["604","605","606","607"],"// import React, { useState } from 'react'\n// import { Button, Dropdown, Table } from \"react-bootstrap\";\n// import searchIcon from \"../../../img/search.png\";\n// import listIcon from \"../../../img/list-icon.png\";\n// import layoutSelected from \"../../../img/layout-select-img.png\";\n// import downArrow from \"../../../img/down-arrow.png\";\n// import menuIcon from \"../../../img/menu-icon.png\";\n// import defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\n// import deleteIcon from \"../../../img/delete-icon.png\";\n// const SelectComparison = () => {\n//   const [allScreens, setAllScreens] = useState(\"\");\n\n//   const [checkedItems, setCheckedItems] = useState({});\n//   const [checkedValues, setCheckedValues] = useState([]);\n\n//   const handleCheckboxChange = (event) => {\n//     const newCheckedItems = {\n//       ...checkedItems,\n//       [event.target.name]: event.target.checked,\n//     };\n//     const selectedScreens = [];\n//     for (const key in newCheckedItems) {\n//       if (newCheckedItems[key] === true) {\n//         selectedScreens.push(key);\n//       }\n//     }\n//     setCheckedValues(selectedScreens);\n//     setCheckedItems(newCheckedItems);\n//   };\n\n//   const handleSelectAllChange = (event) => {\n//     const newCheckedItems = {};\n//     allScreens.forEach((item) => {\n//       newCheckedItems[item._id] = event.target.checked;\n//     });\n//     const selectedScreens = [];\n//     for (const key in newCheckedItems) {\n//       if (newCheckedItems[key] === true) {\n//         selectedScreens.push(key);\n//       }\n//     }\n//     setCheckedValues(selectedScreens);\n//     setCheckedItems(newCheckedItems);\n//   };\n\n//   return (\n//     <>\n//           <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\n//         <h1>Select Composition</h1>\n\n//         <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\n//           <div className=\"form-group mb-0\">\n//             <input\n//               type=\"text\"\n//               className=\"form-control input-default \"\n//               placeholder=\"Search...\"\n//             />\n//             <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\n//           </div>\n//           <Button\n//             className=\"ml-2 icon-btn\"\n//             variant=\"primary\"\n//           >\n//             <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\n//           </Button>\n//         </div>\n//       </div>\n// {/*\n//       <Table responsive className=\"custom-table mt-3\">\n//           <thead>\n//             <tr>\n//               <th>Composition</th>\n//               <th>Date Added</th>\n//               <th>Associated Schedule</th>\n//               <th>Tags</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n\n//                 <tr>\n//                   <td>\n//                     <span className=\"td-content d-flex name-td-content\">\n//                       <span className=\"name-img mr-2\">\n//                       <img\n//                   className=\"layout-select-img\"\n//                   src={layoutSelected}\n//                   alt=\"menu-icon\"\n//                 />\n//                       </span>\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\n//                         <strong>C-c02Nov 21 12:03</strong>\n//                         <span>Added by Gauri Batra</span>\n//                       </span>\n//                     </span>\n//                   </td>\n//                   <td>\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\n//                         <strong>2 Nov, 2021</strong>\n//                         <span>12:02 PM</span>\n//                       </span>\n//                   </td>\n//                   <td>\n//                    0\n//                   </td>\n//                   <td>\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\n\n//                   </td>\n//                 </tr>\n//                 <tr>\n//                   <td>\n//                     <span className=\"td-content d-flex name-td-content\">\n//                       <span className=\"name-img mr-2\">\n//                       <img\n//                   className=\"layout-select-img\"\n//                   src={layoutSelected}\n//                   alt=\"menu-icon\"\n//                 />\n//                       </span>\n//                       <span className=\"name-content d-flex flex-column flex-grow-1\">\n//                         <strong>C-c02Nov 21 12:03</strong>\n//                         <span>Added by Gauri Batra</span>\n//                       </span>\n//                     </span>\n//                   </td>\n//                   <td>\n//                   <span className=\"name-content d-flex flex-column flex-grow-1\">\n//                         <strong>2 Nov, 2021</strong>\n//                         <span>12:02 PM</span>\n//                       </span>\n//                   </td>\n//                   <td>\n//                    0\n//                   </td>\n//                   <td>\n//                       <span className=\"my-phone-tag text-truncate ml-1\">My Phone is</span>\n\n//                   </td>\n//                 </tr>\n//           </tbody>\n//         </Table> */}\n\n//     </>\n//   )\n// }\n\n// export default SelectComparison\n\nimport { useEffect, useState } from \"react\";\nimport TableLoader from \"../TableLoader\";\nimport \"../Table.css\";\nimport { getAllScreens, pushAddSchedule } from \"../../../utils/api\";\nimport { Button, Dropdown, Table } from \"react-bootstrap\";\nimport searchIcon from \"../../../img/search.png\";\nimport listIcon from \"../../../img/list-icon.png\";\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nconst SelectComparison = () => {\n  const history = useHistory();\n  const [allScreens, setAllScreens] = useState(\"\");\n  const [checkedItems, setCheckedItems] = useState({});\n  const [checkedValues, setCheckedValues] = useState([]);\n  const [published, setPublished] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [scheduleName, setScheduleName] = useState(\"\");\n  // use effect\n  console.log(checkedItems, \"SelectCompariso checkedItemsn\");\n  console.log(checkedValues, \"SelectCompariso checkedValues\");\n\n  useEffect(() => {\n    callAllScreenApi();\n  }, []);\n\n  const callAllScreenApi = async () => {\n    setLoading(true);\n    const list = await getAllScreens();\n    setLoading(false);\n    setAllScreens(list);\n  };\n\n  const handleCheckboxChange = (event) => {\n    const newCheckedItems = {\n      ...checkedItems,\n      [event.target.name]: event.target.checked,\n    };\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSelectAllChange = (event) => {\n    const newCheckedItems = {};\n    allScreens.forEach((item) => {\n      newCheckedItems[item._id] = event.target.checked;\n    });\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await pushAddSchedule({\n      name: scheduleName,\n      screens: checkedValues,\n    }).then((res) => {\n      console.log(res, \"res schedule name\");\n      if (res.data.statusCode === 200) {\n        console.log(res.data.data.name);\n        history.push(`/testday/${res.data.data._id}`);\n      }\n    });\n  };\n  return (\n    <>\n      <div className=\"custom-content-heading selected-heading d-flex flex-wrap\">\n        <h1>Select Screen</h1>\n\n        <div className=\"search-textfield search-selected ml-auto d-flex flex-wrap align-items-center\">\n          <div className=\"form-group mb-0\">\n            <input\n              type=\"text\"\n              className=\"form-control input-default \"\n              placeholder=\"Search...\"\n            />\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\n          </div>\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\n          </Button>\n        </div>\n      </div>\n      <form\n        onSubmit={handleSubmit}\n        className=\"d-flex justify-content-between align-items-center my-4\"\n      >\n        <input\n          type=\"text\"\n          className=\" schedule-name-input-feild form-control input-default \"\n          placeholder=\"Schedule Name\"\n          value={scheduleName}\n          onChange={(e) => setScheduleName(e.target.value)}\n          required\n        />\n\n        <Button className=\"mr-2\" variant=\"info add-screen-btn\" type=\"submit\">\n          Save\n        </Button>\n      </form>\n\n      <Table responsive>\n        <thead>\n          <tr>\n            <th className=\"width50\">\n              <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                <input\n                  type=\"checkbox\"\n                  className=\"custom-control-input\"\n                  id=\"checkbox1_exam_all\"\n                  onChange={handleSelectAllChange}\n                  required=\"\"\n                />\n                <label\n                  className=\"custom-control-label\"\n                  htmlFor=\"checkbox1_exam_all\"\n                ></label>\n              </div>\n            </th>\n            <th>Screen</th>\n            <th>Last Seen</th>\n            <th>Default Composition</th>\n            <th>Current Schedule</th>\n          </tr>\n        </thead>\n        {loading ? (\n          <TableLoader colSpan={5} />\n        ) : (\n          <tbody>\n            {allScreens !== \"\" &&\n              allScreens.map((screen) => {\n                return (\n                  <tr>\n                    <td>\n                      <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"custom-control-input\"\n                          id={screen._id}\n                          name={screen._id}\n                          checked={checkedItems[screen._id]}\n                          onChange={handleCheckboxChange}\n                        />\n                        <label\n                          className=\"custom-control-label\"\n                          htmlFor={screen._id}\n                        ></label>\n                      </div>\n                    </td>\n\n                    <td>\n                      <span className=\"td-content\">\n                        <strong>{screen.name}</strong>\n                        <span>{screen.screenLocation}</span>\n                      </span>\n                    </td>\n                    <td>\n                      <span className=\"d-flex align-items-center\">\n                        <span className=\"status status-green\"></span>\n                        <span className=\"td-content\">\n                          <strong>{screen.name}</strong>\n                          <span>{screen.screenLocation}</span>\n                        </span>\n                      </span>\n                    </td>\n                    <td>Default Compo. </td>\n                    <td>No Schedule</td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        )}\n      </Table>\n    </>\n  );\n};\n\nexport default SelectComparison;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/CopyTestDay.jsx",["608","609","610","611","612","613"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { createPlugin } from \"@fullcalendar/core\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\n\nconst MyCustomPlugin = createPlugin({\n  ...timeGridPlugin,\n  ...interactionPlugin,\n  // other plugin options\n});\n\nexport default function CopyTestDay() {\n  // initial state\n\n  const [state, setState] = useState({\n    weekendsVisible: true,\n    externalEvents: [\n      {\n        title: \"Art 1\",\n        color: \"#0097a7\",\n        id: 34432,\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 2\",\n        color: \"#f44336\",\n        id: 323232,\n\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 3\",\n        color: \"#f57f17\",\n        id: 1111,\n\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 4\",\n        color: \"#90a4ae\",\n        id: 432432,\n\n        custom: defaultComparisonIcon,\n      },\n    ],\n    // calendarEvents: [\n    //     {\n    //         id: 1,\n    //         title: \"All-day event\",\n    //         color: \"#388e3c\",\n    //         start: \"2020-12-12\",\n    //         end: \"2020-12-12\",\n    //         custom: \"questo è un campo custom\"\n    //     },\n    //     {\n    //         id: 2,\n    //         title: \"Timed event\",\n    //         color: \"#0097a7\",\n    //         start: \"2020-12-07\",\n    //         end: \"2020-12-10\",\n    //         custom: \"custom stuff\"\n    //     }\n    // ].map((event) => ({\n    //     ...event,\n    //     showDeleteButton: true,\n    //     extendedProps: {\n    //         ...event.extendedProps,\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\n    //     },\n    // }))\n  });\n\n  // load external events\n  useEffect(() => {\n    let draggableEl = document.getElementById(\"external-events\");\n    new Draggable(draggableEl, {\n      itemSelector: \".fc-event\",\n      eventData: function (eventEl) {\n        let id = eventEl.dataset.id;\n        let title = eventEl.getAttribute(\"title\");\n        let color = \"#FFE494\";\n        let custom = eventEl.dataset.custom;\n\n        return {\n          id: id,\n          title: title,\n          color: color,\n          custom: custom,\n          create: true,\n        };\n      },\n    });\n  }, []);\n\n  // handle event receive\n  const handleEventReceive = (eventInfo) => {\n    const newEvent = {\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\n      start: eventInfo.date,\n      end: eventInfo.date,\n      custom: eventInfo.draggedEl.getAttribute(\"data-custom\"),\n      showDeleteButton: true,\n    };\n\n    // setState((prevState) => ({\n    //     ...prevState,\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\n    // }));\n  };\n\n  // handle deletion of an event\n\n  const handleEventClick = (info) => {\n    console.log(info, \"sssss\");\n    info.event.remove();\n  };\n\n  function renderEventContent(eventInfo) {\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\n    const { event } = eventInfo;\n    const { title, timeText } = event;\n    console.log(eventInfo.timeText, \"ooooo\");\n    return (\n      <>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-evenly\",\n            height: \"-webkit-fill-available\",\n          }}\n        >\n          <img\n            src={event.extendedProps.custom}\n            className=\"day-schedule-fullcelender-img\"\n            alt=\"Event\"\n          />\n          <p className=\"m-0 fullcalender-title\">{title}</p>\n          <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p>\n\n          <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\n            de\n          </h5>\n        </div>\n      </>\n    );\n  }\n  useEffect(() => {\n    const calendarEl = document.getElementById(\"fullCalendar-table\");\n    if (calendarEl) {\n      calendarEl.style.backgroundColor = \"#fff\"; // Set your desired background color here\n    }\n  }, []);\n  useEffect(() => {\n    const calendarContainer = document.querySelector(\".fullcalendar-container\");\n    if (calendarContainer) {\n      calendarContainer.style.backgroundColor = \"#f0f0f0\"; // Set the desired background color here\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <div style={{ float: \"left\", width: \"25%\" }}>\n        <div id=\"external-events\">\n          {state.externalEvents.map((event) => (\n            <div\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\n              title={event.title}\n              data-id={event.id}\n              data-color={event.color}\n              data-custom={event.custom}\n              key={event.id}\n              style={{\n                backgroundColor: event.color,\n                borderColor: event.color,\n                cursor: \"pointer\"\n              }}\n            >\n              <div className=\"fc-event-main\">\n                <div>\n                  <strong>{event.title}</strong>\n                </div>\n                <img src={event.custom} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div style={{ float: \"left\", width: \"75%\" }}>\n        <FullCalendar\n            id=\"fullCalendar-table\"\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          // headerToolbar={{\n          //     left: \"\",\n          //     center: \"\",\n          //     right: \"\"\n          // }}\n          headerToolbar={false}\n          initialView=\"timeGridDay\"\n          slotDuration=\"00:10:00\"\n          slotLabelInterval={{ hours: 1 }}\n          allDaySlot={false}\n          editable={true}\n          selectable={false}\n          selectMirror={true}\n          dayMaxEvents={false}\n          weekends={state.weekendsVisible}\n          // events={state.calendarEvents}\n          droppable={true}\n          eventReceive={handleEventReceive}\n          slotEventOverlap={false}\n          eventOverlap={false}\n          // select={handleSelect}\n          // eventClick={handleEventClick}\n          // eventRender={handleEventRender}\n          eventContent={renderEventContent}\n         \n        ></FullCalendar>\n      </div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/ChooseLayout.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/viewSchedule.jsx",["614","615","616","617","618","619","620","621","622"],"import React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getAllDaySequence } from \"../../../utils/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\nexport default function ViewSchedule() {\n  const history = useHistory();\n  const { id } = useParams();\n  const [events, setEvents] = useState([]);\n  const [daySequence, setDaySequence] = useState([]);\n  const [timings, setTimings] = useState([]);\n  const [selectedTime, setSelectedTime] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  //var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  console.log(selectedTime, \"selectedTime\");\n  const callAllDaySequence = async (id) => {\n    const list = await getAllDaySequence(id);\n    setDaySequence(list.sequence);\n    const seqArray = [];\n    if (list && list.sequence && list.sequence[0] && list.sequence.length > 0) {\n      var flat = [];\n      const datesTiming = [];\n      for (var i = 0; i < list.sequence.length; i++) {\n        flat = flat.concat(list.sequence[i].dates);\n        list.sequence[i].dates.forEach((v) => {\n          datesTiming[v] = list.sequence[i].timings;\n        });\n      }\n      setTimings(datesTiming);\n      //console.log(\"seqArray\",seqArray,flat);\n      setDatesArray(flat);\n    }\n\n    console.log(list, datesArray);\n  };\n  useEffect(() => {\n    callAllDaySequence(id);\n  }, [id]);\n\n  const [currentMonth, setCurrentMonth] = useState(0);\n  const [datesArray, setDatesArray] = useState();\n\n  // useEffect(() => {}, [selectedCheckboxes]);\n\n  const renderDayHeader = (dayInfo) => {\n    const { date } = dayInfo;\n    const checkboxKey = dayInfo.date.toISOString();\n    //const isChecked = selectedCheckboxes[checkboxKey];\n    return <div>{date.toLocaleDateString(\"en-US\", { weekday: \"short\" })}</div>;\n  };\n\n  const handleDayTime = (e, dateInfo) => {\n    e.preventDefault();\n    const str = dateInfo + \"T00:00:00.000Z\";\n    setSelectedTime(timings[str]);\n    setSelectedDate(dateInfo);\n  };\n\n  const renderDateCell = (dateInfo) => {\n    console.log(dateInfo, \"dateInfo\");\n    const checkboxKey = dateInfo.date.toISOString();\n    const lastDate = moment(checkboxKey, \"YYYY-MM-DD\")\n      .add(\"days\", 1)\n      .format(\"YYYY-MM-DD\");\n    const isSelected =\n      datesArray && datesArray.length > 0\n        ? datesArray.find((item) => {\n            return item.split(\"T\")[0] === lastDate;\n          })\n        : false;\n    let disablePrp = false;\n\n    return (\n      <div className=\"d-flex\">\n        <div className=\"month-schedule-checkbox\">\n          {isSelected ? (\n            <span\n              className=\"btn\"\n              onClick={(e) => {\n                handleDayTime(e, lastDate);\n              }}\n              style={{\n                background: \"#b3005e\",\n                padding: \"5px\",\n                marginRight: \"10px\",\n                color: \"#fff\",\n                position: \"relative\",\n                top: \"30px\",\n                fontSize: \"8px\",\n                width: \"100%\",\n              }}\n            >\n              {/* {dateInfo.dayNumberText} */}\n              Events\n            </span>\n          ) : (\n            <></>\n          )}\n        </div>\n        <div> {dateInfo.dayNumberText}</div>\n      </div>\n    );\n  };\n\n  const getCurrentMonth = (arg) => {\n    const startDate = arg.view.activeStart;\n    if (arg.view.type === \"dayGridMonth\") {\n      setCurrentMonth(startDate.getMonth() + 1);\n      return;\n    }\n    if (arg.view.type === \"dayGridDay\") {\n      startDate.setDate(startDate.getDate() + 8);\n      setCurrentMonth(startDate.getMonth() + 1);\n      return;\n    }\n  };\n\n  const renderTime = (data) => {\n    let d = data.split(\"T\")[1];\n    d = d.split(\":\");\n    return d[0] + \":\" + d[1];\n  };\n\n  return (\n    <>\n      <div className=\"fullcalendar-box\">\n        <div className=\"d-flex justify-content-end\">\n          <Button\n            className=\"mr-2\"\n            // onClick={(e) => {\n            //   handlePublish(e);\n            // }}\n            variant=\"info add-screen-btn\"\n          >\n            Edit\n          </Button>\n        </div>\n\n        <div className=\"event-list\">\n          <h3>{selectedDate && selectedDate}</h3>\n          {selectedTime &&\n            selectedTime.map((event, i) => (\n              <div key={i} className=\"month-schedule-list mt-4\">\n                <div className=\"d-flex align-items-center px-2 py-4 justify-content-between\">\n                  <span className=\"view-schedule-list\">\n                    {event.composition.name?.length > 20\n                      ? event.composition.name.slice(0, 20) + \"...\"\n                      : event.composition.name}\n                  </span>\n                  <div className=\"view-schedule-time\">\n                    <span className=\"total-composition mr-2\">\n                      {renderTime(event.startTime)}\n                    </span>\n                    <span className=\"total-composition\">\n                      {renderTime(event.endTime)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n        <div className=\"calendar\" style={{ float: \"left\", width: \"55%\" }}>\n          <FullCalendar\n            className=\"month-schedule view-schedule-fullcalender\"\n            weekends={true}\n            plugins={[dayGridPlugin, interactionPlugin]}\n            initialView=\"dayGridMonth\"\n            selectable={true}\n            events={events}\n            dayHeaderContent={renderDayHeader}\n            dayCellContent={renderDateCell}\n            //validRange={{\"start\":moment().format('YYYY-MM-DD'),'end':null}}\n            datesSet={(arg) => getCurrentMonth(arg)}\n            eventContent={(info) => (\n              <div className=\"month-schedule-event\">\n                <div>\n                  {info.event.title.length > 5\n                    ? info.event.title.slice(0, 5) + \"...\"\n                    : info.event.title}\n                </div>\n              </div>\n            )}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/MonthSchedule.jsx",["623","624","625","626","627","628","629"],"\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { createPlugin } from \"@fullcalendar/core\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\n\nconst MyCustomPlugin = createPlugin({\n  ...timeGridPlugin,\n  ...interactionPlugin,\n  // other plugin options\n});\n\nexport default function MonthSchedule() {\n  // initial state\n\n  const [state, setState] = useState({\n    weekendsVisible: true,\n    externalEvents: [\n      {\n        title: \"Art 1\",\n        color: \"#0097a7\",\n        id: 34432,\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 2\",\n        color: \"#f44336\",\n        id: 323232,\n\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 3\",\n        color: \"#f57f17\",\n        id: 1111,\n\n        custom: defaultComparisonIcon,\n      },\n      {\n        title: \"Art 4\",\n        color: \"#90a4ae\",\n        id: 432432,\n\n        custom: defaultComparisonIcon,\n      },\n    ],\n    // calendarEvents: [\n    //     {\n    //         id: 1,\n    //         title: \"All-day event\",\n    //         color: \"#388e3c\",\n    //         start: \"2020-12-12\",\n    //         end: \"2020-12-12\",\n    //         custom: \"questo è un campo custom\"\n    //     },\n    //     {\n    //         id: 2,\n    //         title: \"Timed event\",\n    //         color: \"#0097a7\",\n    //         start: \"2020-12-07\",\n    //         end: \"2020-12-10\",\n    //         custom: \"custom stuff\"\n    //     }\n    // ].map((event) => ({\n    //     ...event,\n    //     showDeleteButton: true,\n    //     extendedProps: {\n    //         ...event.extendedProps,\n    //         imageUrl: defaultComparisonIcon, // Add the image URL here\n    //     },\n    // }))\n  });\n\n  // load external events\n  useEffect(() => {\n    let draggableEl = document.getElementById(\"external-events\");\n    new Draggable(draggableEl, {\n      itemSelector: \".fc-event\",\n      eventData: function (eventEl) {\n        let id = eventEl.dataset.id;\n        let title = eventEl.getAttribute(\"title\");\n        let color = \"#FFE494\";\n\n        return {\n          id: id,\n          title: title,\n          color: color,\n          create: true,\n        };\n      },\n    });\n  }, []);\n\n  // handle event receive\n  const handleEventReceive = (eventInfo) => {\n    const newEvent = {\n      id: eventInfo.draggedEl.getAttribute(\"data-id\"),\n      title: eventInfo.draggedEl.getAttribute(\"title\"),\n      color: eventInfo.draggedEl.getAttribute(\"data-color\"),\n      start: eventInfo.date,\n      end: eventInfo.date,\n      showDeleteButton: true,\n    };\n\n    // setState((prevState) => ({\n    //     ...prevState,\n    //     calendarEvents: prevState.calendarEvents.concat(newEvent)\n    // }));\n  };\n\n  // handle deletion of an event\n\n  const handleEventClick = (info) => {\n    console.log(info, \"sssss\");\n    info.event.remove();\n  };\n\n  function renderEventContent(eventInfo) {\n    console.log(eventInfo, \"eventInfo inside renderEventContent\");\n    const { event } = eventInfo;\n    const { title, timeText } = event;\n    console.log(eventInfo.timeText, \"ooooo\");\n    return (\n      <>\n        <div\n        //   style={{\n        //     display: \"flex\",\n        //     flexDirection: \"row\",\n        //     alignItems: \"center\",\n        //     justifyContent: \"space-evenly\",\n        //     height: \"-webkit-fill-available\",\n        //   }}\n        >\n       \n          <p className=\"m-0 fullcalender-title\">{title}</p>\n          {/* <p className=\"m-0 fullcalender-time\">{eventInfo.timeText}</p> */}\n\n          {/* <h5 className=\"m-0\" onClick={() => handleEventClick(eventInfo)}>\n            de\n          </h5> */}\n        </div>\n      </>\n    );\n  }\n \n  return (\n    <div className=\"App\">\n      <div style={{ float: \"left\", width: \"25%\" }}>\n        <div id=\"external-events\">\n          {state.externalEvents.map((event) => (\n            <div\n              className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\n              title={event.title}\n              data-id={event.id}\n              data-color={event.color}\n            \n              key={event.id}\n              style={{\n                backgroundColor: event.color,\n                borderColor: event.color,\n                cursor: \"pointer\"\n              }}\n            >\n              <div className=\"fc-event-main\">\n                <div>\n                  <strong>{event.title}</strong>\n                </div>\n                <img src={event.custom} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div style={{ float: \"left\", width: \"75%\" }}>\n        <FullCalendar\n            id=\"fullCalendar-table\"\n          plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n          // headerToolbar={{\n          //     left: \"\",\n          //     center: \"\",\n          //     right: \"\"\n          // }}\n          headerToolbar={false}\n          initialView=\"dayGridMonth\"\n        //   slotDuration=\"00:10:00\"\n        //   slotLabelInterval={{ hours: 1 }}\n          allDaySlot={false}\n          editable={true}\n          selectable={false}\n          selectMirror={true}\n          dayMaxEvents={false}\n          weekends={state.weekendsVisible}\n          // events={state.calendarEvents}\n          droppable={true}\n          eventReceive={handleEventReceive}\n          slotEventOverlap={false}\n          eventOverlap={false}\n          // select={handleSelect}\n          // eventClick={handleEventClick}\n          // eventRender={handleEventRender}\n          eventContent={renderEventContent}\n         \n        ></FullCalendar>\n      </div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/push/CopyMonthSchedule.jsx",["630","631","632","633"],"// import React, { useEffect, useState } from \"react\";\n// import FullCalendar from \"@fullcalendar/react\";\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\n\n// export default function CopyMonthSchedule() {\n//   // initial state\n//   const [selectedEvent, setSelectedEvent] = useState(null);\n// const [assignedDates, setAssignedDates] = useState([]);\n// const [selectedDate, setSelectedDate] = useState(null);\n\n//   const [state, setState] = useState({\n//     weekendsVisible: true,\n//     externalEvents: [\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\n//     ],\n//     calendarEvents: [\n//       {\n//         id: 1,\n//         title: \"All-day event\",\n//         color: \"#388e3c\",\n//         start: \"2020-12-12\",\n//         end: \"2020-12-12\",\n//         custom: \"questo è un campo custom\"\n//       },\n//       {\n//         id: 2,\n//         title: \"Timed event\",\n//         color: \"#0097a7\",\n//         start: \"2020-12-07\",\n//         end: \"2020-12-10\",\n//         custom: \"custom stuff\"\n//       }\n//     ]\n//   });\n\n//   // load external events\n//   useEffect(() => {\n//     let draggableEl = document.getElementById(\"external-events\");\n//     new Draggable(draggableEl, {\n//       itemSelector: \".fc-event\",\n//       eventData: function (eventEl) {\n//         let id = eventEl.dataset.id;\n//         let title = eventEl.getAttribute(\"title\");\n//         let color = eventEl.dataset.color;\n//         let custom = eventEl.dataset.custom;\n\n//         return {\n//           id: id,\n//           title: title,\n//           color: color,\n//           custom: custom,\n//           create: true\n//         };\n//       }\n//     });\n//   });\n\n//   // add external events\n//   const addEvent = () => {\n//     let newEvent = {\n//       id: 3433,\n//       title: \"Timed event\",\n//       color: \"#333333\",\n//       start: \"2020-12-31\",\n//       end: \"2020-12-31\",\n//       custom: \"custom stuff\"\n//     };\n\n//     setState((state) => {\n//       return {\n//         ...state,\n//         externalEvents: state.externalEvents.concat(newEvent)\n//       };\n//     });\n//   };\n\n//   // handle event receive\n//   const handleEventReceive = (eventInfo) => {\n//     const newEvent = {\n//       id: eventInfo.draggedEl.getAttribute(\"data-id\"),\n//       title: eventInfo.draggedEl.getAttribute(\"title\"),\n//       color: eventInfo.draggedEl.getAttribute(\"data-color\"),\n//       start: eventInfo.date,\n//       end: eventInfo.date,\n//       custom: eventInfo.draggedEl.getAttribute(\"data-custom\")\n//     };\n\n//     setSelectedEvent(null);\n\n//     setState((state) => ({\n//       ...state,\n//       calendarEvents: state.calendarEvents.concat(newEvent)\n//     }));\n//   };\n// //   const handleExternalEventClick = (event) => {\n// //     const eventId = event.currentTarget.getAttribute(\"data-id\");\n// //     const eventTitle = event.currentTarget.getAttribute(\"title\");\n// //     const eventColor = event.currentTarget.getAttribute(\"data-color\");\n// //     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\n\n// //     if (selectedEvent && selectedEvent.id === eventId) {\n// //       // Uncheck the selected event\n// //       setSelectedEvent(null);\n// //       setAssignedDates([]);\n// //     } else {\n// //       // Check a new event\n// //       setSelectedEvent({\n// //         id: eventId,\n// //         title: eventTitle,\n// //         color: eventColor,\n// //         custom: eventCustom\n// //       });\n// //       setAssignedDates(\n// //         state.calendarEvents\n// //           .filter((event) => event.title === eventTitle)\n// //           .map((event) => event.start)\n// //       );\n// //     }\n// //   };\n\n//   const handleExternalEventClick = (event) => {\n//     const eventId = event.currentTarget.getAttribute(\"data-id\");\n//     const eventTitle = event.currentTarget.getAttribute(\"title\");\n//     const eventColor = event.currentTarget.getAttribute(\"data-color\");\n//     const eventCustom = event.currentTarget.getAttribute(\"data-custom\");\n\n//     if (selectedEvent && selectedEvent.id === eventId && selectedDate) {\n//       // Uncheck the selected event and clear the selected date\n//       setSelectedEvent(null);\n//       setSelectedDate(null);\n//     } else {\n//       // Check a new event and set the selected date to the current date\n//       setSelectedEvent({\n//         id: eventId,\n//         title: eventTitle,\n//         color: eventColor,\n//         custom: eventCustom\n//       });\n//       setSelectedDate(new Date());\n//     }\n//   };\n\n//   const handleDateSelect = (selectInfo) => {\n//     setSelectedDate(selectInfo.startStr);\n//   };\n//   // Define handleEventRadioChange function\n// const handleEventRadioChange = (selectedEvent, selectedDate) => {\n//     if (selectedEvent && selectedDate) {\n//       setState((prevState) => {\n//         // Check if the event is already assigned to the selected date\n//         const isEventAssigned = prevState.calendarEvents.some(\n//           (event) =>\n//             event.id === selectedEvent.id &&\n//             event.start.toDateString() === selectedDate.toDateString()\n//         );\n\n//         if (isEventAssigned) {\n//           // Remove the event from the selected date\n//           const updatedEvents = prevState.calendarEvents.filter(\n//             (event) =>\n//               event.id !== selectedEvent.id ||\n//               event.start.toDateString() !== selectedDate.toDateString()\n//           );\n\n//           return {\n//             ...prevState,\n//             calendarEvents: updatedEvents\n//           };\n//         } else {\n//           // Add the event to the selected date\n//           const newEvent = {\n//             id: selectedEvent.id,\n//             title: selectedEvent.title,\n//             color: selectedEvent.color,\n//             start: selectedDate,\n//             end: selectedDate,\n//             custom: selectedEvent.custom\n//           };\n\n//           return {\n//             ...prevState,\n//             calendarEvents: prevState.calendarEvents.concat(newEvent)\n//           };\n//         }\n//       });\n//     }\n//   };\n\n//   const renderEventContent = (eventInfo) => {\n//     return (\n//       <>\n//         <div>{eventInfo.timeText}</div>\n//         <div>\n//           <input\n//             type=\"radio\"\n//             checked={\n//               selectedEvent &&\n//               selectedEvent.id === eventInfo.event.extendedProps.id &&\n//               selectedDate &&\n//               selectedDate.toDateString() === eventInfo.event.start.toDateString()\n//             }\n//             onChange={() => handleEventRadioChange(eventInfo.event)}\n//           />\n//           {eventInfo.event.title}\n//         </div>\n//       </>\n//     );\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div style={{ float: \"left\", width: \"25%\" }}>\n//         <div style={{ margin: \"0 0 20px\" }}>\n//           <input\n//             type=\"submit\"\n//             name=\"name\"\n//             onClick={addEvent}\n//             value=\"add external event\"\n//           />\n//         </div>\n//         <div id=\"external-events\" style={{width:\"100%\"}}>\n//           {/* {state.externalEvents.map((event) => (\n//             <div\n//               className=\"fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2\"\n//               title={event.title}\n//               data-id={event.id}\n//               data-color={event.color}\n//               data-custom={event.custom}\n//               key={event.id}\n//               style={{\n//                 backgroundColor: event.color,\n//                 borderColor: event.color,\n//                 cursor: \"pointer\"\n//               }}\n//             >\n//               <div className=\"fc-event-main\" >\n//                 <div>\n//                   <strong>{event.title}</strong>\n//                 </div>\n//                 {event.custom}\n//               </div>\n//             </div>\n//           ))} */}\n//    {/* {state.externalEvents.map((event) => (\n//   <div\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\n//     }`}\n//     title={event.title}\n//     data-id={event.id}\n//     data-color={event.color}\n//     data-custom={event.custom}\n//     key={event.id}\n//     onClick={handleExternalEventClick}\n//     style={{\n//       backgroundColor: event.color,\n//       borderColor: event.color,\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <div className=\"fc-event-main\">\n//       <div>\n//         <strong>{event.title}</strong>\n//       </div>\n//       {event.custom}\n//     </div>\n//     {selectedEvent && selectedEvent.id === event.id && (\n//       <div>\n//         {state.calendarEvents.some(\n//           (calendarEvent) =>\n//             calendarEvent.title === selectedEvent.title &&\n//             assignedDates.includes(calendarEvent.start)\n//         ) ? (\n//           <span>Assigned</span>\n//         ) : (\n//           <input\n//             type=\"checkbox\"\n//             checked={assignedDates.length > 0}\n//             onChange={() => handleExternalEventClick(event)}\n//           />\n//         )}\n//       </div>\n//     )}\n//   </div>\n// ))} */}\n\n// {state.externalEvents.map((event) => (\n//   <div\n//     className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2 ${\n//       selectedEvent && selectedEvent.id === event.id ? \"selected\" : \"\"\n//     }`}\n//     title={event.title}\n//     data-id={event.id}\n//     data-color={event.color}\n//     data-custom={event.custom}\n//     key={event.id}\n//     onClick={handleExternalEventClick}\n//     style={{\n//       backgroundColor: event.color,\n//       borderColor: event.color,\n//       cursor: \"pointer\"\n//     }}\n//   >\n//     <div className=\"fc-event-main\">\n//       <div>\n//         <strong>{event.title}</strong>\n//       </div>\n//       {event.custom}\n//     </div>\n//     {selectedEvent && selectedEvent.id === event.id && (\n//       <div>\n//         {state.calendarEvents.some(\n//           (calendarEvent) =>\n//             calendarEvent.title === selectedEvent.title &&\n//             calendarEvent.start.getDate() === selectedDate?.getDate()\n//         ) ? (\n//           <span>Assigned</span>\n//         ) : (\n//           <input\n//             type=\"checkbox\"\n//             checked={selectedDate && selectedDate.getDate() === new Date().getDate()}\n//             onChange={() => handleExternalEventClick(event)}\n//           />\n//         )}\n//       </div>\n//     )}\n//   </div>\n// ))}\n\n//         </div>\n//       </div>\n//       <div style={{ float: \"left\", width: \"75%\" }}>\n//         {/* <FullCalendar\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n\n//         headerToolbar={false}\n//           initialView=\"dayGridMonth\"\n//           editable={true}\n//           selectable={true}\n//           selectMirror={true}\n//           dayMaxEvents={true}\n//           weekends={state.weekendsVisible}\n//           events={state.calendarEvents}\n//           droppable={true}\n//           eventReceive={handleEventReceive}\n//         /> */}\n\n// <FullCalendar\n//   plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n//   headerToolbar={{\n//     left: \"prev,next today\",\n//     center: \"title\",\n//     right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n//   }}\n//   initialView=\"dayGridMonth\"\n//   editable={true}\n//   selectable={true}\n//   selectMirror={true}\n//   dayMaxEvents={true}\n//   weekends={state.weekendsVisible}\n//   events={state.calendarEvents}\n//   droppable={true}\n//   eventReceive={handleEventReceive}\n//   eventContent={renderEventContent} // Add this line\n// />\n\n//       </div>\n//     </div>\n//   );\n// }\n\n// import React, { useEffect, useState } from \"react\";\n// import FullCalendar from \"@fullcalendar/react\";\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\n// import timeGridPlugin from \"@fullcalendar/timegrid\";\n// import interactionPlugin, { Draggable } from \"@fullcalendar/interaction\";\n\n// export default function CopyMonthSchedule() {\n//   // initial state\n//   const [state, setState] = useState({\n//     weekendsVisible: true,\n//     externalEvents: [\n//       { title: \"Art 1\", color: \"#0097a7\", id: 34432, custom: \"fdsfdsfds\" },\n//       { title: \"Art 2\", color: \"#f44336\", id: 323232 },\n//       { title: \"Art 3\", color: \"#f57f17\", id: 1111 },\n//       { title: \"Art 4\", color: \"#90a4ae\", id: 432432 }\n//     ],\n//     calendarEvents: []\n//   });\n\n//   // load external events\n//   useEffect(() => {\n//     let draggableEl = document.getElementById(\"external-events\");\n//     new Draggable(draggableEl, {\n//       itemSelector: \".fc-event\",\n//       eventData: function (eventEl) {\n//         let id = eventEl.dataset.id;\n//         let title = eventEl.getAttribute(\"title\");\n//         let color = eventEl.dataset.color;\n//         let custom = eventEl.dataset.custom;\n\n//         return {\n//           id: id,\n//           title: title,\n//           color: color,\n//           custom: custom,\n//           create: true\n//         };\n//       }\n//     });\n//   });\n\n//   // handle external event selection\n//   const handleExternalEventSelect = (event) => {\n//     setState((prevState) => {\n//       // Clear any previously selected events\n//       const calendarEvents = prevState.calendarEvents.map((event) => ({\n//         ...event,\n//         selected: false\n//       }));\n\n//       // Find the selected event\n//       const selectedEvent = calendarEvents.find(\n//         (ev) => ev.id === event.id && ev.selected\n//       );\n\n//       if (selectedEvent) {\n//         // Unselect the event if already selected\n//         selectedEvent.selected = false;\n//       } else {\n//         // Select the event\n//         event.selected = true;\n//       }\n\n//       return {\n//         ...prevState,\n//         calendarEvents: calendarEvents\n//       };\n//     });\n//   };\n\n//   // handle date click\n//   const handleDateClick = (arg) => {\n//     const selectedDate = arg.date;\n\n//     setState((prevState) => {\n//       const selectedEvent = prevState.calendarEvents.find(\n//         (event) => event.selected\n//       );\n\n//       if (selectedEvent) {\n//         // Add the selected event to the selected date\n//         const newEvent = {\n//           id: selectedEvent.id,\n//           title: selectedEvent.title,\n//           color: selectedEvent.color,\n//           start: selectedDate,\n//           end: selectedDate,\n//           custom: selectedEvent.custom\n//         };\n\n//         return {\n//           ...prevState,\n//           calendarEvents: prevState.calendarEvents.concat(newEvent)\n//         };\n//       }\n\n//       return prevState;\n//     });\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div style={{ float: \"left\", width: \"25%\" }}>\n//         <div id=\"external-events\" style={{ width: \"100%\" }}>\n//           {state.externalEvents.map((event) => (\n//             <div\n//               className={`fc-event fc-h-event mb-1 fc-daygrid-event fc-daygrid-block-event p-2${\n//                 event.selected ? \" selected\" : \"\"\n//               }`}\n//               title={event.title}\n//               data-id={event.id}\n//               data-color={event.color}\n//               data-custom={event.custom}\n//               key={event.id}\n//               onClick={() => handleExternalEventSelect(event)}\n//               style={{\n//                 backgroundColor: event.color,\n//                 borderColor: event.color,\n//                 cursor: \"pointer\"\n//               }}\n//             >\n//               <div className=\"fc-event-main\">\n//                 <div>\n//                   <strong>{event.title}</strong>\n//                 </div>\n//                 {event.custom}\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//       <div style={{ float: \"left\", width: \"75%\" }}>\n//         <FullCalendar\n//           plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n//           headerToolbar={false}\n//           initialView=\"dayGridMonth\"\n//           editable={true}\n//           selectable={true}\n//           selectMirror={true}\n//           dayMaxEvents={true}\n//           weekends={state.weekendsVisible}\n//           events={state.calendarEvents}\n//           dateClick={handleDateClick}\n//           eventRender={({ event, el }) => {\n//             // Add radio button to each date\n//             const inputEl = document.createElement(\"input\");\n//             inputEl.type = \"radio\";\n//             inputEl.addEventListener(\"change\", () =>\n//               handleExternalEventSelect(event)\n//             );\n\n//             el.prepend(inputEl);\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// }\n\n// -----------------------------------\n\n// import React, { useState } from \"react\";\n// import FullCalendar from \"@fullcalendar/react\";\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\n\n// export default function CalendarWithRadioButtons() {\n//   const [selectedDate, setSelectedDate] = useState(null);\n\n//   const handleDateClick = (dateClickInfo) => {\n//     setSelectedDate(dateClickInfo.date);\n//   };\n\n//   const renderDateCell = (dateInfo) => {\n//     const isSelected = selectedDate && dateInfo.date.valueOf() === selectedDate.valueOf();\n\n//     return (\n//       <div>\n//         <input\n//           type=\"radio\"\n//           checked={isSelected}\n//           onChange={() => setSelectedDate(dateInfo.date)}\n//         />\n//         {dateInfo.dayNumberText}\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"calendar\">\n//       <FullCalendar\n//         plugins={[dayGridPlugin]}\n//         initialView=\"dayGridMonth\"\n//         selectable={true}\n//         dateClick={handleDateClick}\n//         dayCellContent={renderDateCell}\n//       />\n//     </div>\n//   );\n// }\n\n// -----------------------------------\n\n//******************************* */\nimport React, { useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\nexport default function CalendarWithEventList() {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [events, setEvents] = useState([\n    { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\n    { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\n    { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\n    { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\n  ]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  console.log(selectedEvent, \"lllllllloooooo\");\n  const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\n\n  const renderDateCell = (dateInfo) => {\n    const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n    const isSelected = selectedDateValue === dateInfo.date.valueOf();\n    const isEventSelected = selectedEvent;\n\n    if (isEventSelected) {\n      const checkboxKey = dateInfo.date.toISOString();\n      const hasEvent = events.some(\n        (event) => event.start.valueOf() === dateInfo.date.valueOf()\n      );\n\n      return (\n        <div>\n          <input\n            name={`checkbox-${checkboxKey}`}\n            type=\"checkbox\"\n            checked={isSelected || selectedCheckboxes[checkboxKey]}\n            onChange={() => handleDateCellChange(dateInfo)}\n          />\n          {dateInfo.dayNumberText}\n        </div>\n      );\n    }\n\n    return dateInfo.dayNumberText;\n  };\n\n  // const handleDateCellChange = (dateInfo) => {\n  //   if (selectedEvent) {\n  //     const checkboxKey = dateInfo.date.toISOString();\n  //     const selectedDateValue = dateInfo.date.valueOf();\n  //     const filteredEvents = events.filter(\n  //       (event) => event.start.valueOf() !== selectedDateValue\n  //     );\n\n  //     const hasEvent = filteredEvents.some(\n  //       (event) => event.start.valueOf() === selectedDateValue\n  //     );\n\n  //     if (hasEvent) {\n  //       setSelectedEvent(null);\n  //       setSelectedDate(null);\n  //       setEvents(filteredEvents);\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => {\n  //         const updatedCheckboxes = { ...prevSelectedCheckboxes };\n  //         delete updatedCheckboxes[checkboxKey];\n  //         return updatedCheckboxes;\n  //       });\n  //     } else {\n  //       setSelectedDate(dateInfo.date);\n\n  //       const event = {\n  //         title: selectedEvent.title,\n  //         start: dateInfo.date,\n  //       };\n\n  //       setEvents([...filteredEvents, event]);\n\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n  //     }\n  //   } else {\n  //     setSelectedDate(dateInfo.date);\n  //   }\n  // };\n\n  // const handleDateCellChange = (dateInfo) => {\n  //   console.log(dateInfo, \"iiiiiiiiiii\");\n  //   const checkboxKey = dateInfo.date.toISOString();\n  //   const selectedDateValue = dateInfo.date.valueOf();\n  //   const filteredEvents = events.filter(\n  //     (event) => event.start.valueOf() !== selectedDateValue\n  //   );\n\n  //   const date = new Date(dateInfo.date);\n  //   const formattedDate = date.toLocaleDateString(\"en-GB\", {\n  //     year: \"numeric\",\n  //     month: \"2-digit\",\n  //     day: \"2-digit\",\n  //   });\n\n  //   const [day, month, year] = formattedDate.split(\"/\");\n  //   const desiredFormat = `${year}-${month}-${day}`;\n  //   // console.log(filteredEvents, \"cgvjhjghgk\");\n  //   let hasEvent = false;\n  //   console.log(dateInfo, \"arti\");\n  //   console.log(Object.keys(dateInfo), \"dj\");\n  //   // console.log(example, \"test\");\n  //   // if (dateInfo.event) {\n  //   //   hasEvent = filteredEvents.some((event) =>\n  //   //     console.log(event, \"ttttttttt\")\n  //   //   );\n  //   // }\n  //   console.log(events.id);\n\n  //   if (dateInfo.event && dateInfo.event.id === dateInfo.id) {\n  //     hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\n  //   }\n  //   // console.log(hasEvent, \"pppppp\");\n  //   if (hasEvent) {\n  //     setSelectedEvent(null);\n  //     setSelectedDate(null);\n  //     setEvents(filteredEvents);\n  //     setSelectedCheckboxes((prevSelectedCheckboxes) => {\n  //       const updatedCheckboxes = { ...prevSelectedCheckboxes };\n  //       delete updatedCheckboxes[checkboxKey];\n  //       return updatedCheckboxes;\n  //     });\n  //   } else {\n  //     setSelectedDate(dateInfo.date);\n\n  //     if (selectedEvent) {\n  //       // console.log(selectedEvent, \"pppppppp\");\n  //       dateInfo.kkk = selectedEvent;\n  //       // var example = dateInfo.kkk;\n  //       // console.log(dateInfo, \"eeeeeee\");\n  //       const event = {\n  //         title: selectedEvent.title,\n  //         start: dateInfo.date,\n  //       };\n\n  //       setEvents([...filteredEvents, event]);\n\n  //       setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n  //         ...prevSelectedCheckboxes,\n  //         [checkboxKey]: true,\n  //       }));\n  //     }\n  //   }\n  // };\n\n  function handleDateCellChange(dateInfo) {\n    console.log(dateInfo, \"handleDateCellChange top console\");\n    const checkboxKey = dateInfo.date.toISOString();\n    const selectedDateValue = dateInfo.date.valueOf();\n    if (selectedEvent !== null) {\n      let testObj = JSON.parse(JSON.stringify(dateInfo));\n      testObj.event = selectedEvent;\n      dateInfo.kkk = selectedEvent;\n      console.log(dateInfo, testObj, \"dateInfo -> testObj\");\n      console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\n\n      const event = {\n        title: selectedEvent.title,\n        start: dateInfo.date,\n      };\n    }\n    const filteredEvents = events.filter(\n      (event) => event.start.valueOf() !== selectedDateValue\n    );\n\n    const date = new Date(dateInfo.date);\n    const formattedDate = date.toLocaleDateString(\"en-GB\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n    });\n\n    const [day, month, year] = formattedDate.split(\"/\");\n    const desiredFormat = `${year}-${month}-${day}`;\n\n    let hasEvent = false;\n    console.log(dateInfo, \"arti\");\n\n    if (dateInfo.event && dateInfo.event.id) {\n      hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\n    }\n\n    if (hasEvent) {\n      setSelectedEvent(null);\n      setSelectedDate(null);\n      setEvents(filteredEvents);\n      setSelectedCheckboxes((prevSelectedCheckboxes) => {\n        const updatedCheckboxes = { ...prevSelectedCheckboxes };\n        delete updatedCheckboxes[checkboxKey];\n        return updatedCheckboxes;\n      });\n    } else {\n      setSelectedDate(dateInfo.date);\n\n      if (\n        selectedEvent &&\n        dateInfo.event &&\n        selectedEvent.id === dateInfo.event.id\n      ) {\n        const eventToRemove = events.find(\n          (event) => event.id === selectedEvent.id\n        );\n        const updatedEvents = events.filter(\n          (event) => event.id !== selectedEvent.id\n        );\n        setSelectedEvent(null);\n        setSelectedDate(null);\n        setEvents(updatedEvents);\n        setSelectedCheckboxes((prevSelectedCheckboxes) => {\n          const updatedCheckboxes = { ...prevSelectedCheckboxes };\n          delete updatedCheckboxes[checkboxKey];\n          return updatedCheckboxes;\n        });\n      } else if (selectedEvent) {\n        const event = {\n          id: selectedEvent.id,\n          title: selectedEvent.title,\n          start: dateInfo.date,\n        };\n        setEvents([...filteredEvents, event]);\n\n        setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n          ...prevSelectedCheckboxes,\n          [checkboxKey]: true,\n        }));\n      }\n    }\n  }\n\n  const getDatesBetween = (start, end) => {\n    const dates = [];\n    let currentDate = new Date(start);\n\n    while (currentDate <= end) {\n      dates.push(currentDate.toISOString().split(\"T\")[0]);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return dates;\n  };\n\n  const addCheckboxesToDates = (event) => {\n    const allDates = getDatesBetween(event.start, event.end);\n\n    const calendarEl = document.querySelector(\".calendar-container\");\n    allDates.forEach((date) => {\n      const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\n      dateCell.classList.add(\"selected-date\");\n    });\n  };\n\n  const handleEventClick = (event) => {\n    setSelectedEvent(event);\n    setSelectedDate(null); // Reset selected date\n    addCheckboxesToDates(event);\n  };\n\n  // const events = [\n  //   { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\n  //   { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\n  //   { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\n  //   { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\n  // ];\n  return (\n    <div className=\"containe\">\n      <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n        <h2>Event List</h2>\n        <ul>\n          {events.map((event) => (\n            <li\n              key={event.id}\n              onClick={() => handleEventClick(event)}\n              style={{\n                cursor: \"pointer\",\n                fontWeight:\n                  selectedEvent && selectedEvent.id === event.id\n                    ? \"bold\"\n                    : \"normal\",\n              }}\n            >\n              {event.title}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n        <FullCalendar\n          plugins={[dayGridPlugin, interactionPlugin]}\n          initialView=\"dayGridMonth\"\n          selectable={true}\n          events={events}\n          dayCellContent={renderDateCell}\n          eventContent={(info) => {\n            return (\n              <div>\n                <div>{info.event.title}</div>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n//*********************************** */\n\n// import React, { useState } from \"react\";\n// import FullCalendar from \"@fullcalendar/react\";\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\n// import interactionPlugin from \"@fullcalendar/interaction\";\n\n// export default function CalendarWithEventList() {\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [events, setEvents] = useState([]);\n//   const [selectedEvent, setSelectedEvent] = useState(null);\n//   const [selectedRadio, setSelectedRadio] = useState({});\n\n//   const handleDateCellChange = (dateInfo) => {\n//     if (selectedEvent) {\n//       const selectedDateValue = dateInfo.date.valueOf();\n//       const filteredEvents = events.filter(\n//         (event) => event.start.valueOf() !== selectedDateValue\n//       );\n\n//       const hasEvent = filteredEvents.some(\n//         (event) => event.start.valueOf() === selectedDateValue\n//       );\n\n//       if (hasEvent) {\n//         setSelectedEvent(null);\n//         setSelectedDate(null);\n//         setEvents(filteredEvents);\n//         setSelectedRadio({}); // Clear the selected radio state for the date\n//       } else {\n//         setSelectedDate(dateInfo.date);\n\n//         const event = {\n//           title: selectedEvent.title,\n//           start: dateInfo.date,\n//         };\n\n//         setEvents([...filteredEvents, event]);\n//         setSelectedRadio((prevSelectedRadio) => ({\n//           ...prevSelectedRadio,\n//           [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\n//         }));\n//       }\n//     } else {\n//       setSelectedDate(dateInfo.date);\n//       setSelectedRadio((prevSelectedRadio) => ({\n//         ...prevSelectedRadio,\n//         [dateInfo.date.toISOString()]: true, // Set the selected radio state for the date\n//       }));\n//     }\n//   };\n\n//   const renderDateCell = (dateInfo) => {\n//     const isSelected = selectedDate\n//       ? selectedDate.valueOf() === dateInfo.date.valueOf()\n//       : false;\n//     const isEventSelected = selectedEvent;\n//     const radioKey = dateInfo.date.toISOString();\n\n//     if (isEventSelected) {\n//       const radioButtonName = `radio-${radioKey}`;\n//       const hasEvent = events.some(\n//         (event) => event.start.valueOf() === dateInfo.date.valueOf()\n//       );\n\n//       return (\n//         <div>\n//           <input\n//             name={radioButtonName}\n//             type=\"radio\"\n//             checked={isSelected && selectedRadio[radioKey]}\n//             onChange={() => handleDateCellChange(dateInfo)}\n//           />\n//           {dateInfo.dayNumberText}\n//         </div>\n//       );\n//     }\n\n//     return dateInfo.dayNumberText;\n//   };\n\n//   const getDatesBetween = (start, end) => {\n//     const dates = [];\n//     let currentDate = new Date(start);\n\n//     while (currentDate <= end) {\n//       dates.push(currentDate.toISOString().split(\"T\")[0]);\n//       currentDate.setDate(currentDate.getDate() + 1);\n//     }\n\n//     return dates;\n//   };\n\n//   const addRadioButtonsToDates = (event) => {\n//     const allDates = getDatesBetween(event.start, event.end);\n\n//     const calendarEl = document.querySelector(\".calendar-container\");\n//     allDates.forEach((date) => {\n//       const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\n//       dateCell.classList.add(\"selected-date\");\n//     });\n//   };\n\n//   const handleEventClick = (event) => {\n//     setSelectedEvent(event);\n//     setSelectedDate(null); // Reset selected date\n//     addRadioButtonsToDates(event);\n//   };\n\n//   const eventsa = [\n//     { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\n//     { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\n//     { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\n//     { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\n//   ];\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n//         <h2>Event List</h2>\n//         <ul>\n//           {eventsa.map((event) => (\n//             <li\n//               key={event.id}\n//               onClick={() => handleEventClick(event)}\n//               style={{\n//                 cursor: \"pointer\",\n//                 fontWeight:\n//                   selectedEvent && selectedEvent.id === event.id\n//                     ? \"bold\"\n//                     : \"normal\",\n//               }}\n//             >\n//               {event.title}\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//       <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n//         <FullCalendar\n//           plugins={[dayGridPlugin, interactionPlugin]}\n//           initialView=\"dayGridMonth\"\n//           selectable={true}\n//           events={events}\n//           dayCellContent={renderDateCell}\n//           eventContent={(info) => {\n//             return (\n//               <div>\n//                 <div>{info.event.title}</div>\n//               </div>\n//             );\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// second month\n\n// import React, { useState } from \"react\";\n// import FullCalendar from \"@fullcalendar/react\";\n// import dayGridPlugin from \"@fullcalendar/daygrid\";\n// import interactionPlugin from \"@fullcalendar/interaction\";\n\n// export default function SecondMonth() {\n//     const [selectedDate, setSelectedDate] = useState(null);\n//     const [events, setEvents] = useState([\n//         { id: 1, title: \"Event 1\", start: \"2023-05-01\", end: \"2023-05-02\" },\n//         { id: 2, title: \"Event 2\", start: \"2023-05-03\", end: \"2023-05-04\" },\n//         { id: 3, title: \"Event 3\", start: \"2023-05-05\", end: \"2023-05-06\" },\n//         { id: 4, title: \"Event 4\", start: \"2023-05-07\", end: \"2023-05-08\" },\n//     ]);\n//     const [selectedEvent, setSelectedEvent] = useState(null);\n//     console.log(selectedEvent, \"lllllllloooooo\");\n//     const [selectedCheckboxes, setSelectedCheckboxes] = useState({});\n\n//     function handleDateCellChange(dateInfo) {\n//         console.log(dateInfo, \"oooooo\")\n//         console.log(dateInfo, \"handleDateCellChange top console\");\n//         const checkboxKey = dateInfo.date.toISOString();\n//         const selectedDateValue = dateInfo.date.valueOf();\n//         const isChecked = selectedCheckboxes[checkboxKey];\n\n//         if (isChecked) {\n//             // Unselecting the checkbox\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//                 delete updatedCheckboxes[checkboxKey];\n//                 return updatedCheckboxes;\n//             });\n\n//             const filteredEvents = events.filter(\n//                 (event) => event.start.valueOf() !== selectedDateValue\n//             );\n\n//             setSelectedEvent(null);\n//             setSelectedDate(null);\n//             setEvents(filteredEvents);\n//         } else {\n//             // Selecting the checkbox\n//             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//                 ...prevSelectedCheckboxes,\n//                 [checkboxKey]: true,\n//             }));\n\n//             const event = {\n//                 id: selectedEvent.id,\n//                 title: selectedEvent.title,\n//                 start: dateInfo.date,\n//             };\n//             setEvents((prevEvents) => [...prevEvents, event]);\n//         }\n//     }\n\n//     // function handleDateCellChange(dateInfo) {\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\n//     //     const checkboxKey = dateInfo.date.toISOString();\n//     //     const isChecked = selectedCheckboxes[checkboxKey];\n\n//     //     if (isChecked) {\n//     //         // Unselecting the checkbox\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//     //             delete updatedCheckboxes[checkboxKey];\n//     //             return updatedCheckboxes;\n//     //         });\n\n//     //         const eventToRemove = events.find(\n//     //             (event) => event.start.valueOf() === dateInfo.date.valueOf()\n//     //         );\n\n//     //         if (eventToRemove) {\n//     //             const updatedEvents = events.filter(\n//     //                 (event) => event.id !== eventToRemove.id\n//     //             );\n//     //             setEvents(updatedEvents);\n//     //         }\n//     //     } else {\n//     //         // Selecting the checkbox\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//     //             ...prevSelectedCheckboxes,\n//     //             [checkboxKey]: true,\n//     //         }));\n\n//     //         const event = {\n//     //             id: selectedEvent.id,\n//     //             title: selectedEvent.title,\n//     //             start: dateInfo.date,\n//     //         };\n\n//     //         setEvents((prevEvents) => [...prevEvents, event]);\n//     //     }\n//     // }\n\n//     const renderDateCell = (dateInfo) => {\n//         console.log(dateInfo, \"ppppp\")\n//         const selectedDateValue = selectedDate ? selectedDate.valueOf() : null;\n//         const isSelected = selectedDateValue === dateInfo.date.valueOf();\n//         const isEventSelected = selectedEvent;\n\n//         if (isEventSelected) {\n//             const checkboxKey = dateInfo.date.toISOString();\n\n//             return (\n//                 <div>\n//                     <input\n//                         name={`checkbox-${checkboxKey}`}\n//                         type=\"checkbox\"\n//                         checked={isSelected || selectedCheckboxes[checkboxKey]}\n//                         onChange={() => handleDateCellChange(dateInfo)}\n//                     />\n//                     {dateInfo.dayNumberText}\n//                 </div>\n//             );\n//         }\n\n//         return dateInfo.dayNumberText;\n//     };\n\n//     // function handleDateCellChange(dateInfo) {\n//     //     console.log(dateInfo, \"handleDateCellChange top console\");\n//     //     const checkboxKey = dateInfo.date.toISOString();\n//     //     const selectedDateValue = dateInfo.date.valueOf();\n//     //     if (selectedEvent !== null) {\n//     //         let testObj = JSON.parse(JSON.stringify(dateInfo));\n//     //         testObj.event = selectedEvent;\n//     //         dateInfo.kkk = selectedEvent;\n//     //         console.log(dateInfo, testObj, \"dateInfo -> testObj\");\n//     //         console.log(dateInfo.kkk, testObj.event, \"dateInfo -> testObj\");\n\n//     //         const event = {\n//     //             title: selectedEvent.title,\n//     //             start: dateInfo.date,\n//     //         };\n//     //     }\n//     //     const filteredEvents = events.filter(\n//     //         (event) => event.start.valueOf() !== selectedDateValue\n//     //     );\n\n//     //     const date = new Date(dateInfo.date);\n//     //     const formattedDate = date.toLocaleDateString(\"en-GB\", {\n//     //         year: \"numeric\",\n//     //         month: \"2-digit\",\n//     //         day: \"2-digit\",\n//     //     });\n\n//     //     const [day, month, year] = formattedDate.split(\"/\");\n//     //     const desiredFormat = `${year}-${month}-${day}`;\n\n//     //     let hasEvent = false;\n//     //     console.log(dateInfo, \"arti\");\n\n//     //     if (dateInfo.event && dateInfo.event.id) {\n//     //         hasEvent = filteredEvents.some((ev) => ev.id === dateInfo.event.id);\n//     //     }\n\n//     //     if (hasEvent) {\n//     //         setSelectedEvent(null);\n//     //         setSelectedDate(null);\n//     //         setEvents(filteredEvents);\n//     //         setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//     //             const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//     //             delete updatedCheckboxes[checkboxKey];\n//     //             return updatedCheckboxes;\n//     //         });\n//     //     } else {\n//     //         setSelectedDate(dateInfo.date);\n\n//     //         if (\n//     //             selectedEvent &&\n//     //             dateInfo.event &&\n//     //             selectedEvent.id === dateInfo.event.id\n//     //         ) {\n//     //             const eventToRemove = events.find(\n//     //                 (event) => event.id === selectedEvent.id\n//     //             );\n//     //             const updatedEvents = events.filter(\n//     //                 (event) => event.id !== selectedEvent.id\n//     //             );\n//     //             setSelectedEvent(null);\n//     //             setSelectedDate(null);\n//     //             setEvents(updatedEvents);\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => {\n//     //                 const updatedCheckboxes = { ...prevSelectedCheckboxes };\n//     //                 delete updatedCheckboxes[checkboxKey];\n//     //                 return updatedCheckboxes;\n//     //             });\n//     //         } else if (selectedEvent) {\n//     //             const event = {\n//     //                 id: selectedEvent.id,\n//     //                 title: selectedEvent.title,\n//     //                 start: dateInfo.date,\n//     //             };\n//     //             setEvents([...filteredEvents, event]);\n\n//     //             setSelectedCheckboxes((prevSelectedCheckboxes) => ({\n//     //                 ...prevSelectedCheckboxes,\n//     //                 [checkboxKey]: true,\n//     //             }));\n//     //         }\n//     //     }\n//     // }\n\n//     // const getDatesBetween = (start, end) => {\n//     //     const dates = [];\n//     //     let currentDate = new Date(start);\n\n//     //     while (currentDate <= end) {\n//     //         dates.push(currentDate.toISOString().split(\"T\")[0]);\n//     //         currentDate.setDate(currentDate.getDate() + 1);\n//     //     }\n\n//     //     return dates;\n//     // };\n\n//     // const addCheckboxesToDates = (event) => {\n//     //     const allDates = getDatesBetween(event.start, event.end);\n\n//     //     const calendarEl = document.querySelector(\".calendar-container\");\n//     //     allDates.forEach((date) => {\n//     //         const dateCell = calendarEl.querySelector(`[data-date=\"${date}\"]`);\n//     //         dateCell.classList.add(\"selected-date\");\n//     //     });\n//     // };\n\n//     const handleEventClick = (event) => {\n//         setSelectedEvent(event);\n//         setSelectedDate(null); // Reset selected date\n//         // addCheckboxesToDates(event);\n//     };\n\n//     return (\n//         <div className=\"containe\">\n//             <div className=\"event-list\" style={{ float: \"left\", width: \"25%\" }}>\n//                 <h2>Event List</h2>\n//                 <ul>\n//                     {events.map((event, i) => (\n//                         <li\n//                             key={i}\n//                             onClick={() => handleEventClick(event)}\n//                             style={{\n//                                 cursor: \"pointer\",\n//                                 fontWeight:\n//                                     selectedEvent && selectedEvent.id === event.id\n//                                         ? \"bold\"\n//                                         : \"normal\",\n//                             }}\n//                         >\n//                             {event.title}\n//                         </li>\n//                     ))}\n//                 </ul>\n//             </div>\n//             <div className=\"calendar\" style={{ float: \"left\", width: \"75%\" }}>\n//                 <FullCalendar\n//                     plugins={[dayGridPlugin, interactionPlugin]}\n//                     initialView=\"dayGridMonth\"\n//                     selectable={true}\n//                     events={events}\n//                     dayCellContent={renderDateCell}\n//                     eventContent={(info) => {\n//                         return (\n//                             <div>\n//                                 <div>{info.event.title}</div>\n//                             </div>\n//                         );\n//                     }}\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/reportsList.jsx",["634","635","636","637","638","639"],"import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { getReports } from \"../../../utils/api\";\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\nimport GenerateReportModal from \"../../modals/generateReportModal\";\nimport Uptime from './Uptime';\nimport Media from './Media';\nimport Audit from './Audit';\n\nexport default function ReportsList() {\n  const history = useHistory();\n  const [dropValue, setDropValue] = useState(\"Select\");\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\n\n  let params = new URLSearchParams(history.location.search);\n  let startDate = params.get(\"startDate\");\n  let endDate = params.get(\"endDate\");\n  let type = params.get(\"type\");\n  let reportSlug = params.get(\"report\");\n  const [reportData, setReportData] = useState([]);\n  const handleDropDown = (e, data) => {\n    e.preventDefault();\n    setDropValue(data);\n  };\n  useEffect(() => {\n    console.log(startDate, endDate, \"semnd api\");\n    getReports(startDate, endDate, reportSlug).then((res) => {\n      console.log(res, \"res schedule getReports\");\n      if (res.data.statusCode === 200) {\n        setReportData(res.data.data);\n        // history.push(`/reports-list/${res.data.data}`);\n        // <ReportsList data={res.data.data} />;\n      }\n    });\n  }, [startDate, endDate, reportSlug]);\n\n  return (\n    <>\n      {\" \"}\n      <div className=\"custom-content-heading d-flex align-items-center\">\n        <div>\n          <h1 className=\"mb-4\">{reportSlug}</h1>\n        </div>\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\n          <Dropdown>\n            <Dropdown.Toggle\n              variant=\"outline-primary\"\n              size=\"sm\"\n              className=\"mt-1 mb-2\"\n            >\n              {dropValue}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Monthly\");\n                  setShowGenerateModal(true);\n                }}\n              >\n                Monthly\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Daily\");\n                  setShowGenerateModal(true);\n                }}\n              >\n                Daily\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Custom\");\n                  setShowGenerateModal(true);\n                }}\n              >\n                Custom\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      </div>\n      {reportSlug && reportSlug == 'uptime-report' ? <Uptime reportData={reportData}/> : ''}\n      {reportSlug && reportSlug == 'media-report' ? <Media reportData={reportData}/> : ''}\n      {reportSlug && reportSlug == 'audit-logs' ? <Audit reportData={reportData}/> : ''}\n      \n      <GenerateReportModal\n        close={() => setShowGenerateModal(false)}\n        show={showGenerateModal}\n        reportType={reportSlug}\n        type={type}\n      />\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/TableLoader.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CreateComposition.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/EditComposition.jsx",["640","641"],"import { useLocation } from \"react-router-dom\";\nimport useSWR from 'swr'\nimport CommonComposition from \"./Common\";\nimport { getCompositionById } from \"../../../../utils/api\";\nimport { useEffect, useState } from \"react\";\n\nconst EditComposition = () => {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const id = queryParams.get('id');\n\n  // const { data: composition , mutate , error} = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\n  const [composition,setComposition] = useState(null)\n  const layout = composition ? composition.layout : {};\n\n\n  // Example useEffect for triggering SWR mutate on route change\n  const getData = async ()=>{\n    const data  =await getCompositionById(`/vendor/layouts/composition?compositionId=${id}`)\n    setComposition(data)\n  }\n  useEffect(() => {\n    if(id){\n      getData()\n      \n    }\n  }, [id]);\n\n  return (<>{composition && <CommonComposition type=\"edit\" layout={layout} composition={composition}/>}</>)\n};\n\nexport default EditComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/listComposition.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/index.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/utils/fetchClient.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/index.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/index.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/integrations/index.jsx",["642","643"],"import React from \"react\";\nimport weather from \"../../../img/weather.svg\";\nimport { Dropdown } from \"react-bootstrap\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport UrlAppModal from \"../../modals/UrlAppModal\";\nimport { useState } from \"react\";\nimport RssFeedAppModal from \"../../modals/RssFeedAppModal\";\nimport ScrollerTextAppModal from \"../../modals/ScrollerTextAppModal\";\nimport WeatherAppModal from \"../../modals/WeatherAppModal\";\nimport TextAppModal from \"../../modals/TextAppModal\";\nimport ClockApp from \"../../modals/ClockApp\";\nimport StocksAppModal from \"../../modals/StocksAppModal\";\nimport QrCodeModal from \"../../modals/QrCodeModal\";\nimport AirQualityAppModal from \"../../modals/AirQualityAppModal\";\nimport YoutubeAppModal from \"../../modals/YoutubeAppModal\";\nimport BulletinBoardAppModal from \"../../modals/BulletinBoardAppModal\";\n\nexport default function Integrations() {\n  const [showUrlApp, setShowUrlApp] = useState(false);\n  const [showRssFeedApp, setShowRssFeedApp] = useState(false);\n  const [showScrollerTextApp, setShowScrollerTextApp] = useState(false);\n  const [showWeatherApp, setShowWeatherApp] = useState(false);\n  const [showTextApp, setShowTextApp] = useState(false);\n  const [showClockApp, setShowClockApp] = useState(false);\n  const [showStocksApp, setShowStocksApp] = useState(false);\n  const [showQrCodeApp, setShowQrCodeApp] = useState(false);\n  const [showAirQualityApp, setShowAirQualityApp] = useState(false);\n  const [showYoutubeApp, setShowYoutubeApp] = useState(false);\n  const [showBulletinBoardApp, setShowBulletinBoardApp] = useState(false);\n\n  return (\n    <>\n      <div className=\"custom-content-heading d-flex flex-wrap flex-column\">\n        <h1 className=\"mb-3\">Integrations</h1>\n      </div>\n      <div\n        className=\"integration-container h-100\"\n        style={{ overflowY: \"auto\" }}\n      >\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowUrlApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>URL APP</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowYoutubeApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>YOUTUBE </p>\n            </div>\n          </div>\n        </div>\n\n        {/* <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowRssFeedApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>RSS FEED</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowScrollerTextApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>SCROLLER</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowWeatherApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>WEATHER</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowTextApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>Text</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowClockApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>CLOCK APP</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowStocksApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>STOCKS </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowQrCodeApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>QR CODE </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowAirQualityApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>AIR QUALITY APP </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            // onClick={() => {\n            //   setShowYoutubeApp(true);\n            // }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>PEOPLE SPACE </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            onClick={() => {\n              setShowYoutubeApp(true);\n            }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>GOOGLE SLIDES </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            // onClick={() => {\n            //   setShowYoutubeApp(true);\n            // }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>QUOTES </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"app-card \">\n          <div className=\"d-flex justify-content-end mr-3 mt-3\">\n            <Dropdown\n              className=\"dropdown-toggle-menu app-card-menu\"\n              drop=\"left\"\n            >\n              <Dropdown.Toggle variant=\"left\" className=\"p-0\">\n                <span className=\"table-menu-icon\">\n                  <img\n                    className=\"app-card-menu-img img-fluid\"\n                    src={menuIcon}\n                    alt=\"menu-icon\"\n                  />\n                </span>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  href=\"#\"\n                  className=\"\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                    <label htmlFor=\"favourite\" className=\"mb-0\">\n                      {\" \"}\n                      Mark as favourite\n                    </label>\n                    <input\n                      type=\"checkbox\"\n                      id=\"favourite\"\n                      name=\"favourite\"\n                      value=\"favourite\"\n                    />\n                  </div>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <label htmlFor=\"learn\" className=\"mb-0\">\n                      {\" \"}\n                      Learn More\n                    </label>\n                    <input type=\"checkbox\" id=\"learn\" name=\"learn\" />\n                  </div>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n          <div\n            className=\"d-flex align-items-center justify-content-center\"\n            // onClick={() => {\n            //   setShowYoutubeApp(true);\n            // }}\n          >\n            <div className=\"text-center\">\n              <img className=\"mb-3\" src={weather} />\n              <p>ALL NEWS APP </p>\n            </div>\n          </div>\n        </div> */}\n      </div>\n\n      <UrlAppModal\n        setShowUrlApp={() => setShowUrlApp(false)}\n        show={showUrlApp}\n      />\n      <RssFeedAppModal\n        setShowUrlApp={() => setShowRssFeedApp(false)}\n        show={showRssFeedApp}\n      />\n      <ScrollerTextAppModal\n        setShowUrlApp={() => setShowScrollerTextApp(false)}\n        show={showScrollerTextApp}\n      />\n      <WeatherAppModal\n        setShowUrlApp={() => setShowWeatherApp(false)}\n        show={showWeatherApp}\n      />\n      <TextAppModal\n        setShowUrlApp={() => setShowTextApp(false)}\n        show={showTextApp}\n      />\n      <ClockApp\n        setShowUrlApp={() => setShowClockApp(false)}\n        show={showClockApp}\n      />\n      <StocksAppModal\n        setShowUrlApp={() => setShowStocksApp(false)}\n        show={showStocksApp}\n      />\n      <QrCodeModal\n        setShowUrlApp={() => setShowQrCodeApp(false)}\n        show={showQrCodeApp}\n      />\n      <AirQualityAppModal\n        setShowUrlApp={() => setShowAirQualityApp(false)}\n        show={showAirQualityApp}\n      />\n      <YoutubeAppModal\n        setShowUrlApp={() => setShowYoutubeApp(false)}\n        show={showYoutubeApp}\n      />\n      <BulletinBoardAppModal\n        setShowUrlApp={() => setShowBulletinBoardApp(false)}\n        show={showBulletinBoardApp}\n      />\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/index.jsx",["644","645","646","647","648","649","650","651"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\nimport scheduleIcon from \"../../../img/Vector.png\";\nimport computer from \"../../../img/computer.png\";\nimport logs from \"../../../img/logs.png\";\nimport GenerateReportModal from \"../../modals/generateReportModal\";\nimport { useHistory } from \"react-router-dom\";\nimport { getReports } from \"../../../utils/api\";\nimport Uptime from \"./Uptime\";\nimport Media from \"./Media\";\nimport Audit from \"./Audit\";\nimport backicon from \"../../../img/backicon.png\";\n\nconst Reports = () => {\n  const history = useHistory();\n  const [showGenerateModal, setShowGenerateModal] = useState(false);\n  const [reportType, setReportType] = useState(\"\");\n  const [filter, setFilter] = useState({});\n  const [reportData, setReportData] = useState([]);\n  const [dropValue, setDropValue] = useState(\"Filter\");\n  let params = new URLSearchParams(history.location.search);\n  let reportSlug = params.get(\"report\");\n\n  const handleClick = (e, type) => {\n    e.preventDefault();\n    history.push(`/reports?report=${type}`);\n  };\n\n  const handleDropDown = (e, data) => {\n    e.preventDefault();\n    setDropValue(data);\n  };\n\n  useEffect(() => {\n    if (reportSlug && reportSlug !== \"\" && Object.keys(filter).length == 0) {\n      setShowGenerateModal(true);\n    }\n    if (Object.keys(filter).length > 0 && reportSlug !== \"\") {\n      getReports(filter.startDate, filter.endDate, reportSlug).then((res) => {\n        if (res.data.statusCode === 200) {\n          setReportData(res.data.data);\n        }\n      });\n    }\n  }, [reportSlug, filter]);\n\n  useEffect(() => {\n    if (reportSlug && reportSlug == \"media-report\") {\n      setReportType(\"Media Report\");\n    }\n    if (reportSlug && reportSlug == \"uptime-report\") {\n      setReportType(\"Uptime Report\");\n    }\n    if (reportSlug && reportSlug == \"audit-logs\") {\n      setReportType(\"Audit Logs\");\n    }\n  }, [reportData]);\n\n  const redirectBack = (e) => {\n    e.preventDefault();\n    setReportData([]);\n    setFilter({});\n    setReportType(\"\");\n    history.push(\"/reports\");\n  };\n\n  return (\n    <>\n      {reportSlug && reportSlug !== \"\" ? (\n        \"\"\n      ) : (\n        <>\n          <div className=\"custom-content-heading d-flex flex-wrap \">\n            <div>\n              <h1 className=\"mb-1\">Reports</h1>\n              <p className=\"three-layout-paragrapgh\">\n                Which report would you like to generate?\n              </p>\n            </div>\n          </div>\n          <Row>\n            <Col\n              lg=\"4\"\n              md=\"4\"\n              sm=\"12\"\n              xs=\"12\"\n              onClick={(e) => {\n                handleClick(e, \"media-report\");\n              }}\n            >\n              <div className=\"push-column text-center\">\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                  <img\n                    className=\"layout-select-img\"\n                    src={scheduleIcon}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <h6> Media Report</h6>\n                <p>Shows for how much time Media file is played</p>\n              </div>\n            </Col>\n            <Col\n              lg=\"4\"\n              md=\"4\"\n              sm=\"12\"\n              xs=\"12\"\n              onClick={(e) => {\n                handleClick(e, \"uptime-report\");\n              }}\n            >\n              <div className=\"push-column text-center\">\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                  <img\n                    className=\"layout-select-img\"\n                    src={computer}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <h6>Uptime Report</h6>\n                <p>Shows for how much time screen was displaying content</p>\n              </div>\n            </Col>\n            <Col\n              lg=\"4\"\n              md=\"4\"\n              sm=\"12\"\n              xs=\"12\"\n              onClick={(e) => {\n                handleClick(e, \"audit-logs\");\n              }}\n            >\n              <div className=\"push-column text-center\">\n                <div className=\"push-column-icon d-flex align-items-center justify-content-center\">\n                  <img\n                    className=\"layout-select-img\"\n                    src={logs}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <h6>Audit Logs</h6>\n                <p>Shows data about users and their activity</p>\n              </div>\n            </Col>\n          </Row>\n        </>\n      )}\n      {reportData && reportSlug ? (\n        <>\n          <div className=\"custom-content-heading d-flex align-items-center\">\n            <div>\n              <button\n                onClick={(e) => {\n                  redirectBack(e);\n                }}\n                className=\"back-button\"\n              >\n                <img src={backicon} alt=\"icon\" />\n              </button>\n            </div>\n            <div className=\" ml-auto d-flex flex-wrap align-items-center\">\n              <Dropdown>\n                <Dropdown.Toggle\n                  variant=\"outline-primary\"\n                  size=\"sm\"\n                  className=\"mt-1 mb-2\"\n                >\n                  {dropValue}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  <Dropdown.Item\n                    onClick={(e) => {\n                      handleDropDown(e, \"Monthly\");\n                      setShowGenerateModal(true);\n                    }}\n                  >\n                    Monthly\n                  </Dropdown.Item>\n                  <Dropdown.Item\n                    onClick={(e) => {\n                      handleDropDown(e, \"Daily\");\n                      setShowGenerateModal(true);\n                    }}\n                  >\n                    Daily\n                  </Dropdown.Item>\n                  <Dropdown.Item\n                    onClick={(e) => {\n                      handleDropDown(e, \"Custom\");\n                      setShowGenerateModal(true);\n                    }}\n                  >\n                    Custom\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          </div>\n          <div className=\"custom-content-heading\">\n            <h1 className=\"mb-4\">{reportType}</h1>\n          </div>\n\n          {reportSlug && reportSlug == \"uptime-report\" ? (\n            <Uptime reportData={reportData} />\n          ) : (\n            \"\"\n          )}\n          {reportSlug && reportSlug == \"media-report\" ? (\n            <Media reportData={reportData} />\n          ) : (\n            \"\"\n          )}\n          {reportSlug && reportSlug == \"audit-logs\" ? (\n            <Audit reportData={reportData} />\n          ) : (\n            \"\"\n          )}\n        </>\n      ) : (\n        \"\"\n      )}\n      <GenerateReportModal\n        close={() => setShowGenerateModal(false)}\n        show={showGenerateModal}\n        setReportType={reportType}\n        setFilter={setFilter}\n        filter={filter}\n      />\n    </>\n  );\n};\nexport default Reports;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/index.jsx",["652"],"import React, { useState, useEffect } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport ListMedia from \"./defaultComposition\";\nimport { roles } from \"aria-query\";\nimport {\n  getUsers,\n  getGroups,\n  getRoles,\n  getDeviceProfile,\n} from \"../../../utils/api\";\nimport User from \"./User\";\nimport AddUserModal from \"../../modals/AddUserModal\";\nimport AddGroup from \"../../modals/AddGroup\";\nimport Group from \"./group\";\nimport Roles from \"./roles\";\nimport Profile from \"./profile\";\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\n\nconst Settings = () => {\n  const [dropValue, setDropValue] = useState(\"Default Content\");\n  const [allUsers, setAllUsers] = useState([]);\n  const [allGroups, setAllGroups] = useState([]);\n  const [allRoles, setAllRoles] = useState([]);\n  const [allDeviceProfile, setAllDeviceProfile] = useState([]);\n  const [showGroupModel, setShowGroupModel] = useState(false);\n  const [showProfileModel, setShowProfileModel] = useState(false);\n  const [showAddUserModel, setShowAddUserModel] = useState(false);\n  const [isRefresh, setIsRefresh] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleDropDown = (e, data) => {\n    e.preventDefault();\n    setDropValue(data);\n  };\n\n  const callUsersApi = async () => {\n    const list = await getUsers();\n    console.log(\"users\", list);\n    setAllUsers(list);\n  };\n\n  const callGroupsApi = async () => {\n    const list = await getGroups();\n    console.log(\"groups\", list);\n    setAllGroups(list);\n  };\n\n  const callRolesApi = async () => {\n    const list = await getRoles();\n    console.log(\"roles\", list);\n    setAllRoles(list);\n  };\n\n  const callDeviceProfileApi = async () => {\n    setLoading(true)\n    const list = await getDeviceProfile();\n    console.log(\"deviceProfile\", list);\n    setAllDeviceProfile(list);\n    setLoading(false)\n  };\n\n  useEffect(() => {\n    callUsersApi();\n    callGroupsApi();\n    callRolesApi();\n    callDeviceProfileApi();\n    setIsRefresh(false);\n    // if(publishType && publishType === 'schedule'){\n    //   getSchedule();\n    // }\n    // if(publishType && publishType === 'quickplay'){\n    //   getQuickplay();\n    // }\n    // if(publishType && publishType === 'defaultComposition'){\n    //   getDefault();\n    // }\n  }, [dropValue, isRefresh]);\n\n  const handleUser = (e) => {\n    e.preventDefault();\n    setShowAddUserModel(true);\n    console.log(\"Add User\");\n  };\n\n  const handleGroup = (e) => {\n    e.preventDefault();\n    setShowGroupModel(true);\n    console.log(\"Add User\");\n  };\n\n  const handleDevice = (e) => {\n    e.preventDefault();\n    setShowProfileModel(true);\n    console.log(\"Add User\");\n  };\n\n  return (\n    <>\n      <AddUserModal\n        open={showAddUserModel}\n        setShowAddUserModel={setShowAddUserModel}\n        setIsRefresh={setIsRefresh}\n      />\n      <AddGroup\n        open={showGroupModel}\n        setShowGroupModel={setShowGroupModel}\n        setIsRefresh={setIsRefresh}\n      />\n      <AddDeviceProfile\n        open={showProfileModel}\n        setShowProfileModel={setShowProfileModel}\n        setIsRefresh={setIsRefresh}\n        loading={loading}\n      />\n      <div\n        className=\"custom-content-heading d-flex flex-wrap\"\n        style={{ minHeight: \"600px !important\" }}\n      >\n        <h1>Settings</h1>\n        <div className=\" ml-auto d-flex flex-wrap align-items-center\">\n          <Dropdown>\n            <Dropdown.Toggle\n              variant=\"outline-primary\"\n              size=\"sm\"\n              className=\"mt-1 mb-2\"\n            >\n              {dropValue}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Default Content\");\n                }}\n              >\n                Default Content\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Groups\");\n                }}\n              >\n                Groups\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Users\");\n                }}\n              >\n                Users\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Roles\");\n                }}\n              >\n                Roles\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={(e) => {\n                  handleDropDown(e, \"Device Profile\");\n                }}\n              >\n                Device Profile\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n      </div>\n\n      <h4>{dropValue}</h4>\n      {dropValue && dropValue === \"Default Content\" && <ListMedia />}\n      {dropValue && dropValue === \"Users\" && (\n        <>\n          <div className=\"d-flex mb-4\">\n            <button\n              className=\"btn-sm  btn-success btn btn-primary  primary-btn setting-page-btn \"\n              onClick={(e) => {\n                handleUser(e);\n              }}\n            >\n              Add User\n            </button>\n          </div>\n          <User\n            setIsRefresh={setIsRefresh}\n            isRefresh={isRefresh}\n            users={allUsers}\n          />{\" \"}\n        </>\n      )}\n      {dropValue && dropValue === \"Groups\" && (\n        <>\n          <div className=\"d-flex mb-4\">\n            <button\n              className=\"btn  btn-success btn btn-primary  primary-btn  setting-page-btn\"\n              onClick={(e) => {\n                handleGroup(e);\n              }}\n            >\n              Add Groups\n            </button>\n          </div>\n          <Group\n            setIsRefresh={setIsRefresh}\n            isRefresh={isRefresh}\n            groups={allGroups}\n          />{\" \"}\n        </>\n      )}\n      {dropValue && dropValue === \"Roles\" && (\n        <>\n          <Roles\n            setIsRefresh={setIsRefresh}\n            isRefresh={isRefresh}\n            roles={allRoles}\n          />{\" \"}\n        </>\n      )}\n      {dropValue && dropValue === \"Device Profile\" && (\n        <>\n          <div className=\"d-flex mb-4\">\n            <button\n              className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn\"\n              onClick={(e) => {\n                handleDevice(e);\n              }}\n            >\n              Add Device Profile\n            </button>\n          </div>\n          <Profile\n            allDeviceProfile={allDeviceProfile}\n            setIsRefresh={setIsRefresh}\n            isRefresh={isRefresh}\n          />{\" \"}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Settings;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/PublishMediaModal.jsx",["653","654"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport { useEffect, useState } from \"react\";\nimport { getAllScreens, publishMedia, setQuickplay } from \"../../utils/api\";\nimport TableLoader from \"../components/TableLoader\";\nimport \"../components/Table.css\";\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\n\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\n  const [allScreens, setAllScreens] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [checkedItems, setCheckedItems] = useState({});\n  const [checkedValues, setCheckedValues] = useState([]);\n  const [published, setPublished] = useState(false);\n  const [loading, setLoading] = useState(false);\n  // use effect\n  useEffect(() => {\n    callAllScreenApi();\n  }, []);\n\n  const callAllScreenApi = async () => {\n    setLoading(true);\n    const list = await getAllScreens();\n    setLoading(false);\n    setAllScreens(list);\n  };\n\n  const handleCheckboxChange = (event) => {\n    const newCheckedItems = {\n      ...checkedItems,\n      [event.target.name]: event.target.checked,\n    };\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSelectAllChange = (event) => {\n    const newCheckedItems = {};\n    allScreens.forEach((item) => {\n      newCheckedItems[item._id] = event.target.checked;\n    });\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSubmit = async () => {\n    await publishMedia({\n      id: selected._id,\n      screenIds: checkedValues,\n      duration: 600,\n      type: type,\n    });\n    // await setQuickplay({\n    //   name,\n    //   compositionId: selected._id,\n    //   screens: checkedValues,\n    //   duration: 600\n    // });\n    setPublished(true);\n    // setShowPublishPopUp(false);\n  };\n  return (\n    <>\n      <Modal\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\n        }`}\n        show={true}\n        size=\"md\"\n      >\n        <Modal.Header>\n          <Modal.Title>\n            {type === \"media\" ? \"Publish Media\" : \"Assign Quickplay\"}\n          </Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowPublishPopUp(false)}\n          >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n          </Button>\n        </Modal.Header>\n\n        {published && (\n          <Modal.Body>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              <h3>Media Published</h3>\n            </div>\n          </Modal.Body>\n        )}\n        {!published && (\n          <Modal.Body>\n            <div className=\"mb-3 mr-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"quickplayname\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                required=\"true\"\n                placeholder=\"Name...\"\n              />\n            </div>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"width50\">\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"custom-control-input\"\n                        id=\"checkbox1_exam_all\"\n                        onChange={handleSelectAllChange}\n                        required=\"\"\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"checkbox1_exam_all\"\n                      ></label>\n                    </div>\n                  </th>\n                  <th>Screen</th>\n                  <th>Last Seen</th>\n                  <th>Default Composition</th>\n                  <th>Current Schedule</th>\n                </tr>\n              </thead>\n              {loading ? (\n                <TableLoader colSpan={5} />\n              ) : (\n                <tbody>\n                  {allScreens !== \"\" &&\n                    allScreens.map((screen) => {\n                      return (\n                        <tr>\n                          <td>\n                            <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                              <input\n                                type=\"checkbox\"\n                                className=\"custom-control-input\"\n                                id={screen._id}\n                                name={screen._id}\n                                checked={checkedItems[screen._id]}\n                                onChange={handleCheckboxChange}\n                              />\n                              <label\n                                className=\"custom-control-label\"\n                                htmlFor={screen._id}\n                              ></label>\n                            </div>\n                          </td>\n\n                          <td>\n                            <span className=\"td-content\">\n                              <strong>{screen.name}</strong>\n                              <span>{screen.screenLocation}</span>\n                            </span>\n                          </td>\n                          <td>\n                            <span className=\"d-flex align-items-center\">\n                              <span className=\"status status-green\"></span>\n                              <span className=\"td-content\">\n                                <strong>{screen.name}</strong>\n                                <span>{screen.screenLocation}</span>\n                              </span>\n                            </span>\n                          </td>\n                          <td>Default Compo. </td>\n                          <td>No Schedule</td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              )}\n            </Table>\n          </Modal.Body>\n        )}\n\n        <Modal.Footer>\n          {!published && (\n            <Row className=\"w-100 m-0\">\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n                  Cancel\n                </Button>\n              </Col>\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n                <Button\n                  disabled={\n                    checkedValues.length === 0 || name == null || name === \"\"\n                  }\n                  variant=\"\"\n                  type=\"button\"\n                  className=\"btn btn-primary btn-block primary-btn\"\n                  onClick={handleSubmit}\n                >\n                  Publish\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default PublishMediaModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/main.jsx",["655","656","657","658","659"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  addScreenCode,\n  BASE_URL,\n  getCompositionById,\n} from \"../../../utils/api\";\nimport { Link } from \"react-router-dom\";\nimport { Col } from \"react-bootstrap\";\nimport { io } from \"socket.io-client\";\nimport WebVideoPlayer from \"./WebVideoPlayer\";\nimport CompositionPlayer from \"./compositionPlayer\";\nimport useSWR from \"swr\";\nconst WebMain = ({ id, handleAddClass, onFullScreen }) => {\n  const [media, setMedia] = useState(\"\");\n  console.log(media, \"media\");\n  const [code, seCode] = useState(\"\");\n  const [contentType, setContentType] = useState(\"\");\n  const [isVerified, setIsVerified] = useState(false);\n  console.log(`%c${contentType}`, \"font-size:20px;color:red\");\n  const initiaload = useRef(true);\n  // const [timeout, setApiTimeout] = useState(\"\");\n  useEffect(() => {\n    console.log(contentType, \"contentType check inside main.jsx\");\n  });\n  const getScreenCode = async () => {\n    let timeoutTimer;\n    const getContent = await addScreenCode(id);\n    console.log(getContent, \"llllllll\");\n    setIsVerified(getContent?.isVerified);\n    if (getContent.isVerified) {\n      if (getContent?.content.length) {\n        const getMedia =\n          getContent?.content[getContent.content.length - 1].media;\n        const mediaType =\n          getContent?.content[getContent.content.length - 1].type;\n\n        if (mediaType === \"composition\") {\n          setMedia(getMedia);\n          setContentType(\"composition\");\n        } else {\n          setMedia(`${BASE_URL}${getMedia.title}`);\n          setContentType(getMedia.type);\n          clearTimeout(timeoutTimer);\n          timeoutTimer = setTimeout(() => {\n            console.log(\"normal timeout\");\n            getScreenCode();\n          }, 6000);\n        }\n      } else {\n        setContentType(\"default_media\");\n        setMedia(getContent.defaultComposition.media);\n      }\n    } else {\n      setContentType(\"code\");\n      seCode(getContent.deviceCode);\n    }\n  };\n  // useEffect(() => {\n  //   if (!isVerified) {\n  //     const interval = setInterval(() => {\n  //       getScreenCode();\n  //     }, 1000);\n\n  //     return () => {\n  //       clearInterval(interval); // Clear the interval when component unmounts\n  //     };\n  //   }\n  // }, [isVerified]);\n  //const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\n  useEffect(() => {\n    console.log(\"sdasd\");\n    const socket = io(BASE_URL, {\n      query: { deviceToken: id },\n      autoConnect: false,\n      transports: [\"websocket\"],\n      secure: true,\n    });\n    getScreenCode();\n    // no-op if the socket is already connected\n\n    socket.connect();\n\n    function onReceiveContent(value) {\n      console.log(value, \"socket data\");\n      if (initiaload.current === true) {\n        initiaload.current = false;\n      } else {\n        //  setContentType(null);\n        getScreenCode();\n      }\n    }\n    function onDisconnectDevice(value) {\n      setContentType(null);\n      getScreenCode();\n    }\n    socket.on(\"disconnectDevice\", onDisconnectDevice);\n    socket.on(\"receiveContent\", onReceiveContent);\n    socket.on(\"receiveComposition\", onReceiveContent);\n    return () => {\n      socket.disconnect();\n      socket.off(\"receiveContent\", onReceiveContent);\n    };\n  });\n\n  return (\n    <>\n      <div>\n        {\" \"}\n        <button\n          id=\"Fullscreen\"\n          onClick={() => onFullScreen()}\n          style={{ zIndex: 10 }}\n        >\n          <div class=\"full-text\">\n            <div class=\"sec-block\">\n              {\" \"}\n              <i class=\"fa fa-expand\"></i>\n              <p>View Full Screen</p>\n            </div>\n          </div>\n        </button>\n      </div>\n      {\n        <>\n          {contentType === \"code\" && (\n            <div className=\"basic-list-group \">\n              <div className=\"main-block\">\n                <div className=\"registration-block\">\n                  <p className=\"registration-title\">\n                    Screen Registration Code{\" \"}\n                  </p>\n                  <p className=\"code\">{code}</p>\n                </div>\n              </div>\n              <div className=\"webrowerTextSection\">\n                <div className=\"how-to-register\">\n                  How to register this screen ?\n                </div>\n                <div className=\"guidelines-login\">\n                  1. Login to on your internet browser{\" \"}\n                </div>\n                <div className=\"guidelines-login\">\n                  2. Go to 'Screen' section &gt; Click on{\" \"}\n                  <Link>\n                    <span className=\"white-color\">'+Add Screen</span>'\n                  </Link>{\" \"}\n                  &gt; Enter above{\" \"}\n                  <Link>\n                    <span className=\"white-color\">\n                      Screen Registration Code\n                    </span>\n                  </Link>{\" \"}\n                  &gt; Click on{\" \"}\n                  <Link>\n                    <span className=\"white-color\">'Next'</span>\n                  </Link>\n                </div>\n\n                <div className=\"guidelines-login\">\n                  3. Enter screen name and other details &gt; Click on\n                  <Link>\n                    <span className=\"white-color\"> 'Register Screen'</span>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          )}\n          {contentType !== null && contentType === \"image\" && (\n            <div className=\"basic-list-group image-preview-container media-content \">\n              <img\n                className=\"webplayer-preview-img\"\n                src={media}\n                alt=\"media-img\"\n              />\n            </div>\n          )}\n          {contentType !== null && contentType === \"image\" && (\n            <div className=\"basic-list-group image-preview-container media-content \">\n              <img\n                className=\"webplayer-preview-img\"\n                src={media}\n                alt=\"media-img\"\n              />\n            </div>\n          )}\n          {contentType !== null && contentType === \"video\" && (\n            <div className=\"basic-list-group video-container media-content\">\n              <WebVideoPlayer src={media}></WebVideoPlayer>\n              {/* <video\n                title=\"video\"\n                width=\"100%\"\n                height=\"440px\"\n                src={}\n              ></video> */}\n            </div>\n          )}\n          {contentType === \"default_media\" && (\n            <>\n              <GetCompositionPlayer\n                composition={media}\n                handleAddClass={handleAddClass}\n              />\n            </>\n            // <div className=\"basic-list-group image-preview-container media-content\">\n            //   <img\n            //     className=\"webplayer-preview-img\"\n            //     src={defaultMediaUrl}\n            //     alt=\"media-img\"\n            //   />\n            // </div>\n          )}\n\n          {contentType !== null && contentType === \"composition\" && (\n            <GetCompositionPlayer\n              composition={media}\n              handleAddClass={handleAddClass}\n            />\n          )}\n\n          <div class=\"console-reg\" id=\"consoleReg\" style={{ zIndex: 10 }}>\n            <p>\n              Copy paste above Screen Registration Code in console{\" \"}\n              <em class=\"ti-arrow-circle-up\"></em>\n            </p>\n          </div>\n        </>\n      }\n    </>\n  );\n};\n\nexport default WebMain;\n\nconst GetCompositionPlayer = ({ composition, handleAddClass }) => {\n  // const fetcher = (url) => getCompositionById(url);\n  // const { data: composition  } = useSWR(id ? `/vendor/layouts/composition?compositionId=${id}` : null, fetcher);\n\n  useEffect(() => {\n    if (composition && composition?.layout?.screenType) {\n      handleAddClass(composition.layout.screenType);\n    }\n  }, [composition]);\n  return (\n    <>\n      {composition && composition.referenceUrl && (\n        <CompositionPlayer\n          contents={composition}\n          content={composition.zones[0].content}\n          referenceUrl={composition.referenceUrl}\n        />\n      )}\n    </>\n  );\n};\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Audit.jsx",["660","661","662","663"],"import React, { useState } from \"react\";\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\nimport {\n    humanReadableFormattedDateString,\n  } from \"../../../utils/UtilsService\";\n  import Datatable from \"react-data-table-component\";\n\nexport default function Audit({reportData, cPage, pCount}) {\n    const columns = [\n        {\n            name : \"Title\",\n            selector : (row) => row?.title,\n            sortable: true,\n        },\n        {\n            name : \"Vendor\",\n            selector : (row) => row?.vendor?.name,\n            sortable: true,\n        },\n        {\n            name : \"Created At\",\n            selector : (row) => humanReadableFormattedDateString(row.createdAt),\n            sortable: true,\n        },\n    ];\n\n  return (\n    <>\n      {/* <Table\n        responsive\n        className=\"custom-table screen-table\"\n        style={{ height: \"100%\" }}\n        id=\"external-events\"\n      >\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Vendor</th>\n            <th>CreatedAt</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {reportData.length > 0 &&\n            reportData.map((data) => {\n\n              return (\n                <tr key={data?._id}>\n                  <td>{data?.title}</td>\n                  <td>{data.vendor.name} </td>\n                  <td>{humanReadableFormattedDateString(data.createdAt)} </td>\n                </tr>\n              );\n            })}\n        </tbody>\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\n      </Table> */}\n      <Datatable columns={columns} data={reportData} pagination sorting />\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Media.jsx",["664","665","666","667","668"],"import React, { useState } from \"react\";\nimport { Button, Table, Dropdown } from \"react-bootstrap\";\nimport {\n    humanReadableFormattedDateString,\n  } from \"../../../utils/UtilsService\";\nimport Datatable from \"react-data-table-component\";\nexport default function Media({reportData}) {\n\n    const columns = [\n        {\n            name : \"Media\",\n            selector : (row) => row?.mediaObject?._id\n        },\n        {\n            name : \"Loop Count\",\n            selector : (row) => row.loop\n        },\n        {\n            name : \"Duration\",\n            selector : (row) => row.duration\n        },\n    ];\n\n\n  return (\n    <>\n      {/* <Table\n        responsive\n        className=\"custom-table screen-table\"\n        style={{ height: \"100%\" }}\n        id=\"external-events\"\n      >\n        <thead>\n          <tr>\n            <th>Media</th>\n            <th>Loop Count</th>\n            <th>Duration</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {reportData.length > 0 &&\n            reportData.map((data) => {\n              return (\n                <tr key={data?._id}>\n                  <td>{data?.media}</td>\n                  <td>{data.loop} </td>\n                  <td>{data.duration} </td>\n                </tr>\n              );\n            })}\n        </tbody>\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\n      </Table> */}\n      <Datatable columns={columns} data={reportData} pagination />\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CompositionActions.jsx",["669"],"import { useState } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport menuIcon from \"../../../../img/menu-icon.png\";\nimport veiwDetailIcon from \"../../../../img/view-detail-icon.png\";\nimport defaultComparisonIcon from \"../../../../img/default-comparison-icon.png\";\nimport assignIcon from \"../../../../img/assign-icon.png\";\nimport takeScreenshotIcon from \"../../../../img/tack-screenshot-icon.png\";\nimport edit from \"../../../../img/edit-composition.png\";\nimport deleteIcon from \"../../../../img/delete-icon.png\";\n\nimport { Link } from \"react-router-dom\";\nimport DuplicateComposition from \"../../../modals/duplicateComposition\";\nimport { postComposition } from \"../../../../utils/api\";\nimport ViewDetails from \"../../../modals/layouts/viewDetails\";\nimport PublishMediaModal from \"../../../modals/PublishMediaModal\";\n\nconst CompositionActions = ({\n  composition,\n  mutate,\n  setDeleteModal,\n  setSelected,\n}) => {\n  const [duplicateModal, setDuplicateModal] = useState(false);\n  const [viewDetailsModal, setViewDetailsModal] = useState(false);\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\n  const createComposition = async (name) => {\n    let setZone = [];\n\n    composition.zones.forEach((zone) => {\n      const setContent = [];\n\n      zone.content.forEach((content) => {\n        setContent.push({\n          url: content.url,\n          type: content.type,\n          maintainAspectRatio: content.maintainAspectRatio,\n          fitToScreen: content.fitToScreen,\n          crop: content.crop,\n          duration: content.duration,\n          // createdBy: composition.createdBy,\n        });\n      });\n\n      const data = {\n        name: zone.name,\n        zoneId: zone.zoneId,\n        content: setContent,\n      };\n      setZone.push(data);\n    });\n\n    const data = {\n      name: name,\n      layoutId: composition.layout._id,\n\n      zones: setZone,\n      duration: composition.duration,\n      referenceUrl: composition.referenceUrl,\n    };\n    //  console.log(data)\n    await postComposition(data);\n    mutate();\n    setDuplicateModal(false);\n  };\n  return (\n    <>\n      {\" \"}\n      <Dropdown className=\"dropdown-toggle-menu\">\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n          <span className=\"table-menu-icon\">\n            <img\n              className=\"menu-img img-fluid\"\n              src={menuIcon}\n              alt=\"menu-icon\"\n            />\n          </span>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            href=\"#\"\n            className=\"dropdown-list-item\"\n            onClick={() => {\n              setViewDetailsModal(true);\n            }}\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={veiwDetailIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">View Details</span>\n                <span className=\"menu-description\">\n                  Get to know more about screen info\n                </span>\n              </div>\n            </div>\n          </Dropdown.Item>\n\n          <Dropdown.Item\n            href=\"#\"\n            className=\"dropdown-list-item\"\n            onClick={() => {\n              setShowPublishPopUp(true);\n            }}\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={assignIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Assign Quickplay</span>\n                <span className=\"menu-description\">\n                  Get to know more about screen info\n                </span>\n              </div>\n            </div>\n          </Dropdown.Item>\n          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\n            <Link to={`/composition/edit?id=${composition._id}`}>\n              <div className=\"d-flex\">\n                <div className=\"dropdown-list-icon\">\n                  <img\n                    className=\"dropdown-list-img img-fluid\"\n                    src={edit}\n                    alt=\"menu-icon\"\n                  />\n                </div>\n                <div className=\"dropdown-menu-list\">\n                  <span className=\"menu-heading\">Edit</span>\n                  <span className=\"menu-description\">\n                    Make changes to this composition\n                  </span>\n                </div>\n              </div>\n            </Link>\n          </Dropdown.Item>\n          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\n            <div\n              className=\"d-flex\"\n              onClick={() => {\n                console.log(\"herer\");\n                setDuplicateModal(true);\n              }}\n            >\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={takeScreenshotIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Duplicate</span>\n                <span className=\"menu-description\">\n                  Create duplicate of your composition\n                </span>\n              </div>\n            </div>\n          </Dropdown.Item>\n          <Dropdown.Item\n            href=\"#\"\n            className=\"dropdown-list-item\"\n            onClick={() => {\n              setSelected(composition);\n              setDeleteModal(true);\n            }}\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={deleteIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Delete</span>\n                <span className=\"menu-description\">\n                  Permanently delete this composition\n                </span>\n              </div>\n            </div>\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      {duplicateModal && (\n        <DuplicateComposition\n          setDuplicateModal={setDuplicateModal}\n          createComposition={createComposition}\n        />\n      )}\n      {viewDetailsModal && (\n        <ViewDetails\n          setViewDetailsModal={setViewDetailsModal}\n          composition={composition}\n        />\n      )}\n      {showPublishPopUp && (\n        <PublishMediaModal\n          selected={composition}\n          setShowPublishPopUp={setShowPublishPopUp}\n          type=\"composition\"\n        />\n      )}\n    </>\n  );\n};\nexport default CompositionActions;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/ChatBox.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/Header.js",["670","671","672"],"import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n/// Scroll\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\n\n/// Image\nimport profile from \"../../../images/profile/pic1.jpg\";\nimport avatar from \"../../../images/avatar/1.jpg\";\nimport { Dropdown } from \"react-bootstrap\";\nimport LogoutPage from './Logout';\n\nconst Header = ({ onNote }) => {\n  const onFullScreen = () => {\n    var elem = document.documentElement;\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.webkitRequestFullscreen) {\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) {\n      elem.msRequestFullscreen();\n    }\n  };\n  return (\n    <div className=\"header header-custom\" style={{ zIndex: \"11\" }}>\n      <div className=\"header-content\">\n        <nav className=\"navbar navbar-expand\">\n          <div className=\"collapse navbar-collapse justify-content-between\">\n            <div className=\"header-left\">\n\n            </div>\n            <ul className=\"navbar-nav header-right\">\n\n              <Dropdown as=\"li\" className=\"nav-item dropdown header-profile\">\n                <Dropdown.Toggle\n                  variant=\"\"\n                  as=\"a\"\n                  className=\"i-false c-pointer nav-link\"\n                  to=\"\"\n                  role=\"button\"\n                  data-toggle=\"dropdown\"\n                >\n                  <div className=\"header-info\">\n                    <span>\n                      Hello, <strong>Samuel</strong>\n                    </span>\n                  </div>\n                  <img src={profile} width={20} alt=\"\" />\n                </Dropdown.Toggle>\n                <Dropdown.Menu\n                  align=\"right\"\n                  className=\"dropdown-menu dropdown-menu-right\"\n                >\n                  <Link to=\"/app-profile\" className=\"dropdown-item ai-icon\">\n                    <svg\n                      id=\"icon-user1\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"text-primary\"\n                      width={18}\n                      height={18}\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n                      <circle cx={12} cy={7} r={4} />\n                    </svg>\n                    <span className=\"ml-2\">Profile </span>\n                  </Link>\n                  <Link to=\"/email-inbox\" className=\"dropdown-item ai-icon\">\n                    <svg\n                      id=\"icon-inbox\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"text-success\"\n                      width={18}\n                      height={18}\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\" />\n                      <polyline points=\"22,6 12,13 2,6\" />\n                    </svg>\n                    <span className=\"ml-2\">Inbox </span>\n                  </Link>\n                  <LogoutPage />\n                </Dropdown.Menu>\n              </Dropdown>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/NavHader.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/SideBar.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/FilterModal.jsx",["673","674","675","676"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport { Link } from \"react-router-dom\";\n\nconst FilterModal = ({ showFilterModal, setFilterModal }) => {\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\n      show={showFilterModal}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title className=\"mr-auto\">Filter</Modal.Title>\n        <span className=\"clear-filter-link\">Clear Filter</span>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setFilterModal(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"filter-row mb-3\">\n          <h6>Show</h6>\n          <div className=\"d-flex flex-wrap\">\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"Landscape\"\n                required\n              />\n              <label className=\"custom-control-label\" htmlFor=\"Landscape\">\n                Landscape\n              </label>\n            </div>\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"Landscape1\"\n                required\n              />\n              <label className=\"custom-control-label\" htmlFor=\"Landscape1\">\n                Landscape\n              </label>\n            </div>\n            <div className=\"custom-control custom-checkbox common-checkbox mr-3\">\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id=\"Landscape2\"\n                required\n              />\n              <label className=\"custom-control-label\" htmlFor=\"Landscape2\">\n                Landscape\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className=\"filter-row mb-3\">\n          <h6>Tags</h6>\n          <div className=\"d-flex flex-wrap\">\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\n              Test Devices\n            </Badge>\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\n              Test Devices\n            </Badge>\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\n              Test Devices\n            </Badge>\n          </div>\n        </div>\n        <div className=\"filter-row mb-3\">\n          <h6>Groups</h6>\n          <div className=\"d-flex flex-wrap\">\n            <Badge className=\"badge-common-light mr-2\" variant=\"outline-light\">\n              Test Devices\n            </Badge>\n          </div>\n        </div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"\"\n          type=\"button\"\n          className=\"btn btn-primary btn-block primary-btn\"\n          onClick={() => setFilterModal(false)}\n        >\n          Apply\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default FilterModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/listScreens.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddScreenModal.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddDeviceProfile.jsx",["677","678","679","680","681","682","683"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport {\n  BASE_URL,\n  addDeviceProfile,\n  updateDeviceProfile,\n} from \"../../utils/api\";\nimport { toast } from \"react-toastify\";\nimport AddMedia from \"../modals/AddMedia\";\nimport DragMove from \"./DragMove\";\nimport Switch from \"react-switch\";\nimport upload from \"../../img/uplaod.svg\";\n\nconst AddDeviceProfile = ({\n  open,\n  setShowProfileModel,\n  setIsRefresh,\n  profileData,\n  setProfileData,\n  type,\n}) => {\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [openMedia, setOpenMedia] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedMedia, setSelectedMedia] = useState(null);\n  const [height, setHeight] = useState(0);\n  const [width, setWidth] = useState(0);\n  const [healthIndicator, setHealthIndicator] = useState(false);\n  const [viewPort, setViewPort] = useState(\"portrait\");\n  useEffect(() => {\n    if (profileData) {\n      setSelectedMedia({\n        title: profileData.logo.title,\n        type: profileData.logo.type,\n      });\n      setWidth(profileData.logo.dimensions.width);\n      setHeight(profileData.logo.dimensions.height);\n      setViewPort(profileData.logo.orientation);\n      setTranslate({\n        x: profileData.logo.coordinates.x,\n        y: profileData.logo.coordinates.y,\n      });\n      setHealthIndicator(profileData.screenHealthIndicator);\n      setName(profileData.name);\n      console.log(\"profileData\", profileData);\n    }\n  }, [profileData]);\n\n  const [translate, setTranslate] = useState({\n    x: 0,\n    y: 0,\n  });\n  const handleChangeDate = (nextChecked) => {\n    console.log(nextChecked, \"yyyy\");\n    setHealthIndicator(nextChecked);\n  };\n  const handleDragMove = (e) => {\n    setTranslate({\n      x: translate.x + e.movementX,\n      y: translate.y + e.movementY,\n    });\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let err = \"\";\n    if (name === \"\") {\n      err = \"Name is Required\";\n    }\n    if (err !== \"\") {\n      setError(err);\n      return false;\n    } else {\n      setError(\"\");\n    }\n\n    if (type && type == \"edit\") {\n      const payLoad = {\n        name,\n        screenHealthIndicator: healthIndicator,\n        orientation: viewPort,\n        width,\n        height,\n        x: translate.x,\n        y: translate.y,\n        title: selectedMedia ? selectedMedia.title : \"\",\n        type: selectedMedia ? selectedMedia.type : \"\",\n        profileId: profileData._id,\n      };\n      await updateDeviceProfile(payLoad)\n        .then((response) => {\n          //setError(null);\n          toast.success(\"Device Profile has been Updated successfully !!!\", {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"light\",\n          });\n          setIsRefresh(true);\n          setShowProfileModel(false);\n        })\n        .catch(function (error) {\n          setError(error.response.data.message);\n        });\n    } else {\n      const payLoad = {\n        name,\n        screenHealthIndicator: healthIndicator,\n        orientation: viewPort,\n        width,\n        height,\n        x: translate.x,\n        y: translate.y,\n        title: selectedMedia ? selectedMedia.title : \"\",\n        type: selectedMedia ? selectedMedia.type : \"\",\n      };\n      await addDeviceProfile(payLoad)\n        .then((response) => {\n          //setError(null);\n          toast.success(\"Device Profile has been added successfully !!!\", {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"light\",\n          });\n          setIsRefresh(true);\n          setShowProfileModel(false);\n        })\n        .catch(function (error) {\n          setError(error.response.data.message);\n        });\n    }\n  };\n  const videoMetaDuration = (media) => {\n    const properties = JSON.parse(media?.properties);\n    if (properties && properties.length) {\n      return (properties.length.toFixed(0) / 60).toFixed(0);\n    }\n    return null;\n  };\n\n  return (\n    <>\n      <AddMedia\n        setOpenMedia={setOpenMedia}\n        openMedia={openMedia}\n        selectedImage={selectedImage}\n        setSelectedImage={setSelectedImage}\n        setSelectedMedia={setSelectedMedia}\n        setHeight={setHeight}\n        setWidth={setWidth}\n      />\n      <Modal className=\"\" show={open} size=\"xl\">\n        <Modal.Header>\n          <Modal.Title>\n            {type && type == \"edit\" ? \"Update \" : \"Add \"} Profile\n          </Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowProfileModel(false)}\n          >\n            <img\n              className=\"cancel-icon\"\n              src={cancelIcon}\n              alt=\"cancel-icon\"\n              height=\"25px\"\n            />\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            {error && error !== \"\" && (\n              <h5 className=\"alert alert-danger\">{error}</h5>\n            )}\n            <Col lg={12} md={12} sm={12} xs={12}>\n              <label className=\"mt-3\">Enter Name</label>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={name}\n                  className=\"form-control input-default form-field\"\n                  placeholder=\"Enter Name\"\n                  onChange={(e) => {\n                    setName(e.target.value);\n                  }}\n                />\n              </div>\n              <div className=\"form-group pt-2\">\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeDate}\n                  checked={healthIndicator}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n              <div className=\"form-group d-flex pt-2\">\n                {/* <button\n                  onClick={(e) => {\n                    setOpenMedia(true);\n                  }}\n                  className=\"btn btn-primary  primary-btn btn\"\n                >\n                  Add Image\n                </button> */}\n                <div className=\"mr-4 add-device-profile-img\">\n                  {selectedMedia && (\n                    <span className=\"td-content d-flex name-td-content mb-3 \">\n                      <span\n                        className={`name-img mr-2  ${\n                          selectedMedia?.type === \"video\" && \"videotableName\"\n                        }`}\n                      >\n                        {selectedMedia?.type === \"image\" && (\n                          <div\n                            onClick={() => {\n                              //showPreview(selectedMedia.title, selectedMedia.type);\n                            }}\n                            className=\"media-list-img-zoom\"\n                          >\n                            <span className=\"media-list-img-zoom-plus\">+</span>\n                            <img\n                              className=\"media-img img-fluid\"\n                              src={`${BASE_URL}${selectedMedia?.title}`}\n                              alt=\"media-img\"\n                            />\n                          </div>\n                        )}\n                        {selectedMedia?.type === \"video\" && (\n                          <button\n                            onClick={() => {\n                              //showPreview(media.title, media.type);\n                            }}\n                          >\n                            {videoMetaDuration(selectedMedia)}\n                          </button>\n                        )}\n                      </span>\n                    </span>\n                  )}\n                </div>\n\n                <img\n                  onClick={(e) => {\n                    setOpenMedia(true);\n                  }}\n                  src={upload}\n                  alt=\"icon\"\n                  height=\"35px\"\n                  width=\"35px\"\n                  style={{ cursor: \"pointer\" }}\n                />\n              </div>\n              <div>\n                {selectedMedia && (\n                  <div>\n                    <div className=\"add-device-potrait \">\n                      <div\n                        onClick={(e) => {\n                          setViewPort(\"portrait\");\n                        }}\n                        className={`${viewPort == \"portrait\" ? \" active\" : \"\"}`}\n                      >\n                        Potrait\n                      </div>\n                      <div\n                        onClick={(e) => {\n                          setViewPort(\"landscape\");\n                        }}\n                        className={`${\n                          viewPort == \"landscape\" ? \" active\" : \"\"\n                        }`}\n                      >\n                        Landscape\n                      </div>\n                    </div>\n                    <div className=\"form-controle\">\n                      <label className=\"mt-3\">X</label>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          value={translate.x}\n                          className=\"form-control input-default form-field\"\n                          placeholder=\"Enter Name\"\n                          onChange={(e) => {\n                            setTranslate({\n                              ...translate,\n                              [\"x\"]: e.target.value,\n                            });\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-controle\">\n                      <label className=\"mt-3\">Y</label>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          value={translate.y}\n                          className=\"form-control input-default form-field\"\n                          placeholder=\"Enter Name\"\n                          onChange={(e) => {\n                            setTranslate({\n                              ...translate,\n                              [\"y\"]: e.target.value,\n                            });\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-controle\">\n                      <label className=\"mt-3\">Width</label>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          value={width}\n                          className=\"form-control input-default form-field\"\n                          placeholder=\"Enter Name\"\n                          onChange={(e) => {\n                            setWidth(e.target.value);\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"form-controle\">\n                      <label className=\"mt-3\">Height</label>\n                      <div className=\"form-group\">\n                        <input\n                          type=\"text\"\n                          name=\"name\"\n                          value={height}\n                          className=\"form-control input-default form-field\"\n                          placeholder=\"Enter Name\"\n                          onChange={(e) => {\n                            setHeight(e.target.value);\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <header className=\"App-header\">\n                        <DragMove onDragMove={handleDragMove}>\n                          <div\n                            style={{\n                              transform: `translateX(${translate.x}px) translateY(${translate.y}px)`,\n                            }}\n                            className=\"w-100\"\n                          >\n                            <img\n                              style={{ width:`${width}px`, height:`${height}px`, maxWidth: \"100%\" }}\n                              src={`${BASE_URL}${selectedMedia?.title}`}\n                              className={`App-logo  ${width}`}\n                              alt=\"logo\"\n                            />\n                          </div>\n                        </DragMove>\n                      </header>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Col>\n          </Row>\n        </Modal.Body>\n        <Modal.Footer>\n          <Row className=\"w-100 m-0\">\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n              <Button\n                className=\"cancel-btn w-100\"\n                variant=\"outline-light\"\n                onClick={() => setShowProfileModel(false)}\n              >\n                Cancel\n              </Button>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n              <Button\n                variant=\"\"\n                type=\"button\"\n                className=\"btn btn-primary btn-block primary-btn\"\n                onClick={(e) => handleSubmit(e)}\n              >\n                Save\n              </Button>\n            </Col>\n          </Row>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default AddDeviceProfile;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/roles.jsx",["684","685","686","687","688","689","690","691","692"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Table,\n  Dropdown,\n  Button,\n  Modal,\n  Row,\n  Col,\n  Badge,\n} from \"react-bootstrap\";\nimport { updateRoles } from \"../../../utils/api\";\nimport { toast } from \"react-toastify\";\nimport { Editor } from \"draft-js\";\n\nconst Roles = ({ roles, setIsRefresh, isRefresh }) => {\n  const [rolesData, setRolesData] = useState(roles.roles);\n  const [rolesType, setRolesType] = useState(\"OPERATOR\");\n  const [makeRefresh, setMakeRefresh] = useState(false);\n\n  useEffect(() => {\n    setMakeRefresh(false);\n    if (roles) {\n      setRolesData(roles.roles);\n    }\n  }, [makeRefresh, rolesData]);\n\n  const handleChange = async (e, set, section, type, val) => {\n    rolesData[set][section][type] = val;\n    await setRolesData(rolesData);\n    setMakeRefresh(true);\n  };\n\n  const handleRoles = async (e) => {\n    e.preventDefault();\n    console.log(rolesData);\n    await updateRoles(rolesData)\n      .then((response) => {\n        //setError(null);\n        toast.success(\"Roles has been updated successfully !\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: \"light\",\n        });\n        setIsRefresh(true);\n      })\n      .catch(function (error) {\n        //setError(error.response.data.message)\n      });\n  };\n\n  return (\n    <>\n      <div className=\"d-flex mb-4\">\n        <button\n          className=\"btn  btn-success btn btn-primary  primary-btn setting-page-btn \"\n          onClick={(e) => {\n            handleRoles(e);\n          }}\n        >\n          Update\n        </button>\n      </div>\n      <Row className=\"w-100\" style={{ marginTop: \"10px\" }}>\n        <Col lg={3} md={3} sm={3} xs={3} className=\"pl-0 pr-2 card\">\n          <div>\n            <button\n              className={`btn btn-sm w-100 text-left ${\n                rolesType === \"OPERATOR\" ? \"btn-success role-btn-bg\" : \"\"\n              }`}\n              onClick={(e) => {\n                setRolesType(\"OPERATOR\");\n              }}\n            >\n              Operator\n            </button>\n          </div>\n          <div>\n            <button\n              className={`btn btn-sm w-100 text-left ${\n                rolesType === \"MANAGER\" ? \"btn-success role-btn-bg\" : \"\"\n              }`}\n              onClick={(e) => {\n                setRolesType(\"MANAGER\");\n              }}\n            >\n              Manager\n            </button>\n          </div>\n          <div>\n            <button\n              className={`btn btn-sm w-100 text-left ${\n                rolesType === \"EDITOR\" ? \"btn-success role-btn-bg\" : \"\"\n              }`}\n              onClick={(e) => {\n                setRolesType(\"EDITOR\");\n              }}\n            >\n              Editor\n            </button>\n          </div>\n        </Col>\n        <Col lg={9} md={9} sm={9} xs={9} className=\"pl-2 pr-0\">\n          <Table responsive className=\"custom-table screen-table roles-table\">\n            <thead>\n              <tr>\n                <th>Permission</th>\n                <th>View</th>\n                <th>Add</th>\n                <th>edit</th>\n                <th>Delete</th>\n              </tr>\n            </thead>\n\n            {rolesType && rolesType == \"OPERATOR\" && (\n              <tbody>\n                <tr>\n                  <td>APPS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-apps-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-apps-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"APPS\",\n                          \"view\",\n                          !rolesData.OPERATOR.APPS.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.APPS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-apps-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-apps-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"APPS\",\n                          \"add\",\n                          !rolesData.OPERATOR.APPS.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.APPS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-apps-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-apps-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"APPS\",\n                          \"edit\",\n                          !rolesData.OPERATOR.APPS.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.APPS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-apps-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-apps-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"APPS\",\n                          \"delete\",\n                          !rolesData.OPERATOR.APPS.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.APPS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>ASSETS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-ASSETS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-ASSETS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"ASSETS\",\n                          \"view\",\n                          !rolesData.OPERATOR.ASSETS.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.ASSETS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-ASSETS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-ASSETS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"ASSETS\",\n                          \"add\",\n                          !rolesData.OPERATOR.ASSETS.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.ASSETS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-ASSETS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-ASSETS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"ASSETS\",\n                          \"edit\",\n                          !rolesData.OPERATOR.ASSETS.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.ASSETS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-ASSETS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-ASSETS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"ASSETS\",\n                          \"delete\",\n                          !rolesData.OPERATOR.ASSETS.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.ASSETS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>COMPOSITION</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-COMPOSITION-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-COMPOSITION-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"COMPOSITION\",\n                          \"view\",\n                          !rolesData.OPERATOR.COMPOSITION.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.COMPOSITION.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-COMPOSITION-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-COMPOSITION-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"COMPOSITION\",\n                          \"add\",\n                          !rolesData.OPERATOR.COMPOSITION.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.COMPOSITION.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-COMPOSITION-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-COMPOSITION-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"COMPOSITION\",\n                          \"edit\",\n                          !rolesData.OPERATOR.COMPOSITION.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.COMPOSITION.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-COMPOSITION-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-COMPOSITION-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"COMPOSITION\",\n                          \"delete\",\n                          !rolesData.OPERATOR.COMPOSITION.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.COMPOSITION.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>QUICKPLAY</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-QUICKPLAY-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-QUICKPLAY-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"QUICKPLAY\",\n                          \"view\",\n                          !rolesData.OPERATOR.QUICKPLAY.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.QUICKPLAY.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-QUICKPLAY-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-QUICKPLAY-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"QUICKPLAY\",\n                          \"add\",\n                          !rolesData.OPERATOR.QUICKPLAY.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.QUICKPLAY.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-QUICKPLAY-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-QUICKPLAY-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"QUICKPLAY\",\n                          \"edit\",\n                          !rolesData.OPERATOR.QUICKPLAY.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.QUICKPLAY.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-QUICKPLAY-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-QUICKPLAY-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"QUICKPLAY\",\n                          \"delete\",\n                          !rolesData.OPERATOR.QUICKPLAY.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.QUICKPLAY.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>REPORTS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-REPORTS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-REPORTS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"REPORTS\",\n                          \"view\",\n                          !rolesData.OPERATOR.REPORTS.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.REPORTS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-REPORTS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-REPORTS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"REPORTS\",\n                          \"add\",\n                          !rolesData.OPERATOR.REPORTS.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.REPORTS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-REPORTS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-REPORTS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"REPORTS\",\n                          \"edit\",\n                          !rolesData.OPERATOR.REPORTS.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.REPORTS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-REPORTS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-REPORTS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"REPORTS\",\n                          \"delete\",\n                          !rolesData.OPERATOR.REPORTS.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.REPORTS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCHEDULE</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCHEDULE-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCHEDULE-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCHEDULE\",\n                          \"view\",\n                          !rolesData.OPERATOR.SCHEDULE.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCHEDULE.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCHEDULE-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCHEDULE-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCHEDULE\",\n                          \"add\",\n                          !rolesData.OPERATOR.SCHEDULE.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCHEDULE.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCHEDULE-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCHEDULE-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCHEDULE\",\n                          \"edit\",\n                          !rolesData.OPERATOR.SCHEDULE.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCHEDULE.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCHEDULE-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCHEDULE-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCHEDULE\",\n                          \"delete\",\n                          !rolesData.OPERATOR.SCHEDULE.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCHEDULE.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCREEN</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCREEN-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCREEN-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCREEN\",\n                          \"view\",\n                          !rolesData.OPERATOR.SCREEN.view\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCREEN.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCREEN-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCREEN-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCREEN\",\n                          \"add\",\n                          !rolesData.OPERATOR.SCREEN.add\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCREEN.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCREEN-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCREEN-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCREEN\",\n                          \"edit\",\n                          !rolesData.OPERATOR.SCREEN.edit\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCREEN.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-OPERATOR-SCREEN-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-OPERATOR-SCREEN-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"OPERATOR\",\n                          \"SCREEN\",\n                          \"delete\",\n                          !rolesData.OPERATOR.SCREEN.delete\n                        )\n                      }\n                      checked={rolesData.OPERATOR.SCREEN.delete}\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            )}\n            {rolesType && rolesType == \"MANAGER\" && (\n              <tbody>\n                <tr>\n                  <td>APPS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-apps-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-apps-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"APPS\",\n                          \"view\",\n                          !rolesData.MANAGER.APPS.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.APPS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-apps-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-apps-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"APPS\",\n                          \"add\",\n                          !rolesData.MANAGER.APPS.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.APPS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-apps-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-apps-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"APPS\",\n                          \"edit\",\n                          !rolesData.MANAGER.APPS.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.APPS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-apps-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-apps-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"APPS\",\n                          \"delete\",\n                          !rolesData.MANAGER.APPS.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.APPS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>ASSETS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-ASSETS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-ASSETS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"ASSETS\",\n                          \"view\",\n                          !rolesData.MANAGER.ASSETS.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.ASSETS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-ASSETS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-ASSETS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"ASSETS\",\n                          \"add\",\n                          !rolesData.MANAGER.ASSETS.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.ASSETS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-ASSETS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-ASSETS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"ASSETS\",\n                          \"edit\",\n                          !rolesData.MANAGER.ASSETS.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.ASSETS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-ASSETS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-ASSETS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"ASSETS\",\n                          \"delete\",\n                          !rolesData.MANAGER.ASSETS.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.ASSETS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>COMPOSITION</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-COMPOSITION-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-COMPOSITION-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"COMPOSITION\",\n                          \"view\",\n                          !rolesData.MANAGER.COMPOSITION.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.COMPOSITION.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-COMPOSITION-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-COMPOSITION-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"COMPOSITION\",\n                          \"add\",\n                          !rolesData.MANAGER.COMPOSITION.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.COMPOSITION.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-COMPOSITION-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-COMPOSITION-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"COMPOSITION\",\n                          \"edit\",\n                          !rolesData.MANAGER.COMPOSITION.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.COMPOSITION.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-COMPOSITION-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-COMPOSITION-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"COMPOSITION\",\n                          \"delete\",\n                          !rolesData.MANAGER.COMPOSITION.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.COMPOSITION.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>QUICKPLAY</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-QUICKPLAY-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-QUICKPLAY-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"QUICKPLAY\",\n                          \"view\",\n                          !rolesData.MANAGER.QUICKPLAY.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.QUICKPLAY.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-QUICKPLAY-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-QUICKPLAY-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"QUICKPLAY\",\n                          \"add\",\n                          !rolesData.MANAGER.QUICKPLAY.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.QUICKPLAY.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-QUICKPLAY-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-QUICKPLAY-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"QUICKPLAY\",\n                          \"edit\",\n                          !rolesData.MANAGER.QUICKPLAY.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.QUICKPLAY.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-QUICKPLAY-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-QUICKPLAY-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"QUICKPLAY\",\n                          \"delete\",\n                          !rolesData.MANAGER.QUICKPLAY.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.QUICKPLAY.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>REPORTS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-REPORTS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-REPORTS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"REPORTS\",\n                          \"view\",\n                          !rolesData.MANAGER.REPORTS.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.REPORTS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-REPORTS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-REPORTS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"REPORTS\",\n                          \"add\",\n                          !rolesData.MANAGER.REPORTS.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.REPORTS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-REPORTS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-REPORTS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"REPORTS\",\n                          \"edit\",\n                          !rolesData.MANAGER.REPORTS.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.REPORTS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-REPORTS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-REPORTS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"REPORTS\",\n                          \"delete\",\n                          !rolesData.MANAGER.REPORTS.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.REPORTS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCHEDULE</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCHEDULE-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCHEDULE-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCHEDULE\",\n                          \"view\",\n                          !rolesData.MANAGER.SCHEDULE.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCHEDULE.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCHEDULE-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCHEDULE-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCHEDULE\",\n                          \"add\",\n                          !rolesData.MANAGER.SCHEDULE.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCHEDULE.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCHEDULE-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCHEDULE-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCHEDULE\",\n                          \"edit\",\n                          !rolesData.MANAGER.SCHEDULE.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCHEDULE.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCHEDULE-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCHEDULE-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCHEDULE\",\n                          \"delete\",\n                          !rolesData.MANAGER.SCHEDULE.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCHEDULE.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCREEN</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCREEN-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCREEN-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCREEN\",\n                          \"view\",\n                          !rolesData.MANAGER.SCREEN.view\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCREEN.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCREEN-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCREEN-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCREEN\",\n                          \"add\",\n                          !rolesData.MANAGER.SCREEN.add\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCREEN.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCREEN-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCREEN-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCREEN\",\n                          \"edit\",\n                          !rolesData.MANAGER.SCREEN.edit\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCREEN.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-MANAGER-SCREEN-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-MANAGER-SCREEN-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"MANAGER\",\n                          \"SCREEN\",\n                          \"delete\",\n                          !rolesData.MANAGER.SCREEN.delete\n                        )\n                      }\n                      checked={rolesData.MANAGER.SCREEN.delete}\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            )}\n            {rolesType && rolesType == \"EDITOR\" && (\n              <tbody>\n                <tr>\n                  <td>APPS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-apps-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-apps-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"APPS\",\n                          \"view\",\n                          !rolesData.EDITOR.APPS.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.APPS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-apps-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-apps-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"APPS\",\n                          \"add\",\n                          !rolesData.EDITOR.APPS.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.APPS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-apps-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-apps-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"APPS\",\n                          \"edit\",\n                          !rolesData.EDITOR.APPS.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.APPS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-apps-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-apps-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"APPS\",\n                          \"delete\",\n                          !rolesData.EDITOR.APPS.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.APPS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>ASSETS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-ASSETS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-ASSETS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"ASSETS\",\n                          \"view\",\n                          !rolesData.EDITOR.ASSETS.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.ASSETS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-ASSETS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-ASSETS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"ASSETS\",\n                          \"add\",\n                          !rolesData.EDITOR.ASSETS.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.ASSETS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-ASSETS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-ASSETS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"ASSETS\",\n                          \"edit\",\n                          !rolesData.EDITOR.ASSETS.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.ASSETS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-ASSETS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-ASSETS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"ASSETS\",\n                          \"delete\",\n                          !rolesData.EDITOR.ASSETS.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.ASSETS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>COMPOSITION</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-COMPOSITION-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-COMPOSITION-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"COMPOSITION\",\n                          \"view\",\n                          !rolesData.EDITOR.COMPOSITION.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.COMPOSITION.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-COMPOSITION-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-COMPOSITION-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"COMPOSITION\",\n                          \"add\",\n                          !rolesData.EDITOR.COMPOSITION.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.COMPOSITION.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-COMPOSITION-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-COMPOSITION-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"COMPOSITION\",\n                          \"edit\",\n                          !rolesData.EDITOR.COMPOSITION.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.COMPOSITION.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-COMPOSITION-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-COMPOSITION-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"COMPOSITION\",\n                          \"delete\",\n                          !rolesData.EDITOR.COMPOSITION.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.COMPOSITION.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>QUICKPLAY</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-QUICKPLAY-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-QUICKPLAY-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"QUICKPLAY\",\n                          \"view\",\n                          !rolesData.EDITOR.QUICKPLAY.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.QUICKPLAY.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-QUICKPLAY-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-QUICKPLAY-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"QUICKPLAY\",\n                          \"add\",\n                          !rolesData.EDITOR.QUICKPLAY.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.QUICKPLAY.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-QUICKPLAY-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-QUICKPLAY-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"QUICKPLAY\",\n                          \"edit\",\n                          !rolesData.EDITOR.QUICKPLAY.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.QUICKPLAY.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-QUICKPLAY-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-QUICKPLAY-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"QUICKPLAY\",\n                          \"delete\",\n                          !rolesData.EDITOR.QUICKPLAY.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.QUICKPLAY.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>REPORTS</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-REPORTS-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-REPORTS-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"REPORTS\",\n                          \"view\",\n                          !rolesData.EDITOR.REPORTS.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.REPORTS.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-REPORTS-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-REPORTS-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"REPORTS\",\n                          \"add\",\n                          !rolesData.EDITOR.REPORTS.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.REPORTS.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-REPORTS-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-REPORTS-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"REPORTS\",\n                          \"edit\",\n                          !rolesData.EDITOR.REPORTS.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.REPORTS.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-REPORTS-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-REPORTS-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"REPORTS\",\n                          \"delete\",\n                          !rolesData.EDITOR.REPORTS.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.REPORTS.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCHEDULE</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCHEDULE-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCHEDULE-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCHEDULE\",\n                          \"view\",\n                          !rolesData.EDITOR.SCHEDULE.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCHEDULE.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCHEDULE-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCHEDULE-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCHEDULE\",\n                          \"add\",\n                          !rolesData.EDITOR.SCHEDULE.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCHEDULE.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCHEDULE-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCHEDULE-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCHEDULE\",\n                          \"edit\",\n                          !rolesData.EDITOR.SCHEDULE.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCHEDULE.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCHEDULE-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCHEDULE-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCHEDULE\",\n                          \"delete\",\n                          !rolesData.EDITOR.SCHEDULE.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCHEDULE.delete}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>SCREEN</td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCREEN-view`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCREEN-view`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCREEN\",\n                          \"view\",\n                          !rolesData.EDITOR.SCREEN.view\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCREEN.view}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCREEN-add`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCREEN-add`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCREEN\",\n                          \"add\",\n                          !rolesData.EDITOR.SCREEN.add\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCREEN.add}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCREEN-edit`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCREEN-edit`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCREEN\",\n                          \"edit\",\n                          !rolesData.EDITOR.SCREEN.edit\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCREEN.edit}\n                    />\n                  </td>\n                  <td>\n                    <input\n                      className={`day-checkbox`}\n                      name={`checkbox-EDITOR-SCREEN-delete`}\n                      type=\"checkbox\"\n                      id={`checkbox-EDITOR-SCREEN-delete`}\n                      onChange={(e) =>\n                        handleChange(\n                          e,\n                          \"EDITOR\",\n                          \"SCREEN\",\n                          \"delete\",\n                          !rolesData.EDITOR.SCREEN.delete\n                        )\n                      }\n                      checked={rolesData.EDITOR.SCREEN.delete}\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            )}\n          </Table>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Roles;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/profile.jsx",["693","694","695","696","697"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Dropdown, Card, Button } from \"react-bootstrap\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport assignIcon from \"../../../img/assign-icon.png\";\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\nimport { addDeviceProfile, deleteDeviceProfile } from \"../../../utils/api\";\nimport { humanReadableFormattedDateString } from \"../../../utils/UtilsService\";\nimport { toast } from \"react-toastify\";\nimport AddDeviceProfile from \"../../modals/AddDeviceProfile\";\nimport SelectScreenModal from \"../../modals/SelectScreenModal\";\nimport Datatable from \"react-data-table-component\";\n\nconst Profile = ({ allDeviceProfile, setIsRefresh, isRefresh, loading }) => {\n  const [showProfileModel, setShowProfileModel] = useState(false);\n  const [profileData, setProfileData] = useState(null);\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [selectedScreen, setSelectedScreen] = useState([]);\n\n  const handleEditiUser = (e, item) => {\n    e.preventDefault();\n    setShowProfileModel(true);\n    setProfileData(item);\n    console.log(\"Update Profile\");\n  };\n\n  const handleAssignScreen = (e, id, item) => {\n    e.preventDefault();\n    setShowPublishPopUp(true);\n    setSelected(id);\n    setSelectedScreen(item.screens);\n    console.log(\"Assign Screen\");\n  };\n\n  const handleDelete = async (e, id) => {\n    e.preventDefault();\n    await deleteDeviceProfile(id);\n    toast.success(\"Profile has been deleted successfully !!!\", {\n      position: \"top-right\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: \"light\",\n    });\n    setIsRefresh(!isRefresh);\n  };\n\n  const renderAction = (value) => {\n    return (\n      <Dropdown className=\"dropdown-toggle profile-dropdown\">\n        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n          <span className=\"table-menu-icon\">\n            <img\n              className=\"menu-img img-fluid\"\n              src={menuIcon}\n              alt=\"menu-icon\"\n            />\n          </span>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={(e) => {\n              handleEditiUser(e, value);\n            }}\n            className=\"dropdown-list-item\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={assignIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Edit</span>\n              </div>\n            </div>\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={(e) => {\n              handleAssignScreen(e, value._id, value);\n            }}\n            className=\"dropdown-list-item\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={takeScreenshotIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Assigned Screen</span>\n              </div>\n            </div>\n          </Dropdown.Item>\n          <Dropdown.Item\n            onClick={(e) => {\n              handleDelete(e, value._id);\n            }}\n            className=\"dropdown-list-item\"\n          >\n            <div className=\"d-flex\">\n              <div className=\"dropdown-list-icon\">\n                <img\n                  className=\"dropdown-list-img img-fluid\"\n                  src={takeScreenshotIcon}\n                  alt=\"menu-icon\"\n                />\n              </div>\n              <div className=\"dropdown-menu-list\">\n                <span className=\"menu-heading\">Delete</span>\n              </div>\n            </div>\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  };\n\n  const columns = [\n    {\n      name: \"Name\",\n      selector: (row) => row?.name,\n      sortable: true,\n    },\n    {\n      name: \"Created\",\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\n      sortable: true,\n    },\n    {\n      name: \"Updated\",\n      selector: (row) => humanReadableFormattedDateString(row.createdAt),\n      sortable: true,\n    },\n    {\n      name: \" \",\n      selector: (row) => renderAction(row),\n      sortable: false,\n    },\n  ];\n  // const rows = [];\n  // if(allDeviceProfile){\n  //   allDeviceProfile.forEach((item) => {\n  //       rows.push({\n  //             id:item._id,\n  //             name:item.name,\n  //             created: humanReadableFormattedDateString(item.createdAt),\n  //             updated: humanReadableFormattedDateString(item.createdAt),\n  //             assignedScreen:item.screens.length,\n  //             action:item\n  //         });\n  //     });\n  // }\n\n  return (\n    <>\n      <AddDeviceProfile\n        open={showProfileModel}\n        setShowProfileModel={setShowProfileModel}\n        setIsRefresh={setIsRefresh}\n        profileData={profileData}\n        setProfileData={setProfileData}\n        type=\"edit\"\n      />\n      <SelectScreenModal\n        showPublishPopUp={showPublishPopUp}\n        setShowPublishPopUp={setShowPublishPopUp}\n        selected={selected}\n        setIsRefresh={setIsRefresh}\n        selectedScreen={selectedScreen}\n        setSelectedScreen={setSelectedScreen}\n      />\n      <Datatable\n        className=\"profile\"\n        columns={columns}\n        data={allDeviceProfile}\n        pagination\n        sorting\n      />\n      {/* <Table responsive className=\"custom-table screen-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Created ON</th>\n            <th>Update On</th>\n            <th>Assigned Screens</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {allDeviceProfile !== \"\" &&\n            allDeviceProfile.map((item) => {\n              return (\n                <tr id={item._id}>\n                  <td>\n                    <span className=\"td-content\">\n                      <strong>{item.name}</strong>\n                    </span>\n                  </td>\n                  <td>{humanReadableFormattedDateString(item.createdAt)}</td>\n                  <td>{humanReadableFormattedDateString(item.updatedAt)}</td>\n                  <td>{item.screens.length}</td>\n                  <td>\n                    <Dropdown className=\"dropdown-toggle-menu\">\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                        <span className=\"table-menu-icon\">\n                          <img\n                            className=\"menu-img img-fluid\"\n                            src={menuIcon}\n                            alt=\"menu-icon\"\n                          />\n                        </span>\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                        \n                        <Dropdown.Item \n                         onClick={(e) => {handleEditiUser(e, item)}}\n                           className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={assignIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Edit</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                        <Dropdown.Item \n                           onClick={(e)=>{handleAssignScreen(e, item._id, item)}}\n                           className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={takeScreenshotIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Assigned Screen</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                        <Dropdown.Item \n                           onClick={(e)=>{handleDelete(e, item._id)}}\n                           className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={takeScreenshotIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Delete</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </Table> */}\n    </>\n  );\n};\n\nexport default Profile;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddUserModal.jsx",["698","699","700","701","702","703","704"],"import React, {useState, useEffect} from \"react\";\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport Select from \"react-select\";\nimport {addUsers, updateUsers} from \"../../utils/api\";\nimport { toast } from \"react-toastify\";\n\nconst AddUser = ({ open, setShowAddUserModel , setIsRefresh, user, type}) => {\n    console.log(\"user\",user)\n    const [name, setName] = useState(user ? user.name : \"\");\n    const [email, setEmail] = useState(user ? user.email : \"\");\n    const [password, setPassword] = useState(user ? user.password : \"\");\n    const [role, setRole] = useState(user ? {value:user.role.toUpperCase(),label:user.role} : \"\");\n    const [error, setError] = useState('');\n    useEffect(() => {\n        if(user){   \n            setName(user.name);\n            setEmail(user.email);\n            setPassword(user.password);\n            setRole({value:user.role.toUpperCase(),label:user.role});\n        }\n    },[user])\n    const options = [\n        { value: \"MANAGER\", label: \"Manager\" },\n        { value: \"EDITOR\", label: \"Editor\" },\n        { value: \"OPERATOR\", label: \"Operator\" },\n      ];\n    const handleSubmit = async(e, type) => {\n        e.preventDefault();\n        let err = '';\n        if(name == ''){\n            err = 'Name is required';\n        }\n        else if(password == '' && type == null){\n            err = 'password is required';\n        }\n        else if(email == ''){\n            err = 'Email is required';\n        }\n        else if(role == null){\n            err = 'Role is required';\n        } \n        if(err){\n            setError(err);\n            return false;\n        }\n        console.log(\"error\",err)\n        \n        if(err == ''){\n            if(!type){\n                const postData = {\n                    name, email, password, role:role.value\n                }\n                await addUsers(postData)\n                  .then(response => {\n                    console.log(response);\n                    setError(null);\n                    setShowAddUserModel(false);\n                    toast.success(\"User has been added successfully !!!\", {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                      });\n                      setIsRefresh(true)\n                  }).catch(function (error) {\n                    setError(error.response.data.message)\n                  });\n            }else{\n                console.log(\"Update\");\n                const postData = {\n                    name,role:role.value,userId:user._id\n                }\n                await updateUsers(postData)\n                  .then(response => {\n                    console.log(response);\n                    setError(null);\n                    setShowAddUserModel(false);\n                    toast.success(\"User has been updated successfully !!!\", {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                      });\n                      setIsRefresh(true)\n                  }).catch(function (error) {\n                    setError(error.response.data.message)\n                  });\n            }\n            console.log(\"Submit\",name, email, password,role);\n            \n            \n        }\n        \n    }\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\n      show={open}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}User</Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowAddUserModel(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <Row>\n            {error && <h5 class=\"alert alert-danger text-center\">{error}</h5>}\n          <Col lg={12} md={12} sm={12} xs={12}>\n          <label className=\"mt-3\">Enter Name</label>\n            <div className=\"form-group\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                className=\"form-control input-default form-field\"\n                placeholder=\"Enter Name\"\n                onChange={(e) => {setName(e.target.value)}}\n              />\n            </div>\n          </Col>\n\n          {!type && <><Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n            <label className=\"mt-3\">Enter Email</label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                className=\"form-control input-default form-field\"\n                placeholder=\"Enter Email\"\n                onChange={(e) => {setEmail(e.target.value)}}\n              />\n            </div>\n          </Col><Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n            <label className=\"mt-3\">Enter Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                value={password}\n                className=\"form-control input-default form-field\"\n                placeholder=\"Enter Password\"\n                onChange={(e) => {setPassword(e.target.value)}}\n                autoComplete={false}\n              />\n            </div>\n          </Col></>}\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n            <label className=\"mt-3\">Select Role</label>\n              <Select\n              value={role}\n              onChange={setRole}\n              placeholder=\"Select Role\"\n              options={options}\n              className=\"app-option\"\n            />\n            </div>\n          </Col>\n          \n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button \n                className=\"cancel-btn w-100\"\n                variant=\"outline-light\"\n                onClick={() => setShowAddUserModel(false)}\n            >\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              onClick={(e) => handleSubmit(e, type)}\n            >\n              {type && type === 'edit' ? 'Update User' : 'Add User'}\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default AddUser;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddGroup.jsx",["705","706","707","708","709","710","711","712"],"import React, {useState, useEffect} from \"react\";\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport Select from \"react-select\";\nimport {addGroups, updateGroups} from \"../../utils/api\";\nimport { toast } from \"react-toastify\";\n\nconst AddGroup = ({ open, setShowGroupModel , setIsRefresh, group, type}) => {\n    console.log(\"group\",group)\n    const [name, setName] = useState(group ? group.name : \"\");\n    const [description, setDescription] = useState(group ? group.description : \"\");\n    const [error, setError] = useState('');\n    useEffect(() => {\n        if(group){   \n            setName(group.name);\n            setDescription(group.descripiton);\n        }\n    },[group])\n    const options = [\n        { value: \"MANAGER\", label: \"Manager\" },\n        { value: \"EDITOR\", label: \"Editor\" },\n      ];\n    const handleSubmit = async(e, type) => {\n        e.preventDefault();\n        let err = '';\n        if(name == ''){\n            err = 'Name is required';\n        }\n        else if(description == ''){\n            err = 'Description is required';\n        }\n        if(err){\n            setError(err);\n            return false;\n        }\n        console.log(\"error\",err)\n        \n        if(err == ''){\n            if(!type){\n                const postData = {\n                    name,description\n                }\n                await addGroups(postData)\n                  .then(response => {\n                    setError(null);\n                    setShowGroupModel(false);\n                    toast.success(\"Group has been added successfully !!!\", {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                      });\n                      setIsRefresh(true)\n                  }).catch(function (error) {\n                    setError(error.response.data.message)\n                  });\n            }else{\n                console.log(\"Update\");\n                const postData = {\n                    name,groupId:group._id,description\n                }\n                await updateGroups(postData)\n                  .then(response => {\n                    console.log(response);\n                    setError(null);\n                    setShowGroupModel(false);\n                    toast.success(\"User has been updated successfully !!!\", {\n                        position: \"top-right\",\n                        autoClose: 5000,\n                        hideProgressBar: false,\n                        closeOnClick: true,\n                        pauseOnHover: true,\n                        draggable: true,\n                        progress: undefined,\n                        theme: \"light\",\n                      });\n                      setIsRefresh(true)\n                  }).catch(function (error) {\n                    setError(error.response.data.message)\n                  });\n            }\n            console.log(\"Submit\",name, description);\n            \n            \n        }\n        \n    }\n    return (\n        <Modal\n        className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\n        show={open}\n        size=\"md\"\n        >\n        <Modal.Header>\n            <Modal.Title>{type && type=='edit' ?'Update ' : 'Add New '}Group</Modal.Title>\n            <Button\n                variant=\"\"\n                className=\"close\"\n                onClick={() => setShowGroupModel(false)}\n            >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n            </Button>\n        </Modal.Header>\n        <Modal.Body>\n            <Row>\n                {error && <h5 class=\"alert alert-danger text-center\">{error}</h5>}\n                <Col lg={12} md={12} sm={12} xs={12}>\n                    <label className=\"mt-3\">Enter Name</label>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            value={name}\n                            className=\"form-control input-default form-field\"\n                            placeholder=\"Enter Name\"\n                            onChange={(e) => {setName(e.target.value)}}\n                        />\n                    </div>\n                </Col>\n                <Col lg={12} md={12} sm={12} xs={12}>\n                    <div className=\"form-group\">\n                        <label className=\"mt-3\">Enter Description</label>\n                        <textarea\n                            name=\"description\"\n                            value={description}\n                            className=\"form-control input-default form-field\"\n                            placeholder=\"Enter Description\"\n                            onChange={(e) => {setDescription(e.target.value)}}>\n                        </textarea>\n                    </div>\n                </Col>\n            \n            </Row>\n        </Modal.Body>\n        <Modal.Footer>\n            <Row className=\"w-100 m-0\">\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n                    <Button \n                        className=\"cancel-btn w-100\"\n                        variant=\"outline-light\"\n                        onClick={() => setShowGroupModel(false)}\n                    >\n                    Cancel\n                    </Button>\n                </Col>\n                <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n                    <Button\n                    variant=\"\"\n                    type=\"button\"\n                    className=\"btn btn-primary btn-block primary-btn\"\n                    onClick={(e) => handleSubmit(e, type)}\n                    >\n                    Add Group\n                    </Button>\n                </Col>\n            </Row>\n        </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default AddGroup;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/group.jsx",["713","714","715","716","717","718","719"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\nimport assignIcon from \"../../../img/assign-icon.png\";\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\nimport { deleteGroups, updateGroups } from \"../../../utils/api\";\nimport { toast } from \"react-toastify\";\nimport AddUserModal from '../../modals/AddUserModal';\n\nconst Group = ({groups, setIsRefresh, isRefresh }) => {\n    const [showAddUserModel, setShowAddUserModel] = useState(false);\n    const [user, setUser] = useState(null);\n\n    const deleteuserRecord = async (e, id) => {\n        e.preventDefault();\n        await deleteGroups(id);\n        toast.success(\"Group has been deleted successfully !!!\", {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"light\",\n        });\n        setIsRefresh(!isRefresh);\n    }\n\n    return (\n        <>\n        <AddUserModal open={showAddUserModel} setShowAddUserModel={setShowAddUserModel} setIsRefresh={setIsRefresh} user={user} setUser={setUser} type={'edit'}/>\n        <Table responsive className=\"custom-table screen-table\">\n            <thead>\n            <tr>\n                <th>Name</th>\n                <th>Description</th>\n                <th></th>\n            </tr>\n            </thead>\n            <tbody>\n            {groups && groups.groups !== \"\" &&\n                groups.groups.map((item) => {\n                return (\n                    <tr id={item._id}>\n                    <td>\n                        <span className=\"td-content\">\n                        <strong>{item.name}</strong>\n                        </span>\n                    </td>\n                    <td>\n                        <span className=\"d-flex align-items-center\">\n                        <span className=\"td-content\">\n                            <strong>{item.description}</strong>\n                        </span>\n                        </span>\n                    </td>\n                    <td>{item.createdAt}</td>\n                    <td>\n                        <Dropdown className=\"dropdown-toggle-menu\">\n                        <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                            <span className=\"table-menu-icon\">\n                            <img\n                                className=\"menu-img img-fluid\"\n                                src={menuIcon}\n                                alt=\"menu-icon\"\n                            />\n                            </span>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item \n                            onClick={(e)=>{deleteuserRecord(e, item._id)}}\n                            className=\"dropdown-list-item\">\n                            <div className=\"d-flex\">\n                                <div className=\"dropdown-list-icon\">\n                                <img\n                                    className=\"dropdown-list-img img-fluid\"\n                                    src={takeScreenshotIcon}\n                                    alt=\"menu-icon\"\n                                />\n                                </div>\n                                <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">Delete Group</span>\n                                </div>\n                            </div>\n                            </Dropdown.Item>\n                        </Dropdown.Menu>\n                        </Dropdown>\n                    </td>\n                    </tr>\n                );\n                })}\n            </tbody>\n        </Table>\n        </>\n    );\n};\n\nexport default Group;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/User.jsx",["720","721","722","723","724","725","726"],"import React, { useState, useEffect } from \"react\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport veiwDetailIcon from \"../../../img/view-detail-icon.png\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\nimport assignIcon from \"../../../img/assign-icon.png\";\nimport takeScreenshotIcon from \"../../../img/tack-screenshot-icon.png\";\nimport { deleteUsers, updateUsers } from \"../../../utils/api\";\nimport { toast } from \"react-toastify\";\nimport AddUserModal from '../../modals/AddUserModal';\n\nconst User = ({ users, setIsRefresh, isRefresh }) => {\n//   const [showNewTagModal, setNewTagModal] = useState(false);\n//   const [selectedScreen, setSelectedScreen] = useState(\"\");\n//   const [showPublishPopUp, setShowPublishPopUp] = useState(false);\nconst [showAddUserModel, setShowAddUserModel] = useState(false);\nconst [user, setUser] = useState(null);\n\nconst deleteuserRecord = async (e, id) => {\n  e.preventDefault();\n  await deleteUsers(id);\n  toast.success(\"User has been deleted successfully !!!\", {\n    position: \"top-right\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: \"light\",\n  });\n  setIsRefresh(!isRefresh);\n}\n\nconst handleEditiUser = (e, item) => {\n  e.preventDefault();\n  setShowAddUserModel(true);\n  setUser(item)\n  console.log(\"Add User\")\n}\n\n  return (\n    <>\n    <AddUserModal open={showAddUserModel} setShowAddUserModel={setShowAddUserModel} setIsRefresh={setIsRefresh} user={user} setUser={setUser} type={'edit'}/>\n      <Table responsive className=\"custom-table screen-table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Created Date</th>\n            <th>Role</th>\n            <th>status</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users !== \"\" &&\n            users.map((item) => {\n              return (\n                <tr id={item._id}>\n                  <td>\n                    <span className=\"td-content\">\n                      <strong>{item.name}</strong>\n                    </span>\n                  </td>\n                  <td>\n                    <span className=\"d-flex align-items-center\">\n                      <span className=\"status status-green\"></span>\n                      <span className=\"td-content\">\n                        <strong>{item.email}</strong>\n                      </span>\n                    </span>\n                  </td>\n                  <td>{item.createdAt}</td>\n                  <td>{item.role}</td>\n                  <td>{item.isVerified == true ? 'Active' : \"Deactive\"}</td>\n                  <td>\n                    <Dropdown className=\"dropdown-toggle-menu\">\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                        <span className=\"table-menu-icon\">\n                          <img\n                            className=\"menu-img img-fluid\"\n                            src={menuIcon}\n                            alt=\"menu-icon\"\n                          />\n                        </span>\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                        {/* <Dropdown.Item \n                          // onClick={() => {\n                          //   setShowPublishPopUp(true);\n                          //   setSelectedScreen(screen._id)\n                          // }}\n                          className=\"dropdown-list-item\"\n                        >\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={defaultComparisonIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Disable User</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item> */}\n                        <Dropdown.Item \n                          onClick={(e) => {handleEditiUser(e, item)}}\n                           className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={assignIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Edit User</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                        {/* <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={takeScreenshotIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Change Password</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item> */}\n                        <Dropdown.Item \n                           onClick={(e)=>{deleteuserRecord(e, item._id)}}\n                           className=\"dropdown-list-item\">\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={takeScreenshotIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Delete User</span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default User;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/settings/defaultComposition.jsx",["727"],"import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport VideoThumbnail from \"react-video-thumbnail\";\nimport emptyMediaImg from \"../../../images/card/1.png\";\nimport { BASE_URL, getAllComposition, vendorProfile } from \"../../../utils/api\";\nimport DefaultCompositionModal from \"../../modals/DefaultCompositionModal\";\n\nconst DefaultComposition = () => {\n  const defaultMediaUrl = `${BASE_URL}/default/file_1681896290177.png`;\n  const [defaultCompositionShow, setDefaultCompositionShow] = useState(false);\n  const [compositionList, setCompositionList] = useState();\n  const [showDefaultComposition, setShowDefaultComposition] = useState(\"\");\n  console.log(showDefaultComposition, \"lloooooo\");\n  async function getComPosition() {\n    await getAllComposition().then((res) => {\n      console.log(res, \"res push screen, DefaultComposition\");\n      setCompositionList(res);\n    });\n  }\n  async function getVendorProfile() {\n    await vendorProfile().then((res) => {\n      console.log(res, \"res push screen, vendorProfile\");\n      setShowDefaultComposition(res.data.data.defaultComposition);\n    });\n  }\n  const content = showDefaultComposition?.media?.zones[0].content[0];\n  useEffect(() => {\n    getComPosition();\n    getVendorProfile();\n  }, []);\n  return (\n    <>\n      <div className=\"row settings-default\">\n        <Col xl=\"6\">\n          <div className=\"default-composition-preview\">\n            <div className=\"thumbnail\">\n              {content?.type === \"image\" && (\n                <img\n                  className=\" imgContent\"\n                  src={`${BASE_URL}${content.url}`}\n                  alt=\"media-img\"\n                />\n              )}\n              {content?.type !== \"image\" && content?.type !== \"video\" && (\n                <img\n                  className=\"imgContent\"\n                  src={defaultMediaUrl}\n                  alt=\"Card cap\"\n                />\n              )}\n              {content?.type === \"video\" && (\n                <VideoThumbnail\n                  videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${content.url}`}\n                  thumbnailHandler={(thumbnail) =>\n                    console.log(thumbnail, \"pppppp\")\n                  }\n                  width={426}\n                  height={240}\n                />\n              )}\n            </div>\n          </div>\n        </Col>\n        <Col xl=\"6\">\n          <div className=\"mb-4\">\n            <h4 className=\"card-title card-intro-title\">\n              Organisation default composition\n            </h4>\n            <p>\n              The composition will be applied to all newly added displays in the\n              organization\n            </p>\n            <p className=\"font-weight-bold\">\n              Default Composition: {showDefaultComposition?.media?.name}\n              <span\n                className=\"btn-icon-right text-info\"\n                onClick={() => {\n                  setDefaultCompositionShow(true);\n                }}\n              >\n                <i className=\"fa fa-pencil\" />\n              </span>\n            </p>\n            {showDefaultComposition?.duration && (\n              <p className=\"font-weight-bold\">\n                Duration: {showDefaultComposition?.duration} seconds\n              </p>\n            )}\n          </div>\n        </Col>\n      </div>\n      <DefaultCompositionModal\n        close={() => setDefaultCompositionShow(false)}\n        show={defaultCompositionShow}\n        compositionList={compositionList}\n        getVendorProfile={() => getVendorProfile()}\n      />\n    </>\n  );\n};\n\nexport default DefaultComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/compositionPlayer.jsx",["728","729","730","731","732","733","734","735"],"import React, { useEffect, useState, useRef } from \"react\";\n\nimport WebVideoPlayer from \"./WebVideoPlayer\";\nimport { BASE_URL } from \"../../../utils/api\";\nimport ReactPlayer from \"react-player\";\nimport Iframe from \"react-iframe\";\nconst CompositionPlayer = ({ contents, content, referenceUrl }) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [current1Index, setCurrent1Index] = useState(0);\n  const [current2Index, setCurrent2Index] = useState(0);\n  const timeout1Ref = useRef(\"\");\n  const timeoutRef = useRef(\"\");\n\n  useEffect(() => {\n    if (contents && contents.zones.length == 1) {\n      if (contents.zones[0].content[currentIndex]) {\n        const timeoutDuration =\n          contents.zones[0].content[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contents.zones[0].content.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n    } else if (contents && contents.zones.length == 2) {\n      if (contents.zones[0].content[currentIndex]) {\n        const timeoutDuration =\n          contents.zones[0].content[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contents.zones[0].content.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n      if (contents.zones[1].content[current1Index]) {\n        const timeout1Duration =\n          contents.zones[1].content[current1Index].duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current1Index === contents.zones[1].content.length - 1) {\n            setCurrent1Index(0);\n          } else {\n            setCurrent1Index((current1Index) => current1Index + 1);\n          }\n        }, timeout1Duration);\n      }\n    } else if (contents && contents.zones.length == 3) {\n      if (contents.zones[0].content[currentIndex]) {\n        const timeoutDuration =\n          contents.zones[0].content[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contents.zones[0].content.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n      if (contents.zones[1].content[current1Index]) {\n        const timeout1Duration =\n          contents.zones[1].content[current1Index].duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current1Index === contents.zones[1].content.length - 1) {\n            setCurrent1Index(0);\n          } else {\n            setCurrent1Index((current1Index) => current1Index + 1);\n          }\n        }, timeout1Duration);\n      }\n      if (contents.zones[2].content[current2Index]) {\n        const timeout1Duration =\n          contents.zones[2].content[current2Index].duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current2Index === contents.zones[2].content.length - 1) {\n            setCurrent2Index(0);\n          } else {\n            setCurrent2Index((current2Index) => current2Index + 1);\n          }\n        }, timeout1Duration);\n      }\n    }\n\n    return () => clearTimeout(timeoutRef.current);\n  }, [currentIndex, current1Index]);\n  const viewImage = content[currentIndex]?.fitToScreen\n    ? \"fitScreen\"\n    : content[currentIndex]?.crop\n    ? \"crop\"\n    : \"aspectRation\";\n\n  return (\n    <>\n      {\" \"}\n      {/* {content[currentIndex] && content[currentIndex].type === \"image\" && (\n        <div className=\"basic basic-list-group image-preview-container media-content\">\n          <img\n            className=\"webplayer-preview-img\"\n            style={{\n              objectFit: `${viewImage === \"fitScreen\" ? \"fill\" : \"contain\"}`,\n            }}\n            src={`${BASE_URL}${referenceUrl[currentIndex]}`}\n            alt=\"media-img\"\n          />\n        </div>\n      )}\n      {content[currentIndex] && content[currentIndex].type === \"video\" && (\n        <div className={`basic-list-group video-container media-content ${viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"}`}>\n          <WebVideoPlayer src={`${BASE_URL}${referenceUrl[currentIndex]}`}></WebVideoPlayer>\n        </div>\n      )} */}\n      {contents && contents.zones.length == 1 ? (\n        <>\n          {contents.zones[0] &&\n            contents.zones[0].content[currentIndex] &&\n            contents.zones[0].content[currentIndex].type === \"image\" && (\n              <div className=\"basic-list-group image-preview-container media-content nnnn\">\n                <img\n                  className=\"webplayer-preview-img\"\n                  style={{\n                    objectFit: `${\n                      viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                    }`,\n                  }}\n                  src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                  alt=\"media-img\"\n                />\n              </div>\n            )}\n          {contents.zones[0] &&\n            contents.zones[0].content[currentIndex] &&\n            contents.zones[0].content[currentIndex].type === \"video\" && (\n              <div\n                className={`basic-list-group video-container media-content ${viewImage} ${\n                  viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                }`}\n              >\n                <WebVideoPlayer\n                  src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                ></WebVideoPlayer>\n              </div>\n            )}\n          {contents.zones[0] &&\n            contents.zones[0].content[currentIndex] &&\n            contents.zones[0].content[currentIndex].type === \"youtube-apps\" && (\n              <div\n                className={`basic-list-group video-container media-content ${viewImage} ${\n                  viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                }`}\n              >\n                <ReactPlayer\n                  url={`${contents.zones[0].content[currentIndex].url}`}\n                  width=\"100%\"\n                  height=\"100%\"\n                />\n              </div>\n            )}\n          {contents.zones[0] &&\n            contents.zones[0].content[currentIndex] &&\n            contents.zones[0].content[currentIndex].type === \"url-apps\" && (\n              <div className=\"basic-list-group image-preview-container media-content\">\n                <Iframe\n                  url={`${contents.zones[0].content[currentIndex].url}`}\n                  width=\"100%\"\n                  height=\"100%\"\n                  // id=\"\"\n                  // className=\"\"\n                  display=\"block\"\n                  position=\"relative\"\n                />\n              </div>\n            )}\n        </>\n      ) : contents.zones.length == 2 ? (\n        <div\n          style={{ height: \"100vh\" }}\n          // className=\"webplayer-composition-full-screen\"\n        >\n          <div className=\"top-div\">\n            {contents.zones[0] &&\n              contents.zones[0].content[currentIndex] &&\n              contents.zones[0].content[currentIndex].type === \"image\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <img\n                    className=\"webplayer-preview-img\"\n                    style={{\n                      objectFit: `${\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                      }`,\n                    }}\n                    src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                    alt=\"media-img\"\n                  />\n                </div>\n              )}\n            {contents.zones[0] &&\n              contents.zones[0].content[currentIndex] &&\n              contents.zones[0].content[currentIndex].type === \"video\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <WebVideoPlayer\n                    src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                  ></WebVideoPlayer>\n                </div>\n              )}\n            {contents.zones[0] &&\n              contents.zones[0].content[currentIndex] &&\n              contents.zones[0].content[currentIndex].type === \"url-apps\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <Iframe\n                    url={`${contents.zones[0].content[currentIndex].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                    // id=\"\"\n                    // className=\"\"\n                    display=\"block\"\n                    position=\"relative\"\n                  />\n                </div>\n              )}\n            {contents.zones[0] &&\n              contents.zones[0].content[currentIndex] &&\n              contents.zones[0].content[currentIndex].type ===\n                \"youtube-apps\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <ReactPlayer\n                    url={`${contents.zones[0].content[currentIndex].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                  />\n                </div>\n              )}\n          </div>\n          <div className=\"bottom-div\">\n            {contents.zones[1] &&\n              contents.zones[1].content[current1Index] &&\n              contents.zones[1].content[current1Index].type === \"image\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <img\n                    className=\"webplayer-preview-img\"\n                    style={{\n                      objectFit: `${\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                      }`,\n                    }}\n                    src={`http://144.126.143.140:5000/${contents.zones[1].content[currentIndex].url}`}\n                    alt=\"media-img\"\n                  />\n                </div>\n              )}\n            {contents.zones[1] &&\n              contents.zones[1].content[current1Index] &&\n              contents.zones[1].content[current1Index].type === \"video\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <WebVideoPlayer\n                    src={`http://144.126.143.140:5000/${contents.zones[1].content[currentIndex].url}`}\n                  ></WebVideoPlayer>\n                </div>\n              )}\n            {contents.zones[1] &&\n              contents.zones[1].content[current1Index] &&\n              contents.zones[1].content[current1Index].type === \"url-apps\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <Iframe\n                    url={`${contents.zones[1].content[currentIndex].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                    // id=\"\"\n                    // className=\"\"\n                    display=\"block\"\n                    position=\"relative\"\n                  />\n                </div>\n              )}\n            {contents.zones[1] &&\n              contents.zones[1].content[current1Index] &&\n              contents.zones[1].content[current1Index].type ===\n                \"youtube-apps\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <ReactPlayer\n                    url={`${contents.zones[1].content[currentIndex].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                  />\n                </div>\n              )}\n          </div>\n        </div>\n      ) : contents.zones.length == 3 ? (\n        <div\n          style={{ height: \"100vh\" }}\n          // className=\"webplayer-composition-full-screen\"\n        >\n          <div className=\"third-compoition-container\">\n            <div\n              //  style={{ width: \"50%\", height: \"70%\", display: \"inline-block\" }}\n              className=\"third-composition-top-div\"\n            >\n              {contents.zones[0] &&\n                contents.zones[0].content[currentIndex] &&\n                contents.zones[0].content[currentIndex].type === \"image\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <img\n                      className=\"webplayer-preview-img\"\n                      style={{\n                        objectFit: `${\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                        }`,\n                      }}\n                      src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                      alt=\"media-img\"\n                    />\n                  </div>\n                )}\n              {contents.zones[0] &&\n                contents.zones[0].content[currentIndex] &&\n                contents.zones[0].content[currentIndex].type === \"video\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                  >\n                    <WebVideoPlayer\n                      src={`http://144.126.143.140:5000/${contents.zones[0].content[currentIndex].url}`}\n                    ></WebVideoPlayer>\n                  </div>\n                )}\n              {contents.zones[0] &&\n                contents.zones[0].content[currentIndex] &&\n                contents.zones[0].content[currentIndex].type === \"url-apps\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <Iframe\n                      url={`${contents.zones[0].content[currentIndex].url}`}\n                      width=\"100%\"\n                      height=\"100%\"\n                      // id=\"\"\n                      // className=\"\"\n                      display=\"block\"\n                      position=\"relative\"\n                    />\n                  </div>\n                )}\n              {contents.zones[0] &&\n                contents.zones[0].content[currentIndex] &&\n                contents.zones[0].content[currentIndex].type ===\n                  \"youtube-apps\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                  >\n                    <ReactPlayer\n                      url={`${contents.zones[0].content[currentIndex].url}`}\n                      width=\"100%\"\n                      height=\"100%\"\n                    />\n                  </div>\n                )}\n            </div>\n            <div\n              // style={{ width: \"50%\", height: \"70%\", display: \"inline-block\" }}\n              className=\"third-composition-second-div\"\n            >\n              {contents.zones[1] &&\n                contents.zones[1].content[current1Index] &&\n                contents.zones[1].content[current1Index].type === \"image\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <img\n                      className=\"webplayer-preview-img\"\n                      style={{\n                        objectFit: `${\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                        }`,\n                      }}\n                      src={`http://144.126.143.140:5000/${contents.zones[1].content[current1Index].url}`}\n                      alt=\"media-img\"\n                    />\n                  </div>\n                )}\n              {contents.zones[1] &&\n                contents.zones[1].content[current1Index] &&\n                contents.zones[1].content[current1Index].type === \"video\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                  >\n                    <WebVideoPlayer\n                      src={`http://144.126.143.140:5000/${contents.zones[1].content[current1Index].url}`}\n                    ></WebVideoPlayer>\n                  </div>\n                )}\n              {contents.zones[1] &&\n                contents.zones[1].content[current1Index] &&\n                contents.zones[1].content[current1Index].type ===\n                  \"url-apps\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <Iframe\n                      url={`${contents.zones[1].content[current1Index].url}`}\n                      width=\"100%\"\n                      height=\"100%\"\n                      // id=\"\"\n                      // className=\"\"\n                      display=\"block\"\n                      position=\"relative\"\n                    />\n                  </div>\n                )}\n              {contents.zones[1] &&\n                contents.zones[1].content[current1Index] &&\n                contents.zones[1].content[current1Index].type ===\n                  \"youtube-apps\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                  >\n                    <ReactPlayer\n                      url={`${contents.zones[1].content[current1Index].url}`}\n                      width=\"100%\"\n                      height=\"100%\"\n                    />\n                  </div>\n                )}\n            </div>\n          </div>\n\n          <div\n            // style={{ width: \"100%\", height: \"30%\", minHeight: \"18%\" }}\n            className=\"third-composition-third-div\"\n          >\n            {contents.zones[2] &&\n              contents.zones[2].content[current2Index] &&\n              contents.zones[2].content[current2Index].type === \"image\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <img\n                    className=\"webplayer-preview-img\"\n                    style={{\n                      objectFit: `${\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                      }`,\n                    }}\n                    src={`http://144.126.143.140:5000/${contents.zones[2].content[current2Index].url}`}\n                    alt=\"media-img\"\n                  />\n                </div>\n              )}\n            {contents.zones[2] &&\n              contents.zones[2].content[current2Index] &&\n              contents.zones[2].content[current2Index].type === \"video\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <WebVideoPlayer\n                    src={`http://144.126.143.140:5000/${contents.zones[2].content[current2Index].url}`}\n                  ></WebVideoPlayer>\n                </div>\n              )}\n            {contents.zones[2] &&\n              contents.zones[2].content[current2Index] &&\n              contents.zones[2].content[current2Index].type === \"url-apps\" && (\n                <div className=\"basic-list-group image-preview-container media-content\">\n                  <Iframe\n                    url={`${contents.zones[2].content[current2Index].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                    // id=\"\"\n                    // className=\"\"\n                    display=\"block\"\n                    position=\"relative\"\n                  />\n                </div>\n              )}\n            {contents.zones[2] &&\n              contents.zones[2].content[current2Index] &&\n              contents.zones[2].content[current2Index].type ===\n                \"youtube-apps\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <ReactPlayer\n                    url={`${contents.zones[2].content[current2Index].url}`}\n                    width=\"100%\"\n                    height=\"100%\"\n                  />\n                </div>\n              )}\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default CompositionPlayer;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/layouts/viewDetails.jsx",["736"],"import { Button, Modal, Row, Col, Table } from \"react-bootstrap\";\nimport cancelIcon from \"../../../img/cancel-icon.png\";\n\nimport Rectangle from \"../../../img/Rectangle.png\";\n\nimport \"../../components/Table.css\";\nimport layoutSelected from \"../../../img/layout-select-img.png\";\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport { BASE_URL } from \"../../../utils/api\";\nimport { Link } from \"react-router-dom\";\nconst ViewDetails = ({ setViewDetailsModal, composition }) => {\n\n  return (\n    <>\n      <Modal\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium`}\n        show={true}\n        size=\"md\"\n      >\n        <Modal.Header>\n          <Modal.Title>Composition Details</Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setViewDetailsModal(false)}\n          >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n          </Button>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div>\n            <div className=\" d-flex align-items-center justify-content-center flex-column mx-auto\">\n              <img className=\"\" src={Rectangle} alt=\"upload-img\" />\n            </div>\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\n              Duration : {composition.duration} sec\n            </div>\n            <div className=\"d-flex align-items-center justify-content-center flex-column mx-auto\">\n              {composition.layout.zones.map((zone) => {\n                return (\n                  <span variant=\"\" type=\"button\" className=\" zoneName\">\n                    {zone.name}\n                  </span>\n                );\n              })}\n            </div>\n            <hr className=\"new1\" />\n            <Table responsive className=\"custom-table mt-3\">\n              <tbody>\n              {composition.zones[0].content.map((content, index) => {\n                return (\n                    <tr>\n                    <td>{index + 1}.</td>\n                    <td>\n                    <span className=\"td-content d-flex name-td-content\">\n                      <span className={`name-img mr-2  ${content.type === \"video\" && \"videotableName\"}`}>\n                      {content.type === \"image\" && <img\n                          className=\"media-img img-fluid\"\n                          src={`${BASE_URL}${content.url}`}\n                          alt=\"media-img\"\n                        />}\n                         {content.type === \"video\" && content?.duration.toFixed(0)/60}\n                      </span>\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\n                        <strong>{content.url.split(\"/\")[content.url.split(\"/\").length -1]}</strong>\n                        {/* <span>{content.createdBy}</span> */}\n                      </span>\n                    </span>\n                  </td>\n\n                  <td>\n                    <span className=\"my-phone-tag  ml-1\">{(content?.duration).toFixed(0)} Sec</span>\n                  </td>\n                </tr>\n                )\n              })}\n\n              </tbody>\n            </Table>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Row className=\"w-100 m-0\">\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n              <Button\n                className=\"cancel-btn w-100\"\n                variant=\"outline-light\"\n                onClick={() => {\n                  setViewDetailsModal(false);\n                }}\n              >\n                Cancel\n              </Button>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Link to={`/composition/edit?id=${composition._id}`}>\n            <Button\n                variant=\"\"\n                type=\"button\"\n                className=\"btn btn-primary btn-block primary-btn\"\n              >\n                Edit Details\n              </Button>\n            </Link>\n              \n            </Col>\n          </Row>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ViewDetails;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Chat.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Notes.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/duplicateComposition.jsx",["737","738"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport { useState } from \"react\";\n\nconst DuplicateComposition = ({\n  setDuplicateModal,\n  createComposition,\n}) => {\n  const [name, setName] = useState(\"\");\n  return (\n    \n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\n      show={true}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title>Duplicate</Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setDuplicateModal(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"add-screen-paragraph\">\n          <p>The Composition will be copied with all it's proporties. Just change the contents and play.</p>\n        </div>\n\n        <Row>\n        <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\" style={{color: \"#1A1A1A\", fontWeight:\"700\"}}>\n            New Composition Name\n            </div>\n          </Col>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n              <input\n                value={name}\n                onChange={(event) => {\n                  setName(event.target.value);\n                }}\n                type=\"text\"\n                className=\"form-control input-default form-field\"\n                placeholder=\"Enter Name for new copy\"\n              />\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button\n              className=\"cancel-btn w-100\"\n              variant=\"outline-light\"\n              onClick={() => setDuplicateModal(false)}\n            >\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              onClick={() =>{\n                if(name.length){\n                  createComposition(name)\n                }\n              }}\n            >\n              Confirm\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default DuplicateComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/layouts/nav/Logout.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/Alerts.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/CompolistionListModel.jsx",["739","740","741","742","743"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport { useEffect, useState } from \"react\";\nimport {setDefaultComposition, getAllComposition } from \"../../utils/api\";\nimport TableLoader from \"../components/TableLoader\";\nimport '../components/Table.css';\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../utils/UtilsService\";\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\n\nconst PublishMediaModal = ({ setShowPublishPopUp, selected, type }) => {\n  const [compositionList, setAllComposition] = useState(\"\");\n  const [name, setName] = useState(\"\")\n  const [checkedItems, setCheckedItems] = useState({});\n  const [checkedValues, setCheckedValues] = useState(null);\n  const [published, setPublished] = useState(false);\n  const [loading, setLoading] = useState(false);\n  // use effect\n  useEffect(() => {\n    getAllCompositionList();\n  }, []);\n\n  const getAllCompositionList = async () => {\n    setLoading(true);\n    const list = await getAllComposition();\n    setLoading(false);\n    setAllComposition(list);\n  };\n\n  const handleCheckboxChange = (event) => {\n    console.log(event.target)\n    // const newCheckedItems = {\n    //   ...checkedItems,\n    //   [event.target.name]: event.target.checked,\n    // };\n    // const selectedScreens = [];\n    // for (const key in newCheckedItems) {\n    //   if (newCheckedItems[key] === true) {\n    //     selectedScreens.push(key);\n    //   }\n    // }\n    setCheckedValues(event.target.name);\n    //setCheckedItems(newCheckedItems);\n  };\n\n  const handleSelectAllChange = (event) => {\n    const newCheckedItems = {};\n    compositionList.forEach((item) => {\n      newCheckedItems[item._id] = event.target.checked;\n    });\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSubmit = async () => {\n    const screens = [];\n    screens[0] = selected;\n    await setDefaultComposition({\n        screens,\n        compositionId: checkedValues\n      });\n\n    setPublished(true);\n    setShowPublishPopUp(false);\n  };\n  return (\n      <>\n      <Modal\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\n          published ? \"custom-modal-medium\" : \"custom-modal-large\"\n        }`}\n        show={true}\n        size=\"md\"\n      >\n        <Modal.Header>\n          <Modal.Title>{type===\"media\" ? \"Publish Media\" : \"Assign Quickplay\"}</Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowPublishPopUp(false)}\n          >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n          </Button>\n        </Modal.Header>\n\n        {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\n        {!published && (\n          <Modal.Body>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"width50\">\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"custom-control-input\"\n                        id=\"checkbox1_exam_all\"\n                        disabled\n                      // onChange={handleSelectAllChange}\n                        required=\"\"\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"checkbox1_exam_all\"\n                      ></label>\n                    </div>\n                  </th>\n                  <th>Name</th>\n                  <th>Date Added</th>\n                  <th>Duration</th>\n                  <th>Associated Schedule</th>\n                </tr>\n              </thead>\n              {loading  ? (\n            <TableLoader colSpan={5}/>\n          ) : (\n              <tbody>\n                {compositionList !== \"\" &&\n                  compositionList.map((composition) => {\n                    return (\n                      <tr>\n                        <td>\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id={composition._id}\n                              name={composition._id}\n                              checked={checkedValues === composition._id}\n                              onChange={handleCheckboxChange}\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor={composition._id}\n                            ></label>\n                          </div>\n                        </td>\n                        <td>\n                          <span className=\"td-content d-flex name-td-content\">\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\n                              <strong>{composition.name}</strong>\n                              <span>{composition.createdBy}</span>\n                            </span>\n                          </span>\n                        </td>\n\n                        <td>\n                          <span className=\"td-content\">\n                            <strong>\n                              {humanReadableFormattedDateString(\n                                composition.createdAt\n                              )}\n                            </strong>\n                            <span>{getDatetimeIn12Hours(composition.createdAt)}</span>\n                          </span>\n                        </td>\n                        <td> {composition.duration} Sec</td>\n                        <td>No Schedule</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n              )}\n            </Table>\n          </Modal.Body>\n        )}\n\n        <Modal.Footer>\n          {!published && (\n            <Row className=\"w-100 m-0\">\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n                <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n                  Cancel\n                </Button>\n              </Col>\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n                <Button\n                  disabled={checkedValues === null}\n                  variant=\"\"\n                  type=\"button\"\n                  className=\"btn btn-primary btn-block primary-btn\"\n                  onClick={handleSubmit}\n                >\n                  Publish\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default PublishMediaModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/SelectScreenModal.jsx",["744","745","746","747"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport { useEffect, useState } from \"react\";\nimport { getAllScreens, assignScreenProfile } from \"../../utils/api\";\nimport TableLoader from \"../components/TableLoader\";\nimport '../components/Table.css';\nimport { toast } from \"react-toastify\";\n\nconst SelectScreenModal = ({ setShowPublishPopUp, showPublishPopUp, selected, setIsRefresh,selectedScreen, setSelectedScreen}) => {\n  const [allScreens, setAllScreens] = useState(\"\");\n  const [name, setName] = useState(\"\")\n  const [checkedItems, setCheckedItems] = useState({});\n  const [checkedValues, setCheckedValues] = useState(selectedScreen);\n  const [published, setPublished] = useState(false);\n  const [loading, setLoading] = useState(false);\n  // use effect\n  useEffect(() => {\n    if(selectedScreen){\n        setCheckedValues(selectedScreen);\n        const newCheckedItems = {};\n        selectedScreen.forEach((item) => {\n            newCheckedItems[item] = true;\n        });\n        setCheckedItems(newCheckedItems);\n    }\n    callAllScreenApi();\n  }, [selectedScreen]);\n\n  const callAllScreenApi = async () => {\n    setLoading(true);\n    const list = await getAllScreens();\n    setLoading(false);\n    setAllScreens(list);\n  };\n\n  const handleCheckboxChange = (event) => {\n    // const newA = checkedValues;\n    // checkedValues.filter((i) => {\n    //     return i==event.target.name\n    // })\n    const newCheckedItems = {\n      ...checkedItems,\n      [event.target.name]: event.target.checked,\n    };\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSelectAllChange = (event) => {\n    const newCheckedItems = {};\n    allScreens.forEach((item) => {\n      newCheckedItems[item._id] = event.target.checked;\n    });\n    const selectedScreens = [];\n    for (const key in newCheckedItems) {\n      if (newCheckedItems[key] === true) {\n        selectedScreens.push(key);\n      }\n    }\n    setCheckedValues(selectedScreens);\n    setCheckedItems(newCheckedItems);\n  };\n\n  const handleSubmit = async () => {\n    await assignScreenProfile({\n        profileId:selected,\n        screens: checkedValues,\n    })\n    .then((response) => {\n        //setError(null);\n        toast.success(\"Screen has been assigned to Profile successfully !!!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n        });\n        setIsRefresh(true);\n        setShowPublishPopUp(false);\n    })\n    .catch(function (error) {\n        //setError(error.response.data.message);\n    });\n  };\n  return (\n<>\n    \n    <Modal\n        className={`fade bd-example-modal-lg mt-4 custom-modal ${\n            published ? \"custom-modal-medium\" : \"custom-modal-large\"\n        }`}\n        show={showPublishPopUp}\n        size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title>{\"Assign Screen\"}</Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowPublishPopUp(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n\n      {published && <Modal.Body><div style={{display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}><h3>Media Published</h3></div></Modal.Body>}\n      {!published && (\n        <Modal.Body>\n          <div className=\"mb-3 mr-3\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      id=\"quickplayname\"\n                      onChange={(e) => {setName(e.target.value)}}\n                      required=\"true\"\n                      placeholder=\"Name...\"\n                    />\n                  </div>\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"width50\">\n                  <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id=\"checkbox1_exam_all\"\n                      onChange={handleSelectAllChange}\n                      required=\"\"\n                    />\n                    <label\n                      className=\"custom-control-label\"\n                      htmlFor=\"checkbox1_exam_all\"\n                    ></label>\n                  </div>\n                </th>\n                <th>Screen</th>\n                <th>Last Seen</th>\n                <th>Default Composition</th>\n                <th>Current Schedule</th>\n              </tr>\n            </thead>\n            {loading  ? (\n          <TableLoader colSpan={5}/>\n        ) : (\n            <tbody>\n              {allScreens !== \"\" &&\n                allScreens.map((screen) => {\n                  return (\n                    <tr>\n                      <td>\n                        <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            id={screen._id}\n                            name={screen._id}\n                            checked={checkedItems[screen._id]}\n                            onChange={handleCheckboxChange}\n                          />\n                          <label\n                            className=\"custom-control-label\"\n                            htmlFor={screen._id}\n                          ></label>\n                        </div>\n                      </td>\n\n                      <td>\n                        <span className=\"td-content\">\n                          <strong>{screen.name}</strong>\n                          <span>{screen.screenLocation}</span>\n                        </span>\n                      </td>\n                      <td>\n                        <span className=\"d-flex align-items-center\">\n                          <span className=\"status status-green\"></span>\n                          <span className=\"td-content\">\n                            <strong>{screen.name}</strong>\n                            <span>{screen.screenLocation}</span>\n                          </span>\n                        </span>\n                      </td>\n                      <td>Default Compo. </td>\n                      <td>No Schedule</td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n            )}\n          </Table>\n        </Modal.Body>\n      )}\n\n      <Modal.Footer>\n        {!published && (\n          <Row className=\"w-100 m-0\">\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n                Cancel\n              </Button>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n              <Button\n                disabled={checkedValues.length == 0}\n                variant=\"\"\n                type=\"button\"\n                className=\"btn btn-primary btn-block primary-btn\"\n                onClick={handleSubmit}\n              >\n                Publish\n              </Button>\n            </Col>\n          </Row>\n        )}\n      </Modal.Footer>\n    </Modal>\n      \n\n    </>\n  );\n};\n\nexport default SelectScreenModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddNewTagModal.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DefaultCompositionModal.jsx",["748","749","750","751","752","753"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\nimport { Table } from \"react-bootstrap\";\nimport downArrow from \"../../img/down-arrow.png\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport { assignDefaultComposition, BASE_URL } from \"../../utils/api\";\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../utils/UtilsService\";\nimport AddNewTagModal from \"./AddNewTagModal\";\nconst DefaultCompositionModal = ({\n  close,\n  show,\n  compositionList,\n  getVendorProfile,\n}) => {\n  const [showNewTagModal, setNewTagModal] = useState(false);\n  const [selected, setSelected] = useState(\"\");\n  const [compositionId, setCompositionId] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n\n  const handleSubmit = async () => {\n    console.log(compositionId, duration, \"iiiiiii\");\n    await assignDefaultComposition({\n      compositionId: compositionId,\n\n      duration: duration,\n    }).then((res) => {\n      console.log(res, \"assignDefaultComposition\");\n      if (res.data.statusCode === 200) {\n        getVendorProfile();\n        close();\n      }\n    });\n\n    // setShowPublishPopUp(false);\n  };\n  return (\n    <>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\n        show={show}\n        size=\"xl\"\n      >\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\n          <div>\n            <Button variant=\"\" className=\"\" onClick={() => close(false)}>\n              <img\n                className=\"cancel-icon\"\n                src={cancelIcon}\n                alt=\"cancel-icon\"\n                height=\"25px\"\n                width=\"25px\"\n              />\n            </Button>\n          </div>\n\n          <Button\n            variant=\"\"\n            type=\"button\"\n            className=\"btn btn-primary btn-block primary-btn\"\n            style={{ width: \"fit-content\" }}\n            //   onClick={() => setNewTagModal(false)}\n            disabled={compositionId.length === 0}\n            onClick={handleSubmit}\n          >\n            Assign\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          <Table\n            responsive\n            className=\"custom-table screen-table\"\n            style={{ marginBottom: \"36px\" }}\n          >\n            <thead>\n              <tr>\n                <th>Composition</th>\n                <th>Date Added</th>\n                <th>Duration</th>\n                <th>Associated Schedule</th>\n                <th>Tags</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {compositionList &&\n                compositionList.map((composition) => {\n                  const content = composition.zones[0].content[0];\n                  return (\n                    <tr\n                      key={composition._id}\n                      id={composition._id}\n                      onClick={() => {\n                        setCompositionId(composition._id);\n                        setDuration(composition.duration);\n                      }}\n                      style={{\n                        cursor: \"pointer\",\n                        background:\n                          composition._id === compositionId ? \"#f5f5f5\" : \"\",\n                      }}\n                    >\n                      <td>\n                        <span className=\"td-content d-flex name-td-content\">\n                          <span\n                            className={`name-img mr-2  ${\n                              content.type === \"video\" && \"videotableName\"\n                            }`}\n                          >\n                            {content.type === \"image\" && (\n                              <img\n                                className=\"media-img img-fluid\"\n                                src={`${BASE_URL}${content.url}`}\n                                alt=\"media-img\"\n                              />\n                            )}\n                            {content.type === \"video\" &&\n                              content.duration.toFixed(0) / 60}\n                          </span>\n                          <span className=\"name-content d-flex flex-column flex-grow-1\">\n                            <strong>{composition.name}</strong>\n                            <span>{composition.createdBy}</span>\n                          </span>\n                        </span>\n                      </td>\n                      <td>\n                        <span className=\"td-content\">\n                          <strong>\n                            {humanReadableFormattedDateString(\n                              composition.createdAt\n                            )}\n                          </strong>\n                          <span>\n                            {getDatetimeIn12Hours(composition.createdAt)}\n                          </span>\n                        </span>\n                      </td>\n                      <td> {composition.duration} Sec</td>\n                      <td>No Schedule</td>\n                      <td style={{ width: \"180px\" }}>\n                        <span className=\"tag-container\">\n                          {composition.tags &&\n                            composition.tags.map((tag) => {\n                              return (\n                                <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\n                                  {tag}\n                                </span>\n                              );\n                            })}\n                        </span>\n\n                        <span\n                          className=\"down-arrow\"\n                          onClick={() => {\n                            setSelected(composition);\n                            setNewTagModal(true);\n                          }}\n                        >\n                          <img\n                            className=\"down-arrow-img img-fluid\"\n                            src={downArrow}\n                            alt=\"arrow\"\n                          />\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </Table>\n        </Modal.Body>\n      </Modal>\n      {showNewTagModal && (\n        <AddNewTagModal\n          setNewTagModal={setNewTagModal}\n          allScreens={compositionList}\n          selected={selected}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DefaultCompositionModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/web-player/WebVideoPlayer.jsx",["754","755"],"import React, { useEffect, useRef } from 'react';\nimport videojs from 'video.js';\n\nimport 'video.js/dist/video-js.css';\nconst WebVideoPlayer = (props) => {\n  console.log(props, \"WebVideoPlayer.jsx props\")\n  const videoRef = useRef(null);\n  const playerRef = useRef(null);\n\n  useEffect(() => {\n    videoRef.current?.load();\n    // playerRef.current = videojs(videoRef.current, {\n    //   autoplay: true,\n    //   controls: false,\n    //   muted:true,\n    //   loop:true,\n    //   src: props.src\n    // });\n    // console.log(\"test\",playerRef.current, videoRef.current)\n    return () => {\n      videoRef.current?.load();\n      if (playerRef.current) {\n        playerRef.current.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, [props.src]);\n\n  useEffect(() => {\n    if (playerRef.current) {\n      playerRef.current.src({ src: props.src });\n    }\n  }, [props.src]);\n\n  // useEffect(() => {\n  //   if (playerRef.current && playerRef.current.tech()) {\n  //     playerRef.current.tech().src({ src: props.src });\n  //     playerRef.current.load();\n  //   }\n  // }, [props.src]);\n\n\n\n\n  // const videoRef = useRef(null);\n  // const playerRef = useRef(null);\n\n  // useEffect(() => {\n  //   // Create the Video.js player instance\n  //   playerRef.current = videojs(videoRef.current, {\n  //     autoplay: true,\n  //     controls: false,\n  //     loop: true,\n  //     muted: true,\n  //     sources: [{\n  //       src: props.src,\n        \n  //     }],\n  //   });\n\n  //   // Cleanup when component unmounts\n  //   return () => {\n  //     if (playerRef.current) {\n  //       playerRef.current.dispose();\n  //       playerRef.current = null;\n  //     }\n  //   };\n  // }, []);\n\n  // const videoRef = useRef(null);\n  // useEffect(() => {\n  //   const video = videoRef.current;\n\n  //   const handleEnded = () => {\n  //     video.currentTime = 0; // Restart the video from the beginning\n  //     video.play(); // Start playing the video again\n  //   };\n\n  //   video.addEventListener('ended', handleEnded);\n\n  //   return () => {\n  //     video.removeEventListener('ended', handleEnded);\n  //   };\n  // }, []);\n  return (\n  //<> <video ref={videoRef} className=\"video-js\" /></>\n  // <> <video ref={videoRef}   className=\"video-js\" </video></>\n\n    <video ref={videoRef} className=\"video-js\" autoPlay muted loop>\n      <source src={props.src} type=\"video/mp4\" />\n    </video>\n  );\n};\n\nexport default WebVideoPlayer;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DragMove.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AddMedia.jsx",["756"],"import { Button, Modal, Row, Col, Badge, Table } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport { useEffect, useState } from \"react\";\nimport {getAllMedia, BASE_URL } from \"../../utils/api\";\nimport TableLoader from \"../components/TableLoader\";\nimport downArrow from \"../../img/down-arrow.png\";\nimport '../components/Table.css';\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../utils/UtilsService\";\n// import tagCloseIcon from \"../../img/tag-close-icon.png\";\n\nconst PublishMediaModal = ({openMedia, setOpenMedia, selectedImage, setSelectedImage, setSelectedMedia, setHeight, setWidth}) => {\n  const [allMedia, setAllMedia] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [sMedia, setSMedia] = useState(null);\n  // use effect\n  useEffect(() => {\n    getAllMediaList();\n  }, []);\n\n  const getAllMediaList = async () => {\n    setLoading(true);\n    const list = await getAllMedia();\n    console.log(\"list\",list)\n    setLoading(false);\n    setAllMedia(list);\n  };\n\n  const handleCheckboxChange = (event, media) => {\n    setSelectedImage(event.target.name);\n    setSMedia(media);\n\n  };\n\n\n  const handleSubmit = async () => {\n    console.log(sMedia)\n    setSelectedMedia(sMedia)\n    const prp = JSON.parse(sMedia.properties)\n    setOpenMedia(false);\n    setHeight(prp.height);\n    setWidth(prp.width);\n  };\n\n    const parseMeta = (media) => {\n        const meta = JSON.parse(media.properties);\n        return (\n        <span className=\"td-content\">\n            {media?.type === \"image\" && (\n            <strong>\n                {meta.height} x {meta.width}\n            </strong>\n            )}\n            {media?.type === \"video\" && meta?.length && (\n            <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\n            )}\n            {meta?.size && <span>{meta.size} MB</span>}\n        </span>\n        );\n    };\n\n    const videoMetaDuration = (media) => {\n    const properties = JSON.parse(media?.properties);\n    if (properties && properties.length) {\n        return (properties.length.toFixed(0) / 60).toFixed(0);\n    }\n    return null;\n    };\n\n  return (\n      <>\n      <Modal\n        className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large`}\n        show={openMedia}\n        size=\"lg\"\n      >\n        <Modal.Header>\n          <Modal.Title>Add Media</Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setOpenMedia(false)}\n          >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n          </Button>\n        </Modal.Header>\n\n        <Modal.Body>\n            <Table responsive>\n              <thead>\n                <tr>\n                  <th className=\"width50\">\n                    <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"custom-control-input\"\n                        id=\"checkbox1_exam_all\"\n                        disabled\n                        required=\"\"\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"checkbox1_exam_all\"\n                      ></label>\n                    </div>\n                  </th>\n                  <th>Name</th>\n                  <th>Type</th>\n                  <th>Uploaded Date</th>\n                  <th>Properties</th>\n                  <th>Tags</th>\n                </tr>\n              </thead>\n              {loading  ? (\n            <TableLoader colSpan={5}/>\n          ) : (\n              <tbody>\n                {allMedia  && allMedia.length > 0 && \n                  allMedia.map((media) => {\n                    return (media.type === 'image' ?\n                    <tr>\n                        <td>\n                          <div className=\"custom-control custom-checkbox checkbox-success check-lg mr-3\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id={media._id}\n                              name={media._id}\n                              checked={selectedImage === media._id}\n                              onChange={(e) => {handleCheckboxChange(e, media)}}\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor={media._id}\n                            ></label>\n                          </div>\n                        </td>\n                        <td>\n                         <span className=\"td-content d-flex name-td-content\">\n                            <span\n                                className={`name-img mr-2  ${\n                                media?.type === \"video\" && \"videotableName\"\n                                }`}\n                            >\n                                {media?.type === \"image\" && (\n                                <div\n                                    onClick={() => {\n                                        //showPreview(media.title, media.type);\n                                    }}\n                                    className=\"media-list-img-zoom\"\n                                >\n                                    <span className=\"media-list-img-zoom-plus\">+</span>\n                                    <img\n                                    className=\"media-img img-fluid\"\n                                    src={`${BASE_URL}${media?.title}`}\n                                    alt=\"media-img\"\n                                    />\n                                </div>\n                                )}\n                                {media?.type === \"video\" && (\n                                <button\n                                    onClick={() => {\n                                        //showPreview(media.title, media.type);\n                                    }}\n                                >\n                                    {videoMetaDuration(media)}\n                                </button>\n                                )}\n                            </span>\n                            <span className=\"name-content d-flex flex-column flex-grow-1\">\n                                <strong>\n                                {\n                                    media.title.split(\"/\")[\n                                    media.title.split(\"/\").length - 1\n                                    ]\n                                }\n                                </strong>\n                                <span>{media.createdBy.name}</span>\n                            </span>\n                        </span>\n                        </td>\n                        <td>\n                            {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\n                        </td>\n                        <td>\n                            <span className=\"td-content\">\n                            <strong>\n                                {humanReadableFormattedDateString(media.createdAt)}\n                            </strong>\n                            <span>{getDatetimeIn12Hours(media.createdAt)}</span>\n                            </span>\n                        </td>\n                        <td>{parseMeta(media)}</td>\n                        <td>\n                            {media.tags.map((tag) => {\n                            return (\n                                <span className=\"my-phone-tag text-truncate ml-1\">\n                                {tag}\n                                </span>\n                            );\n                            })}\n                            <span\n                            className=\"down-arrow\"\n                            onClick={() => {\n                                //setSelectedMedia(media);\n                                //setNewTagModal(true);\n                            }}\n                            >\n                            <img\n                                className=\"down-arrow-img img-fluid\"\n                                src={downArrow}\n                                alt=\"arrow\"\n                            />\n                            </span>\n                        </td>\n                      </tr>\n                    : ''\n                      \n                    )\n                  })}\n              </tbody>\n              )}\n            </Table>\n          </Modal.Body>\n\n        <Modal.Footer>\n            <Row className=\"w-100 m-0\">\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n                <Button className=\"cancel-btn w-100\"\n                    onClick={(e) => setOpenMedia(false)}\n                 variant=\"outline-light\">\n                  Cancel\n                </Button>\n              </Col>\n              <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n                <Button\n                  disabled={selectedImage === null}\n                  variant=\"\"\n                  type=\"button\"\n                  className=\"btn btn-primary btn-block primary-btn\"\n                  onClick={handleSubmit}\n                >\n                  Publish\n                </Button>\n              </Col>\n            </Row>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default PublishMediaModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/screen/tagInputField.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/chatBox/MsgBox.js",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/reports/Uptime.jsx",["757","758"],"import React, { useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport Datatable from \"react-data-table-component\";\n\nexport default function Uptime({reportData}) {\n\n    const getUptimeData = (data) => {\n        const sumOfTime = data?.uptimeReport?.reduce(\n            (total, obj) => total + obj?.time,\n            0\n          );\n\n          // Convert the sum to hours\n          const sumInHours = sumOfTime;\n          const hours = Math.floor(sumOfTime / 60);\n          const minutes = sumOfTime % 60;\n\n          const formattedSum = `${hours} hr ${\n            minutes < 10 ? \"0\" : \"\"\n          }${Math.floor(minutes)} min`;\n\n          const average = sumInHours / data?.uptimeReport?.length;\n          const aveHours = Math.floor(average / 60);\n          const aveMinutes = average % 60;\n\n          const aveFormattedSum = `${aveHours} hr ${\n            aveMinutes < 10 ? \"0\" : \"\"\n          }${Math.floor(aveMinutes)} min`;\n\n          return [formattedSum, aveFormattedSum];\n    }\n\n    const columns = [\n        {\n            name : \"Screen\",\n            selector : (row) => row?.name\n        },\n        {\n            name : \"Total Uptime\",\n            selector : (row) => getUptimeData(row)[0]\n        },\n        {\n            name : \"Total Avg Time\",\n            selector : (row) => getUptimeData(row)[1]\n        },\n    ];\n\n\n  return (\n    <>\n      {/* <Table\n        responsive\n        className=\"custom-table screen-table\"\n        style={{ height: \"100%\" }}\n        id=\"external-events\"\n      >\n        <thead>\n          <tr>\n            <th>Screen</th>\n            <th>Total Uptime</th>\n            <th>Daily Average Uptime</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {reportData.length > 0 &&\n            reportData.map((data) => {\n              \n              return (\n                <tr key={data?._id}>\n                  <td>{data?.name}</td>\n                  <td>{formattedSum} </td>\n                  <td>{aveFormattedSum} </td>\n                </tr>\n              );\n            })}\n        </tbody>\n        {reportData?.length === 0 && <h3 className=\"mt-5\">No Report Found</h3>}\n      </Table> */}\n      <Datatable columns={columns} data={reportData} pagination />\n    </>\n  );\n}\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/generateReportModal.jsx",["759","760","761","762","763","764","765","766","767","768"],"import { Button, Modal } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\n\nimport Select from \"react-select\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\n\nconst GenerateReportModal = ({\n  close,\n  show,\n  reportType,\n  type,\n  setFilter,\n  filter,\n}) => {\n  const history = useHistory();\n  const monthOptions = [\n    { value: \"01\", label: \"January\" },\n    { value: \"02\", label: \"February\" },\n    { value: \"03\", label: \"March\" },\n    { value: \"04\", label: \"April\" },\n    { value: \"05\", label: \"May\" },\n    { value: \"06\", label: \"June\" },\n    { value: \"07\", label: \"July\" },\n    { value: \"08\", label: \"August\" },\n    { value: \"09\", label: \"September\" },\n    { value: \"10\", label: \"October\" },\n    { value: \"11\", label: \"November\" },\n    { value: \"12\", label: \"December\" },\n  ];\n  const [selectedMonth, setSelectedMonth] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [filterType, setFilterType] = useState(\"daily\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  const yearOptions = [];\n  const currentYear = new Date().getFullYear();\n\n  for (let i = currentYear - 5; i <= currentYear; i++) {\n    yearOptions.push({ value: String(i), label: String(i) });\n  }\n\n  // Output the year options\n\n  const colourStyles = {\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n      // const color = chroma(data.color);\n      return {\n        ...styles,\n        backgroundColor: isFocused ? \"#ed9bc7\" : null,\n        color: \"#333333\",\n      };\n    },\n  };\n\n  useEffect(() => {\n    getCurrentDate();\n  }, []);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let sDate = startDate;\n    let eDate = endDate;\n    if (filterType == \"monthly\") {\n      sDate = `${selectedYear.value}-${selectedMonth.value}-01`;\n      eDate = `${selectedYear.value}-${selectedMonth.value}-31`;\n    }\n    setFilter({\n      startDate: sDate,\n      endDate: eDate,\n      filterType,\n      selectedMonth,\n      selectedYear,\n    });\n    close();\n  };\n\n  const getCurrentDate = () => {\n    let cDate = moment();\n    setSelectedMonth({\n      value: cDate.format(\"MM\"),\n      label: cDate.format(\"MMMM\"),\n    });\n    setSelectedYear({\n      value: cDate.format(\"YYYY\"),\n      label: cDate.format(\"YYYY\"),\n    });\n    setStartDate(cDate.format(\"YYYY-MM-DD\"));\n    setEndDate(cDate.format(\"YYYY-MM-DD\"));\n  };\n\n  return (\n    <>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\n        show={show}\n        size=\"md\"\n      >\n        <Modal.Header className=\"border-0 d-flex justify-content-between align-items-center\">\n          <div>\n            <Modal.Title className=\"mr-auto\">Report</Modal.Title>\n\n            <p>How would you like to generate your report?</p>\n          </div>\n\n          <Button variant=\"\" className=\"close\" onClick={() => close(false)}>\n            <img\n              className=\"cancel-icon\"\n              src={cancelIcon}\n              alt=\"cancel-icon\"\n              height=\"25px\"\n              width=\"25px\"\n            />\n          </Button>\n        </Modal.Header>\n        <Modal.Body style={{ paddingBottom: \"15px\" }}>\n          <form onSubmit={handleSubmit} className=\"row\">\n            <div className=\"form-group col-12 mb-0  url-app-form border-0\">\n              <div>\n                <div className=\"d-flex align-items-center mb-2\">\n                  <input\n                    type=\"radio\"\n                    //className=\"form-control \"\n                    checked={filterType == \"daily\"}\n                    onChange={(e) => setFilterType(\"daily\")}\n                  />\n                  <label className=\"mb-0 ml-3\">Daily</label>\n                </div>\n\n                <input\n                  type=\"date\"\n                  className=\"  form-control \"\n                  defaultValue={startDate}\n                  placeholder=\"App Name\"\n                  onChange={(e) => setStartDate(e.target.value)}\n                  required={filterType == \"daily\"}\n                  readOnly={filterType !== \"daily\"}\n                />\n              </div>\n\n              <div>\n                <>\n                  <div className=\"d-flex align-items-center mb-2 mt-3\">\n                    <input\n                      type=\"radio\"\n                      //className=\"form-control \"\n                      checked={filterType == \"monthly\"}\n                      onChange={(e) => setFilterType(\"monthly\")}\n                    />\n                    <label className=\"mb-0 ml-3\">Monthly</label>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-6\">\n                      <Select\n                        value={selectedMonth}\n                        onChange={setSelectedMonth}\n                        options={monthOptions}\n                        styles={colourStyles}\n                        placeholder=\"month\"\n                        className=\"app-option\"\n                        isDisabled={filterType !== \"monthly\"}\n                        required={filterType == \"monthly\"}\n                      />\n                    </div>\n                    <div className=\"col-6\">\n                      <Select\n                        value={selectedYear}\n                        onChange={setSelectedYear}\n                        options={yearOptions}\n                        styles={colourStyles}\n                        placeholder=\"year\"\n                        className=\"app-option\"\n                        isDisabled={filterType !== \"monthly\"}\n                        required={filterType == \"monthly\"}\n                      />\n                    </div>\n                  </div>\n                </>\n              </div>\n              <div>\n                <div className=\"d-flex align-items-center mb-2 mt-3\">\n                  <input\n                    type=\"radio\"\n                    //className=\"form-control \"\n                    checked={filterType == \"custom\"}\n                    onChange={(e) => setFilterType(\"custom\")}\n                  />\n                  <label className=\"mb-0 ml-3\">Custom</label>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <input\n                      type=\"date\"\n                      className=\"  form-control \"\n                      onChange={(e) => setStartDate(e.target.value)}\n                      readOnly={filterType !== \"custom\"}\n                      defaultValue={startDate}\n                      required={filterType == \"custom\"}\n                    />\n                  </div>\n                  <div className=\"col-6\">\n                    <input\n                      type=\"date\"\n                      className=\"form-control \"\n                      onChange={(e) => setEndDate(e.target.value)}\n                      readOnly={filterType !== \"custom\"}\n                      required={filterType == \"custom\"}\n                      defaultValue={endDate}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-100 mt-3\">\n              <Button\n                variant=\"\"\n                type=\"submit\"\n                className=\"btn btn-primary btn-block primary-btn\"\n                //   onClick={() => setNewTagModal(false)}\n              >\n                Continue\n              </Button>\n            </div>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default GenerateReportModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/BulletinBoardAppModal.jsx",["769","770","771","772"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport Switch from \"react-switch\";\nconst BulletinBoardAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"Light Yellow\", label: \"Light Yellow\" },\n    { value: \"Orange\", label: \"Orange\" },\n    { value: \"Sky  Blue\", label: \"Sky  Blue\" },\n  ];\n  const [checked, setChecked] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Bulletin Board App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <div className=\"row mt-3\">\n              <div className=\"col-6\">\n                <label className=\"\">Color Scheme</label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options}\n                  className=\"app-option\"\n                />\n              </div>\n              <div className=\"col-6\">\n                <label>Duration</label>\n                <input\n                  type=\"number\"\n                  className=\"  form-control \"\n                  placeholder=\"10\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-3\">\n              <div className=\"col-6\">\n                <div>\n                  <label className=\"\">Format</label>\n                </div>\n\n                <label className=\" mr-3\">Single</label>\n                <input type=\"checkbox\" className=\"   \" required />\n                <label className=\" mx-3\">Multi</label>\n                <input type=\"checkbox\" className=\"   \" required />\n              </div>\n              <div className=\"col-6 text-center\">\n                <label className=\"mb-0 \">Want to include images</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChange}\n                  checked={checked}\n                  className=\"react-switch mt-1\"\n                  required={true}\n                />\n              </div>\n            </div>\n            <label className=\"mt-3 pb-3\">Bulletin Board Content</label>\n            <div>\n              <span className=\"add-content-bulletinboard\"> + Add Content</span>\n            </div>\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 Bulletin-board-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default BulletinBoardAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/AirQualityAppModal.jsx",["773","774","775","776","777"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport Switch from \"react-switch\";\nconst AirQualityAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"us\", label: \"us\" },\n    { value: \"india\", label: \"India\" },\n  ];\n  const options1 = [\n    { value: \"Light Mode\", label: \"Light Mode\" },\n    { value: \"Dark Mode\", label: \"Dark Mode\" },\n  ];\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Air Quality App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">Location</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Location\"\n              required\n            />\n\n            <label className=\"mt-3\">AQI-IN/US</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              placeholder=\"us\"\n              options={options}\n              className=\"app-option\"\n            />\n\n            <label className=\"mt-3\">Theme</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              placeholder=\"Light Mode\"\n              options={options1}\n              className=\"app-option\"\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 air-quality-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default AirQualityAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/ClockApp.jsx",["778","779","780","781"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport Switch from \"react-switch\";\nconst ClockApp = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"lefAnalogue - 12 hourt\", label: \"Analogue - 12 hour\" },\n    { value: \"Digital - 12 hour\", label: \"Digital - 12 hour\" },\n    { value: \"Digital - 24hour\", label: \"Digital - 24hour\" },\n  ];\n  const [checked, setChecked] = useState(false);\n  const [checkedLocation, setCheckedLocation] = useState(false);\n  const [checkedRounded, setCheckedRounded] = useState(false);\n  const [checkedDate, setCheckedDate] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n  const handleChangeLocation = (nextChecked) => {\n    setCheckedLocation(nextChecked);\n  };\n  const handleChangeRounded = (nextChecked) => {\n    setCheckedRounded(nextChecked);\n  };\n  const handleChangeDate = (nextChecked) => {\n    setCheckedDate(nextChecked);\n  };\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Clock App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <label className=\"mt-3 mr-3\">Regular Clock</label>\n                <input type=\"checkbox\" className=\"   \" required />\n              </div>\n              <div className=\"col-6\">\n                <label className=\"mt-3 mr-3\">World Clock</label>\n                <input type=\"checkbox\" className=\"   \" required />\n              </div>\n            </div>\n\n            <label className=\"mt-3\">Time Format</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              placeholder=\"Select one from the list\"\n              options={options}\n              className=\"app-option\"\n            />\n            <div className=\"row mt-4\">\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">Get device timezone</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChange}\n                  checked={checked}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n              <div className=\"col-6  d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">Hidden location</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeLocation}\n                  checked={checkedLocation}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-4\">\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">Hide date</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeDate}\n                  checked={checkedDate}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n              <div className=\"col-6  d-flex align-items-center  justify-content-between\">\n                <label className=\"mb-0 mr-3\">Rounded Corners</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeRounded}\n                  checked={checkedRounded}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n            </div>\n\n            <label className=\"mt-3\">Timezone</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Timezone\"\n              required\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 clock-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ClockApp;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/QrCodeModal.jsx",["782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport Switch from \"react-switch\";\nconst QrCodeModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"lefAnalogue - 12 hourt\", label: \"Analogue - 12 hour\" },\n    { value: \"Digital - 12 hour\", label: \"Digital - 12 hour\" },\n    { value: \"Digital - 24hour\", label: \"Digital - 24hour\" },\n  ];\n  const [checked, setChecked] = useState(false);\n  const [checkedLocation, setCheckedLocation] = useState(false);\n  const [checkedRounded, setCheckedRounded] = useState(false);\n  const [checkedDate, setCheckedDate] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n  const handleChangeLocation = (nextChecked) => {\n    setCheckedLocation(nextChecked);\n  };\n  const handleChangeRounded = (nextChecked) => {\n    setCheckedRounded(nextChecked);\n  };\n  const handleChangeDate = (nextChecked) => {\n    setCheckedDate(nextChecked);\n  };\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Qr Code App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">Url Link</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"https://www.\"\n              required\n            />\n            <label className=\"mt-3\">App Tital</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Eg. Scan to view full brochure\"\n              required\n            />\n            <label className=\"mt-3\"> App Description</label>\n            <textarea\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Eg. Please scan this QR Code to view our Product Brochure on your mobile phone.\"\n              required\n              rows={4}\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 qr-code-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default QrCodeModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/StocksAppModal.jsx",["798","799","800","801"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nimport Switch from \"react-switch\";\nconst StocksAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"lefAnalogue - 12 hourt\", label: \"Analogue - 12 hour\" },\n    { value: \"Digital - 12 hour\", label: \"Digital - 12 hour\" },\n    { value: \"Digital - 24hour\", label: \"Digital - 24hour\" },\n  ];\n  const [checked, setChecked] = useState(false);\n  const [checkedLocation, setCheckedLocation] = useState(false);\n  const [checkedRounded, setCheckedRounded] = useState(false);\n  const [checkedDate, setCheckedDate] = useState(false);\n\n  const handleChange = (nextChecked) => {\n    setChecked(nextChecked);\n  };\n  const handleChangeLocation = (nextChecked) => {\n    setCheckedLocation(nextChecked);\n  };\n  const handleChangeRounded = (nextChecked) => {\n    setCheckedRounded(nextChecked);\n  };\n  const handleChangeDate = (nextChecked) => {\n    setCheckedDate(nextChecked);\n  };\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Stocks App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n\n            <label className=\"mt-3\">Stocks</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              placeholder=\"Day Gainers\"\n              options={options}\n              className=\"app-option\"\n            />\n            <div className=\"row mt-4\">\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">Price Change</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChange}\n                  checked={checked}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n              <div className=\"col-6  d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">52 Week High</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeLocation}\n                  checked={checkedLocation}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n            </div>\n\n            <div className=\"row mt-4\">\n              <div className=\"col-6 d-flex align-items-center justify-content-between\">\n                <label className=\"mb-0 mr-3\">Volumes</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeDate}\n                  checked={checkedDate}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n              <div className=\"col-6  d-flex align-items-center  justify-content-between\">\n                <label className=\"mb-0 mr-3\">52 Week Low</label>\n                <Switch\n                  onColor=\"#B3005E\"\n                  onChange={handleChangeRounded}\n                  checked={checkedRounded}\n                  className=\"react-switch\"\n                  required={true}\n                />\n              </div>\n            </div>\n\n            <label className=\"mt-4\">Slide Duration</label>\n            <input\n              type=\"number\"\n              className=\"  form-control \"\n              placeholder=\"10\"\n              required\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 stocks-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default StocksAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/YoutubeAppModal.jsx",["802","803","804","805","806","807","808","809","810","811"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState, useEffect } from \"react\";\nimport Switch from \"react-switch\";\nimport { updateApps, addApps } from \"../../utils/api\";\nconst YoutubeAppModal = ({ setShowUrlApp, show, mediaData , actionType}) => {\n\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\n  const [name, setName] = useState(\"\");\n  const [mediaId, setMediaId] = useState(null);\n  const [urlLink, setUrlLink] = useState(\"\"); \n  const [muteOptions, setMuteOptions] = useState(false)\n  const [err, setErr] = useState(false);\n  const [errMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    if(mediaData){\n      const jsonString = JSON.parse(mediaData.appData);\n      console.log(jsonString)\n      setName(mediaData.title);\n      setUrlLink(jsonString.url);\n      setMuteOptions(jsonString.mute);\n      setMediaId(mediaData._id)\n    }\n  },[mediaData])\n  console.log(\"media\", mediaData)\n\n  const handleCreateApp = async(e) => {\n    e.preventDefault();\n\n    setErr(false);\n    setErrorMessage(\"\");\n    if(name == ''){\n      setErr(true);\n      setErrorMessage(\"App Name is required\");\n    }\n    if(urlLink == ''){\n      setErr(true);\n      setErrorMessage(\"URL Link is required\");\n    }\n    if(err){\n      return false;\n    }\n    const dataString = {\n      url:urlLink,\n      mute:muteOptions\n    }\n\n    if(actionType && actionType == 'edit'){\n      await updateApps({\n        name,\n        appId:mediaId,\n        data:JSON.stringify(dataString)\n      });\n      setShowUrlApp(false)\n    }else{\n      await addApps({\n        name,\n        type:'youtube-apps',\n        data:JSON.stringify(dataString)\n      });\n      setShowUrlApp(false)\n      setShowUrlRedirectApp(true)\n    }\n    //console.log(name, urlLink, selectedOption)\n  }\n\n\n  return (\n    <>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\n        show={show}\n        size=\"xl\"\n        centered\n      >\n        <Modal.Header className=\"border-0\">\n          <Modal.Title className=\"mr-auto app-modal-heading\">\n            Video App\n          </Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowUrlApp(false)}\n          >\n            <img\n              className=\"cancel-icon\"\n              src={cancelIcon}\n              alt=\"cancel-icon\"\n              height=\"25px\"\n              width=\"25px\"\n            />\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          <form\n            // onSubmit={handleSubmit}\n            className=\"row\"\n          >\n            <div className=\"form-group col-6 mb-0  url-app-form\">\n              <label>Name</label>\n              <input\n                type=\"text\"\n                className=\"  form-control \"\n                placeholder=\"App Name\"\n                required\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              <label className=\"mt-3\">Video Url</label>\n              <input\n                type=\"text\"\n                className=\"  form-control \"\n                placeholder=\"https://www.\"\n                required\n                value={urlLink}\n                onChange={(e) => setUrlLink(e.target.value)}\n              />\n              <label className=\"mt-3 mr-3\">Mute</label>\n              <input type=\"checkbox\" checked={muteOptions} className=\"   \" required onChange={(e) => {setMuteOptions(e.target.checked)}} />\n              <div className=\"youtube-info mt-3\">\n                <ul>\n                  <li>With this app. You can play Youtube videos on screen. </li>\n                  <li>Refer this guide on how to create the app.</li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"col-6 \">\n              <div className=\"d-flex justify-content-center align-items-center h-100 youtube-app-form-icon\">\n                <div className=\"text-center\">\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n                </div>\n              </div>\n            </div>\n          </form>\n        </Modal.Body>\n        <Modal.Footer className=\"border-0 mb-2\">\n          <Row className=\"w-100 m-0\">\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n                Cancel\n              </Button>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n              <Button\n                variant=\"\"\n                type=\"button\"\n                className=\"btn btn-primary btn-block primary-btn\"\n                onClick={(e) => handleCreateApp(e)}\n              >\n                {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\n              </Button>\n            </Col>\n          </Row>\n        </Modal.Footer>\n      </Modal>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\n        show={showRedirectApp}\n        size=\"xl\"\n        centered\n      >\n        <Modal.Header className=\"border-0\">\n\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowUrlRedirectApp(false)}\n          >\n            <img\n              className=\"cancel-icon\"\n              src={cancelIcon}\n              alt=\"cancel-icon\"\n              height=\"25px\"\n              width=\"25px\"\n            />\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"row\">\n            <div className=\"col-6 \">\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\n                <div className=\"text-center\">\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n                  <h4>https://www.</h4>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-6 \">\n              <div className=\"d-flex justify-content-center align-items-center\">\n                <div className=\"text-center\">\n                  <p>URL App created successfully</p>\n                  <p>URL App is saved in <u>Media</u></p>\n                  <Link to={'/layout'}>Create Composition</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default YoutubeAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/TextAppModal.jsx",["812","813","814","815"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nconst TextAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"left\", label: \"Left\" },\n    { value: \"right\", label: \"Right\" },\n    { value: \"center\", label: \"Center\" },\n  ];\n  const options1 = [\n    { value: \"100\", label: \"Slow\" },\n    { value: \"200\", label: \"Medium\" },\n    { value: \"300\", label: \"300\" },\n    { value: \"400\", label: \"400\" },\n    { value: \"500\", label: \"500\" },\n    { value: \"600\", label: \"600\" },\n    { value: \"700\", label: \"700\" },\n  ];\n  const options2 = [\n    { value: \"Fira Sans\", label: \"Fira Sans\" },\n    { value: \"Poppins\", label: \"Poppins\" },\n    { value: \"Poppins\", label: \"Poppins\" },\n    { value: \"Manrope\", label: \"Manrope\" },\n    { value: \"Sans Serif\", label: \"Sans Serif\" },\n  ];\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Scroller Text App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">Content</label>\n            <textarea\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Type Content\"\n              required\n              rows={4}\n            />\n            <label className=\"mt-3\">Text </label>\n            <div className=\"row\">\n              <div className=\"col-3\">\n                <label className=\"mt-3\">Color </label>\n\n                <input\n                  type=\"color\"\n                  className=\"  form-control \"\n                  placeholder=\"App Name\"\n                  required\n                  value=\"#000000\"\n                />\n              </div>\n              <div className=\"col-3\">\n                <label className=\"mt-3\">Allignment </label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options}\n                  //   style={{\n                  //     lineHeight: \"40px\",\n                  //     color: \"#7e7e7e\",\n                  //     paddingLeft: \" 15px\",\n                  //     padding: \"10px\",\n                  //   }}\n                  className=\"app-option\"\n                />\n              </div>\n              <div className=\"col-3\">\n                <label className=\"mt-3\">Weight </label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options1}\n                  //   style={{\n                  //     lineHeight: \"40px\",\n                  //     color: \"#7e7e7e\",\n                  //     paddingLeft: \" 15px\",\n                  //     padding: \"10px\",\n                  //   }}\n                  className=\"app-option\"\n                />\n              </div>\n              <div className=\"col-3\">\n                <label className=\"mt-3\">Family Style </label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options2}\n                  //   style={{\n                  //     lineHeight: \"40px\",\n                  //     color: \"#7e7e7e\",\n                  //     paddingLeft: \" 15px\",\n                  //     padding: \"10px\",\n                  //   }}\n                  className=\"app-option\"\n                />\n              </div>\n            </div>\n\n            <label className=\"mt-3\">Text Style</label>\n            {/* <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"cache\"\n              required\n            /> */}\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              options={options}\n              //   style={{\n              //     lineHeight: \"40px\",\n              //     color: \"#7e7e7e\",\n              //     paddingLeft: \" 15px\",\n              //     padding: \"10px\",\n              //   }}\n              className=\"app-option\"\n            />\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <label className=\"mt-3\">Background Color</label>\n                <input\n                  type=\"color\"\n                  className=\"  form-control \"\n                  placeholder=\"Text to be scrolled\"\n                  value=\"#000000\"\n                  required\n                />\n              </div>\n              <div className=\"col-6\">\n                <label className=\"mt-3 mr-3\">Transparent</label>\n                <input type=\"checkbox\" className=\"   \" required />\n              </div>\n            </div>\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 text-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default TextAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/WeatherAppModal.jsx",["816","817","818","819"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nconst WeatherAppModal = ({ setShowUrlApp, show }) => {\n  const options = [{ value: \"Classic\", label: \"Classic\" }];\n  const options1 = [{ value: \"Celsius\", label: \"Celsius\" }];\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Weather App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">Location</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Enter Location\"\n              required\n            />\n\n            <label className=\"mt-3\">Theme</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              options={options}\n              className=\"app-option\"\n            />\n            <label className=\"mt-3\">Temperature Unit</label>\n\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              options={options1}\n              className=\"app-option\"\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 weather-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default WeatherAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/ScrollerTextAppModal.jsx",["820","821","822","823"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nconst ScrollerTextAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"Regular\", label: \"Regular\" },\n    { value: \"italic\", label: \"italic\" },\n    { value: \"bold\", label: \"Bold\" },\n  ];\n  const options1 = [\n    { value: \"slow\", label: \"Slow\" },\n    { value: \"medium\", label: \"Medium\" },\n    { value: \"high\", label: \"High\" },\n  ];\n  const options2 = [\n    { value: \"Right-to-Left\", label: \"Right to Left\" },\n    { value: \"Left-to-Right\", label: \"Left to Right\" },\n  ];\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          Scroller Text App\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">Text</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"Text to be scrolled\"\n              required\n            />\n\n            <label className=\"mt-3\">Text Style</label>\n            {/* <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"cache\"\n              required\n            /> */}\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              options={options}\n              //   style={{\n              //     lineHeight: \"40px\",\n              //     color: \"#7e7e7e\",\n              //     paddingLeft: \" 15px\",\n              //     padding: \"10px\",\n              //   }}\n              className=\"app-option\"\n            />\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <label className=\"mt-3\">Text Color</label>\n                <input\n                  type=\"color\"\n                  className=\"  form-control \"\n                  placeholder=\"Text to be scrolled\"\n                  value=\"#000000\"\n                  required\n                />\n              </div>\n\n              <div className=\"col-6\">\n                <label className=\"mt-3\">Background Color</label>\n                <input\n                  type=\"color\"\n                  className=\"  form-control \"\n                  placeholder=\"Text to be scrolled\"\n                  value=\"#000000\"\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <label className=\"mt-3\">Scroll Speed</label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options1}\n                  //   style={{\n                  //     lineHeight: \"40px\",\n                  //     color: \"#7e7e7e\",\n                  //     paddingLeft: \" 15px\",\n                  //     padding: \"10px\",\n                  //   }}\n                  className=\"app-option\"\n                />\n              </div>\n\n              <div className=\"col-6\">\n                <label className=\"mt-3\">Scroll Direction</label>\n\n                <Select\n                  defaultValue={selectedOption}\n                  // onChange={setSelectedOption}\n                  options={options2}\n                  //   style={{\n                  //     lineHeight: \"40px\",\n                  //     color: \"#7e7e7e\",\n                  //     paddingLeft: \" 15px\",\n                  //     padding: \"10px\",\n                  //   }}\n                  className=\"app-option\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 scroll-text-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ScrollerTextAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/RssFeedAppModal.jsx",["824","825","826","827"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState } from \"react\";\nconst RssFeedAppModal = ({ setShowUrlApp, show }) => {\n  const options = [\n    { value: \"White Background\", label: \"white-background\" },\n    { value: \"Color Background\", label: \"color-background\" },\n  ];\n  const [selectedOption, setSelectedOption] = useState(null);\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={show}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n        <Modal.Title className=\"mr-auto app-modal-heading\">\n          RSS Feed\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <form\n          // onSubmit={handleSubmit}\n          className=\"row\"\n        >\n          <div className=\"form-group col-6 mb-0  url-app-form\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"App Name\"\n              required\n            />\n            <label className=\"mt-3\">RSS Feed URL</label>\n            <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"https://example.com\"\n              required\n            />\n            <label className=\"mt-3\">Slide Duration (in seconds)</label>\n            <input\n              type=\"number\"\n              className=\"  form-control \"\n              placeholder=\"0\"\n              required\n            />\n            <label className=\"mt-3\">Theme</label>\n            {/* <input\n              type=\"text\"\n              className=\"  form-control \"\n              placeholder=\"cache\"\n              required\n            /> */}\n            <Select\n              defaultValue={selectedOption}\n              // onChange={setSelectedOption}\n              options={options}\n              //   style={{\n              //     lineHeight: \"40px\",\n              //     color: \"#7e7e7e\",\n              //     paddingLeft: \" 15px\",\n              //     padding: \"10px\",\n              //   }}\n              className=\"app-option\"\n            />\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex\">\n              {\" \"}\n              <div className=\"form-check mr-4\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"viewImage\"\n                  value=\"aspectRation\"\n                  id=\"aspectRation\"\n                  // onChange={handleOptionChange}\n                  // defaultChecked={viewImage === \"aspectRation\"}\n                />\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\n                  Landscape\n                </label>\n              </div>\n              <div className=\"form-check mr-4\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"viewImage\"\n                  value=\"aspectRation\"\n                  id=\"aspectRation\"\n                  // onChange={handleOptionChange}\n                  // defaultChecked={viewImage === \"aspectRation\"}\n                />\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\n                  Portrait\n                </label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"viewImage\"\n                  value=\"aspectRation\"\n                  id=\"aspectRation\"\n                  // onChange={handleOptionChange}\n                  // defaultChecked={viewImage === \"aspectRation\"}\n                />\n                <label className=\"form-check-label mt-0\" htmlFor=\"aspectRation\">\n                  Footer\n                </label>\n              </div>\n            </div>\n            <div className=\"d-flex justify-content-center align-items-center h-100 rss-feed-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n      <Modal.Footer className=\"border-0 mb-2\">\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              //   onClick={() => setNewTagModal(false)}\n            >\n              Create App\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default RssFeedAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UrlAppModal.jsx",["828","829","830","831","832","833","834"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport icon from \"../../img/link-alt 1.svg\";\nimport { addApps, updateApps } from \"../../utils/api\";\n\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { useState, useEffect } from \"react\";\nconst UrlAppModal = ({ setShowUrlApp, show, mediaData, actionType }) => {\n  const options = [\n    { value: \"disable\", label: \"disable\" },\n    { value: \"enable\", label: \"enable\" },\n  ];\n  const [selectedOption, setSelectedOption] = useState({value: \"disable\", label: \"disable\"});\n  const [showRedirectApp, setShowUrlRedirectApp] = useState(false)\n  const [name, setName] = useState(\"\");\n  const [mediaId, setMediaId] = useState(null);\n  const [urlLink, setUrlLink] = useState(\"\"); \n  const [err, setErr] = useState(false);\n  const [errMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    if(mediaData){\n      const jsonString = JSON.parse(mediaData.appData);\n      setName(mediaData.title);\n      setUrlLink(jsonString.url);\n      setMediaId(mediaData._id);\n      setSelectedOption({value:jsonString.cache,label:jsonString.cache})\n    }\n  },[mediaData])\n  const handleCreateApp = async(e) => {\n    e.preventDefault();\n\n    setErr(false);\n    setErrorMessage(\"\");\n    if(name == ''){\n      setErr(true);\n      setErrorMessage(\"App Name is required\");\n    }\n    if(urlLink == ''){\n      setErr(true);\n      setErrorMessage(\"URL Link is required\");\n    }\n    if(err){\n      return false;\n    }\n    const dataString = {\n      url:urlLink,\n      cache:selectedOption.value\n    }\n    \n    if(actionType && actionType == 'edit'){\n      await updateApps({\n        name,\n        //type:'url-apps',\n        appId:mediaId,\n        data:JSON.stringify(dataString)\n      });\n      setShowUrlApp(false)\n    }else{\n      await addApps({\n        name,\n        type:'url-apps',\n        data:JSON.stringify(dataString)\n      });\n      setShowUrlApp(false)\n      setShowUrlRedirectApp(true)\n    }\n    \n    //console.log(name, urlLink, selectedOption)\n  }\n  return (\n    <>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 app-modal\"\n        show={show}\n        size=\"xl\"\n        centered\n      >\n        <Modal.Header className=\"border-0\">\n          <Modal.Title className=\"mr-auto app-modal-heading\">\n            URL App\n          </Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setShowUrlApp(false)}\n          >\n            <img\n              className=\"cancel-icon\"\n              src={cancelIcon}\n              alt=\"cancel-icon\"\n              height=\"25px\"\n              width=\"25px\"\n            />\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          {err && errMessage !== '' ? <h6 className=\"alert alert-danger\">{errMessage}</h6> : ''}\n          <form\n            // onSubmit={handleSubmit}\n            className=\"row\"\n          >\n            <div className=\"form-group col-6 mb-0  url-app-form\">\n              <label>Name</label>\n              <input\n                type=\"text\"\n                className=\"  form-control \"\n                placeholder=\"App Name\"\n                required\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              <label className=\"mt-3\">URL</label>\n              <input\n                type=\"text\"\n                className=\"  form-control \"\n                placeholder=\"https://example.com\"\n                required\n                onChange={(e) => {setUrlLink(e.target.value)}}\n                value={urlLink}\n              />\n              <label className=\"mt-3\">Cache</label>\n              <Select\n                defaultValue={selectedOption}\n                onChange={setSelectedOption}\n                options={options}\n                //   style={{\n                //     lineHeight: \"40px\",\n                //     color: \"#7e7e7e\",\n                //     paddingLeft: \" 15px\",\n                //     padding: \"10px\",\n                //   }}\n                className=\"app-option\"\n              />\n            </div>\n            <div className=\"col-6 \">\n              <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\n                <div className=\"text-center\">\n                  <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n                  <h1>https://www.</h1>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Modal.Body>\n        <Modal.Footer className=\"border-0 mb-2\">\n          <Row className=\"w-100 m-0\">\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n              <Button className=\"cancel-btn w-100\" variant=\"outline-light\">\n                Cancel\n              </Button>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n              <Button\n                variant=\"\"\n                type=\"button\"\n                className=\"btn btn-primary btn-block primary-btn\"\n                onClick={(e) => handleCreateApp(e)}\n              >\n                {actionType && actionType == 'edit' ? 'Update' : 'Create'} App\n                \n              </Button>\n            </Col>\n          </Row>\n        </Modal.Footer>\n      </Modal>\n      <Modal\n      className=\"fade bd-example-modal-lg mt-4 app-modal\"\n      show={showRedirectApp}\n      size=\"xl\"\n      centered\n    >\n      <Modal.Header className=\"border-0\">\n\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowUrlRedirectApp(false)}\n        >\n          <img\n            className=\"cancel-icon\"\n            src={cancelIcon}\n            alt=\"cancel-icon\"\n            height=\"25px\"\n            width=\"25px\"\n          />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"row\">\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center h-100 url-app-form-icon\">\n              <div className=\"text-center\">\n                <img src={icon} width=\"60px\" height=\"60px\" className=\"mb-3\" />\n                <h4>https://www.</h4>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-6 \">\n            <div className=\"d-flex justify-content-center align-items-center\">\n              <div className=\"text-center\">\n                <p>URL App created successfully</p>\n                <p>URL App is saved in <u>Media</u></p>\n                <Link to={'/layout'}>Create Composition</Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Modal.Body>\n    </Modal>\n    </>\n  );\n};\n\nexport default UrlAppModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UploadMediaFileModal.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/listMedia.jsx",["835","836","837","838","839","840","841","842","843","844","845"],"import React, { useState } from \"react\";\nimport { Table, Dropdown } from \"react-bootstrap\";\nimport AddNewTagModal from \"../../modals/AddNewTagModal\";\nimport downArrow from \"../../../img/down-arrow.png\";\nimport menuIcon from \"../../../img/menu-icon.png\";\nimport defaultComparisonIcon from \"../../../img/default-comparison-icon.png\";\nimport emptyMediaImg from \"../../../img/addmedia-empty-img.png\";\nimport { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport deleteIcon from \"../../../img/delete-icon.png\";\nimport {\n  getDatetimeIn12Hours,\n  humanReadableFormattedDateString,\n} from \"../../../utils/UtilsService\";\nimport cancelIcon from \"../../../img/cancel-icon.png\";\nimport DeleteConfirmation from \"../../modals/DeleteConfirmation\";\nimport { deleteMedia, BASE_URL } from \"../../../utils/api\";\nimport PublishMediaModal from \"../../modals/PublishMediaModal\";\n\nconst ListMedia = ({ allMedia, callAllMediaApi }) => {\n  const [showNewTagModal, setNewTagModal] = useState(false);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [selectedMedia, setSelectedMedia] = useState(\"\");\n  const [showPublishPopUp, setShowPublishPopUp] = useState(false);\n  const [preview, setPreview] = useState(false);\n  const [imgUrl, setImgUrl] = useState(null);\n  const [imgType, setImgType] = useState(null);\n\n  // use effect\n\n  const handleDelete = async () => {\n    setDeleteModal(false);\n    await deleteMedia(selectedMedia._id);\n    callAllMediaApi();\n  };\n\n  const handlePublishcOpen = (media) => {\n    setShowPublishPopUp(media);\n  };\n\n  const showPreview = (img, type) => {\n    setImgType(type);\n    setImgUrl(img);\n    setPreview(true);\n  };\n\n  const parseMeta = (media) => {\n    let meta = {};\n    //const meta = JSON.parse(media.properties);\n    if(media.type == 'image' || media.type == 'video'){\n      meta = JSON.parse(media.properties);\n    }else{\n      const jsonData = JSON.parse(media.appData);\n      meta = {\n        length:10,\n        height:10,\n        duration:0,\n        size:0\n      };\n    }\n    return (\n      <span className=\"td-content\">\n        {media?.type === \"image\" && (\n          <strong>\n            {meta.height} x {meta.width}\n          </strong>\n        )}\n        {media?.type === \"video\" && meta?.length && (\n          <strong>{parseInt((meta.length / 60) * 100) / 100} Min.</strong>\n        )}\n        {meta?.size && <span>{meta.size} MB</span>}\n      </span>\n    );\n  };\n\n  const videoMetaDuration = (media) => {\n    const properties = JSON.parse(media?.properties);\n    if (properties && properties.length) {\n      return (properties.length.toFixed(0) / 60).toFixed(0);\n    }\n    return null;\n  };\n  return (\n    <>\n      <Modal\n        className=\"fade bd-example-modal-lg mt-4 custom-modal quick-modal custom-modal-medium\"\n        show={preview}\n        size=\"md\"\n      >\n        <Modal.Header>\n          <Modal.Title className=\"mr-auto\">Image Preview</Modal.Title>\n          <Button\n            variant=\"\"\n            className=\"close\"\n            onClick={() => setPreview(false)}\n          >\n            <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n          </Button>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"flex-wrap align-items-center\">\n            {imgType && imgType === \"image\" && (\n              <img\n                src={`${BASE_URL}${imgUrl}`}\n                style={{ width: \"100%\", height: \"500px\", objectFit: \"fill\" }}\n              />\n            )}\n            {imgType && imgType === \"video\" && (\n              <video\n                className=\"video-js\"\n                autoPlay\n                muted\n                loop\n                style={{ width: \"100%\", height: \"500px\" }}\n              >\n                <source src={`${BASE_URL}${imgUrl}`} type=\"video/mp4\" />\n              </video>\n            )}\n          </div>\n        </Modal.Body>\n      </Modal>\n      {allMedia && allMedia.length !== 0 ? (\n        <Table responsive className=\"custom-table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Uploaded Date</th>\n              <th>Properties</th>\n              <th>Tags</th>\n              <th>More</th>\n            </tr>\n          </thead>\n          <tbody>\n            {allMedia.map((media) => {\n              return (\n                <tr key={media._id}>\n                  <td>\n                    <span className=\"td-content d-flex name-td-content\">\n                      <span\n                        className={`name-img mr-2  ${\n                          media?.type === \"video\" && \"videotableName\"\n                        }`}\n                      >\n                        {media?.type === \"image\" && (\n                          <div\n                            onClick={() => {\n                              showPreview(media.title, media.type);\n                            }}\n                            className=\"media-list-img-zoom\"\n                          >\n                            <span className=\"media-list-img-zoom-plus\">+</span>\n                            <img\n                              className=\"media-img img-fluid\"\n                              src={`${BASE_URL}${media?.title}`}\n                              alt=\"media-img\"\n                            />\n                          </div>\n                        )}\n                        {media?.type === \"video\" && (\n                          <button\n                            onClick={() => {\n                              showPreview(media.title, media.type);\n                            }}\n                          >\n                            {videoMetaDuration(media)}\n                          </button>\n                        )}\n                      </span>\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\n                        <strong>\n                          {\n                            media.title.split(\"/\")[\n                              media.title.split(\"/\").length - 1\n                            ]\n                          }\n                        </strong>\n                        <span>{media.createdBy.name}</span>\n                      </span>\n                    </span>\n                  </td>\n                  <td>\n                    {media.type.slice(0, 1).toUpperCase() + media.type.slice(1)}\n                  </td>\n                  <td>\n                    <span className=\"td-content\">\n                      <strong>\n                        {humanReadableFormattedDateString(media.createdAt)}\n                      </strong>\n                      <span>{getDatetimeIn12Hours(media.createdAt)}</span>\n                    </span>\n                  </td>\n                  <td>{parseMeta(media)}</td>\n                  <td>\n                    {media.tags.map((tag) => {\n                      return (\n                        <span className=\"my-phone-tag text-truncate ml-1\">\n                          {tag}\n                        </span>\n                      );\n                    })}\n                    <span\n                      className=\"down-arrow\"\n                      onClick={() => {\n                        setSelectedMedia(media);\n                        setNewTagModal(true);\n                      }}\n                    >\n                      <img\n                        className=\"down-arrow-img img-fluid\"\n                        src={downArrow}\n                        alt=\"arrow\"\n                      />\n                    </span>\n                  </td>\n                  <td>\n                    <Dropdown className=\"dropdown-toggle-menu\">\n                      <Dropdown.Toggle variant=\"\" className=\"p-0  mb-2\">\n                        <span className=\"table-menu-icon\">\n                          <img\n                            className=\"menu-img img-fluid\"\n                            src={menuIcon}\n                            alt=\"menu-icon\"\n                          />\n                        </span>\n                      </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                        { media && media.type == 'image' || media.type == 'video' ?\n                          <Dropdown.Item href=\"#\" className=\"dropdown-list-item\">\n                            <div\n                              className=\"d-flex\"\n                              onClick={() => {\n                                handlePublishcOpen(media);\n                              }}\n                            >\n                              <div className=\"dropdown-list-icon\">\n                                <img\n                                  className=\"dropdown-list-img img-fluid\"\n                                  src={defaultComparisonIcon}\n                                  alt=\"menu-icon\"\n                                />\n                              </div>\n                              <div className=\"dropdown-menu-list\">\n                                <span className=\"menu-heading\">\n                                  Publish on Screen\n                                </span>\n                                <span className=\"menu-description\">\n                                  Get to know more about screen info\n                                </span>\n                              </div>\n                            </div>\n                          </Dropdown.Item>\n                         :\n                         <></>}\n                        \n                        <Dropdown.Item\n                          href=\"#\"\n                          className=\"dropdown-list-item\"\n                          onClick={() => {\n                            setSelectedMedia(media);\n                            setDeleteModal(true);\n                          }}\n                        >\n                          <div className=\"d-flex\">\n                            <div className=\"dropdown-list-icon\">\n                              <img\n                                className=\"dropdown-list-img img-fluid\"\n                                src={deleteIcon}\n                                alt=\"menu-icon\"\n                              />\n                            </div>\n                            <div className=\"dropdown-menu-list\">\n                              <span className=\"menu-heading\">Delete</span>\n                              <span className=\"menu-description\">\n                                Get to know more about screen info\n                              </span>\n                            </div>\n                          </div>\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      ) : (\n        <div className=\"empty-media text-center\">\n          <div class=\"empty-media-img mx-auto\">\n            <img\n              className=\"media-img img-fluid\"\n              src={emptyMediaImg}\n              alt=\"media-img\"\n            />\n          </div>\n          <h3>Add Media</h3>\n          <p>\n            Upload your favourite images and videos from the local storage\n            <br /> of your device\n          </p>\n        </div>\n      )}\n\n      {showNewTagModal && (\n        <AddNewTagModal\n          selected={selectedMedia}\n          setNewTagModal={setNewTagModal}\n        />\n      )}\n      {showPublishPopUp && (\n        <PublishMediaModal\n          selected={showPublishPopUp}\n          setShowPublishPopUp={setShowPublishPopUp}\n          type=\"media\"\n        />\n      )}\n      {deleteModal && (\n        <DeleteConfirmation\n          setDeleteModal={setDeleteModal}\n          callbackFunction={handleDelete}\n          text=\"Are you sure you want to delete?\"\n          yes={\"Yes Deactivate\"}\n        />\n      )}\n    </>\n  );\n};\nexport default ListMedia;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/Common.jsx",["846","847","848","849","850","851","852"],"import React, { useState } from \"react\";\nimport useSWR from \"swr\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport searchIcon from \"../../../../img/search.png\";\nimport listIcon from \"../../../../img/list-icon.png\";\nimport CompositionTable from \"./CompositionTable\";\nimport ZoneInfoTable from \"./ZoneInfoTable\";\n\nimport {\n  getAllMedia,\n  postComposition,\n  putComposition,\n  uploadBlob,\n} from \"../../../../utils/api\";\n\nimport PreviewComposition from \"../../../modals/previewComposition\";\nimport { useHistory } from \"react-router-dom\";\nimport SaveCompositionName from \"../../../modals/saveCompositionName\";\nimport UploadMediaModal from \"../../../modals/UploadMediaFileModal\";\nimport { isBlobUrl } from \"../../../../utils/UtilsService\";\nconst CommonComposition = ({ type, composition, layout }) => {\n  const [showUploadMediaModal, setUploadMediaModal] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [name, setName] = useState(composition ? composition.name : \"\");\n  const [namePopUp, setOpenNamePopUp] = useState(false);\n  const [zone, setZone] = useState(\"Zone1\");\n\n  // const [content, setContent] = useState(\n  //   composition ? composition.zones[0].content : []\n  // );\n  const makeArray = (data) => {\n    const newArray = [];\n    data.forEach((item) => {\n      if (item.content.length > 0) {\n        item.content.forEach((item2) => {\n          newArray.push({ ...item2, [\"zone\"]: item.name });\n        });\n      }\n    });\n    return newArray;\n  };\n  const makeArray2 = (data, size) => {\n    const result = data.reduce(function (r, a) {\n      r[a.zone] = r[a.zone] || [];\n      r[a.zone].push(a);\n      return r;\n    }, Object.create(null));\n\n    return result;\n  };\n  const makeArrayReference = (referenceUrl) => {\n    const result = [];\n    const Zone1 = [];\n    const Zone2 = [];\n    const Zone3 = [];\n\n    referenceUrl.forEach((i) => {\n      const item = i.split(\"**\");\n\n      if (item[1] == \"Zone1\") {\n        Zone1.push(item[0]);\n        result[\"Zone1\"] = Zone1;\n      }\n      if (item[1] == \"Zone2\") {\n        Zone2.push(item[0]);\n        result[\"Zone2\"] = Zone2;\n      }\n      if (item[1] == \"Zone3\") {\n        Zone3.push(item[0]);\n        result[\"Zone3\"] = Zone3;\n      }\n    });\n\n    return result;\n  };\n  const [content, setContent] = useState(\n    composition ? makeArray(composition.zones) : []\n  );\n  const [referenceUrl, setReferenceUrl] = useState(\n    composition ? composition.referenceUrl : []\n  );\n  console.log(referenceUrl, \"referenceUrl\");\n  const handleLayout = (data) => {\n    setZone(data);\n  };\n\n  const { data: allMedia, mutate } = useSWR(\n    \"/vendor/display/media\",\n    getAllMedia\n  );\n\n  const history = useHistory();\n  const addComposition = (media) => {\n    let url = media.title;  \n    setContent((prev) => {\n      let meta = {};\n      \n      if(media.type == 'image' || media.type == 'video'){\n        meta = JSON.parse(media.properties);\n      }else{\n        const jsonData = JSON.parse(media.appData);\n        url = jsonData.url\n        meta = {\n          length:10,\n          height:10,\n          duration:0\n        };\n      }\n      \n      const dt = prev.find((o) => o.name === zone);\n      const createContent = {\n        url,\n        type: media.type,\n        maintainAspectRatio: false,\n        fitToScreen: true,\n        crop: false,\n        duration: meta.length ? meta.length : 10,\n        createdBy: media.createdBy.name,\n        zone,\n      };\n      const newdata = [...prev, { ...createContent }];\n      return newdata;\n    });\n    setReferenceUrl((prev) => {\n      return [...prev, url + \"**\" + zone];\n    });\n  };\n  const saveComposition = async () => {\n    console.log(\"referenceUrl\",referenceUrl)\n    const updateFiles = referenceUrl.map(async (url) => {\n      if (isBlobUrl(url)) {\n        const urlItem = url.split(\"**\");\n        const uri = await uploadBlob(urlItem[0]);\n        return uri + \"**\" + urlItem[1];\n      }\n      return url;\n    });\n    const results = await Promise.all(updateFiles);\n\n    let zones = [];\n    let zoneNew = makeArray2(content, layout.zones.length);\n    layout.zones.forEach((zone, index) => {\n      const contentData = zoneNew[zone.name].map(({ zone, ...rest }) => {\n        return rest;\n      });\n      zones.push({\n        name: zone.name,\n        zoneId: zone._id,\n        //content: removeCreatedBy(index),\n        content: removeCreatedBy(contentData),\n      });\n    });\n    const data = {\n      name: name,\n      zones: zones,\n      duration: TotalDuration(),\n      referenceUrl: results,\n    };\n    if (type === \"create\") {\n      data.layoutId = layout._id;\n      await postComposition(data);\n    } else {\n      data.compositionId = composition._id;\n      await putComposition(data);\n    }\n    history.push(\"/layout\");\n  };\n  const TotalDuration = () => {\n    let total = 0;\n    content.forEach((composition) => {\n      total += Number(composition.duration);\n    });\n    return total.toFixed(0);\n  };\n  function removeCreatedBy(data) {\n    return data.map((item) => {\n      delete item[\"createdBy\"];\n      delete item[\"_id\"];\n      delete item[\"zone\"];\n      // if(item['type'] == 'url-apps' || item['type'] == 'youtube-apps'){\n      //   item['type'] = 'app';\n      // }\n      return item;\n    });\n  }\n\n  return (\n    <>\n      <div className=\"custom-content-heading d-flex flex-wrap\">\n        <h1 className=\"mr-auto\">\n          {type === \"edit\" ? \"Edit Compostition\" : \"Create Compostition\"}\n        </h1>\n        <div className=\"preview-composition d-flex flex-wrap\">\n          <Button\n            onClick={() => {\n              if (content.length) {\n                setShowPreview(true);\n              }\n            }}\n            className=\"mr-2 preview-btn\"\n            variant=\"info\"\n            disabled={!content.length}\n          >\n            Preview\n          </Button>\n          <Button\n            onClick={() => {\n              console.log(content, \"conteettttnnnnn\", zone);\n              if (content.length) {\n                setOpenNamePopUp(true);\n              }\n            }}\n            className=\"save-composition-btn\"\n            variant=\"info\"\n          >\n            Save Composition\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"form-head d-flex mb-3 align-items-start\">\n        <Button\n          className=\"mr-2\"\n          variant=\"info add-screen-btn\"\n          onClick={() => {\n            setUploadMediaModal(true);\n          }}\n        >\n          Add Media\n          <span className=\"btn-icon-right\">\n            <div class=\"glyph-icon flaticon-381-add-1\"></div>\n          </span>\n        </Button>\n        <div className=\"search-textfield ml-auto d-flex flex-wrap align-items-center\">\n          <div className=\"form-group mb-0\">\n            <input\n              type=\"text\"\n              className=\"form-control input-default \"\n              placeholder=\"Search...\"\n            />\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\n          </div>\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\n          </Button>\n        </div>\n      </div>\n      <div className=\"custom-comp-table flex-1 editComposition\">\n        <Row className=\"h-100\">\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pr-0 border-col\">\n            <CompositionTable\n              allMedia={allMedia}\n              addComposition={addComposition}\n            />\n          </Col>\n          <Col lg=\"6\" md=\"6\" sm=\"6\" xs=\"12\" className=\"pl-0\">\n            <ZoneInfoTable\n              content={content}\n              setContent={setContent}\n              setReferenceUrl={setReferenceUrl}\n              layout={layout}\n              handleLayout={handleLayout}\n            />\n          </Col>\n        </Row>\n        <UploadMediaModal\n          showUploadMediaModal={showUploadMediaModal}\n          setUploadMediaModal={setUploadMediaModal}\n          callAllMediaApi={mutate}\n        />\n        {showPreview && (\n          <PreviewComposition\n            setShowPreview={setShowPreview}\n            content={content}\n            contentnew={makeArray2(content, 2)}\n            referenceUrl={referenceUrl}\n            referenceUrlArray={makeArrayReference(referenceUrl)}\n            layout={layout}\n          />\n        )}\n        {namePopUp && (\n          <SaveCompositionName\n            setModalState={setOpenNamePopUp}\n            saveComposition={saveComposition}\n            name={name}\n            setName={setName}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CommonComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/DeleteConfirmation.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/media/fileUploadWithPreview.jsx",["853","854","855"],"import React, { useState } from \"react\";\nimport uploadImg from \"../../../img/cloud-computing-icon.png\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport deleteIcon from \"../../../img/delete-icon.png\";\nfunction FileUploadWithPreview({\n  setShowError,\n  setFile,\n  setFileMeta,\n  setPreviewList,\n  previewList,\n  isLoading,\n}) {\n  const [preview, setPreview] = useState(null);\n  const [fileList, setFileList] = useState([]);\n\n  const handleFileChange = (event) => {\n    const selectedFile = event.target.files[0];\n    console.log(event);\n    if (!selectedFile) {\n      //setFile(null);\n      //setPreview(null);\n      return;\n    }\n    setShowError(null);\n    setFileList((fileList) => [...fileList, selectedFile]);\n    setFile((file) => [...file, selectedFile]);\n\n    const reader = new FileReader();\n    reader.readAsDataURL(selectedFile);\n\n    reader.onload = function (e) {\n      const newP = {\n        file: e.target.result,\n        isLoading: false,\n      };\n      setPreviewList((previewList) => [...previewList, newP]);\n    };\n\n    console.log(\"selectedFile\", previewList);\n  };\n  function handleLoadedMetadata(event) {\n    console.log(\"event\", event);\n    const fMeta = {\n      height: event.target.height,\n      width: event.target.width,\n      length: event.target.duration,\n      fileLoading: false,\n    };\n    setFileMeta((fileMeta) => [...fileMeta, fMeta]);\n  }\n\n  const handleDelete = (e, item) => {\n    e.preventDefault();\n    const newPreview = previewList;\n    const newFileList = fileList;\n    delete newPreview[item];\n    delete newFileList[item];\n    setPreviewList(newPreview);\n    setFile(newFileList);\n  };\n\n  return (\n    <>\n      <div className=\" d-flex flex-column\">\n        {previewList &&\n          previewList.length > 0 &&\n          previewList.map((item, index) => {\n            return (\n              <div className=\"d-flex justify-content-between align-items-center mb-3\">\n                {item?.file?.includes(\"image\") ? (\n                  <img\n                    onLoad={handleLoadedMetadata}\n                    src={item.file}\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\n                    alt=\"File Preview\"\n                  />\n                ) : item?.file?.includes(\"video\") ? (\n                  <video\n                    onLoadedMetadata={handleLoadedMetadata}\n                    style={{ width: \"50px\", height: \"50px\", objectFit: \"fill\" }}\n                    src={item.file}\n                    controls\n                  />\n                ) : (\n                  \"\"\n                )}\n                <img\n                  onClick={(e) => handleDelete(e, index)}\n                  src={deleteIcon}\n                  style={{ width: \"30px\", height: \"30px\" }}\n                />\n              </div>\n            );\n          })}\n        <div className=\"text-center\">{isLoading && <CircularProgress />}</div>\n      </div>\n      {/* {previewList.length === 0 && ( */}\n      <div\n        className=\"upload-file-container relative d-flex align-items-center justify-content-center flex-column\"\n        style={{ position: \"relative\" }}\n      >\n        {previewList.length === 0 && (\n          <div className=\" d-flex align-items-center justify-content-center flex-column\">\n            <div className=\"upload-flie-img\">\n              <img className=\"upload-file\" src={uploadImg} alt=\"upload-img\" />\n            </div>\n            <h6>Click here to upload files</h6>\n          </div>\n        )}\n\n        {previewList.length > 0 && (\n          <button\n            className={`btn btn-primary btn-block primary-btn add-file-media`}\n          >\n            + Add More\n          </button>\n        )}\n\n        <input\n          type=\"file\"\n          accept=\"image/*,video/*\"\n          className=\"upload-file-textfield\"\n          onChange={handleFileChange}\n        />\n      </div>\n      {/* )} */}\n      {/* \n      {previewList.length > 0 && (\n        <div>\n          <button>+ Add More</button>\n\n          <input\n            type=\"file\"\n            accept=\"image/*,video/*\"\n            className=\"upload-file-textfield\"\n            onChange={handleFileChange}\n          />\n        </div>\n      )} */}\n    </>\n  );\n}\n\nexport default FileUploadWithPreview;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/UpdateModal.jsx",["856","857"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\n\nimport searchIcon from \"../../img/search-location.png\";\n\nconst UpdateModal = ({ showUpdateModal, setUpdateModal }) => {\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\n      show={showUpdateModal}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title className=\"mr-auto\">\n        Update Screen\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setUpdateModal(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n      <Row>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n              <label className=\"update-textfield-label\">Screen Name</label>\n              <input\n                type=\"text\"\n                className=\"form-control input-default form-field\"\n                placeholder=\"Christan’s Windows\"\n              />\n            </div>\n          </Col>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n              <label className=\"update-textfield-label\">Complete Address</label>\n              <input\n                type=\"text\"\n                className=\"form-control input-default form-field\"\n                placeholder=\"House No. 38-A Tribune colony, Ambala Cantt, Haryana\"\n              />\n            </div>\n          </Col>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group location-field\">\n              <label className=\"update-textfield-label\">Google Location</label>\n              <input\n                type=\"text\"\n                className=\"form-control input-default form-field\"\n                placeholder=\"Haryana\"\n              />\n              <div className=\"search-location\">\n              <img className=\"search-loc-icon\" src={searchIcon} alt=\"search-icon\" />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Row className=\"w-100 m-0\">\n          <Col lg={12} md={12} sm={12} xs={12} className=\"pl-0 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn w-100\"\n              onClick={() => setUpdateModal(false)}\n            >\n             Update Screen\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default UpdateModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/WindowsModal.jsx",["858","859","860","861"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\n\nimport chrisImg from \"../../img/chris-img.png\";\n\nconst WindowsModal = ({ showWindowsModal, setWindowsModal }) => {\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal windows-modal custom-modal-medium\"\n      show={showWindowsModal}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title className=\"mr-auto\">\n        Christan’s Window’s\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setWindowsModal(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n<div className=\"chris-imgbox\">\n<img className=\"chris-img img-fluid\" src={chrisImg} alt=\"chris-icon\" />\n\n</div>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default WindowsModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/QuickPlayModal.jsx",["862","863","864","865"],"import { Button, Modal, Row, Col, Badge, Dropdown } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\nimport { Link } from \"react-router-dom\";\nimport searchIcon from \"../../img/search.png\";\nimport listIcon from \"../../img/list-icon.png\";\nimport pic1 from \"./../../images/profile/small/pic1.jpg\";\nimport downArrow from \"../../img/down-arrow.png\";\n\nconst QuickPlayModal = ({ showQuickPlayModal, setQuickPlayModal }) => {\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal quick-modal custom-modal-medium\"\n      show={showQuickPlayModal}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title className=\"mr-auto\">\n          Choose Composition to assign as Quickplay\n        </Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setQuickPlayModal(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"search-textfield quickplay-search d-flex flex-wrap align-items-center\">\n          <div className=\"form-group mb-0\">\n            <input\n              type=\"text\"\n              className=\"form-control input-default \"\n              placeholder=\"Search...\"\n            />\n            <img className=\"search-icon\" src={searchIcon} alt=\"search\" />\n          </div>\n          <Button className=\"ml-2 icon-btn\" variant=\"primary\">\n            <img className=\"icon-icon\" src={listIcon} alt=\"list-icon\" />\n          </Button>\n        </div>\n        <div className=\"mb-3 quick-modal-table\">\n          <div className=\"w-100 table-responsive\">\n            <div id=\"example_wrapper\">\n              <table id=\"example\" className=\"display w-100  table custom-table\">\n                <thead>\n                  <tr>\n                    <th>Composition</th>\n                    <th>Date Added</th>\n                    <th>Duration</th>\n                    <th>Associated Schedule</th>\n                    <th>Tags</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      <span className=\"d-flex align-items-center\">\n                        <img\n                          className=\"rounded mr-2\"\n                          width=\"35\"\n                          src={pic1}\n                          alt=\"\"\n                        />\n                        <span className=\"td-content\">\n                          <strong>My_image_name</strong>\n                          <span>Added by Gauri Batra</span>\n                        </span>\n                      </span>\n                    </td>\n                    <td>\n                      <span className=\"d-flex align-items-center\">\n                        <span className=\"td-content\">\n                          <strong>3 Apr,2023</strong>\n                          <span>05 :30 PM</span>\n                        </span>\n                      </span>\n                    </td>\n                    <td>10 Sec</td>\n                    <td>0</td>\n                    <td style={{ width: \"180px\" }}>\n                      <span className=\"tag-container\">\n                        <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\n                          My Phone\n                        </span>\n                      </span>\n\n                      <span className=\"down-arrow\">\n                        <img\n                          className=\"down-arrow-img img-fluid\"\n                          src={downArrow}\n                          alt=\"arrow\"\n                        />\n                      </span>\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>\n                      <span className=\"d-flex align-items-center\">\n                        <img\n                          className=\"rounded mr-2\"\n                          width=\"35\"\n                          src={pic1}\n                          alt=\"\"\n                        />\n                        <span className=\"td-content\">\n                          <strong>My_image_name</strong>\n                          <span>Added by Gauri Batra</span>\n                        </span>\n                      </span>\n                    </td>\n                    <td>\n                      <span className=\"d-flex align-items-center\">\n                        <span className=\"td-content\">\n                          <strong>3 Apr,2023</strong>\n                          <span>05 :30 PM</span>\n                        </span>\n                      </span>\n                    </td>\n                    <td>10 Sec</td>\n                    <td>0</td>\n                    <td style={{ width: \"180px\" }}>\n                      <span className=\"tag-container\">\n                        <span className=\"my-phone-tag text-truncate ml-1 mr-1 mb-1\">\n                          My Phone\n                        </span>\n                      </span>\n\n                      <span className=\"down-arrow\">\n                        <img\n                          className=\"down-arrow-img img-fluid\"\n                          src={downArrow}\n                          alt=\"arrow\"\n                        />\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button\n              className=\"cancel-btn w-100\"\n              variant=\"outline-light\"\n              onClick={() => setQuickPlayModal(false)}\n            >\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              onClick={() => setQuickPlayModal(false)}\n            >\n              Assign\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default QuickPlayModal;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/CompositionTable.jsx",["866","867","868","869"],"import React, { useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { BASE_URL } from \"../../../../utils/api\";\nimport UrlAppModal from \"../../../modals/UrlAppModal\";\nimport YoutubeAppModal from \"../../../modals/YoutubeAppModal\";\nimport editBtnImg from \"../../../../img/edit-btn.png\";\n\nconst CompositionTable = ({ allMedia, addComposition }) => {\n  const [showUrlApp, setShowUrlApp] = useState(false);\n  const [showYoutubeApp, setShowYoutubeApp] = useState(false);\n  const [selectedMedia, setSelectedMedia] = useState(null);\n\n  const videoMetaDuration = (media) => {\n    const properties = JSON.parse(media?.properties);\n    if (properties && properties.length) {\n      return (properties.length.toFixed(0) / 60).toFixed(0);\n    }\n    return null;\n  };\n\n  const handleEdit = (e, data) => {\n    e.preventDefault();\n    setSelectedMedia(data);\n    if (data.type == \"url-apps\") {\n      setShowUrlApp(true);\n    } else if (data.type == \"youtube-apps\") {\n      setShowYoutubeApp(true);\n    }\n    console.log(\"type\", data);\n  };\n\n  return (\n    <>\n      <UrlAppModal\n        setShowUrlApp={() => setShowUrlApp(false)}\n        show={showUrlApp}\n        mediaData={selectedMedia}\n        actionType={\"edit\"}\n      />\n      <YoutubeAppModal\n        setShowUrlApp={() => setShowYoutubeApp(false)}\n        show={showYoutubeApp}\n        mediaData={selectedMedia}\n        actionType={\"edit\"}\n      />\n      <Table\n        responsive\n        className=\"custom-table screen-table layout-table h-100\"\n      >\n        <thead>\n          <tr>\n            <th>Media</th>\n            <th>Type</th>\n            <th>Tags</th>\n          </tr>\n        </thead>\n        <tbody>\n          {allMedia &&\n            allMedia.map((media) => {\n              return (\n                <tr\n                  key={media._id}\n                  onClick={() => {\n                    addComposition(media);\n                  }}\n                >\n                  <td>\n                    <span className=\"td-content d-flex name-td-content\">\n                      <span\n                        className={`name-img mr-2  ${\n                          media.type === \"video\" && \"videotableName\"\n                        }`}\n                      >\n                        {media.type === \"image\" && (\n                          <img\n                            className=\"media-img img-fluid\"\n                            src={`${BASE_URL}${media.title}`}\n                            alt=\"media-img\"\n                          />\n                        )}\n                        {media.type === \"video\" && videoMetaDuration(media)}\n                      </span>\n                      <span className=\"name-content d-flex flex-column flex-grow-1\">\n                        <strong>\n                          {\n                            media.title.split(\"/\")[\n                              media.title.split(\"/\").length - 1\n                            ]\n                          }\n                        </strong>\n                        <span>{media.createdBy.name}</span>\n                      </span>\n                    </span>\n                  </td>\n\n                  <td>\n                    <div className=\"d-flex align-items-center \">\n                      <span>\n                        {media.type.slice(0, 1).toUpperCase() +\n                          media.type.slice(1)}\n                      </span>\n\n                      {media.type == \"youtube-apps\" ||\n                      media.type == \"url-apps\" ? (\n                        // <button\n                        //   onClick={(e) => {\n                        //     handleEdit(e, media);\n                        //   }}\n                        // >\n                        //   Edi\n                        // </button>\n                        <span className=\"layout-edit-btn ml-3 \">\n                          <img\n                            className=\"edit-icon cursorPointer\"\n                            src={editBtnImg}\n                            alt=\"icon\"\n                            onClick={(e) => {\n                              handleEdit(e, media);\n                            }}\n                          />\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </td>\n                  <td>\n                    {media.tags.map((tag) => {\n                      return (\n                        <span className=\"my-phone-tag text-truncate ml-1\">\n                          {tag}\n                        </span>\n                      );\n                    })}\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default CompositionTable;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/layout/Composition/ZoneInfoTable.jsx",["870","871","872","873","874","875","876","877","878","879"],"import React, { useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nimport editBtnImg from \"../../../../img/edit-btn.png\";\nimport deleteBtnImg from \"../../../../img/delete-btn.png\";\nimport { BASE_URL } from \"../../../../utils/api\";\nimport EditSelectedComposition from \"../../../modals/editSelectedComposition\";\n\nconst ZoneInfoTable = ({\n  content,\n  setContent,\n  setReferenceUrl,\n  layout,\n  handleLayout,\n}) => {\n  const [editSelected, setEditSelected] = useState(null);\n  const [selectedZone, setSelectedZone] = useState(\"Zone1\");\n  const [activeClass, setActiveClass] = useState(false);\n  const [selectedButtonIndex, setSelectedButtonIndex] = useState(null);\n\n  const handleChange = (event, index) => {\n    const newValue = event.target.value.replace(/[^\\d]/g, \"\");\n    setContent((prev) => {\n      const updateMedia = prev.map((val, key) => {\n        if (key === index) {\n          val.duration = newValue;\n        }\n        return val;\n      });\n      return [...updateMedia];\n    });\n  };\n  const makeZoneColor = (zones) => {\n    const data = {};\n    zones.forEach((item, index) => {\n      data[item.name] = index == 0 ? true : false;\n    });\n    return data;\n  };\n  const [zoneColor, setZoneColor] = useState(makeZoneColor(layout.zones));\n\n  const handleZoneButton = (zone1) => {\n    setZoneColor({ ...zoneColor, [selectedZone]: false, [zone1]: true });\n    setSelectedZone(zone1);\n    handleLayout(zone1);\n  };\n\n  const Duration = (composition, index) => {\n    return (\n      <div className=\"tag-container mediaDUrationTag\">\n        {\" \"}\n        <input\n          onChange={(event) => {\n            handleChange(event, index);\n          }}\n          value={Number(composition.duration).toFixed(0)}\n          disabled={composition.type === \"video\"}\n        />\n        <span>sec</span>\n      </div>\n    );\n  };\n  const TotalDuration = () => {\n    let total = 0;\n    content.forEach((composition) => {\n      total += Number(composition.duration);\n    });\n    return total.toFixed(0);\n  };\n\n  const removeComposition = (index) => {\n    setContent((prev) => {\n      const updateMedia = prev.filter((val, key) => key !== index);\n      return [...updateMedia];\n    });\n\n    setReferenceUrl((prev) => {\n      const updateUrl = prev.filter((val, key) => key !== index);\n      return [...updateUrl];\n    });\n  };\n\n  const editComposition = (index) => {\n    setEditSelected(index);\n  };\n\n  const updateViewType = (data, viewImage, ImgUrl) => {\n    setContent((prev) => {\n      const updateMedia = prev.map((val, key) => {\n        if (key === editSelected) {\n          val.fitToScreen = viewImage === \"fitScreen\";\n          val.maintainAspectRatio = viewImage === \"aspectRation\";\n          val.crop = viewImage === \"crop\" ? true : false;\n        }\n        return val;\n      });\n      return [...updateMedia];\n    });\n\n    setReferenceUrl((prev) => {\n      const updateMedia = prev.map((val, key) => {\n        if (key === editSelected) {\n          return ImgUrl+\"**\"+selectedZone;\n        } else {\n          return val;\n        }\n      });\n      return [...updateMedia];\n    });\n  };\n\n  const handleButtonClick = (index) => {\n    setSelectedButtonIndex(index);\n    // Perform any other logic specific to the clicked button\n  };\n\n  return (\n    <>\n      <Table\n        responsive\n        className=\"custom-table screen-table layout-table h-100\"\n      >\n        <thead>\n          <tr>\n            <th colSpan={4}>\n              <span className=\"d-flex flex-wrap\">\n                {layout && (layout.title === 'Single Zone Potrait' || layout.title === 'Two Zone Potrait') ?\n                    <span\n                      className={`yellow-box-portrait ${layout.title}`}\n                      style={{\n                        backgroundColor:\n                          layout &&\n                          (layout.zones.length == 2\n                            ? \"#fff\"\n                            : \"#ffc12b\"),\n                      }}\n                    >\n                      {layout && layout.zones.length == 2 ? (\n                        <>\n                          <div\n                            className=\"zone-layout2\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                          <div\n                            className=\"zone-layout22\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                        </>\n                      ) : (\n                        <></>\n                      )}\n                    </span> : \n                    <span\n                      className={`yellow-box ${layout.title}`}\n                      style={{\n                        backgroundColor:\n                          layout &&\n                          (layout.zones.length == 2 || layout.zones.length == 3\n                            ? \"#fff\"\n                            : \"#ffc12b\"),\n                      }}\n                    >\n                      {layout && layout.zones.length == 2 ? (\n                        <>\n                          <div\n                            className=\"zone-layout2\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                          <div\n                            className=\"zone-layout22\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                        </>\n                      ) : (\n                        <></>\n                      )}\n                      {layout && layout.zones.length == 3 ? (\n                        <>\n                          <div\n                            className=\"zone-layout31\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone1\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                          <div\n                            className=\"zone-layout32\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone2\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                          <div\n                            className=\"zone-layout33\"\n                            style={{\n                              backgroundColor: zoneColor[\"Zone3\"] ? \"#ffc12b\" : \"\",\n                            }}\n                          ></div>\n                        </>\n                      ) : (\n                        <></>\n                      )}\n                    </span>\n                    }\n                \n                {layout &&\n                  layout.zones.map((item, i) => {\n                    return (\n                      <button\n                        key={i}\n                        onClick={() => {\n                          handleZoneButton(item.name);\n                          handleButtonClick(i);\n                          // setActiveClass(true);\n                        }}\n                        // className=\"zone\"\n                        // className={activeClass ? \"zone zone-active \" : \"zone\"}\n                        className={\n                          selectedButtonIndex === i\n                            ? \"zone zone-active \"\n                            : \"zone\"\n                        }\n                      >\n                        {item.name}\n                      </button>\n                    );\n                  })}\n                <span className=\"duration\">\n                  Duration : {TotalDuration()} sec\n                </span>\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {content.map((composition, index) => {\n            return composition.zone == selectedZone ? (\n              <tr key={composition.id}>\n                <td>{index + 1}.</td>\n                <td>\n                  <span className=\"td-content d-flex name-td-content\">\n                    <span\n                      className={`name-img mr-2  ${\n                        composition.type === \"video\" && \"videotableName\"\n                      }`}\n                    >\n                      {composition.type === \"image\" && (\n                        <img\n                          className=\"media-img img-fluid\"\n                          src={`${BASE_URL}${composition.url}`}\n                          alt=\"media-img\"\n                        />\n                      )}\n                      {composition.type === \"video\" &&\n                        composition.duration.toFixed(0) / 60}\n                    </span>\n                    <span className=\"name-content d-flex flex-column flex-grow-1\">\n                      <strong>\n                        {\n                          composition.url.split(\"/\")[\n                            composition.url.split(\"/\").length - 1\n                          ]\n                        }\n                      </strong>\n                      <span>{composition.createdBy}</span>\n                    </span>\n                  </span>\n                </td>\n                <td style={{ width: \"180px\" }}>\n                  {Duration(composition, index)}\n                </td>\n                <td>\n                  <span className=\"layout-edit-btn mr-2 \">\n                    <img\n                      className=\"edit-icon cursorPointer\"\n                      src={editBtnImg}\n                      alt=\"search\"\n                      onClick={() => {\n                        // if(composition.type === \"image\"){\n                        editComposition(index);\n                        // }\n                      }}\n                    />\n                  </span>\n                  <span\n                    className=\"layout-edit-btn\"\n                    onClick={() => {\n                      removeComposition(index);\n                    }}\n                  >\n                    <img\n                      className=\"edit-icon cursorPointer\"\n                      src={deleteBtnImg}\n                      alt=\"search\"\n                    />\n                  </span>\n                </td>\n              </tr>\n            ) : (\n              <></>\n            );\n          })}\n        </tbody>\n      </Table>\n\n      {editSelected !== null && (\n        <EditSelectedComposition\n          composition={content[editSelected]}\n          setEditSelected={setEditSelected}\n          updateViewType={updateViewType}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ZoneInfoTable;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/saveCompositionName.jsx",["880","881"],"import { Button, Modal, Row, Col, Badge } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport tagCloseIcon from \"../../img/tag-close-icon.png\";\n\nconst SaveCompositionName = ({\n  setModalState,\n  saveComposition,\n  name,\n  setName,\n}) => {\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-medium\"\n      show={true}\n      size=\"md\"\n    >\n      <Modal.Header>\n        <Modal.Title>Save Composition</Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setModalState(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"add-screen-paragraph\">\n          <p>Give your composition a name.</p>\n        </div>\n\n        <Row>\n          <Col lg={12} md={12} sm={12} xs={12}>\n            <div className=\"form-group\">\n              <input\n                value={name}\n                onChange={(event) => {\n                  setName(event.target.value);\n                }}\n                type=\"text\"\n                className=\"form-control input-default form-field\"\n                placeholder=\"Enter Name\"\n              />\n            </div>\n          </Col>\n        </Row>\n      </Modal.Body>\n      <Modal.Footer>\n        <Row className=\"w-100 m-0\">\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-0 pr-2\">\n            <Button\n              className=\"cancel-btn w-100\"\n              variant=\"outline-light\"\n              onClick={() => setModalState(false)}\n            >\n              Cancel\n            </Button>\n          </Col>\n          <Col lg={6} md={6} sm={6} xs={6} className=\"pl-2 pr-0\">\n            <Button\n              variant=\"\"\n              type=\"button\"\n              className=\"btn btn-primary btn-block primary-btn\"\n              onClick={() =>{\n                if(name.length){\n                  saveComposition()\n                }\n              }}\n            >\n              Save\n            </Button>\n          </Col>\n        </Row>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default SaveCompositionName;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/previewComposition.jsx",["882","883","884","885","886","887","888"],"import { Button, Modal } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\nimport { BASE_URL } from \"../../utils/api\";\nimport { isBlobUrl } from \"../../utils/UtilsService\";\nconst PreviewComposition = ({\n  setShowPreview,\n  content,\n  contentnew,\n  layout,\n  referenceUrl,\n  referenceUrlArray,\n}) => {\n  console.log(layout, \"layout\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [current1Index, setCurrent1Index] = useState(0);\n  const [current2Index, setCurrent2Index] = useState(0);\n  const timeoutRef = useRef(\"\");\n  const timeout1Ref = useRef(\"\");\n  const divRef = useRef(null);\n  useEffect(() => {\n    if (layout && layout.zones.length == 1) {\n      if (contentnew.Zone1[currentIndex]) {\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contentnew.Zone1.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n    } else if (layout && layout.zones.length == 2) {\n      if (contentnew.Zone1[currentIndex]) {\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contentnew.Zone1.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\n        const timeout1Duration =\n          contentnew.Zone2[current1Index].duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current1Index === contentnew.Zone2.length - 1) {\n            setCurrent1Index(0);\n          } else {\n            setCurrent1Index((current1Index) => current1Index + 1);\n          }\n        }, timeout1Duration);\n      }\n    } else if (layout && layout.zones.length == 3) {\n      if (contentnew.Zone1[currentIndex]) {\n        const timeoutDuration = contentnew.Zone1[currentIndex].duration * 1000;\n        timeoutRef.current = setTimeout(() => {\n          if (currentIndex === contentnew.Zone1.length - 1) {\n            setCurrentIndex(0);\n          } else {\n            setCurrentIndex((currentIndex) => currentIndex + 1);\n          }\n        }, timeoutDuration);\n      }\n      if (contentnew.Zone2 && contentnew.Zone2[current1Index]) {\n        const timeout1Duration =\n          contentnew.Zone2[current1Index].duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current1Index === contentnew.Zone2.length - 1) {\n            setCurrent1Index(0);\n          } else {\n            setCurrent1Index((current1Index) => current1Index + 1);\n          }\n        }, timeout1Duration);\n      }\n      if (contentnew.Zone3 && contentnew.Zone3[current2Index]) {\n        const timeout1Duration =\n          contentnew.Zone3[current2Index]?.duration * 1000;\n        timeout1Ref.current = setTimeout(() => {\n          if (current2Index === contentnew.Zone3.length - 1) {\n            setCurrent2Index(0);\n          } else {\n            setCurrent2Index((current2Index) => current2Index + 1);\n          }\n        }, timeout1Duration);\n      }\n    }\n\n    return () => clearTimeout(timeoutRef.current);\n  }, [currentIndex, current1Index]);\n\n  const onFullScreen = () => {\n    const element = document.getElementsByClassName(\n      \"modal-priview-composition\"\n    )[0];\n    // if (element.classList.contains(\"fullscreen-mode\")) {\n    //   element.classList.remove(\"fullscreen-mode\");\n    // }\n\n    if (element) {\n      // divRef.current.requestFullscreen();\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n      element.classList.add(\"fullscreen-mode\");\n    }\n  };\n\n  const viewImage = content[currentIndex].fitToScreen\n    ? \"fitScreen\"\n    : content[currentIndex].crop\n    ? \"crop\"\n    : \"aspectRation\";\n\n  // const url = isBlobUrl(referenceUrl[currentIndex])\n  //   ? referenceUrl[currentIndex]\n  //   : `${BASE_URL}${referenceUrl[currentIndex]}`;\n\n  const url =\n    referenceUrlArray.Zone1 && referenceUrlArray.Zone1[currentIndex]\n      ? isBlobUrl(referenceUrlArray.Zone1[currentIndex])\n        ? referenceUrlArray.Zone1[currentIndex]\n        : `${BASE_URL}${referenceUrlArray.Zone1[currentIndex]}`\n      : \"\";\n\n  const url1 =\n    referenceUrlArray.Zone2 && referenceUrlArray.Zone2[current1Index]\n      ? isBlobUrl(referenceUrlArray.Zone2[current1Index])\n        ? referenceUrlArray.Zone2[current1Index]\n        : `${BASE_URL}${referenceUrlArray.Zone2[current1Index]}`\n      : \"\";\n\n  const url2 =\n    referenceUrlArray.Zone3 && referenceUrlArray.Zone3[current2Index]\n      ? isBlobUrl(referenceUrlArray.Zone3[current2Index])\n        ? referenceUrlArray.Zone3[current2Index]\n        : `${BASE_URL}${referenceUrlArray.Zone3[current2Index]}`\n      : \"\";\n\n  return (\n    <Modal\n      className={`fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview ${layout.screenType}-view`}\n      show={true}\n      size=\"xl\"\n    >\n      <Modal.Header style={{ paddingBottom: \"0px\" }}>\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\n\n        <Button variant=\"\" className=\"close \" onClick={() => onFullScreen()}>\n          <i class=\"fa fa-expand fullscreenbtn\"></i>\n        </Button>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setShowPreview(false)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body ref={divRef} style={{ padding: \"15px\" }}>\n        {layout && layout.zones.length == 1 ? (\n          <>\n            {content[currentIndex] &&\n              content[currentIndex].type === \"image\" && (\n                <div\n                  className=\"basic-list-group image-preview-container media-content modal-priview-composition\"\n                  style={{ height: \"560px\" }}\n                >\n                  <img\n                    className=\"webplayer-preview-img\"\n                    style={{\n                      objectFit: `${\n                        viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                      }`,\n                    }}\n                    src={url}\n                    alt=\"media-img\"\n                  />\n                </div>\n              )}\n            {content[currentIndex] &&\n              content[currentIndex].type === \"video\" && (\n                <div\n                  className={`basic-list-group video-container media-content ${viewImage} ${\n                    viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                  }`}\n                >\n                  <WebVideoPlayer src={url}></WebVideoPlayer>\n                </div>\n              )}\n          </>\n        ) : layout.zones.length == 2 ? (\n          <div className=\"modal-priview-composition\" style={{ height: \"80vh\" }}>\n            <div className=\"top-div\">\n              {contentnew.Zone1[currentIndex] &&\n                contentnew.Zone1[currentIndex].type === \"image\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <img\n                      className=\"webplayer-preview-img\"\n                      style={{\n                        objectFit: `${\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                        }`,\n                      }}\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\n                      src={url}\n                      alt=\"media-img\"\n                    />\n                  </div>\n                )}\n              {contentnew.Zone2 &&\n                contentnew.Zone1[currentIndex] &&\n                contentnew.Zone1[currentIndex].type === \"video\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                    style={{ height: \"100%\" }}\n                  >\n                    <WebVideoPlayer\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\n                      src={url}\n                    ></WebVideoPlayer>\n                  </div>\n                )}\n            </div>\n            <div className=\"bottom-div\">\n              {contentnew.Zone2 &&\n                contentnew.Zone2[current1Index] &&\n                contentnew.Zone2[current1Index].type === \"image\" && (\n                  <div\n                    className=\"basic-list-group image-preview-container media-content\"\n                    style={{ height: \"100%\" }}\n                  >\n                    <img\n                      className=\"webplayer-preview-img\"\n                      style={{\n                        objectFit: `${\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                        }`,\n                      }}\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\n                      src={url1}\n                      alt=\"media-img\"\n                    />\n                  </div>\n                )}\n              {contentnew.Zone2 &&\n                contentnew.Zone2[current1Index] &&\n                contentnew.Zone2[current1Index].type === \"video\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                    style={{ height: \"100%\" }}\n                  >\n                    <WebVideoPlayer\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\n                      src={url1}\n                    ></WebVideoPlayer>\n                  </div>\n                )}\n            </div>\n          </div>\n        ) : layout.zones.length == 3 ? (\n          <div\n            className=\"modal-priview-composition\"\n            style={{ height: \"560px\" }}\n          >\n            <div className=\"third-compoition-container\">\n              <div className=\"third-composition-top-div\">\n                {contentnew.Zone1[currentIndex] &&\n                  contentnew.Zone1[currentIndex].type === \"image\" && (\n                    <div className=\"basic-list-group image-preview-container media-content\">\n                      <img\n                        className=\"webplayer-preview-img\"\n                        style={{\n                          objectFit: `${\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                          }`,\n                        }}\n                        // src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\n                        src={url}\n                        alt=\"media-img\"\n                      />\n                    </div>\n                  )}\n                {contentnew.Zone1[currentIndex] &&\n                  contentnew.Zone1[currentIndex].type === \"video\" && (\n                    <div\n                      className={`basic-list-group video-container media-content ${viewImage} ${\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                      }`}\n                    >\n                      <WebVideoPlayer\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone1[currentIndex].url}`}\n                        src={url}\n                      ></WebVideoPlayer>\n                    </div>\n                  )}\n              </div>\n              <div className=\"third-composition-second-div\">\n                {contentnew.Zone2[current1Index] &&\n                  contentnew.Zone2[current1Index].type === \"image\" && (\n                    <div className=\"basic-list-group image-preview-container media-content\">\n                      <img\n                        className=\"webplayer-preview-img\"\n                        style={{\n                          objectFit: `${\n                            viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                          }`,\n                        }}\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\n                        src={url1}\n                        alt=\"media-img\"\n                      />\n                    </div>\n                  )}\n                {contentnew.Zone2[current1Index] &&\n                  contentnew.Zone2[current1Index].type === \"video\" && (\n                    <div\n                      className={`basic-list-group video-container media-content ${viewImage} ${\n                        viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                      }`}\n                    >\n                      <WebVideoPlayer\n                        //src={`http://144.126.143.140:5000/${contentnew.Zone2[current1Index].url}`}\n                        src={url1}\n                      ></WebVideoPlayer>\n                    </div>\n                  )}\n              </div>\n            </div>\n\n            <div className=\"third-composition-third-div\">\n              {contentnew.Zone3[current2Index] &&\n                contentnew.Zone3[current2Index].type === \"image\" && (\n                  <div className=\"basic-list-group image-preview-container media-content\">\n                    <img\n                      className=\"webplayer-preview-img\"\n                      style={{\n                        objectFit: `${\n                          viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                        }`,\n                      }}\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone3[current2Index].url}`}\n                      src={url2}\n                      alt=\"media-img\"\n                    />\n                  </div>\n                )}\n              {contentnew.Zone3[current2Index] &&\n                contentnew.Zone3[current2Index].type === \"video\" && (\n                  <div\n                    className={`basic-list-group video-container media-content ${viewImage} ${\n                      viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n                    }`}\n                  >\n                    <WebVideoPlayer\n                      //src={`http://144.126.143.140:5000/${contentnew.Zone3[current2Index].url}`}\n                      src={url}\n                    ></WebVideoPlayer>\n                  </div>\n                )}\n            </div>\n          </div>\n        ) : (\n          <></>\n        )}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default PreviewComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/modals/editSelectedComposition.jsx",["889","890","891","892","893"],"import { useCallback, useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport cancelIcon from \"../../img/cancel-icon.png\";\nimport WebVideoPlayer from \"../components/web-player/WebVideoPlayer\";\nimport { BASE_URL } from \"../../utils/api\";\nimport ImageCroper from \"../components/cropImage\";\nimport getCroppedImg from \"../components/cropImage/cropImage\";\nimport VideoThumbnail from \"react-video-thumbnail\";\nconst EditSelectedComposition = ({\n  composition,\n  setEditSelected,\n  updateViewType,\n}) => {\n  const getDefault = composition.fitToScreen\n    ? \"fitScreen\"\n    : composition.crop\n    ? \"crop\"\n    : \"aspectRation\";\n  const [viewImage, setViewImage] = useState(getDefault);\n  const [isLoading, setIsLoading] = useState(false);\n  const [zoom, setZoom] = useState(\n    composition.crop ? composition.crop.zoom : 1\n  );\n\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(\n    composition.crop ? composition.crop : null\n  );\n  const handleUpload = async () => {\n    const data = {\n      ...croppedAreaPixels,\n      zoom: zoom,\n    };\n    let ImgUrl = \"\";\n    if (viewImage === \"crop\") {\n      const getData = await getCroppedImg(\n        `${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`,\n        croppedAreaPixels\n      );\n      ImgUrl = getData;\n    } else {\n      ImgUrl = composition.url;\n    }\n\n    updateViewType(data, viewImage, ImgUrl);\n    setEditSelected(null);\n  };\n\n  const handleOptionChange = (e) => {\n    setViewImage(e.target.value);\n  };\n\n  return (\n    <Modal\n      className=\"fade bd-example-modal-lg mt-4 custom-modal custom-modal-large custom-modal-preview\"\n      show={true}\n      size=\"xl\"\n    >\n      <Modal.Header>\n        <Modal.Title className=\"mr-auto\">Preview</Modal.Title>\n        <Button\n          variant=\"\"\n          className=\"close\"\n          onClick={() => setEditSelected(null)}\n        >\n          <img className=\"cancel-icon\" src={cancelIcon} alt=\"cancel-icon\" />\n        </Button>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"custom-container\">\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"viewImage\"\n              value=\"fitScreen\"\n              id=\"fitScreen\"\n              onChange={handleOptionChange}\n              defaultChecked={viewImage === \"fitScreen\"}\n            />\n            <label className=\"form-check-label\" htmlFor=\"fitScreen\">\n              Fit to Screen\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"viewImage\"\n              value=\"aspectRation\"\n              id=\"aspectRation\"\n              onChange={handleOptionChange}\n              defaultChecked={viewImage === \"aspectRation\"}\n            />\n            <label className=\"form-check-label\" htmlFor=\"aspectRation\">\n              Maintain Aspect Ratio\n            </label>\n          </div>\n          {composition.type !== \"video\" && (\n            <div className=\"form-check\">\n              <input\n                className=\"form-check-input\"\n                type=\"radio\"\n                name=\"viewImage\"\n                value=\"crop\"\n                id=\"crop\"\n                onChange={handleOptionChange}\n                defaultChecked={viewImage === \"crop\"}\n              />\n              <label className=\"form-check-label\" htmlFor=\"crop\">\n                Crop\n              </label>\n            </div>\n          )}\n        </div>\n        {composition && composition.type === \"image\" && (\n          <>\n            <div\n              className=\"basic-list-group image-preview-container media-content image-preview-editable\"\n              style={{\n                border: \"1px solid\",\n                marginTop: viewImage == \"crop\" ? \"0%\" : \"4%\",\n                height: viewImage == \"crop\" ? \"560px\" : \"560px\",\n              }}\n            >\n              {viewImage === \"crop\" && (\n                <ImageCroper\n                  imgSrc={`${composition.url}`}\n                  zoom={zoom}\n                  setZoom={setZoom}\n                  croppedAreaPixels={croppedAreaPixels}\n                  setCroppedAreaPixels={setCroppedAreaPixels}\n                />\n              )}\n              {viewImage !== \"crop\" && (\n                <img\n                  className=\"webplayer-preview-img\"\n                  style={{\n                    objectFit: `${\n                      viewImage === \"fitScreen\" ? \"fill\" : \"contain\"\n                    }`,\n                  }}\n                  src={`${BASE_URL}${composition.url}`}\n                  alt=\"media-img\"\n                />\n              )}\n            </div>{\" \"}\n            {viewImage === \"crop\" && (\n              <div className=\"controls\">\n                <input\n                  type=\"range\"\n                  value={zoom}\n                  min={1}\n                  max={3}\n                  step={0.1}\n                  aria-labelledby=\"Zoom\"\n                  onChange={(e) => {\n                    setZoom(e.target.value);\n                  }}\n                  className=\"zoom-range\"\n                />\n              </div>\n            )}\n          </>\n        )}\n        {composition && composition.type === \"video\" && (\n          <div\n            className={`basic-list-group image-preview-container media-content image-preview-editable ${\n              viewImage === \"fitScreen\" ? \"fitImage\" : \"containImage\"\n            }`}\n            style={{ border: \"1px solid\", marginTop: \"15px\" }}\n          >\n            <VideoThumbnail\n              videoUrl={`${BASE_URL}/vendor/display/mediaFile?path=${composition.url}`}\n              thumbnailHandler={(thumbnail) => console.log(thumbnail)}\n              width={1280}\n              height={720}\n            />\n          </div>\n        )}\n      </Modal.Body>\n      <Modal.Footer>\n        <div className=\"loader-button-container\">\n          <Button\n            variant=\"\"\n            type=\"button\"\n            disabled={isLoading}\n            className={`btn btn-primary btn-block primary-btn`}\n            onClick={() => handleUpload()}\n          >\n            {isLoading ? <div className=\"loader\"></div> : \"Apply\"}\n          </Button>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default EditSelectedComposition;\n","/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/cropImage/cropImage.jsx",[],"/Users/mac/Desktop/trendy/web-copy/trendy-content-display-frontend/src/jsx/components/cropImage/index.jsx",["894","895","896"],"import React, { useState, useCallback } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Cropper from 'react-easy-crop'\n\nimport getCroppedImg from \"./cropImage\";\nimport { BASE_URL } from \"../../../utils/api\";\n\nconst ImageCroper = ({\n  imgSrc,\n  zoom,\n  setZoom,\n  setCroppedAreaPixels,\n  croppedAreaPixels,\n}) => {\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  return (\n    <Cropper\n      image={`${BASE_URL}${imgSrc}`}\n      crop={crop}\n      zoom={zoom}\n      aspect={16 / 9}\n      onCropChange={setCrop}\n      onCropComplete={onCropComplete}\n      onZoomChange={setZoom}\n    />\n  );\n};\n\nexport default ImageCroper;\n",{"ruleId":"897","replacedBy":"898"},{"ruleId":"899","replacedBy":"900"},{"ruleId":"901","severity":1,"message":"902","line":1,"column":37,"nodeType":"903","messageId":"904","endLine":1,"endColumn":45},{"ruleId":"901","severity":1,"message":"905","line":2,"column":10,"nodeType":"903","messageId":"904","endLine":2,"endColumn":12},{"ruleId":"901","severity":1,"message":"906","line":16,"column":8,"nodeType":"903","messageId":"904","endLine":16,"endColumn":16},{"ruleId":"907","severity":1,"message":"908","line":38,"column":8,"nodeType":"909","endLine":38,"endColumn":33,"suggestions":"910"},{"ruleId":"901","severity":1,"message":"911","line":6,"column":10,"nodeType":"903","messageId":"904","endLine":6,"endColumn":13},{"ruleId":"901","severity":1,"message":"912","line":6,"column":15,"nodeType":"903","messageId":"904","endLine":6,"endColumn":18},{"ruleId":"901","severity":1,"message":"913","line":6,"column":20,"nodeType":"903","messageId":"904","endLine":6,"endColumn":24},{"ruleId":"901","severity":1,"message":"914","line":1,"column":17,"nodeType":"903","messageId":"904","endLine":1,"endColumn":26},{"ruleId":"901","severity":1,"message":"902","line":1,"column":28,"nodeType":"903","messageId":"904","endLine":1,"endColumn":36},{"ruleId":"901","severity":1,"message":"915","line":30,"column":8,"nodeType":"903","messageId":"904","endLine":30,"endColumn":23},{"ruleId":"901","severity":1,"message":"916","line":42,"column":8,"nodeType":"903","messageId":"904","endLine":42,"endColumn":19},{"ruleId":"901","severity":1,"message":"917","line":115,"column":9,"nodeType":"903","messageId":"904","endLine":115,"endColumn":27},{"ruleId":"918","severity":1,"message":"919","line":170,"column":14,"nodeType":"920","messageId":"921","endLine":170,"endColumn":16},{"ruleId":"918","severity":1,"message":"919","line":204,"column":14,"nodeType":"920","messageId":"921","endLine":204,"endColumn":16},{"ruleId":"901","severity":1,"message":"922","line":602,"column":23,"nodeType":"903","messageId":"904","endLine":602,"endColumn":30},{"ruleId":"901","severity":1,"message":"923","line":1,"column":28,"nodeType":"903","messageId":"904","endLine":1,"endColumn":34},{"ruleId":"901","severity":1,"message":"924","line":11,"column":3,"nodeType":"903","messageId":"904","endLine":11,"endColumn":14},{"ruleId":"901","severity":1,"message":"925","line":20,"column":17,"nodeType":"903","messageId":"904","endLine":20,"endColumn":25},{"ruleId":"901","severity":1,"message":"926","line":25,"column":10,"nodeType":"903","messageId":"904","endLine":25,"endColumn":14},{"ruleId":"901","severity":1,"message":"927","line":27,"column":7,"nodeType":"903","messageId":"904","endLine":27,"endColumn":21},{"ruleId":"901","severity":1,"message":"928","line":36,"column":10,"nodeType":"903","messageId":"904","endLine":36,"endColumn":18},{"ruleId":"901","severity":1,"message":"929","line":39,"column":15,"nodeType":"903","messageId":"904","endLine":39,"endColumn":27},{"ruleId":"901","severity":1,"message":"930","line":42,"column":33,"nodeType":"903","messageId":"904","endLine":42,"endColumn":39},{"ruleId":"901","severity":1,"message":"931","line":101,"column":11,"nodeType":"903","messageId":"904","endLine":101,"endColumn":13},{"ruleId":"918","severity":1,"message":"919","line":104,"column":22,"nodeType":"920","messageId":"921","endLine":104,"endColumn":24},{"ruleId":"932","severity":1,"message":"933","line":105,"column":27,"nodeType":"934","messageId":"935","endLine":105,"endColumn":73,"fix":"936"},{"ruleId":"937","severity":1,"message":"938","line":227,"column":13,"nodeType":"939","endLine":227,"endColumn":75},{"ruleId":"901","severity":1,"message":"925","line":17,"column":17,"nodeType":"903","messageId":"904","endLine":17,"endColumn":25},{"ruleId":"901","severity":1,"message":"940","line":20,"column":8,"nodeType":"903","messageId":"904","endLine":20,"endColumn":16},{"ruleId":"901","severity":1,"message":"941","line":21,"column":8,"nodeType":"903","messageId":"904","endLine":21,"endColumn":29},{"ruleId":"901","severity":1,"message":"942","line":23,"column":8,"nodeType":"903","messageId":"904","endLine":23,"endColumn":18},{"ruleId":"901","severity":1,"message":"943","line":24,"column":8,"nodeType":"903","messageId":"904","endLine":24,"endColumn":18},{"ruleId":"901","severity":1,"message":"944","line":38,"column":11,"nodeType":"903","messageId":"904","endLine":38,"endColumn":18},{"ruleId":"901","severity":1,"message":"931","line":39,"column":13,"nodeType":"903","messageId":"904","endLine":39,"endColumn":15},{"ruleId":"901","severity":1,"message":"945","line":57,"column":11,"nodeType":"903","messageId":"904","endLine":57,"endColumn":29},{"ruleId":"901","severity":1,"message":"946","line":16,"column":8,"nodeType":"903","messageId":"904","endLine":16,"endColumn":10},{"ruleId":"901","severity":1,"message":"947","line":24,"column":10,"nodeType":"903","messageId":"904","endLine":24,"endColumn":20},{"ruleId":"901","severity":1,"message":"948","line":24,"column":22,"nodeType":"903","messageId":"904","endLine":24,"endColumn":35},{"ruleId":"901","severity":1,"message":"949","line":25,"column":10,"nodeType":"903","messageId":"904","endLine":25,"endColumn":29},{"ruleId":"907","severity":1,"message":"950","line":60,"column":6,"nodeType":"909","endLine":60,"endColumn":10,"suggestions":"951"},{"ruleId":"918","severity":1,"message":"919","line":128,"column":18,"nodeType":"920","messageId":"921","endLine":128,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":283,"column":38,"nodeType":"920","messageId":"921","endLine":283,"endColumn":40},{"ruleId":"918","severity":1,"message":"919","line":334,"column":44,"nodeType":"920","messageId":"921","endLine":334,"endColumn":46},{"ruleId":"937","severity":1,"message":"938","line":449,"column":21,"nodeType":"939","endLine":454,"endColumn":23},{"ruleId":"937","severity":1,"message":"938","line":457,"column":21,"nodeType":"939","endLine":462,"endColumn":23},{"ruleId":"901","severity":1,"message":"952","line":630,"column":9,"nodeType":"903","messageId":"904","endLine":630,"endColumn":29},{"ruleId":"901","severity":1,"message":"923","line":1,"column":28,"nodeType":"903","messageId":"904","endLine":1,"endColumn":34},{"ruleId":"901","severity":1,"message":"924","line":11,"column":3,"nodeType":"903","messageId":"904","endLine":11,"endColumn":14},{"ruleId":"901","severity":1,"message":"953","line":13,"column":3,"nodeType":"903","messageId":"904","endLine":13,"endColumn":20},{"ruleId":"901","severity":1,"message":"925","line":21,"column":17,"nodeType":"903","messageId":"904","endLine":21,"endColumn":25},{"ruleId":"901","severity":1,"message":"926","line":26,"column":10,"nodeType":"903","messageId":"904","endLine":26,"endColumn":14},{"ruleId":"901","severity":1,"message":"927","line":28,"column":7,"nodeType":"903","messageId":"904","endLine":28,"endColumn":21},{"ruleId":"901","severity":1,"message":"928","line":37,"column":10,"nodeType":"903","messageId":"904","endLine":37,"endColumn":18},{"ruleId":"901","severity":1,"message":"954","line":37,"column":20,"nodeType":"903","messageId":"904","endLine":37,"endColumn":31},{"ruleId":"901","severity":1,"message":"930","line":43,"column":33,"nodeType":"903","messageId":"904","endLine":43,"endColumn":39},{"ruleId":"907","severity":1,"message":"955","line":117,"column":6,"nodeType":"909","endLine":117,"endColumn":13,"suggestions":"956"},{"ruleId":"901","severity":1,"message":"931","line":121,"column":11,"nodeType":"903","messageId":"904","endLine":121,"endColumn":13},{"ruleId":"918","severity":1,"message":"957","line":122,"column":55,"nodeType":"920","messageId":"921","endLine":122,"endColumn":57},{"ruleId":"918","severity":1,"message":"919","line":126,"column":22,"nodeType":"920","messageId":"921","endLine":126,"endColumn":24},{"ruleId":"932","severity":1,"message":"933","line":130,"column":13,"nodeType":"934","messageId":"935","endLine":130,"endColumn":59,"fix":"958"},{"ruleId":"932","severity":1,"message":"959","line":131,"column":13,"nodeType":"934","messageId":"935","endLine":131,"endColumn":77,"fix":"960"},{"ruleId":"932","severity":1,"message":"961","line":132,"column":13,"nodeType":"934","messageId":"935","endLine":132,"endColumn":75,"fix":"962"},{"ruleId":"932","severity":1,"message":"933","line":136,"column":13,"nodeType":"934","messageId":"935","endLine":136,"endColumn":59,"fix":"963"},{"ruleId":"918","severity":1,"message":"957","line":169,"column":55,"nodeType":"920","messageId":"921","endLine":169,"endColumn":57},{"ruleId":"918","severity":1,"message":"957","line":249,"column":39,"nodeType":"920","messageId":"921","endLine":249,"endColumn":41},{"ruleId":"937","severity":1,"message":"938","line":274,"column":13,"nodeType":"939","endLine":274,"endColumn":75},{"ruleId":"901","severity":1,"message":"964","line":2,"column":8,"nodeType":"903","messageId":"904","endLine":2,"endColumn":13},{"ruleId":"901","severity":1,"message":"965","line":62,"column":9,"nodeType":"903","messageId":"904","endLine":62,"endColumn":17},{"ruleId":"918","severity":1,"message":"919","line":304,"column":18,"nodeType":"920","messageId":"921","endLine":304,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":307,"column":18,"nodeType":"920","messageId":"921","endLine":307,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":310,"column":18,"nodeType":"920","messageId":"921","endLine":310,"endColumn":20},{"ruleId":"966","severity":1,"message":"967","line":58,"column":9,"nodeType":"968","messageId":"969","endLine":58,"endColumn":15},{"ruleId":"966","severity":1,"message":"967","line":61,"column":9,"nodeType":"968","messageId":"969","endLine":61,"endColumn":15},{"ruleId":"966","severity":1,"message":"967","line":64,"column":9,"nodeType":"968","messageId":"969","endLine":64,"endColumn":15},{"ruleId":"966","severity":1,"message":"967","line":67,"column":9,"nodeType":"968","messageId":"969","endLine":67,"endColumn":15},{"ruleId":"907","severity":1,"message":"970","line":41,"column":6,"nodeType":"909","endLine":41,"endColumn":8,"suggestions":"971"},{"ruleId":"901","severity":1,"message":"925","line":153,"column":18,"nodeType":"903","messageId":"904","endLine":153,"endColumn":26},{"ruleId":"901","severity":1,"message":"972","line":157,"column":10,"nodeType":"903","messageId":"904","endLine":157,"endColumn":19},{"ruleId":"901","severity":1,"message":"973","line":164,"column":10,"nodeType":"903","messageId":"904","endLine":164,"endColumn":19},{"ruleId":"901","severity":1,"message":"974","line":164,"column":21,"nodeType":"903","messageId":"904","endLine":164,"endColumn":33},{"ruleId":"901","severity":1,"message":"923","line":1,"column":28,"nodeType":"903","messageId":"904","endLine":1,"endColumn":34},{"ruleId":"901","severity":1,"message":"927","line":9,"column":7,"nodeType":"903","messageId":"904","endLine":9,"endColumn":21},{"ruleId":"901","severity":1,"message":"975","line":18,"column":17,"nodeType":"903","messageId":"904","endLine":18,"endColumn":25},{"ruleId":"901","severity":1,"message":"976","line":100,"column":11,"nodeType":"903","messageId":"904","endLine":100,"endColumn":19},{"ruleId":"901","severity":1,"message":"977","line":126,"column":20,"nodeType":"903","messageId":"904","endLine":126,"endColumn":28},{"ruleId":"937","severity":1,"message":"938","line":188,"column":17,"nodeType":"939","endLine":188,"endColumn":43},{"ruleId":"901","severity":1,"message":"944","line":10,"column":9,"nodeType":"903","messageId":"904","endLine":10,"endColumn":16},{"ruleId":"901","severity":1,"message":"978","line":12,"column":18,"nodeType":"903","messageId":"904","endLine":12,"endColumn":27},{"ruleId":"901","severity":1,"message":"979","line":13,"column":10,"nodeType":"903","messageId":"904","endLine":13,"endColumn":21},{"ruleId":"901","severity":1,"message":"980","line":22,"column":11,"nodeType":"903","messageId":"904","endLine":22,"endColumn":19},{"ruleId":"981","severity":1,"message":"982","line":28,"column":40,"nodeType":"983","messageId":"984","endLine":30,"endColumn":10},{"ruleId":"907","severity":1,"message":"950","line":41,"column":6,"nodeType":"909","endLine":41,"endColumn":10,"suggestions":"985"},{"ruleId":"901","severity":1,"message":"986","line":43,"column":10,"nodeType":"903","messageId":"904","endLine":43,"endColumn":22},{"ruleId":"901","severity":1,"message":"987","line":50,"column":11,"nodeType":"903","messageId":"904","endLine":50,"endColumn":22},{"ruleId":"901","severity":1,"message":"988","line":74,"column":9,"nodeType":"903","messageId":"904","endLine":74,"endColumn":19},{"ruleId":"901","severity":1,"message":"923","line":2,"column":28,"nodeType":"903","messageId":"904","endLine":2,"endColumn":34},{"ruleId":"901","severity":1,"message":"927","line":10,"column":7,"nodeType":"903","messageId":"904","endLine":10,"endColumn":21},{"ruleId":"901","severity":1,"message":"975","line":19,"column":17,"nodeType":"903","messageId":"904","endLine":19,"endColumn":25},{"ruleId":"901","severity":1,"message":"976","line":99,"column":11,"nodeType":"903","messageId":"904","endLine":99,"endColumn":19},{"ruleId":"901","severity":1,"message":"989","line":116,"column":9,"nodeType":"903","messageId":"904","endLine":116,"endColumn":25},{"ruleId":"901","severity":1,"message":"977","line":124,"column":20,"nodeType":"903","messageId":"904","endLine":124,"endColumn":28},{"ruleId":"937","severity":1,"message":"938","line":171,"column":17,"nodeType":"939","endLine":171,"endColumn":43},{"ruleId":"901","severity":1,"message":"990","line":604,"column":13,"nodeType":"903","messageId":"904","endLine":604,"endColumn":21},{"ruleId":"901","severity":1,"message":"991","line":741,"column":13,"nodeType":"903","messageId":"904","endLine":741,"endColumn":18},{"ruleId":"901","severity":1,"message":"992","line":758,"column":11,"nodeType":"903","messageId":"904","endLine":758,"endColumn":24},{"ruleId":"901","severity":1,"message":"993","line":784,"column":15,"nodeType":"903","messageId":"904","endLine":784,"endColumn":28},{"ruleId":"901","severity":1,"message":"972","line":3,"column":10,"nodeType":"903","messageId":"904","endLine":3,"endColumn":19},{"ruleId":"901","severity":1,"message":"994","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":16},{"ruleId":"901","severity":1,"message":"995","line":5,"column":18,"nodeType":"903","messageId":"904","endLine":5,"endColumn":23},{"ruleId":"918","severity":1,"message":"919","line":83,"column":33,"nodeType":"920","messageId":"921","endLine":83,"endColumn":35},{"ruleId":"918","severity":1,"message":"919","line":84,"column":33,"nodeType":"920","messageId":"921","endLine":84,"endColumn":35},{"ruleId":"918","severity":1,"message":"919","line":85,"column":33,"nodeType":"920","messageId":"921","endLine":85,"endColumn":35},{"ruleId":"901","severity":1,"message":"996","line":2,"column":8,"nodeType":"903","messageId":"904","endLine":2,"endColumn":14},{"ruleId":"907","severity":1,"message":"997","line":27,"column":6,"nodeType":"909","endLine":27,"endColumn":10,"suggestions":"998"},{"ruleId":"937","severity":1,"message":"938","line":91,"column":15,"nodeType":"939","endLine":91,"endColumn":53},{"ruleId":"937","severity":1,"message":"938","line":147,"column":15,"nodeType":"939","endLine":147,"endColumn":53},{"ruleId":"918","severity":1,"message":"919","line":36,"column":71,"nodeType":"920","messageId":"921","endLine":36,"endColumn":73},{"ruleId":"918","severity":1,"message":"919","line":49,"column":34,"nodeType":"920","messageId":"921","endLine":49,"endColumn":36},{"ruleId":"918","severity":1,"message":"919","line":52,"column":34,"nodeType":"920","messageId":"921","endLine":52,"endColumn":36},{"ruleId":"918","severity":1,"message":"919","line":55,"column":34,"nodeType":"920","messageId":"921","endLine":55,"endColumn":36},{"ruleId":"907","severity":1,"message":"999","line":58,"column":6,"nodeType":"909","endLine":58,"endColumn":18,"suggestions":"1000"},{"ruleId":"918","severity":1,"message":"919","line":204,"column":37,"nodeType":"920","messageId":"921","endLine":204,"endColumn":39},{"ruleId":"918","severity":1,"message":"919","line":209,"column":37,"nodeType":"920","messageId":"921","endLine":209,"endColumn":39},{"ruleId":"918","severity":1,"message":"919","line":214,"column":37,"nodeType":"920","messageId":"921","endLine":214,"endColumn":39},{"ruleId":"901","severity":1,"message":"1001","line":4,"column":10,"nodeType":"903","messageId":"904","endLine":4,"endColumn":15},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1003","line":4,"column":39,"nodeType":"903","messageId":"904","endLine":4,"endColumn":51},{"ruleId":"901","severity":1,"message":"1004","line":5,"column":3,"nodeType":"903","messageId":"904","endLine":5,"endColumn":21},{"ruleId":"901","severity":1,"message":"912","line":8,"column":10,"nodeType":"903","messageId":"904","endLine":8,"endColumn":13},{"ruleId":"901","severity":1,"message":"996","line":12,"column":8,"nodeType":"903","messageId":"904","endLine":12,"endColumn":14},{"ruleId":"901","severity":1,"message":"1005","line":18,"column":10,"nodeType":"903","messageId":"904","endLine":18,"endColumn":20},{"ruleId":"907","severity":1,"message":"1006","line":242,"column":6,"nodeType":"909","endLine":242,"endColumn":19,"suggestions":"1007"},{"ruleId":"901","severity":1,"message":"902","line":1,"column":17,"nodeType":"903","messageId":"904","endLine":1,"endColumn":25},{"ruleId":"901","severity":1,"message":"994","line":2,"column":10,"nodeType":"903","messageId":"904","endLine":2,"endColumn":16},{"ruleId":"901","severity":1,"message":"995","line":2,"column":18,"nodeType":"903","messageId":"904","endLine":2,"endColumn":23},{"ruleId":"901","severity":1,"message":"925","line":2,"column":25,"nodeType":"903","messageId":"904","endLine":2,"endColumn":33},{"ruleId":"901","severity":1,"message":"902","line":1,"column":17,"nodeType":"903","messageId":"904","endLine":1,"endColumn":25},{"ruleId":"901","severity":1,"message":"994","line":2,"column":10,"nodeType":"903","messageId":"904","endLine":2,"endColumn":16},{"ruleId":"901","severity":1,"message":"995","line":2,"column":18,"nodeType":"903","messageId":"904","endLine":2,"endColumn":23},{"ruleId":"901","severity":1,"message":"925","line":2,"column":25,"nodeType":"903","messageId":"904","endLine":2,"endColumn":33},{"ruleId":"901","severity":1,"message":"1008","line":4,"column":5,"nodeType":"903","messageId":"904","endLine":4,"endColumn":37},{"ruleId":"901","severity":1,"message":"941","line":5,"column":8,"nodeType":"903","messageId":"904","endLine":5,"endColumn":29},{"ruleId":"901","severity":1,"message":"1009","line":5,"column":8,"nodeType":"903","messageId":"904","endLine":5,"endColumn":24},{"ruleId":"901","severity":1,"message":"1010","line":9,"column":8,"nodeType":"903","messageId":"904","endLine":9,"endColumn":14},{"ruleId":"901","severity":1,"message":"1011","line":14,"column":9,"nodeType":"903","messageId":"904","endLine":14,"endColumn":21},{"ruleId":"901","severity":1,"message":"911","line":1,"column":25,"nodeType":"903","messageId":"904","endLine":1,"endColumn":28},{"ruleId":"901","severity":1,"message":"912","line":1,"column":30,"nodeType":"903","messageId":"904","endLine":1,"endColumn":33},{"ruleId":"901","severity":1,"message":"1012","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":20},{"ruleId":"901","severity":1,"message":"926","line":4,"column":10,"nodeType":"903","messageId":"904","endLine":4,"endColumn":14},{"ruleId":"901","severity":1,"message":"1002","line":2,"column":35,"nodeType":"903","messageId":"904","endLine":2,"endColumn":40},{"ruleId":"918","severity":1,"message":"919","line":78,"column":22,"nodeType":"920","messageId":"921","endLine":78,"endColumn":24},{"ruleId":"918","severity":1,"message":"919","line":165,"column":27,"nodeType":"920","messageId":"921","endLine":165,"endColumn":29},{"ruleId":"918","severity":1,"message":"919","line":273,"column":48,"nodeType":"920","messageId":"921","endLine":273,"endColumn":50},{"ruleId":"918","severity":1,"message":"919","line":282,"column":36,"nodeType":"920","messageId":"921","endLine":282,"endColumn":38},{"ruleId":"932","severity":1,"message":"1013","line":300,"column":31,"nodeType":"934","messageId":"935","endLine":300,"endColumn":52,"fix":"1014"},{"ruleId":"932","severity":1,"message":"1015","line":318,"column":31,"nodeType":"934","messageId":"935","endLine":318,"endColumn":52,"fix":"1016"},{"ruleId":"901","severity":1,"message":"925","line":4,"column":3,"nodeType":"903","messageId":"904","endLine":4,"endColumn":11},{"ruleId":"901","severity":1,"message":"994","line":5,"column":3,"nodeType":"903","messageId":"904","endLine":5,"endColumn":9},{"ruleId":"901","severity":1,"message":"1017","line":6,"column":3,"nodeType":"903","messageId":"904","endLine":6,"endColumn":8},{"ruleId":"901","severity":1,"message":"1002","line":9,"column":3,"nodeType":"903","messageId":"904","endLine":9,"endColumn":8},{"ruleId":"901","severity":1,"message":"1018","line":13,"column":10,"nodeType":"903","messageId":"904","endLine":13,"endColumn":16},{"ruleId":"907","severity":1,"message":"1019","line":25,"column":6,"nodeType":"909","endLine":25,"endColumn":30,"suggestions":"1020"},{"ruleId":"918","severity":1,"message":"919","line":119,"column":37,"nodeType":"920","messageId":"921","endLine":119,"endColumn":39},{"ruleId":"918","severity":1,"message":"919","line":648,"column":37,"nodeType":"920","messageId":"921","endLine":648,"endColumn":39},{"ruleId":"918","severity":1,"message":"919","line":1177,"column":37,"nodeType":"920","messageId":"921","endLine":1177,"endColumn":39},{"ruleId":"901","severity":1,"message":"914","line":1,"column":27,"nodeType":"903","messageId":"904","endLine":1,"endColumn":36},{"ruleId":"901","severity":1,"message":"995","line":2,"column":10,"nodeType":"903","messageId":"904","endLine":2,"endColumn":15},{"ruleId":"901","severity":1,"message":"913","line":2,"column":27,"nodeType":"903","messageId":"904","endLine":2,"endColumn":31},{"ruleId":"901","severity":1,"message":"994","line":2,"column":33,"nodeType":"903","messageId":"904","endLine":2,"endColumn":39},{"ruleId":"901","severity":1,"message":"1021","line":6,"column":10,"nodeType":"903","messageId":"904","endLine":6,"endColumn":26},{"ruleId":"901","severity":1,"message":"1002","line":2,"column":35,"nodeType":"903","messageId":"904","endLine":2,"endColumn":40},{"ruleId":"901","severity":1,"message":"1012","line":4,"column":8,"nodeType":"903","messageId":"904","endLine":4,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":32,"column":17,"nodeType":"920","messageId":"921","endLine":32,"endColumn":19},{"ruleId":"918","severity":1,"message":"919","line":35,"column":26,"nodeType":"920","messageId":"921","endLine":35,"endColumn":28},{"ruleId":"918","severity":1,"message":"919","line":38,"column":23,"nodeType":"920","messageId":"921","endLine":38,"endColumn":25},{"ruleId":"918","severity":1,"message":"919","line":50,"column":16,"nodeType":"920","messageId":"921","endLine":50,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":112,"column":35,"nodeType":"920","messageId":"921","endLine":112,"endColumn":37},{"ruleId":"901","severity":1,"message":"1002","line":2,"column":35,"nodeType":"903","messageId":"904","endLine":2,"endColumn":40},{"ruleId":"901","severity":1,"message":"1012","line":4,"column":8,"nodeType":"903","messageId":"904","endLine":4,"endColumn":20},{"ruleId":"901","severity":1,"message":"1022","line":5,"column":8,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1023","line":20,"column":11,"nodeType":"903","messageId":"904","endLine":20,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":27,"column":17,"nodeType":"920","messageId":"921","endLine":27,"endColumn":19},{"ruleId":"918","severity":1,"message":"919","line":30,"column":29,"nodeType":"920","messageId":"921","endLine":30,"endColumn":31},{"ruleId":"918","severity":1,"message":"919","line":39,"column":16,"nodeType":"920","messageId":"921","endLine":39,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":100,"column":39,"nodeType":"920","messageId":"921","endLine":100,"endColumn":41},{"ruleId":"901","severity":1,"message":"914","line":1,"column":27,"nodeType":"903","messageId":"904","endLine":1,"endColumn":36},{"ruleId":"901","severity":1,"message":"1024","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":22},{"ruleId":"901","severity":1,"message":"1025","line":4,"column":8,"nodeType":"903","messageId":"904","endLine":4,"endColumn":17},{"ruleId":"901","severity":1,"message":"1026","line":6,"column":8,"nodeType":"903","messageId":"904","endLine":6,"endColumn":22},{"ruleId":"901","severity":1,"message":"941","line":7,"column":8,"nodeType":"903","messageId":"904","endLine":7,"endColumn":29},{"ruleId":"901","severity":1,"message":"1027","line":8,"column":8,"nodeType":"903","messageId":"904","endLine":8,"endColumn":18},{"ruleId":"901","severity":1,"message":"1028","line":10,"column":24,"nodeType":"903","messageId":"904","endLine":10,"endColumn":36},{"ruleId":"901","severity":1,"message":"914","line":1,"column":27,"nodeType":"903","messageId":"904","endLine":1,"endColumn":36},{"ruleId":"901","severity":1,"message":"1024","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":22},{"ruleId":"901","severity":1,"message":"1025","line":4,"column":8,"nodeType":"903","messageId":"904","endLine":4,"endColumn":17},{"ruleId":"901","severity":1,"message":"1026","line":6,"column":8,"nodeType":"903","messageId":"904","endLine":6,"endColumn":22},{"ruleId":"901","severity":1,"message":"941","line":7,"column":8,"nodeType":"903","messageId":"904","endLine":7,"endColumn":29},{"ruleId":"901","severity":1,"message":"1029","line":10,"column":23,"nodeType":"903","messageId":"904","endLine":10,"endColumn":34},{"ruleId":"918","severity":1,"message":"919","line":78,"column":40,"nodeType":"920","messageId":"921","endLine":78,"endColumn":42},{"ruleId":"901","severity":1,"message":"1030","line":5,"column":8,"nodeType":"903","messageId":"904","endLine":5,"endColumn":21},{"ruleId":"901","severity":1,"message":"1031","line":4,"column":10,"nodeType":"903","messageId":"904","endLine":4,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":15,"column":43,"nodeType":"920","messageId":"921","endLine":15,"endColumn":45},{"ruleId":"918","severity":1,"message":"919","line":27,"column":50,"nodeType":"920","messageId":"921","endLine":27,"endColumn":52},{"ruleId":"918","severity":1,"message":"919","line":50,"column":50,"nodeType":"920","messageId":"921","endLine":50,"endColumn":52},{"ruleId":"907","severity":1,"message":"1032","line":87,"column":6,"nodeType":"909","endLine":87,"endColumn":35,"suggestions":"1033"},{"ruleId":"918","severity":1,"message":"919","line":114,"column":42,"nodeType":"920","messageId":"921","endLine":114,"endColumn":44},{"ruleId":"918","severity":1,"message":"919","line":176,"column":33,"nodeType":"920","messageId":"921","endLine":176,"endColumn":35},{"ruleId":"918","severity":1,"message":"919","line":306,"column":33,"nodeType":"920","messageId":"921","endLine":306,"endColumn":35},{"ruleId":"901","severity":1,"message":"1034","line":7,"column":8,"nodeType":"903","messageId":"904","endLine":7,"endColumn":22},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1012","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":20},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1035","line":15,"column":10,"nodeType":"903","messageId":"904","endLine":15,"endColumn":14},{"ruleId":"901","severity":1,"message":"1036","line":15,"column":16,"nodeType":"903","messageId":"904","endLine":15,"endColumn":23},{"ruleId":"901","severity":1,"message":"1037","line":16,"column":10,"nodeType":"903","messageId":"904","endLine":16,"endColumn":22},{"ruleId":"901","severity":1,"message":"1038","line":48,"column":9,"nodeType":"903","messageId":"904","endLine":48,"endColumn":30},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1035","line":11,"column":10,"nodeType":"903","messageId":"904","endLine":11,"endColumn":14},{"ruleId":"901","severity":1,"message":"974","line":14,"column":21,"nodeType":"903","messageId":"904","endLine":14,"endColumn":33},{"ruleId":"918","severity":1,"message":"919","line":213,"column":48,"nodeType":"920","messageId":"921","endLine":213,"endColumn":50},{"ruleId":"901","severity":1,"message":"911","line":1,"column":25,"nodeType":"903","messageId":"904","endLine":1,"endColumn":28},{"ruleId":"901","severity":1,"message":"912","line":1,"column":30,"nodeType":"903","messageId":"904","endLine":1,"endColumn":33},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1039","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":12},{"ruleId":"901","severity":1,"message":"926","line":7,"column":10,"nodeType":"903","messageId":"904","endLine":7,"endColumn":14},{"ruleId":"901","severity":1,"message":"1022","line":8,"column":8,"nodeType":"903","messageId":"904","endLine":8,"endColumn":14},{"ruleId":"901","severity":1,"message":"1040","line":2,"column":8,"nodeType":"903","messageId":"904","endLine":2,"endColumn":15},{"ruleId":"907","severity":1,"message":"1041","line":21,"column":16,"nodeType":"903","endLine":21,"endColumn":23},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"902","line":1,"column":17,"nodeType":"903","messageId":"904","endLine":1,"endColumn":25},{"ruleId":"901","severity":1,"message":"995","line":2,"column":10,"nodeType":"903","messageId":"904","endLine":2,"endColumn":15},{"ruleId":"901","severity":1,"message":"944","line":17,"column":9,"nodeType":"903","messageId":"904","endLine":17,"endColumn":16},{"ruleId":"918","severity":1,"message":"919","line":65,"column":20,"nodeType":"920","messageId":"921","endLine":65,"endColumn":22},{"ruleId":"918","severity":1,"message":"919","line":125,"column":41,"nodeType":"920","messageId":"921","endLine":125,"endColumn":43},{"ruleId":"918","severity":1,"message":"919","line":137,"column":40,"nodeType":"920","messageId":"921","endLine":137,"endColumn":42},{"ruleId":"918","severity":1,"message":"919","line":148,"column":43,"nodeType":"920","messageId":"921","endLine":148,"endColumn":45},{"ruleId":"918","severity":1,"message":"919","line":164,"column":46,"nodeType":"920","messageId":"921","endLine":164,"endColumn":48},{"ruleId":"918","severity":1,"message":"919","line":176,"column":46,"nodeType":"920","messageId":"921","endLine":176,"endColumn":48},{"ruleId":"918","severity":1,"message":"919","line":187,"column":41,"nodeType":"920","messageId":"921","endLine":187,"endColumn":43},{"ruleId":"918","severity":1,"message":"919","line":200,"column":44,"nodeType":"920","messageId":"921","endLine":200,"endColumn":46},{"ruleId":"918","severity":1,"message":"919","line":209,"column":44,"nodeType":"920","messageId":"921","endLine":209,"endColumn":46},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":21,"column":26,"nodeType":"903","messageId":"904","endLine":21,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":112,"column":17,"nodeType":"939","endLine":112,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1043","line":8,"column":8,"nodeType":"903","messageId":"904","endLine":8,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":19,"column":26,"nodeType":"903","messageId":"904","endLine":19,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":89,"column":17,"nodeType":"939","endLine":89,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":33,"column":26,"nodeType":"903","messageId":"904","endLine":33,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":150,"column":17,"nodeType":"939","endLine":150,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1022","line":6,"column":8,"nodeType":"903","messageId":"904","endLine":6,"endColumn":14},{"ruleId":"901","severity":1,"message":"1043","line":8,"column":8,"nodeType":"903","messageId":"904","endLine":8,"endColumn":14},{"ruleId":"901","severity":1,"message":"1023","line":10,"column":9,"nodeType":"903","messageId":"904","endLine":10,"endColumn":16},{"ruleId":"901","severity":1,"message":"1044","line":15,"column":10,"nodeType":"903","messageId":"904","endLine":15,"endColumn":17},{"ruleId":"901","severity":1,"message":"1045","line":16,"column":10,"nodeType":"903","messageId":"904","endLine":16,"endColumn":25},{"ruleId":"901","severity":1,"message":"1046","line":17,"column":10,"nodeType":"903","messageId":"904","endLine":17,"endColumn":24},{"ruleId":"901","severity":1,"message":"1047","line":18,"column":10,"nodeType":"903","messageId":"904","endLine":18,"endColumn":21},{"ruleId":"901","severity":1,"message":"1048","line":20,"column":9,"nodeType":"903","messageId":"904","endLine":20,"endColumn":21},{"ruleId":"901","severity":1,"message":"1049","line":23,"column":9,"nodeType":"903","messageId":"904","endLine":23,"endColumn":29},{"ruleId":"901","severity":1,"message":"1050","line":26,"column":9,"nodeType":"903","messageId":"904","endLine":26,"endColumn":28},{"ruleId":"901","severity":1,"message":"1051","line":29,"column":9,"nodeType":"903","messageId":"904","endLine":29,"endColumn":25},{"ruleId":"901","severity":1,"message":"1052","line":33,"column":10,"nodeType":"903","messageId":"904","endLine":33,"endColumn":24},{"ruleId":"901","severity":1,"message":"1042","line":33,"column":26,"nodeType":"903","messageId":"904","endLine":33,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":98,"column":17,"nodeType":"939","endLine":98,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":33,"column":26,"nodeType":"903","messageId":"904","endLine":33,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":139,"column":17,"nodeType":"939","endLine":139,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1022","line":6,"column":8,"nodeType":"903","messageId":"904","endLine":6,"endColumn":14},{"ruleId":"901","severity":1,"message":"1043","line":8,"column":8,"nodeType":"903","messageId":"904","endLine":8,"endColumn":14},{"ruleId":"901","severity":1,"message":"1053","line":18,"column":10,"nodeType":"903","messageId":"904","endLine":18,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":37,"column":13,"nodeType":"920","messageId":"921","endLine":37,"endColumn":15},{"ruleId":"918","severity":1,"message":"919","line":41,"column":16,"nodeType":"920","messageId":"921","endLine":41,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":53,"column":33,"nodeType":"920","messageId":"921","endLine":53,"endColumn":35},{"ruleId":"937","severity":1,"message":"938","line":135,"column":19,"nodeType":"939","endLine":135,"endColumn":81},{"ruleId":"918","severity":1,"message":"919","line":155,"column":43,"nodeType":"920","messageId":"921","endLine":155,"endColumn":45},{"ruleId":"937","severity":1,"message":"938","line":188,"column":19,"nodeType":"939","endLine":188,"endColumn":81},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":30,"column":26,"nodeType":"903","messageId":"904","endLine":30,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":179,"column":17,"nodeType":"939","endLine":179,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":11,"column":26,"nodeType":"903","messageId":"904","endLine":11,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":78,"column":17,"nodeType":"939","endLine":78,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":23,"column":26,"nodeType":"903","messageId":"904","endLine":23,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":152,"column":17,"nodeType":"939","endLine":152,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"926","line":5,"column":10,"nodeType":"903","messageId":"904","endLine":5,"endColumn":14},{"ruleId":"901","severity":1,"message":"1042","line":13,"column":26,"nodeType":"903","messageId":"904","endLine":13,"endColumn":43},{"ruleId":"937","severity":1,"message":"938","line":134,"column":17,"nodeType":"939","endLine":134,"endColumn":79},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"918","severity":1,"message":"919","line":36,"column":13,"nodeType":"920","messageId":"921","endLine":36,"endColumn":15},{"ruleId":"918","severity":1,"message":"919","line":40,"column":16,"nodeType":"920","messageId":"921","endLine":40,"endColumn":18},{"ruleId":"918","severity":1,"message":"919","line":52,"column":33,"nodeType":"920","messageId":"921","endLine":52,"endColumn":35},{"ruleId":"937","severity":1,"message":"938","line":140,"column":19,"nodeType":"939","endLine":140,"endColumn":81},{"ruleId":"918","severity":1,"message":"919","line":161,"column":43,"nodeType":"920","messageId":"921","endLine":161,"endColumn":45},{"ruleId":"937","severity":1,"message":"938","line":195,"column":17,"nodeType":"939","endLine":195,"endColumn":79},{"ruleId":"901","severity":1,"message":"911","line":8,"column":25,"nodeType":"903","messageId":"904","endLine":8,"endColumn":28},{"ruleId":"901","severity":1,"message":"912","line":8,"column":30,"nodeType":"903","messageId":"904","endLine":8,"endColumn":33},{"ruleId":"901","severity":1,"message":"1002","line":8,"column":35,"nodeType":"903","messageId":"904","endLine":8,"endColumn":40},{"ruleId":"918","severity":1,"message":"919","line":49,"column":19,"nodeType":"920","messageId":"921","endLine":49,"endColumn":21},{"ruleId":"918","severity":1,"message":"919","line":49,"column":44,"nodeType":"920","messageId":"921","endLine":49,"endColumn":46},{"ruleId":"901","severity":1,"message":"1054","line":52,"column":13,"nodeType":"903","messageId":"904","endLine":52,"endColumn":21},{"ruleId":"937","severity":1,"message":"938","line":102,"column":15,"nodeType":"939","endLine":105,"endColumn":17},{"ruleId":"1055","severity":1,"message":"1056","line":227,"column":33,"nodeType":"1057","messageId":"1058","endLine":227,"endColumn":35},{"ruleId":"918","severity":1,"message":"919","line":227,"column":47,"nodeType":"920","messageId":"921","endLine":227,"endColumn":49},{"ruleId":"1055","severity":1,"message":"1056","line":227,"column":58,"nodeType":"1057","messageId":"1058","endLine":227,"endColumn":60},{"ruleId":"918","severity":1,"message":"919","line":227,"column":72,"nodeType":"920","messageId":"921","endLine":227,"endColumn":74},{"ruleId":"932","severity":1,"message":"1059","line":36,"column":37,"nodeType":"934","messageId":"935","endLine":36,"endColumn":56,"fix":"1060"},{"ruleId":"918","severity":1,"message":"919","line":60,"column":19,"nodeType":"920","messageId":"921","endLine":60,"endColumn":21},{"ruleId":"918","severity":1,"message":"919","line":64,"column":19,"nodeType":"920","messageId":"921","endLine":64,"endColumn":21},{"ruleId":"918","severity":1,"message":"919","line":68,"column":19,"nodeType":"920","messageId":"921","endLine":68,"endColumn":21},{"ruleId":"918","severity":1,"message":"919","line":98,"column":21,"nodeType":"920","messageId":"921","endLine":98,"endColumn":23},{"ruleId":"918","severity":1,"message":"919","line":98,"column":46,"nodeType":"920","messageId":"921","endLine":98,"endColumn":48},{"ruleId":"901","severity":1,"message":"1061","line":110,"column":13,"nodeType":"903","messageId":"904","endLine":110,"endColumn":15},{"ruleId":"901","severity":1,"message":"1062","line":13,"column":10,"nodeType":"903","messageId":"904","endLine":13,"endColumn":17},{"ruleId":"901","severity":1,"message":"1063","line":13,"column":19,"nodeType":"903","messageId":"904","endLine":13,"endColumn":29},{"ruleId":"937","severity":1,"message":"938","line":87,"column":17,"nodeType":"939","endLine":91,"endColumn":19},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"925","line":1,"column":42,"nodeType":"903","messageId":"904","endLine":1,"endColumn":50},{"ruleId":"901","severity":1,"message":"911","line":1,"column":25,"nodeType":"903","messageId":"904","endLine":1,"endColumn":28},{"ruleId":"901","severity":1,"message":"912","line":1,"column":30,"nodeType":"903","messageId":"904","endLine":1,"endColumn":33},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"925","line":1,"column":42,"nodeType":"903","messageId":"904","endLine":1,"endColumn":50},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"925","line":1,"column":42,"nodeType":"903","messageId":"904","endLine":1,"endColumn":50},{"ruleId":"901","severity":1,"message":"1012","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":20},{"ruleId":"901","severity":1,"message":"926","line":4,"column":10,"nodeType":"903","messageId":"904","endLine":4,"endColumn":14},{"ruleId":"918","severity":1,"message":"919","line":24,"column":19,"nodeType":"920","messageId":"921","endLine":24,"endColumn":21},{"ruleId":"918","severity":1,"message":"919","line":26,"column":26,"nodeType":"920","messageId":"921","endLine":26,"endColumn":28},{"ruleId":"918","severity":1,"message":"919","line":103,"column":35,"nodeType":"920","messageId":"921","endLine":103,"endColumn":37},{"ruleId":"918","severity":1,"message":"919","line":104,"column":34,"nodeType":"920","messageId":"921","endLine":104,"endColumn":36},{"ruleId":"901","severity":1,"message":"1064","line":18,"column":10,"nodeType":"903","messageId":"904","endLine":18,"endColumn":21},{"ruleId":"901","severity":1,"message":"1065","line":18,"column":23,"nodeType":"903","messageId":"904","endLine":18,"endColumn":37},{"ruleId":"918","severity":1,"message":"919","line":36,"column":31,"nodeType":"920","messageId":"921","endLine":36,"endColumn":33},{"ruleId":"918","severity":1,"message":"919","line":133,"column":48,"nodeType":"920","messageId":"921","endLine":133,"endColumn":50},{"ruleId":"918","severity":1,"message":"919","line":138,"column":54,"nodeType":"920","messageId":"921","endLine":138,"endColumn":56},{"ruleId":"918","severity":1,"message":"919","line":162,"column":48,"nodeType":"920","messageId":"921","endLine":162,"endColumn":50},{"ruleId":"918","severity":1,"message":"919","line":162,"column":76,"nodeType":"920","messageId":"921","endLine":162,"endColumn":78},{"ruleId":"918","severity":1,"message":"919","line":167,"column":54,"nodeType":"920","messageId":"921","endLine":167,"endColumn":56},{"ruleId":"918","severity":1,"message":"919","line":185,"column":54,"nodeType":"920","messageId":"921","endLine":185,"endColumn":56},{"ruleId":"918","severity":1,"message":"919","line":243,"column":37,"nodeType":"920","messageId":"921","endLine":243,"endColumn":39},{"ruleId":"901","severity":1,"message":"1002","line":1,"column":35,"nodeType":"903","messageId":"904","endLine":1,"endColumn":40},{"ruleId":"901","severity":1,"message":"1012","line":3,"column":8,"nodeType":"903","messageId":"904","endLine":3,"endColumn":20},{"ruleId":"918","severity":1,"message":"919","line":23,"column":39,"nodeType":"920","messageId":"921","endLine":23,"endColumn":41},{"ruleId":"918","severity":1,"message":"919","line":34,"column":46,"nodeType":"920","messageId":"921","endLine":34,"endColumn":48},{"ruleId":"918","severity":1,"message":"919","line":56,"column":46,"nodeType":"920","messageId":"921","endLine":56,"endColumn":48},{"ruleId":"907","severity":1,"message":"1066","line":92,"column":6,"nodeType":"909","endLine":92,"endColumn":35,"suggestions":"1067"},{"ruleId":"918","severity":1,"message":"919","line":167,"column":40,"nodeType":"920","messageId":"921","endLine":167,"endColumn":42},{"ruleId":"918","severity":1,"message":"919","line":198,"column":33,"nodeType":"920","messageId":"921","endLine":198,"endColumn":35},{"ruleId":"918","severity":1,"message":"919","line":271,"column":33,"nodeType":"920","messageId":"921","endLine":271,"endColumn":35},{"ruleId":"901","severity":1,"message":"1068","line":1,"column":10,"nodeType":"903","messageId":"904","endLine":1,"endColumn":21},{"ruleId":"901","severity":1,"message":"1069","line":4,"column":8,"nodeType":"903","messageId":"904","endLine":4,"endColumn":22},{"ruleId":"901","severity":1,"message":"1070","line":20,"column":21,"nodeType":"903","messageId":"904","endLine":20,"endColumn":33},{"ruleId":"918","severity":1,"message":"919","line":121,"column":38,"nodeType":"920","messageId":"921","endLine":121,"endColumn":40},{"ruleId":"918","severity":1,"message":"919","line":122,"column":35,"nodeType":"920","messageId":"921","endLine":122,"endColumn":37},{"ruleId":"901","severity":1,"message":"1071","line":2,"column":8,"nodeType":"903","messageId":"904","endLine":2,"endColumn":16},{"ruleId":"901","severity":1,"message":"1072","line":5,"column":8,"nodeType":"903","messageId":"904","endLine":5,"endColumn":21},{"ruleId":"907","severity":1,"message":"1073","line":19,"column":6,"nodeType":"909","endLine":19,"endColumn":8,"suggestions":"1074"},"no-native-reassign",["1075"],"no-negated-in-lhs",["1076"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'io' is defined but never used.","'Error404' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'path'. Either include it or remove the dependency array.","ArrayExpression",["1077"],"'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'useEffect' is defined but never used.","'testDaySchudele' is defined but never used.","'reportsList' is defined but never used.","'handleEditSchedule' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'maxTime' is assigned a value but never used.","'useRef' is defined but never used.","'getAllMedia' is defined but never used.","'Dropdown' is defined but never used.","'Link' is defined but never used.","'MyCustomPlugin' is assigned a value but never used.","'sequence' is assigned a value but never used.","'schedulename' is assigned a value but never used.","'mutate' is assigned a value but never used.","'id' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"timing\"] found.","Property","unnecessarilyComputedProperty",{"range":"1078","text":"1079"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'menuIcon' is defined but never used.","'defaultComparisonIcon' is defined but never used.","'nameAvatar' is defined but never used.","'deleteIcon' is defined but never used.","'history' is assigned a value but never used.","'handlePublishcOpen' is assigned a value but never used.","'da' is defined but never used.","'activeCard' is assigned a value but never used.","'setActiveCard' is assigned a value but never used.","'selectedButtonIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAllDaySequence'. Either include it or remove the dependency array.",["1080"],"'handleWeekCellChange' is assigned a value but never used.","'getAllDaySequence' is defined but never used.","'setSequence' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callSingleDaySequence'. Either include it or remove the dependency array.",["1081"],"Expected '!==' and instead saw '!='.",{"range":"1082","text":"1079"},"Unnecessarily computed property ['startTime'] found.",{"range":"1083","text":"1084"},"Unnecessarily computed property ['endTime'] found.",{"range":"1085","text":"1086"},{"range":"1087","text":"1079"},"'axios' is defined but never used.","'response' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","React Hook useEffect has a missing dependency: 'callAllScreenApi'. Either include it or remove the dependency array.",["1088"],"'useParams' is defined but never used.","'published' is assigned a value but never used.","'setPublished' is assigned a value but never used.","'setState' is assigned a value but never used.","'newEvent' is assigned a value but never used.","'timeText' is assigned a value but never used.","'setEvents' is assigned a value but never used.","'daySequence' is assigned a value but never used.","'seqArray' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs",["1089"],"'currentMonth' is assigned a value but never used.","'checkboxKey' is assigned a value but never used.","'disablePrp' is assigned a value but never used.","'handleEventClick' is assigned a value but never used.","'hasEvent' is assigned a value but never used.","'event' is assigned a value but never used.","'desiredFormat' is assigned a value but never used.","'eventToRemove' is assigned a value but never used.","'Button' is defined but never used.","'Table' is defined but never used.","'useSWR' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1090"],"React Hook useEffect has a missing dependency: 'reportSlug'. Either include it or remove the dependency array.",["1091"],"'roles' is defined but never used.","'Badge' is defined but never used.","'setQuickplay' is defined but never used.","'getCompositionById' is defined but never used.","'isVerified' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleAddClass'. Either include it or remove the dependency array. If 'handleAddClass' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1092"],"'humanReadableFormattedDateString' is defined but never used.","'PerfectScrollbar' is defined but never used.","'avatar' is defined but never used.","'onFullScreen' is assigned a value but never used.","'tagCloseIcon' is defined but never used.","Unnecessarily computed property [\"x\"] found.",{"range":"1093","text":"1094"},"Unnecessarily computed property [\"y\"] found.",{"range":"1095","text":"1096"},"'Modal' is defined but never used.","'Editor' is defined but never used.","React Hook useEffect has a missing dependency: 'roles'. Either include it or remove the dependency array.",["1097"],"'addDeviceProfile' is defined but never used.","'Select' is defined but never used.","'options' is assigned a value but never used.","'AddNewTagModal' is defined but never used.","'downArrow' is defined but never used.","'veiwDetailIcon' is defined but never used.","'assignIcon' is defined but never used.","'updateGroups' is defined but never used.","'updateUsers' is defined but never used.","'emptyMediaImg' is defined but never used.","'BASE_URL' is defined but never used.","React Hook useEffect has missing dependencies: 'contents' and 'current2Index'. Either include them or remove the dependency array.",["1098"],"'layoutSelected' is defined but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'checkedItems' is assigned a value but never used.","'handleSelectAllChange' is assigned a value but never used.","'icon' is defined but never used.","'videojs' is defined but never used.","The ref value 'videoRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'videoRef.current' to a variable inside the effect, and use that variable in the cleanup function.","'setSelectedOption' is assigned a value but never used.","'Switch' is defined but never used.","'checked' is assigned a value but never used.","'checkedLocation' is assigned a value but never used.","'checkedRounded' is assigned a value but never used.","'checkedDate' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleChangeLocation' is assigned a value but never used.","'handleChangeRounded' is assigned a value but never used.","'handleChangeDate' is assigned a value but never used.","'selectedOption' is assigned a value but never used.","'errMessage' is assigned a value but never used.","'jsonData' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unnecessarily computed property [\"zone\"] found.",{"range":"1099","text":"1100"},"'dt' is assigned a value but never used.","'preview' is assigned a value but never used.","'setPreview' is assigned a value but never used.","'activeClass' is assigned a value but never used.","'setActiveClass' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contentnew.Zone1', 'contentnew.Zone2', 'contentnew.Zone3', 'current2Index', and 'layout'. Either include them or remove the dependency array.",["1101"],"'useCallback' is defined but never used.","'WebVideoPlayer' is defined but never used.","'setIsLoading' is assigned a value but never used.","'ReactDOM' is defined but never used.","'getCroppedImg' is defined but never used.","React Hook useCallback has a missing dependency: 'setCroppedAreaPixels'. Either include it or remove the dependency array. If 'setCroppedAreaPixels' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1102"],"no-global-assign","no-unsafe-negation",{"desc":"1103","fix":"1104"},[3283,3293],"\"timing\"",{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},[4338,4348],[4398,4411],"'startTime'",[4476,4487],"'endTime'",[4607,4617],{"desc":"1109","fix":"1110"},{"desc":"1105","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},[9928,9933],"\"x\"",[10696,10701],"\"y\"",{"desc":"1118","fix":"1119"},{"desc":"1120","fix":"1121"},[1423,1431],"\"zone\"",{"desc":"1122","fix":"1123"},{"desc":"1124","fix":"1125"},"Update the dependencies array to be: [dispatch, path, props.history]",{"range":"1126","text":"1127"},"Update the dependencies array to be: [callAllDaySequence, id]",{"range":"1128","text":"1129"},"Update the dependencies array to be: [callSingleDaySequence, schId]",{"range":"1130","text":"1131"},"Update the dependencies array to be: [callAllScreenApi]",{"range":"1132","text":"1133"},{"range":"1134","text":"1129"},"Update the dependencies array to be: [getData, id]",{"range":"1135","text":"1136"},"Update the dependencies array to be: [reportData, reportSlug]",{"range":"1137","text":"1138"},"Update the dependencies array to be: [composition, handleAddClass]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [makeRefresh, roles, rolesData]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [currentIndex, current1Index, contents, current2Index]",{"range":"1143","text":"1144"},"Update the dependencies array to be: [currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",{"range":"1145","text":"1146"},"Update the dependencies array to be: [setCroppedAreaPixels]",{"range":"1147","text":"1148"},[1399,1424],"[dispatch, path, props.history]",[2247,2251],"[callAllDaySequence, id]",[3772,3779],"[callSingleDaySequence, schId]",[1503,1505],"[callAllScreenApi]",[1583,1587],[910,914],"[getData, id]",[1958,1970],"[reportData, reportSlug]",[7838,7851],"[composition, handleAddClass]",[615,639],"[makeRefresh, roles, rolesData]",[3429,3458],"[currentIndex, current1Index, contents, current2Index]",[3500,3529],"[currentIndex, current1Index, layout, contentnew.Zone1, contentnew.Zone2, contentnew.Zone3, current2Index]",[499,501],"[setCroppedAreaPixels]"]
>>>>>>> 370cb6dd0866ebc998a1d3679c5b4074a8d236af
